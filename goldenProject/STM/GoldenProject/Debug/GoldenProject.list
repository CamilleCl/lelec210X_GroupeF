
GoldenProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aaa0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000079c  0800ac50  0800ac50  0001ac50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3ec  0800b3ec  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3ec  0800b3ec  0001b3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3f4  0800b3f4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3f4  0800b3f4  0001b3f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3f8  0800b3f8  0001b3f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800b3fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  200001d4  0800b5d0  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  0800b5d0  0002053c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ad46  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003971  00000000  00000000  0003af8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a8  00000000  00000000  0003e900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001198  00000000  00000000  0003ffa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e465  00000000  00000000  00041140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c2d9  00000000  00000000  0006f5a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011f875  00000000  00000000  0008b87e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007098  00000000  00000000  001ab0f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  001b218c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ac38 	.word	0x0800ac38

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	0800ac38 	.word	0x0800ac38

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
 8000ee4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ee6:	4b31      	ldr	r3, [pc, #196]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000ee8:	4a31      	ldr	r2, [pc, #196]	; (8000fb0 <MX_ADC1_Init+0xec>)
 8000eea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000eec:	4b2f      	ldr	r3, [pc, #188]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000eee:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
 8000ef2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef4:	4b2d      	ldr	r3, [pc, #180]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000efa:	4b2c      	ldr	r3, [pc, #176]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f00:	4b2a      	ldr	r3, [pc, #168]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f06:	4b29      	ldr	r3, [pc, #164]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000f08:	2204      	movs	r2, #4
 8000f0a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f0c:	4b27      	ldr	r3, [pc, #156]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f12:	4b26      	ldr	r3, [pc, #152]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f18:	4b24      	ldr	r3, [pc, #144]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f1e:	4b23      	ldr	r3, [pc, #140]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000f26:	4b21      	ldr	r3, [pc, #132]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000f28:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000f2c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000f30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f34:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f36:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f44:	4b19      	ldr	r3, [pc, #100]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f4c:	4817      	ldr	r0, [pc, #92]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000f4e:	f002 fa7b 	bl	8003448 <HAL_ADC_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f58:	f000 fba6 	bl	80016a8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	4619      	mov	r1, r3
 8000f66:	4811      	ldr	r0, [pc, #68]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000f68:	f003 f8e0 	bl	800412c <HAL_ADCEx_MultiModeConfigChannel>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f72:	f000 fb99 	bl	80016a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_ADC1_Init+0xf0>)
 8000f78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f7a:	2306      	movs	r3, #6
 8000f7c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f82:	237f      	movs	r3, #127	; 0x7f
 8000f84:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f86:	2304      	movs	r3, #4
 8000f88:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	4619      	mov	r1, r3
 8000f92:	4806      	ldr	r0, [pc, #24]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000f94:	f002 fbac 	bl	80036f0 <HAL_ADC_ConfigChannel>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000f9e:	f000 fb83 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	3728      	adds	r7, #40	; 0x28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200001f0 	.word	0x200001f0
 8000fb0:	50040000 	.word	0x50040000
 8000fb4:	14f00020 	.word	0x14f00020

08000fb8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b0ac      	sub	sp, #176	; 0xb0
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd0:	f107 0310 	add.w	r3, r7, #16
 8000fd4:	228c      	movs	r2, #140	; 0x8c
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f007 ff5d 	bl	8008e98 <memset>
  if(adcHandle->Instance==ADC1)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a35      	ldr	r2, [pc, #212]	; (80010b8 <HAL_ADC_MspInit+0x100>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d163      	bne.n	80010b0 <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fe8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000fee:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000ff2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff6:	f107 0310 	add.w	r3, r7, #16
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f004 fc34 	bl	8005868 <HAL_RCCEx_PeriphCLKConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001006:	f000 fb4f 	bl	80016a8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800100a:	4b2c      	ldr	r3, [pc, #176]	; (80010bc <HAL_ADC_MspInit+0x104>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a2b      	ldr	r2, [pc, #172]	; (80010bc <HAL_ADC_MspInit+0x104>)
 8001010:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b29      	ldr	r3, [pc, #164]	; (80010bc <HAL_ADC_MspInit+0x104>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	4b26      	ldr	r3, [pc, #152]	; (80010bc <HAL_ADC_MspInit+0x104>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	4a25      	ldr	r2, [pc, #148]	; (80010bc <HAL_ADC_MspInit+0x104>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102e:	4b23      	ldr	r3, [pc, #140]	; (80010bc <HAL_ADC_MspInit+0x104>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800103a:	2301      	movs	r3, #1
 800103c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001040:	2303      	movs	r3, #3
 8001042:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001050:	4619      	mov	r1, r3
 8001052:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001056:	f003 fb93 	bl	8004780 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800105a:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <HAL_ADC_MspInit+0x108>)
 800105c:	4a19      	ldr	r2, [pc, #100]	; (80010c4 <HAL_ADC_MspInit+0x10c>)
 800105e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001060:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <HAL_ADC_MspInit+0x108>)
 8001062:	2200      	movs	r2, #0
 8001064:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001066:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <HAL_ADC_MspInit+0x108>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <HAL_ADC_MspInit+0x108>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <HAL_ADC_MspInit+0x108>)
 8001074:	2280      	movs	r2, #128	; 0x80
 8001076:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <HAL_ADC_MspInit+0x108>)
 800107a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800107e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <HAL_ADC_MspInit+0x108>)
 8001082:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001086:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <HAL_ADC_MspInit+0x108>)
 800108a:	2220      	movs	r2, #32
 800108c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <HAL_ADC_MspInit+0x108>)
 8001090:	2200      	movs	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001094:	480a      	ldr	r0, [pc, #40]	; (80010c0 <HAL_ADC_MspInit+0x108>)
 8001096:	f003 fa0b 	bl	80044b0 <HAL_DMA_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <HAL_ADC_MspInit+0xec>
    {
      Error_Handler();
 80010a0:	f000 fb02 	bl	80016a8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <HAL_ADC_MspInit+0x108>)
 80010a8:	651a      	str	r2, [r3, #80]	; 0x50
 80010aa:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <HAL_ADC_MspInit+0x108>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010b0:	bf00      	nop
 80010b2:	37b0      	adds	r7, #176	; 0xb0
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	50040000 	.word	0x50040000
 80010bc:	40021000 	.word	0x40021000
 80010c0:	20000258 	.word	0x20000258
 80010c4:	40020008 	.word	0x40020008

080010c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <MX_DMA_Init+0x38>)
 80010d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010d2:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <MX_DMA_Init+0x38>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	6493      	str	r3, [r2, #72]	; 0x48
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <MX_DMA_Init+0x38>)
 80010dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2101      	movs	r1, #1
 80010ea:	200b      	movs	r0, #11
 80010ec:	f003 f9a9 	bl	8004442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010f0:	200b      	movs	r0, #11
 80010f2:	f003 f9c2 	bl	800447a <HAL_NVIC_EnableIRQ>

}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40021000 	.word	0x40021000

08001104 <eval_radio>:
// Adding include to use UART
#include "usart.h"


void eval_radio(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b09e      	sub	sp, #120	; 0x78
 8001108:	af00      	add	r7, sp, #0
	uint8_t uart_buf[1];

	DEBUG_PRINT("[DBG] Radio evaluation mode\r\n");
 800110a:	4838      	ldr	r0, [pc, #224]	; (80011ec <eval_radio+0xe8>)
 800110c:	f007 fd36 	bl	8008b7c <puts>

	uint8_t buf[PAYLOAD_LEN];
	for (uint16_t i=0; i < PAYLOAD_LEN; i++) {
 8001110:	2300      	movs	r3, #0
 8001112:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8001116:	e00d      	b.n	8001134 <eval_radio+0x30>
		buf[i] = (uint8_t) (i & 0xFF);
 8001118:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800111c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	3378      	adds	r3, #120	; 0x78
 8001124:	443b      	add	r3, r7
 8001126:	f803 2c74 	strb.w	r2, [r3, #-116]
	for (uint16_t i=0; i < PAYLOAD_LEN; i++) {
 800112a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800112e:	3301      	adds	r3, #1
 8001130:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8001134:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001138:	2b63      	cmp	r3, #99	; 0x63
 800113a:	d9ed      	bls.n	8001118 <eval_radio+0x14>
	}

	for (int32_t lvl = MIN_PA_LEVEL; (lvl <= MAX_PA_LEVEL | !USE_BUTTON); lvl++) {
 800113c:	f06f 031d 	mvn.w	r3, #29
 8001140:	673b      	str	r3, [r7, #112]	; 0x70
			S2LP_SetPALeveldBm(lvl);
		}

		// We send the power lvl directly through UART :-)
		else {
			HAL_UART_Receive(&hlpuart1, uart_buf, 1, 0xFFFFFFFF);
 8001142:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001146:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800114a:	2201      	movs	r2, #1
 800114c:	4828      	ldr	r0, [pc, #160]	; (80011f0 <eval_radio+0xec>)
 800114e:	f006 f9ef 	bl	8007530 <HAL_UART_Receive>
			S2LP_SetPALeveldBm((int32_t) *uart_buf - 128);
 8001152:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001156:	3b80      	subs	r3, #128	; 0x80
 8001158:	4618      	mov	r0, r3
 800115a:	f001 fb73 	bl	8002844 <S2LP_SetPALeveldBm>
		}
		DEBUG_PRINT("=== Configured PA level to %ld dBm, sending %d packets at this level\r\n", lvl, N_PACKETS);
 800115e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001162:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001164:	4823      	ldr	r0, [pc, #140]	; (80011f4 <eval_radio+0xf0>)
 8001166:	f007 fca3 	bl	8008ab0 <iprintf>

		for (uint16_t i=0; i < N_PACKETS; i++) {
 800116a:	2300      	movs	r3, #0
 800116c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8001170:	e02f      	b.n	80011d2 <eval_radio+0xce>
			HAL_StatusTypeDef err = S2LP_Send(buf, PAYLOAD_LEN);
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	2164      	movs	r1, #100	; 0x64
 8001176:	4618      	mov	r0, r3
 8001178:	f000 fc86 	bl	8001a88 <S2LP_Send>
 800117c:	4603      	mov	r3, r0
 800117e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			if (err) {
 8001182:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <eval_radio+0x8a>
				Error_Handler();
 800118a:	f000 fa8d 	bl	80016a8 <Error_Handler>
			}

			for(uint16_t j=0; j < PACKET_DELAY; j++) {
 800118e:	2300      	movs	r3, #0
 8001190:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001194:	e014      	b.n	80011c0 <eval_radio+0xbc>
				HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8001196:	2201      	movs	r2, #1
 8001198:	2180      	movs	r1, #128	; 0x80
 800119a:	4817      	ldr	r0, [pc, #92]	; (80011f8 <eval_radio+0xf4>)
 800119c:	f003 fc82 	bl	8004aa4 <HAL_GPIO_WritePin>
				HAL_Delay(15);
 80011a0:	200f      	movs	r0, #15
 80011a2:	f001 ff67 	bl	8003074 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2180      	movs	r1, #128	; 0x80
 80011aa:	4813      	ldr	r0, [pc, #76]	; (80011f8 <eval_radio+0xf4>)
 80011ac:	f003 fc7a 	bl	8004aa4 <HAL_GPIO_WritePin>
				HAL_Delay(15);
 80011b0:	200f      	movs	r0, #15
 80011b2:	f001 ff5f 	bl	8003074 <HAL_Delay>
			for(uint16_t j=0; j < PACKET_DELAY; j++) {
 80011b6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80011ba:	3301      	adds	r3, #1
 80011bc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80011c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0e6      	beq.n	8001196 <eval_radio+0x92>
		for (uint16_t i=0; i < N_PACKETS; i++) {
 80011c8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80011cc:	3301      	adds	r3, #1
 80011ce:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 80011d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80011d6:	f242 720f 	movw	r2, #9999	; 0x270f
 80011da:	4293      	cmp	r3, r2
 80011dc:	d9c9      	bls.n	8001172 <eval_radio+0x6e>
			}
		}

		printf("Packets sent\n");
 80011de:	4807      	ldr	r0, [pc, #28]	; (80011fc <eval_radio+0xf8>)
 80011e0:	f007 fccc 	bl	8008b7c <puts>
	for (int32_t lvl = MIN_PA_LEVEL; (lvl <= MAX_PA_LEVEL | !USE_BUTTON); lvl++) {
 80011e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80011e6:	3301      	adds	r3, #1
 80011e8:	673b      	str	r3, [r7, #112]	; 0x70
		if(USE_BUTTON) {
 80011ea:	e7aa      	b.n	8001142 <eval_radio+0x3e>
 80011ec:	0800ac50 	.word	0x0800ac50
 80011f0:	20000364 	.word	0x20000364
 80011f4:	0800ac70 	.word	0x0800ac70
 80011f8:	48000400 	.word	0x48000400
 80011fc:	0800acb8 	.word	0x0800acb8

08001200 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08e      	sub	sp, #56	; 0x38
 8001204:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001216:	4bb8      	ldr	r3, [pc, #736]	; (80014f8 <MX_GPIO_Init+0x2f8>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	4ab7      	ldr	r2, [pc, #732]	; (80014f8 <MX_GPIO_Init+0x2f8>)
 800121c:	f043 0310 	orr.w	r3, r3, #16
 8001220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001222:	4bb5      	ldr	r3, [pc, #724]	; (80014f8 <MX_GPIO_Init+0x2f8>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	f003 0310 	and.w	r3, r3, #16
 800122a:	623b      	str	r3, [r7, #32]
 800122c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122e:	4bb2      	ldr	r3, [pc, #712]	; (80014f8 <MX_GPIO_Init+0x2f8>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	4ab1      	ldr	r2, [pc, #708]	; (80014f8 <MX_GPIO_Init+0x2f8>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123a:	4baf      	ldr	r3, [pc, #700]	; (80014f8 <MX_GPIO_Init+0x2f8>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	61fb      	str	r3, [r7, #28]
 8001244:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001246:	4bac      	ldr	r3, [pc, #688]	; (80014f8 <MX_GPIO_Init+0x2f8>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	4aab      	ldr	r2, [pc, #684]	; (80014f8 <MX_GPIO_Init+0x2f8>)
 800124c:	f043 0320 	orr.w	r3, r3, #32
 8001250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001252:	4ba9      	ldr	r3, [pc, #676]	; (80014f8 <MX_GPIO_Init+0x2f8>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	f003 0320 	and.w	r3, r3, #32
 800125a:	61bb      	str	r3, [r7, #24]
 800125c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125e:	4ba6      	ldr	r3, [pc, #664]	; (80014f8 <MX_GPIO_Init+0x2f8>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	4aa5      	ldr	r2, [pc, #660]	; (80014f8 <MX_GPIO_Init+0x2f8>)
 8001264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126a:	4ba3      	ldr	r3, [pc, #652]	; (80014f8 <MX_GPIO_Init+0x2f8>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	4ba0      	ldr	r3, [pc, #640]	; (80014f8 <MX_GPIO_Init+0x2f8>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	4a9f      	ldr	r2, [pc, #636]	; (80014f8 <MX_GPIO_Init+0x2f8>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001282:	4b9d      	ldr	r3, [pc, #628]	; (80014f8 <MX_GPIO_Init+0x2f8>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	4b9a      	ldr	r3, [pc, #616]	; (80014f8 <MX_GPIO_Init+0x2f8>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	4a99      	ldr	r2, [pc, #612]	; (80014f8 <MX_GPIO_Init+0x2f8>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129a:	4b97      	ldr	r3, [pc, #604]	; (80014f8 <MX_GPIO_Init+0x2f8>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012a6:	4b94      	ldr	r3, [pc, #592]	; (80014f8 <MX_GPIO_Init+0x2f8>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	4a93      	ldr	r2, [pc, #588]	; (80014f8 <MX_GPIO_Init+0x2f8>)
 80012ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b2:	4b91      	ldr	r3, [pc, #580]	; (80014f8 <MX_GPIO_Init+0x2f8>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012be:	4b8e      	ldr	r3, [pc, #568]	; (80014f8 <MX_GPIO_Init+0x2f8>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	4a8d      	ldr	r2, [pc, #564]	; (80014f8 <MX_GPIO_Init+0x2f8>)
 80012c4:	f043 0308 	orr.w	r3, r3, #8
 80012c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ca:	4b8b      	ldr	r3, [pc, #556]	; (80014f8 <MX_GPIO_Init+0x2f8>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80012d6:	f003 fc79 	bl	8004bcc <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 80012da:	2201      	movs	r2, #1
 80012dc:	2101      	movs	r1, #1
 80012de:	4887      	ldr	r0, [pc, #540]	; (80014fc <MX_GPIO_Init+0x2fc>)
 80012e0:	f003 fbe0 	bl	8004aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_SET);
 80012e4:	2201      	movs	r2, #1
 80012e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ea:	4885      	ldr	r0, [pc, #532]	; (8001500 <MX_GPIO_Init+0x300>)
 80012ec:	f003 fbda 	bl	8004aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_EEPROM_CSN_GPIO_Port, RADIO_EEPROM_CSN_Pin, GPIO_PIN_SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012f6:	4883      	ldr	r0, [pc, #524]	; (8001504 <MX_GPIO_Init+0x304>)
 80012f8:	f003 fbd4 	bl	8004aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001302:	4881      	ldr	r0, [pc, #516]	; (8001508 <MX_GPIO_Init+0x308>)
 8001304:	f003 fbce 	bl	8004aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	2140      	movs	r1, #64	; 0x40
 800130c:	487f      	ldr	r0, [pc, #508]	; (800150c <MX_GPIO_Init+0x30c>)
 800130e:	f003 fbc9 	bl	8004aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE12 PE14 PE15
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001312:	f24d 73ff 	movw	r3, #55295	; 0xd7ff
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001318:	2303      	movs	r3, #3
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001324:	4619      	mov	r1, r3
 8001326:	4877      	ldr	r0, [pc, #476]	; (8001504 <MX_GPIO_Init+0x304>)
 8001328:	f003 fa2a 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800132c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001332:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800133c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001340:	4619      	mov	r1, r3
 8001342:	486e      	ldr	r0, [pc, #440]	; (80014fc <MX_GPIO_Init+0x2fc>)
 8001344:	f003 fa1c 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF11
                           PF12 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001348:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134e:	2303      	movs	r3, #3
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135a:	4619      	mov	r1, r3
 800135c:	4868      	ldr	r0, [pc, #416]	; (8001500 <MX_GPIO_Init+0x300>)
 800135e:	f003 fa0f 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001362:	2309      	movs	r3, #9
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001366:	2303      	movs	r3, #3
 8001368:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800136e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001372:	4619      	mov	r1, r3
 8001374:	4866      	ldr	r0, [pc, #408]	; (8001510 <MX_GPIO_Init+0x310>)
 8001376:	f003 fa03 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_S2LP_CSN_Pin;
 800137a:	2301      	movs	r3, #1
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137e:	2301      	movs	r3, #1
 8001380:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001386:	2303      	movs	r3, #3
 8001388:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RADIO_S2LP_CSN_GPIO_Port, &GPIO_InitStruct);
 800138a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138e:	4619      	mov	r1, r3
 8001390:	485a      	ldr	r0, [pc, #360]	; (80014fc <MX_GPIO_Init+0x2fc>)
 8001392:	f003 f9f5 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001396:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800139c:	2303      	movs	r3, #3
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a8:	4619      	mov	r1, r3
 80013aa:	4854      	ldr	r0, [pc, #336]	; (80014fc <MX_GPIO_Init+0x2fc>)
 80013ac:	f003 f9e8 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA4 PA5
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 80013b0:	f248 0336 	movw	r3, #32822	; 0x8036
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b6:	2303      	movs	r3, #3
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c2:	4619      	mov	r1, r3
 80013c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c8:	f003 f9da 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
 80013cc:	2308      	movs	r3, #8
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 80013da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013de:	4619      	mov	r1, r3
 80013e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e4:	f003 f9cc 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB15
                           PB4 PB5 PB6 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80013e8:	f64b 7377 	movw	r3, #49015	; 0xbf77
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ee:	2303      	movs	r3, #3
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fa:	4619      	mov	r1, r3
 80013fc:	4842      	ldr	r0, [pc, #264]	; (8001508 <MX_GPIO_Init+0x308>)
 80013fe:	f003 f9bf 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_SDN_Pin;
 8001402:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001408:	2301      	movs	r3, #1
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RADIO_SDN_GPIO_Port, &GPIO_InitStruct);
 8001414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001418:	4619      	mov	r1, r3
 800141a:	4839      	ldr	r0, [pc, #228]	; (8001500 <MX_GPIO_Init+0x300>)
 800141c:	f003 f9b0 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001420:	f64f 631f 	movw	r3, #65055	; 0xfe1f
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001426:	2303      	movs	r3, #3
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800142e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001432:	4619      	mov	r1, r3
 8001434:	4835      	ldr	r0, [pc, #212]	; (800150c <MX_GPIO_Init+0x30c>)
 8001436:	f003 f9a3 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_EEPROM_CSN_Pin;
 800143a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001440:	2301      	movs	r3, #1
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2300      	movs	r3, #0
 800144a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RADIO_EEPROM_CSN_GPIO_Port, &GPIO_InitStruct);
 800144c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001450:	4619      	mov	r1, r3
 8001452:	482c      	ldr	r0, [pc, #176]	; (8001504 <MX_GPIO_Init+0x304>)
 8001454:	f003 f994 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001458:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145e:	2301      	movs	r3, #1
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146e:	4619      	mov	r1, r3
 8001470:	4825      	ldr	r0, [pc, #148]	; (8001508 <MX_GPIO_Init+0x308>)
 8001472:	f003 f985 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001476:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800147c:	2303      	movs	r3, #3
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001488:	4619      	mov	r1, r3
 800148a:	4822      	ldr	r0, [pc, #136]	; (8001514 <MX_GPIO_Init+0x314>)
 800148c:	f003 f978 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001490:	2320      	movs	r3, #32
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001494:	2300      	movs	r3, #0
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a0:	4619      	mov	r1, r3
 80014a2:	481a      	ldr	r0, [pc, #104]	; (800150c <MX_GPIO_Init+0x30c>)
 80014a4:	f003 f96c 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014a8:	2340      	movs	r3, #64	; 0x40
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ac:	2301      	movs	r3, #1
 80014ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014bc:	4619      	mov	r1, r3
 80014be:	4813      	ldr	r0, [pc, #76]	; (800150c <MX_GPIO_Init+0x30c>)
 80014c0:	f003 f95e 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80014c4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d2:	2303      	movs	r3, #3
 80014d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014d6:	230a      	movs	r3, #10
 80014d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014de:	4619      	mov	r1, r3
 80014e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e4:	f003 f94c 	bl	8004780 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80014e8:	2200      	movs	r2, #0
 80014ea:	2100      	movs	r1, #0
 80014ec:	2009      	movs	r0, #9
 80014ee:	f002 ffa8 	bl	8004442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80014f2:	2009      	movs	r0, #9
 80014f4:	e010      	b.n	8001518 <MX_GPIO_Init+0x318>
 80014f6:	bf00      	nop
 80014f8:	40021000 	.word	0x40021000
 80014fc:	48000800 	.word	0x48000800
 8001500:	48001400 	.word	0x48001400
 8001504:	48001000 	.word	0x48001000
 8001508:	48000400 	.word	0x48000400
 800150c:	48001800 	.word	0x48001800
 8001510:	48001c00 	.word	0x48001c00
 8001514:	48000c00 	.word	0x48000c00
 8001518:	f002 ffaf 	bl	800447a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	2100      	movs	r1, #0
 8001520:	2028      	movs	r0, #40	; 0x28
 8001522:	f002 ff8e 	bl	8004442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001526:	2028      	movs	r0, #40	; 0x28
 8001528:	f002 ffa7 	bl	800447a <HAL_NVIC_EnableIRQ>

}
 800152c:	bf00      	nop
 800152e:	3738      	adds	r7, #56	; 0x38
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001544:	d103      	bne.n	800154e <HAL_GPIO_EXTI_Callback+0x1a>
		btn_press = 1;
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001548:	2201      	movs	r2, #1
 800154a:	701a      	strb	r2, [r3, #0]
	}
	else if (GPIO_Pin == RADIO_INT_Pin)
		S2LP_IRQ_Handler();
}
 800154c:	e004      	b.n	8001558 <HAL_GPIO_EXTI_Callback+0x24>
	else if (GPIO_Pin == RADIO_INT_Pin)
 800154e:	88fb      	ldrh	r3, [r7, #6]
 8001550:	2b08      	cmp	r3, #8
 8001552:	d101      	bne.n	8001558 <HAL_GPIO_EXTI_Callback+0x24>
		S2LP_IRQ_Handler();
 8001554:	f001 fa42 	bl	80029dc <S2LP_IRQ_Handler>
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	200002a0 	.word	0x200002a0

08001564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800156a:	f001 fd0e 	bl	8002f8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800156e:	f000 f855 	bl	800161c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001572:	f7ff fe45 	bl	8001200 <MX_GPIO_Init>
  MX_DMA_Init();
 8001576:	f7ff fda7 	bl	80010c8 <MX_DMA_Init>
  MX_SPI1_Init();
 800157a:	f001 fa61 	bl	8002a40 <MX_SPI1_Init>
  MX_TIM3_Init();
 800157e:	f001 fbd9 	bl	8002d34 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001582:	f7ff fc9f 	bl	8000ec4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  if (ENABLE_UART) {
	  MX_LPUART1_UART_Init();
 8001586:	f001 fc49 	bl	8002e1c <MX_LPUART1_UART_Init>
  }

  RetargetInit(&hlpuart1);
 800158a:	481b      	ldr	r0, [pc, #108]	; (80015f8 <main+0x94>)
 800158c:	f000 f8c8 	bl	8001720 <RetargetInit>
  DEBUG_PRINT("Hello world\r\n");
 8001590:	481a      	ldr	r0, [pc, #104]	; (80015fc <main+0x98>)
 8001592:	f007 faf3 	bl	8008b7c <puts>

#if ENABLE_RADIO
  // Enable S2LP Radio
  HAL_StatusTypeDef err = S2LP_Init(&hspi1);
 8001596:	481a      	ldr	r0, [pc, #104]	; (8001600 <main+0x9c>)
 8001598:	f001 f97e 	bl	8002898 <S2LP_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	71fb      	strb	r3, [r7, #7]
  if (err)  {
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d007      	beq.n	80015b6 <main+0x52>
	  DEBUG_PRINT("[S2LP] Error while initializing: %u\r\n", err);
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	4619      	mov	r1, r3
 80015aa:	4816      	ldr	r0, [pc, #88]	; (8001604 <main+0xa0>)
 80015ac:	f007 fa80 	bl	8008ab0 <iprintf>
	  Error_Handler();
 80015b0:	f000 f87a 	bl	80016a8 <Error_Handler>
 80015b4:	e002      	b.n	80015bc <main+0x58>
  } else {
	  DEBUG_PRINT("[S2LP] Init OK\r\n");
 80015b6:	4814      	ldr	r0, [pc, #80]	; (8001608 <main+0xa4>)
 80015b8:	f007 fae0 	bl	8008b7c <puts>
  }
#endif

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) {
 80015bc:	217f      	movs	r1, #127	; 0x7f
 80015be:	4813      	ldr	r0, [pc, #76]	; (800160c <main+0xa8>)
 80015c0:	f002 fd54 	bl	800406c <HAL_ADCEx_Calibration_Start>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d004      	beq.n	80015d4 <main+0x70>
	  DEBUG_PRINT("Error while calibrating the ADC\r\n");
 80015ca:	4811      	ldr	r0, [pc, #68]	; (8001610 <main+0xac>)
 80015cc:	f007 fad6 	bl	8008b7c <puts>
	  Error_Handler();
 80015d0:	f000 f86a 	bl	80016a8 <Error_Handler>
  }
  if (HAL_TIM_Base_Start(&htim3) != HAL_OK) {
 80015d4:	480f      	ldr	r0, [pc, #60]	; (8001614 <main+0xb0>)
 80015d6:	f005 fa93 	bl	8006b00 <HAL_TIM_Base_Start>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d004      	beq.n	80015ea <main+0x86>
	  DEBUG_PRINT("Error while enabling timer TIM3\r\n");
 80015e0:	480d      	ldr	r0, [pc, #52]	; (8001618 <main+0xb4>)
 80015e2:	f007 facb 	bl	8008b7c <puts>
	  Error_Handler();
 80015e6:	f000 f85f 	bl	80016a8 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#if (RUN_CONFIG == MAIN_APP)
  run();
#elif (RUN_CONFIG == EVAL_RADIO)
  eval_radio();
 80015ea:	f7ff fd8b 	bl	8001104 <eval_radio>
 80015ee:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000364 	.word	0x20000364
 80015fc:	0800ace8 	.word	0x0800ace8
 8001600:	200002b0 	.word	0x200002b0
 8001604:	0800acf8 	.word	0x0800acf8
 8001608:	0800ad20 	.word	0x0800ad20
 800160c:	200001f0 	.word	0x200001f0
 8001610:	0800ad30 	.word	0x0800ad30
 8001614:	20000318 	.word	0x20000318
 8001618:	0800ad54 	.word	0x0800ad54

0800161c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b096      	sub	sp, #88	; 0x58
 8001620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	2244      	movs	r2, #68	; 0x44
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f007 fc34 	bl	8008e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001630:	463b      	mov	r3, r7
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800163e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001642:	f003 fa6d 	bl	8004b20 <HAL_PWREx_ControlVoltageScaling>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800164c:	f000 f82c 	bl	80016a8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001650:	2310      	movs	r3, #16
 8001652:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001654:	2301      	movs	r3, #1
 8001656:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800165c:	23b0      	movs	r3, #176	; 0xb0
 800165e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001660:	2300      	movs	r3, #0
 8001662:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4618      	mov	r0, r3
 800166a:	f003 fabf 	bl	8004bec <HAL_RCC_OscConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001674:	f000 f818 	bl	80016a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001678:	230f      	movs	r3, #15
 800167a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800167c:	2300      	movs	r3, #0
 800167e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001680:	2300      	movs	r3, #0
 8001682:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001688:	2300      	movs	r3, #0
 800168a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800168c:	463b      	mov	r3, r7
 800168e:	2102      	movs	r1, #2
 8001690:	4618      	mov	r0, r3
 8001692:	f003 fec5 	bl	8005420 <HAL_RCC_ClockConfig>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800169c:	f000 f804 	bl	80016a8 <Error_Handler>
  }
}
 80016a0:	bf00      	nop
 80016a2:	3758      	adds	r7, #88	; 0x58
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ae:	b672      	cpsid	i
}
 80016b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  DEBUG_PRINT("Entering error Handler\r\n");
 80016b2:	4817      	ldr	r0, [pc, #92]	; (8001710 <Error_Handler+0x68>)
 80016b4:	f007 fa62 	bl	8008b7c <puts>
  while (1)
  {
	  // Blink LED3 (red)
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80016b8:	2201      	movs	r2, #1
 80016ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016be:	4815      	ldr	r0, [pc, #84]	; (8001714 <Error_Handler+0x6c>)
 80016c0:	f003 f9f0 	bl	8004aa4 <HAL_GPIO_WritePin>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 80016c4:	2300      	movs	r3, #0
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	e002      	b.n	80016d0 <Error_Handler+0x28>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3301      	adds	r3, #1
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <Error_Handler+0x70>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a11      	ldr	r2, [pc, #68]	; (800171c <Error_Handler+0x74>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	099b      	lsrs	r3, r3, #6
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	4293      	cmp	r3, r2
 80016e0:	d8f3      	bhi.n	80016ca <Error_Handler+0x22>
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80016e2:	2200      	movs	r2, #0
 80016e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016e8:	480a      	ldr	r0, [pc, #40]	; (8001714 <Error_Handler+0x6c>)
 80016ea:	f003 f9db 	bl	8004aa4 <HAL_GPIO_WritePin>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 80016ee:	2300      	movs	r3, #0
 80016f0:	603b      	str	r3, [r7, #0]
 80016f2:	e002      	b.n	80016fa <Error_Handler+0x52>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	3301      	adds	r3, #1
 80016f8:	603b      	str	r3, [r7, #0]
 80016fa:	4b07      	ldr	r3, [pc, #28]	; (8001718 <Error_Handler+0x70>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a07      	ldr	r2, [pc, #28]	; (800171c <Error_Handler+0x74>)
 8001700:	fba2 2303 	umull	r2, r3, r2, r3
 8001704:	099b      	lsrs	r3, r3, #6
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	4293      	cmp	r3, r2
 800170a:	d8f3      	bhi.n	80016f4 <Error_Handler+0x4c>
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800170c:	e7d4      	b.n	80016b8 <Error_Handler+0x10>
 800170e:	bf00      	nop
 8001710:	0800ad78 	.word	0x0800ad78
 8001714:	48000400 	.word	0x48000400
 8001718:	20000000 	.word	0x20000000
 800171c:	51eb851f 	.word	0x51eb851f

08001720 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001728:	4a07      	ldr	r2, [pc, #28]	; (8001748 <RetargetInit+0x28>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <RetargetInit+0x2c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6898      	ldr	r0, [r3, #8]
 8001734:	2300      	movs	r3, #0
 8001736:	2202      	movs	r2, #2
 8001738:	2100      	movs	r1, #0
 800173a:	f007 fa27 	bl	8008b8c <setvbuf>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200002a4 	.word	0x200002a4
 800174c:	20000064 	.word	0x20000064

08001750 <_isatty>:

int _isatty(int fd) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	db04      	blt.n	8001768 <_isatty+0x18>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b02      	cmp	r3, #2
 8001762:	dc01      	bgt.n	8001768 <_isatty+0x18>
    return 1;
 8001764:	2301      	movs	r3, #1
 8001766:	e005      	b.n	8001774 <_isatty+0x24>

  errno = EBADF;
 8001768:	f007 fbe8 	bl	8008f3c <__errno>
 800176c:	4603      	mov	r3, r0
 800176e:	2209      	movs	r2, #9
 8001770:	601a      	str	r2, [r3, #0]
  return 0;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <_write>:

int _write(int fd, char* ptr, int len) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d002      	beq.n	8001794 <_write+0x18>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d111      	bne.n	80017b8 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001794:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <_write+0x54>)
 8001796:	6818      	ldr	r0, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	b29a      	uxth	r2, r3
 800179c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017a0:	68b9      	ldr	r1, [r7, #8]
 80017a2:	f005 fe3b 	bl	800741c <HAL_UART_Transmit>
 80017a6:	4603      	mov	r3, r0
 80017a8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80017aa:	7dfb      	ldrb	r3, [r7, #23]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <_write+0x38>
      return len;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	e008      	b.n	80017c6 <_write+0x4a>
    else
      return EIO;
 80017b4:	2305      	movs	r3, #5
 80017b6:	e006      	b.n	80017c6 <_write+0x4a>
  }
  errno = EBADF;
 80017b8:	f007 fbc0 	bl	8008f3c <__errno>
 80017bc:	4603      	mov	r3, r0
 80017be:	2209      	movs	r2, #9
 80017c0:	601a      	str	r2, [r3, #0]
  return -1;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200002a4 	.word	0x200002a4

080017d4 <_close>:

int _close(int fd) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	db04      	blt.n	80017ec <_close+0x18>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	dc01      	bgt.n	80017ec <_close+0x18>
    return 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	e006      	b.n	80017fa <_close+0x26>

  errno = EBADF;
 80017ec:	f007 fba6 	bl	8008f3c <__errno>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2209      	movs	r2, #9
 80017f4:	601a      	str	r2, [r3, #0]
  return -1;
 80017f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001802:	b580      	push	{r7, lr}
 8001804:	b084      	sub	sp, #16
 8001806:	af00      	add	r7, sp, #0
 8001808:	60f8      	str	r0, [r7, #12]
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800180e:	f007 fb95 	bl	8008f3c <__errno>
 8001812:	4603      	mov	r3, r0
 8001814:	2209      	movs	r2, #9
 8001816:	601a      	str	r2, [r3, #0]
  return -1;
 8001818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <_read>:

int _read(int fd, char* ptr, int len) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d110      	bne.n	8001858 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001836:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <_read+0x4c>)
 8001838:	6818      	ldr	r0, [r3, #0]
 800183a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800183e:	2201      	movs	r2, #1
 8001840:	68b9      	ldr	r1, [r7, #8]
 8001842:	f005 fe75 	bl	8007530 <HAL_UART_Receive>
 8001846:	4603      	mov	r3, r0
 8001848:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800184a:	7dfb      	ldrb	r3, [r7, #23]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <_read+0x30>
      return 1;
 8001850:	2301      	movs	r3, #1
 8001852:	e008      	b.n	8001866 <_read+0x42>
    else
      return EIO;
 8001854:	2305      	movs	r3, #5
 8001856:	e006      	b.n	8001866 <_read+0x42>
  }
  errno = EBADF;
 8001858:	f007 fb70 	bl	8008f3c <__errno>
 800185c:	4603      	mov	r3, r0
 800185e:	2209      	movs	r2, #9
 8001860:	601a      	str	r2, [r3, #0]
  return -1;
 8001862:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200002a4 	.word	0x200002a4

08001874 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	db08      	blt.n	8001896 <_fstat+0x22>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b02      	cmp	r3, #2
 8001888:	dc05      	bgt.n	8001896 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001890:	605a      	str	r2, [r3, #4]
    return 0;
 8001892:	2300      	movs	r3, #0
 8001894:	e005      	b.n	80018a2 <_fstat+0x2e>
  }

  errno = EBADF;
 8001896:	f007 fb51 	bl	8008f3c <__errno>
 800189a:	4603      	mov	r3, r0
 800189c:	2209      	movs	r2, #9
 800189e:	601a      	str	r2, [r3, #0]
  return 0;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <S2LP_Command>:
volatile uint8_t underflow = 0;

volatile uint16_t n_chunks_tx = 0;

HAL_StatusTypeDef S2LP_Command(uint8_t cmd, S2LPStatus *status)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af02      	add	r7, sp, #8
 80018b2:	4603      	mov	r3, r0
 80018b4:	6039      	str	r1, [r7, #0]
 80018b6:	71fb      	strb	r3, [r7, #7]
	uint8_t TxBuf[2] = {0x80, cmd};
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	733b      	strb	r3, [r7, #12]
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	737b      	strb	r3, [r7, #13]
  __ASM volatile ("cpsid i" : : : "memory");
 80018c0:	b672      	cpsid	i
}
 80018c2:	bf00      	nop
	uint8_t RxBuf[2];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	2101      	movs	r1, #1
 80018c8:	480f      	ldr	r0, [pc, #60]	; (8001908 <S2LP_Command+0x5c>)
 80018ca:	f003 f8eb 	bl	8004aa4 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 2, HAL_MAX_DELAY);
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <S2LP_Command+0x60>)
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	f107 0208 	add.w	r2, r7, #8
 80018d6:	f107 010c 	add.w	r1, r7, #12
 80018da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	2302      	movs	r3, #2
 80018e2:	f004 fd2e 	bl	8006342 <HAL_SPI_TransmitReceive>
 80018e6:	4603      	mov	r3, r0
 80018e8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 80018ea:	2201      	movs	r2, #1
 80018ec:	2101      	movs	r1, #1
 80018ee:	4806      	ldr	r0, [pc, #24]	; (8001908 <S2LP_Command+0x5c>)
 80018f0:	f003 f8d8 	bl	8004aa4 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 80018f4:	b662      	cpsie	i
}
 80018f6:	bf00      	nop
 80018f8:	893a      	ldrh	r2, [r7, #8]
	__enable_irq();

	memcpy(status, &RxBuf[0], 2);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	801a      	strh	r2, [r3, #0]
	return err;
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	48000800 	.word	0x48000800
 800190c:	200002a8 	.word	0x200002a8

08001910 <S2LP_ReadReg>:

HAL_StatusTypeDef S2LP_ReadReg(uint8_t addr, uint8_t *retval, S2LPStatus *status)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af02      	add	r7, sp, #8
 8001916:	4603      	mov	r3, r0
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	73fb      	strb	r3, [r7, #15]
	uint8_t TxBuf[] = {0x01, addr, 0x0};
 800191e:	2301      	movs	r3, #1
 8001920:	753b      	strb	r3, [r7, #20]
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	757b      	strb	r3, [r7, #21]
 8001926:	2300      	movs	r3, #0
 8001928:	75bb      	strb	r3, [r7, #22]
  __ASM volatile ("cpsid i" : : : "memory");
 800192a:	b672      	cpsid	i
}
 800192c:	bf00      	nop
	uint8_t RxBuf[3];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 800192e:	2200      	movs	r2, #0
 8001930:	2101      	movs	r1, #1
 8001932:	4814      	ldr	r0, [pc, #80]	; (8001984 <S2LP_ReadReg+0x74>)
 8001934:	f003 f8b6 	bl	8004aa4 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 3, HAL_MAX_DELAY);
 8001938:	4b13      	ldr	r3, [pc, #76]	; (8001988 <S2LP_ReadReg+0x78>)
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	f107 0210 	add.w	r2, r7, #16
 8001940:	f107 0114 	add.w	r1, r7, #20
 8001944:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	2303      	movs	r3, #3
 800194c:	f004 fcf9 	bl	8006342 <HAL_SPI_TransmitReceive>
 8001950:	4603      	mov	r3, r0
 8001952:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8001954:	2201      	movs	r2, #1
 8001956:	2101      	movs	r1, #1
 8001958:	480a      	ldr	r0, [pc, #40]	; (8001984 <S2LP_ReadReg+0x74>)
 800195a:	f003 f8a3 	bl	8004aa4 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 800195e:	b662      	cpsie	i
}
 8001960:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d002      	beq.n	800196e <S2LP_ReadReg+0x5e>
 8001968:	8a3a      	ldrh	r2, [r7, #16]
		memcpy(status, &RxBuf[0], 2);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	801a      	strh	r2, [r3, #0]
	if (retval != NULL)
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d002      	beq.n	800197a <S2LP_ReadReg+0x6a>
		*retval = RxBuf[2];
 8001974:	7cba      	ldrb	r2, [r7, #18]
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	701a      	strb	r2, [r3, #0]
	return err;
 800197a:	7dfb      	ldrb	r3, [r7, #23]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	48000800 	.word	0x48000800
 8001988:	200002a8 	.word	0x200002a8

0800198c <S2LP_WriteReg>:

HAL_StatusTypeDef S2LP_WriteReg(uint8_t addr, uint8_t val, S2LPStatus *status)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af02      	add	r7, sp, #8
 8001992:	4603      	mov	r3, r0
 8001994:	603a      	str	r2, [r7, #0]
 8001996:	71fb      	strb	r3, [r7, #7]
 8001998:	460b      	mov	r3, r1
 800199a:	71bb      	strb	r3, [r7, #6]
	uint8_t TxBuf[] = {0x00, addr, val};
 800199c:	2300      	movs	r3, #0
 800199e:	733b      	strb	r3, [r7, #12]
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	737b      	strb	r3, [r7, #13]
 80019a4:	79bb      	ldrb	r3, [r7, #6]
 80019a6:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 80019a8:	b672      	cpsid	i
}
 80019aa:	bf00      	nop
	uint8_t RxBuf[3];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2101      	movs	r1, #1
 80019b0:	4811      	ldr	r0, [pc, #68]	; (80019f8 <S2LP_WriteReg+0x6c>)
 80019b2:	f003 f877 	bl	8004aa4 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 3, HAL_MAX_DELAY);
 80019b6:	4b11      	ldr	r3, [pc, #68]	; (80019fc <S2LP_WriteReg+0x70>)
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	f107 0208 	add.w	r2, r7, #8
 80019be:	f107 010c 	add.w	r1, r7, #12
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	2303      	movs	r3, #3
 80019ca:	f004 fcba 	bl	8006342 <HAL_SPI_TransmitReceive>
 80019ce:	4603      	mov	r3, r0
 80019d0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 80019d2:	2201      	movs	r2, #1
 80019d4:	2101      	movs	r1, #1
 80019d6:	4808      	ldr	r0, [pc, #32]	; (80019f8 <S2LP_WriteReg+0x6c>)
 80019d8:	f003 f864 	bl	8004aa4 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 80019dc:	b662      	cpsie	i
}
 80019de:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <S2LP_WriteReg+0x60>
 80019e6:	893a      	ldrh	r2, [r7, #8]
		memcpy(status, &RxBuf[0], 2);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	801a      	strh	r2, [r3, #0]
	return err;
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	48000800 	.word	0x48000800
 80019fc:	200002a8 	.word	0x200002a8

08001a00 <S2LP_WriteTxFIFO>:

HAL_StatusTypeDef S2LP_WriteTxFIFO(uint8_t *chunk, uint8_t chunk_len, S2LPStatus *status)
{
 8001a00:	b590      	push	{r4, r7, lr}
 8001a02:	b08d      	sub	sp, #52	; 0x34
 8001a04:	af02      	add	r7, sp, #8
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	72fb      	strb	r3, [r7, #11]
	uint8_t TxBuf[FIFO_CHUNK_SIZE+2];
	uint8_t RxBuf[FIFO_CHUNK_SIZE+2];
	TxBuf[0] = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	773b      	strb	r3, [r7, #28]
	TxBuf[1] = 0xFF;
 8001a12:	23ff      	movs	r3, #255	; 0xff
 8001a14:	777b      	strb	r3, [r7, #29]
	memcpy((void *)&TxBuf[2], (void *)chunk, chunk_len);
 8001a16:	7afa      	ldrb	r2, [r7, #11]
 8001a18:	f107 031c 	add.w	r3, r7, #28
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	68f9      	ldr	r1, [r7, #12]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f007 fab8 	bl	8008f96 <memcpy>
  __ASM volatile ("cpsid i" : : : "memory");
 8001a26:	b672      	cpsid	i
}
 8001a28:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	4814      	ldr	r0, [pc, #80]	; (8001a80 <S2LP_WriteTxFIFO+0x80>)
 8001a30:	f003 f838 	bl	8004aa4 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, chunk_len+2, HAL_MAX_DELAY);
 8001a34:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <S2LP_WriteTxFIFO+0x84>)
 8001a36:	6818      	ldr	r0, [r3, #0]
 8001a38:	7afb      	ldrb	r3, [r7, #11]
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	f107 0210 	add.w	r2, r7, #16
 8001a44:	f107 011c 	add.w	r1, r7, #28
 8001a48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001a4c:	9400      	str	r4, [sp, #0]
 8001a4e:	f004 fc78 	bl	8006342 <HAL_SPI_TransmitReceive>
 8001a52:	4603      	mov	r3, r0
 8001a54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8001a58:	2201      	movs	r2, #1
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	4808      	ldr	r0, [pc, #32]	; (8001a80 <S2LP_WriteTxFIFO+0x80>)
 8001a5e:	f003 f821 	bl	8004aa4 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a62:	b662      	cpsie	i
}
 8001a64:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <S2LP_WriteTxFIFO+0x72>
 8001a6c:	8a3a      	ldrh	r2, [r7, #16]
		memcpy(status, &RxBuf[0], 2);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	801a      	strh	r2, [r3, #0]
	return err;
 8001a72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	372c      	adds	r7, #44	; 0x2c
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd90      	pop	{r4, r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	48000800 	.word	0x48000800
 8001a84:	200002a8 	.word	0x200002a8

08001a88 <S2LP_Send>:

HAL_StatusTypeDef S2LP_Send(uint8_t *payload, uint16_t pay_len)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
	S2LPStatus radio_status;
	HAL_StatusTypeDef err;

	// Flush the Tx FIFO
	S2LP_Command(CMD_FLUSHTXFIFO, &radio_status);
 8001a94:	f107 030c 	add.w	r3, r7, #12
 8001a98:	4619      	mov	r1, r3
 8001a9a:	2072      	movs	r0, #114	; 0x72
 8001a9c:	f7ff ff06 	bl	80018ac <S2LP_Command>
	if (radio_status.MC_STATE != MC_STATE_READY) {
 8001aa0:	7b7b      	ldrb	r3, [r7, #13]
 8001aa2:	f023 0301 	bic.w	r3, r3, #1
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d004      	beq.n	8001ab6 <S2LP_Send+0x2e>
		DEBUG_PRINT("[S2LP] Error: radio is not ready\r\n");
 8001aac:	4865      	ldr	r0, [pc, #404]	; (8001c44 <S2LP_Send+0x1bc>)
 8001aae:	f007 f865 	bl	8008b7c <puts>
		return HAL_BUSY;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e0c1      	b.n	8001c3a <S2LP_Send+0x1b2>
	}
	// Reset global interrupt variables
	packet_sent = 0;
 8001ab6:	4b64      	ldr	r3, [pc, #400]	; (8001c48 <S2LP_Send+0x1c0>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
	underflow = 0;
 8001abc:	4b63      	ldr	r3, [pc, #396]	; (8001c4c <S2LP_Send+0x1c4>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	701a      	strb	r2, [r3, #0]
	fifo_almost_empty = 0;
 8001ac2:	4b63      	ldr	r3, [pc, #396]	; (8001c50 <S2LP_Send+0x1c8>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]

	// Set the packet length
	S2LP_WriteReg(PCKTLEN1_ADDR, (uint8_t) (pay_len >> 8), NULL);
 8001ac8:	887b      	ldrh	r3, [r7, #2]
 8001aca:	0a1b      	lsrs	r3, r3, #8
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	2031      	movs	r0, #49	; 0x31
 8001ad6:	f7ff ff59 	bl	800198c <S2LP_WriteReg>
	S2LP_WriteReg(PCKTLEN0_ADDR, (uint8_t) (pay_len & 0xFF), NULL);
 8001ada:	887b      	ldrh	r3, [r7, #2]
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2200      	movs	r2, #0
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	2032      	movs	r0, #50	; 0x32
 8001ae4:	f7ff ff52 	bl	800198c <S2LP_WriteReg>

	// Switch to lock Tx state
	while (radio_status.MC_STATE != MC_STATE_LOCKON) {
 8001ae8:	e00f      	b.n	8001b0a <S2LP_Send+0x82>
		err = S2LP_Command(CMD_LOCKTX, &radio_status);
 8001aea:	f107 030c 	add.w	r3, r7, #12
 8001aee:	4619      	mov	r1, r3
 8001af0:	2066      	movs	r0, #102	; 0x66
 8001af2:	f7ff fedb 	bl	80018ac <S2LP_Command>
 8001af6:	4603      	mov	r3, r0
 8001af8:	73bb      	strb	r3, [r7, #14]
		if (err) {
 8001afa:	7bbb      	ldrb	r3, [r7, #14]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d004      	beq.n	8001b0a <S2LP_Send+0x82>
			DEBUG_PRINT("[S2LP] Error: cannot lock on Tx\r\n");
 8001b00:	4854      	ldr	r0, [pc, #336]	; (8001c54 <S2LP_Send+0x1cc>)
 8001b02:	f007 f83b 	bl	8008b7c <puts>
			return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e097      	b.n	8001c3a <S2LP_Send+0x1b2>
	while (radio_status.MC_STATE != MC_STATE_LOCKON) {
 8001b0a:	7b7b      	ldrb	r3, [r7, #13]
 8001b0c:	f023 0301 	bic.w	r3, r3, #1
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b18      	cmp	r3, #24
 8001b14:	d1e9      	bne.n	8001aea <S2LP_Send+0x62>
		}
	}

	// Fill Tx FIFO with payload chunks
	uint8_t sending = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	75fb      	strb	r3, [r7, #23]
	uint16_t n_chunks = (pay_len / FIFO_CHUNK_SIZE) + (pay_len % FIFO_CHUNK_SIZE != 0);
 8001b1a:	887b      	ldrh	r3, [r7, #2]
 8001b1c:	08db      	lsrs	r3, r3, #3
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	887b      	ldrh	r3, [r7, #2]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	bf14      	ite	ne
 8001b2c:	2301      	movne	r3, #1
 8001b2e:	2300      	moveq	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	4413      	add	r3, r2
 8001b36:	823b      	strh	r3, [r7, #16]

	uint16_t free_chunks = FIFO_SIZE / FIFO_CHUNK_SIZE;
 8001b38:	2310      	movs	r3, #16
 8001b3a:	82bb      	strh	r3, [r7, #20]

	for(uint16_t i=0; i < n_chunks; i++) {
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	827b      	strh	r3, [r7, #18]
 8001b40:	e063      	b.n	8001c0a <S2LP_Send+0x182>
		if (underflow) {
 8001b42:	4b42      	ldr	r3, [pc, #264]	; (8001c4c <S2LP_Send+0x1c4>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d02f      	beq.n	8001bac <S2LP_Send+0x124>
			DEBUG_PRINT("[S2LP] Error: Tx FIFO overflow or underflow!\r\n");
 8001b4c:	4842      	ldr	r0, [pc, #264]	; (8001c58 <S2LP_Send+0x1d0>)
 8001b4e:	f007 f815 	bl	8008b7c <puts>
			err = S2LP_ReadReg(0, NULL, &radio_status); // fetch radio state
 8001b52:	f107 030c 	add.w	r3, r7, #12
 8001b56:	461a      	mov	r2, r3
 8001b58:	2100      	movs	r1, #0
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f7ff fed8 	bl	8001910 <S2LP_ReadReg>
 8001b60:	4603      	mov	r3, r0
 8001b62:	73bb      	strb	r3, [r7, #14]
			if (!err) {
 8001b64:	7bbb      	ldrb	r3, [r7, #14]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d105      	bne.n	8001b76 <S2LP_Send+0xee>
				S2LP_PrintStatus(&radio_status);
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f000 f87a 	bl	8001c68 <S2LP_PrintStatus>
 8001b74:	e002      	b.n	8001b7c <S2LP_Send+0xf4>
			} else {
				DEBUG_PRINT("[S2LP] Error: unable to fetch radio status!\r\n");
 8001b76:	4839      	ldr	r0, [pc, #228]	; (8001c5c <S2LP_Send+0x1d4>)
 8001b78:	f007 f800 	bl	8008b7c <puts>
			}
			return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e05c      	b.n	8001c3a <S2LP_Send+0x1b2>
		}

		while (free_chunks == 0) {
			if (!sending) {// if FIFO is full and we are not sending yet ...
 8001b80:	7dfb      	ldrb	r3, [r7, #23]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d107      	bne.n	8001b96 <S2LP_Send+0x10e>
				S2LP_Command(CMD_TX, &radio_status); // start the transmission
 8001b86:	f107 030c 	add.w	r3, r7, #12
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	2060      	movs	r0, #96	; 0x60
 8001b8e:	f7ff fe8d 	bl	80018ac <S2LP_Command>
				sending = 1;
 8001b92:	2301      	movs	r3, #1
 8001b94:	75fb      	strb	r3, [r7, #23]
			}

			__WFI();
 8001b96:	bf30      	wfi
			if (fifo_almost_empty) {
 8001b98:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <S2LP_Send+0x1c8>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d004      	beq.n	8001bac <S2LP_Send+0x124>
				free_chunks = FIFO_SIZE/FIFO_CHUNK_SIZE - FIFO_EMPTY_THRESH;
 8001ba2:	230c      	movs	r3, #12
 8001ba4:	82bb      	strh	r3, [r7, #20]
				fifo_almost_empty = 0;
 8001ba6:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <S2LP_Send+0x1c8>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
		while (free_chunks == 0) {
 8001bac:	8abb      	ldrh	r3, [r7, #20]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0e6      	beq.n	8001b80 <S2LP_Send+0xf8>
			}
		}

		uint8_t chunk_len = (i == n_chunks-1) ? pay_len-(n_chunks-1)*FIFO_CHUNK_SIZE : FIFO_CHUNK_SIZE;
 8001bb2:	8a7a      	ldrh	r2, [r7, #18]
 8001bb4:	8a3b      	ldrh	r3, [r7, #16]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d109      	bne.n	8001bd0 <S2LP_Send+0x148>
 8001bbc:	887b      	ldrh	r3, [r7, #2]
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	8a3b      	ldrh	r3, [r7, #16]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	e000      	b.n	8001bd2 <S2LP_Send+0x14a>
 8001bd0:	2308      	movs	r3, #8
 8001bd2:	73fb      	strb	r3, [r7, #15]
		err = S2LP_WriteTxFIFO(&payload[i*FIFO_CHUNK_SIZE], chunk_len, &radio_status);
 8001bd4:	8a7b      	ldrh	r3, [r7, #18]
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	461a      	mov	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	f107 020c 	add.w	r2, r7, #12
 8001be2:	7bf9      	ldrb	r1, [r7, #15]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff0b 	bl	8001a00 <S2LP_WriteTxFIFO>
 8001bea:	4603      	mov	r3, r0
 8001bec:	73bb      	strb	r3, [r7, #14]
		if (err) {
 8001bee:	7bbb      	ldrb	r3, [r7, #14]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d004      	beq.n	8001bfe <S2LP_Send+0x176>
			DEBUG_PRINT("[S2LP] Error: cannot fill Tx FIFO\r\n");
 8001bf4:	481a      	ldr	r0, [pc, #104]	; (8001c60 <S2LP_Send+0x1d8>)
 8001bf6:	f006 ffc1 	bl	8008b7c <puts>
			return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e01d      	b.n	8001c3a <S2LP_Send+0x1b2>
		}
		free_chunks--;
 8001bfe:	8abb      	ldrh	r3, [r7, #20]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i < n_chunks; i++) {
 8001c04:	8a7b      	ldrh	r3, [r7, #18]
 8001c06:	3301      	adds	r3, #1
 8001c08:	827b      	strh	r3, [r7, #18]
 8001c0a:	8a7a      	ldrh	r2, [r7, #18]
 8001c0c:	8a3b      	ldrh	r3, [r7, #16]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d397      	bcc.n	8001b42 <S2LP_Send+0xba>
	}

	// Start transmission (for short payloads)
	if (!sending) {
 8001c12:	7dfb      	ldrb	r3, [r7, #23]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d107      	bne.n	8001c28 <S2LP_Send+0x1a0>
		S2LP_Command(CMD_TX, &radio_status);
 8001c18:	f107 030c 	add.w	r3, r7, #12
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	2060      	movs	r0, #96	; 0x60
 8001c20:	f7ff fe44 	bl	80018ac <S2LP_Command>
	}

	while (!packet_sent) {
 8001c24:	e000      	b.n	8001c28 <S2LP_Send+0x1a0>
		__WFI(); // wait until packet has been fully transmitted
 8001c26:	bf30      	wfi
	while (!packet_sent) {
 8001c28:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <S2LP_Send+0x1c0>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f9      	beq.n	8001c26 <S2LP_Send+0x19e>
	}

	DEBUG_PRINT("[S2LP] Packet transmitted!\r\n");
 8001c32:	480c      	ldr	r0, [pc, #48]	; (8001c64 <S2LP_Send+0x1dc>)
 8001c34:	f006 ffa2 	bl	8008b7c <puts>
	return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	0800ad90 	.word	0x0800ad90
 8001c48:	200002ac 	.word	0x200002ac
 8001c4c:	200002ae 	.word	0x200002ae
 8001c50:	200002ad 	.word	0x200002ad
 8001c54:	0800adb4 	.word	0x0800adb4
 8001c58:	0800add8 	.word	0x0800add8
 8001c5c:	0800ae08 	.word	0x0800ae08
 8001c60:	0800ae38 	.word	0x0800ae38
 8001c64:	0800ae5c 	.word	0x0800ae5c

08001c68 <S2LP_PrintStatus>:

void S2LP_PrintStatus(S2LPStatus *status)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	6078      	str	r0, [r7, #4]
	DEBUG_PRINT("=== S2LP Status ===\r\n");
 8001c70:	486f      	ldr	r0, [pc, #444]	; (8001e30 <S2LP_PrintStatus+0x1c8>)
 8001c72:	f006 ff83 	bl	8008b7c <puts>
	DEBUG_PRINT("  MC_STATE: ");
 8001c76:	486f      	ldr	r0, [pc, #444]	; (8001e34 <S2LP_PrintStatus+0x1cc>)
 8001c78:	f006 ff1a 	bl	8008ab0 <iprintf>
	switch (status->MC_STATE) {
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	785b      	ldrb	r3, [r3, #1]
 8001c80:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b5c      	cmp	r3, #92	; 0x5c
 8001c88:	f000 808f 	beq.w	8001daa <S2LP_PrintStatus+0x142>
 8001c8c:	2b5c      	cmp	r3, #92	; 0x5c
 8001c8e:	f300 8094 	bgt.w	8001dba <S2LP_PrintStatus+0x152>
 8001c92:	2b30      	cmp	r3, #48	; 0x30
 8001c94:	dc6a      	bgt.n	8001d6c <S2LP_PrintStatus+0x104>
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f2c0 808f 	blt.w	8001dba <S2LP_PrintStatus+0x152>
 8001c9c:	2b30      	cmp	r3, #48	; 0x30
 8001c9e:	f200 808c 	bhi.w	8001dba <S2LP_PrintStatus+0x152>
 8001ca2:	a201      	add	r2, pc, #4	; (adr r2, 8001ca8 <S2LP_PrintStatus+0x40>)
 8001ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca8:	08001d73 	.word	0x08001d73
 8001cac:	08001d8b 	.word	0x08001d8b
 8001cb0:	08001d7b 	.word	0x08001d7b
 8001cb4:	08001d83 	.word	0x08001d83
 8001cb8:	08001dbb 	.word	0x08001dbb
 8001cbc:	08001dbb 	.word	0x08001dbb
 8001cc0:	08001dbb 	.word	0x08001dbb
 8001cc4:	08001dbb 	.word	0x08001dbb
 8001cc8:	08001dbb 	.word	0x08001dbb
 8001ccc:	08001dbb 	.word	0x08001dbb
 8001cd0:	08001dbb 	.word	0x08001dbb
 8001cd4:	08001dbb 	.word	0x08001dbb
 8001cd8:	08001d93 	.word	0x08001d93
 8001cdc:	08001dbb 	.word	0x08001dbb
 8001ce0:	08001dbb 	.word	0x08001dbb
 8001ce4:	08001dbb 	.word	0x08001dbb
 8001ce8:	08001dbb 	.word	0x08001dbb
 8001cec:	08001dbb 	.word	0x08001dbb
 8001cf0:	08001dbb 	.word	0x08001dbb
 8001cf4:	08001dbb 	.word	0x08001dbb
 8001cf8:	08001da3 	.word	0x08001da3
 8001cfc:	08001dbb 	.word	0x08001dbb
 8001d00:	08001dbb 	.word	0x08001dbb
 8001d04:	08001dbb 	.word	0x08001dbb
 8001d08:	08001dbb 	.word	0x08001dbb
 8001d0c:	08001dbb 	.word	0x08001dbb
 8001d10:	08001dbb 	.word	0x08001dbb
 8001d14:	08001dbb 	.word	0x08001dbb
 8001d18:	08001dbb 	.word	0x08001dbb
 8001d1c:	08001dbb 	.word	0x08001dbb
 8001d20:	08001dbb 	.word	0x08001dbb
 8001d24:	08001dbb 	.word	0x08001dbb
 8001d28:	08001dbb 	.word	0x08001dbb
 8001d2c:	08001dbb 	.word	0x08001dbb
 8001d30:	08001dbb 	.word	0x08001dbb
 8001d34:	08001dbb 	.word	0x08001dbb
 8001d38:	08001dbb 	.word	0x08001dbb
 8001d3c:	08001dbb 	.word	0x08001dbb
 8001d40:	08001dbb 	.word	0x08001dbb
 8001d44:	08001dbb 	.word	0x08001dbb
 8001d48:	08001dbb 	.word	0x08001dbb
 8001d4c:	08001dbb 	.word	0x08001dbb
 8001d50:	08001dbb 	.word	0x08001dbb
 8001d54:	08001dbb 	.word	0x08001dbb
 8001d58:	08001dbb 	.word	0x08001dbb
 8001d5c:	08001dbb 	.word	0x08001dbb
 8001d60:	08001dbb 	.word	0x08001dbb
 8001d64:	08001dbb 	.word	0x08001dbb
 8001d68:	08001d9b 	.word	0x08001d9b
 8001d6c:	2b50      	cmp	r3, #80	; 0x50
 8001d6e:	d020      	beq.n	8001db2 <S2LP_PrintStatus+0x14a>
 8001d70:	e023      	b.n	8001dba <S2LP_PrintStatus+0x152>
		case (MC_STATE_READY):
			DEBUG_PRINT("READY");
 8001d72:	4831      	ldr	r0, [pc, #196]	; (8001e38 <S2LP_PrintStatus+0x1d0>)
 8001d74:	f006 fe9c 	bl	8008ab0 <iprintf>
			break;
 8001d78:	e023      	b.n	8001dc2 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_STANDBY):
			DEBUG_PRINT("STANDBY");
 8001d7a:	4830      	ldr	r0, [pc, #192]	; (8001e3c <S2LP_PrintStatus+0x1d4>)
 8001d7c:	f006 fe98 	bl	8008ab0 <iprintf>
			break;
 8001d80:	e01f      	b.n	8001dc2 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SLEEP):
			DEBUG_PRINT("SLEEP");
 8001d82:	482f      	ldr	r0, [pc, #188]	; (8001e40 <S2LP_PrintStatus+0x1d8>)
 8001d84:	f006 fe94 	bl	8008ab0 <iprintf>
			break;
 8001d88:	e01b      	b.n	8001dc2 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SLEEP_NOFIFO):
			DEBUG_PRINT("SLEEP");
 8001d8a:	482d      	ldr	r0, [pc, #180]	; (8001e40 <S2LP_PrintStatus+0x1d8>)
 8001d8c:	f006 fe90 	bl	8008ab0 <iprintf>
			break;
 8001d90:	e017      	b.n	8001dc2 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_LOCKON):
			DEBUG_PRINT("LOCKON");
 8001d92:	482c      	ldr	r0, [pc, #176]	; (8001e44 <S2LP_PrintStatus+0x1dc>)
 8001d94:	f006 fe8c 	bl	8008ab0 <iprintf>
			break;
 8001d98:	e013      	b.n	8001dc2 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_RX):
			DEBUG_PRINT("RX");
 8001d9a:	482b      	ldr	r0, [pc, #172]	; (8001e48 <S2LP_PrintStatus+0x1e0>)
 8001d9c:	f006 fe88 	bl	8008ab0 <iprintf>
			break;
 8001da0:	e00f      	b.n	8001dc2 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_LOCK_ST):
			DEBUG_PRINT("LOCK_ST");
 8001da2:	482a      	ldr	r0, [pc, #168]	; (8001e4c <S2LP_PrintStatus+0x1e4>)
 8001da4:	f006 fe84 	bl	8008ab0 <iprintf>
			break;
 8001da8:	e00b      	b.n	8001dc2 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_TX):
			DEBUG_PRINT("TX");
 8001daa:	4829      	ldr	r0, [pc, #164]	; (8001e50 <S2LP_PrintStatus+0x1e8>)
 8001dac:	f006 fe80 	bl	8008ab0 <iprintf>
			break;
 8001db0:	e007      	b.n	8001dc2 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SYNTH_SETUP):
			DEBUG_PRINT("SYNTH_SETUP");
 8001db2:	4828      	ldr	r0, [pc, #160]	; (8001e54 <S2LP_PrintStatus+0x1ec>)
 8001db4:	f006 fe7c 	bl	8008ab0 <iprintf>
			break;
 8001db8:	e003      	b.n	8001dc2 <S2LP_PrintStatus+0x15a>
		default:
			DEBUG_PRINT("UNKNOWN");
 8001dba:	4827      	ldr	r0, [pc, #156]	; (8001e58 <S2LP_PrintStatus+0x1f0>)
 8001dbc:	f006 fe78 	bl	8008ab0 <iprintf>
			break;
 8001dc0:	bf00      	nop
	}
	DEBUG_PRINT("\r\n");
 8001dc2:	4826      	ldr	r0, [pc, #152]	; (8001e5c <S2LP_PrintStatus+0x1f4>)
 8001dc4:	f006 feda 	bl	8008b7c <puts>
	DEBUG_PRINT("  XO_ON=%u, ERROR_LOCK=%u, RX_fifo_empty=%u, TX_FIFO_FULL=%u\r\n",
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	785b      	ldrb	r3, [r3, #1]
 8001dcc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	461a      	mov	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	4618      	mov	r0, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	4603      	mov	r3, r0
 8001dfa:	4819      	ldr	r0, [pc, #100]	; (8001e60 <S2LP_PrintStatus+0x1f8>)
 8001dfc:	f006 fe58 	bl	8008ab0 <iprintf>
			status->XO_ON, status->ERROR_LOCK, status->RX_FIFO_EMPTY, status->TX_FIFO_FULL);
	DEBUG_PRINT("  ANT_SELECT=%u, RCCAL_OK=%u, RES=%u\r\n", status->ANT_SELECT, status->RCCAL_OK, status->RESERVED);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	461a      	mov	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	4810      	ldr	r0, [pc, #64]	; (8001e64 <S2LP_PrintStatus+0x1fc>)
 8001e24:	f006 fe44 	bl	8008ab0 <iprintf>
}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	0800ae78 	.word	0x0800ae78
 8001e34:	0800ae90 	.word	0x0800ae90
 8001e38:	0800aea0 	.word	0x0800aea0
 8001e3c:	0800aea8 	.word	0x0800aea8
 8001e40:	0800aeb0 	.word	0x0800aeb0
 8001e44:	0800aeb8 	.word	0x0800aeb8
 8001e48:	0800aec0 	.word	0x0800aec0
 8001e4c:	0800aec4 	.word	0x0800aec4
 8001e50:	0800aecc 	.word	0x0800aecc
 8001e54:	0800aed0 	.word	0x0800aed0
 8001e58:	0800aedc 	.word	0x0800aedc
 8001e5c:	0800aee4 	.word	0x0800aee4
 8001e60:	0800aee8 	.word	0x0800aee8
 8001e64:	0800af28 	.word	0x0800af28

08001e68 <S2LP_PLLConf>:
* @param  pfd_split pointer to the pfd register value.
* @param  lFc channel center frequency expressed in Hz (from 779 MHz to 915 MHz)
* @retval uint8_t Charge pump word.
*/
void S2LP_PLLConf(int32_t lFc)
{
 8001e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e6c:	b09e      	sub	sp, #120	; 0x78
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	63f8      	str	r0, [r7, #60]	; 0x3c
  uint32_t vcofreq, lFRef;
  uint8_t BFactor = 4; // 779-915 MHz range
 8001e72:	2304      	movs	r3, #4
 8001e74:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
  uint8_t refdiv = 1; // REFDIV=0 (XO_RCO_CONF0) by default
 8001e78:	2301      	movs	r3, #1
 8001e7a:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

  /* Calculates the syntheziser band select */
  uint64_t tgt1,tgt2,tgt;
  uint32_t synth;

  tgt = (((uint64_t)lFc)<<19)*(BFactor*refdiv);
 8001e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e80:	17da      	asrs	r2, r3, #31
 8001e82:	469a      	mov	sl, r3
 8001e84:	4693      	mov	fp, r2
 8001e86:	ea4f 396a 	mov.w	r9, sl, asr #13
 8001e8a:	ea4f 48ca 	mov.w	r8, sl, lsl #19
 8001e8e:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8001e92:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001e96:	fb02 f303 	mul.w	r3, r2, r3
 8001e9a:	17da      	asrs	r2, r3, #31
 8001e9c:	623b      	str	r3, [r7, #32]
 8001e9e:	627a      	str	r2, [r7, #36]	; 0x24
 8001ea0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	fb03 f209 	mul.w	r2, r3, r9
 8001eaa:	460b      	mov	r3, r1
 8001eac:	fb08 f303 	mul.w	r3, r8, r3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	fba8 4502 	umull	r4, r5, r8, r2
 8001eb8:	442b      	add	r3, r5
 8001eba:	461d      	mov	r5, r3
 8001ebc:	e9c7 451a 	strd	r4, r5, [r7, #104]	; 0x68
 8001ec0:	e9c7 451a 	strd	r4, r5, [r7, #104]	; 0x68
  synth=(uint32_t)(tgt/XTAL_FREQ);
 8001ec4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001ec8:	a374      	add	r3, pc, #464	; (adr r3, 800209c <S2LP_PLLConf+0x234>)
 8001eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ece:	f7fe fe7b 	bl	8000bc8 <__aeabi_uldivmod>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	667b      	str	r3, [r7, #100]	; 0x64
  tgt1 = (uint64_t)XTAL_FREQ*(synth);
 8001eda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001edc:	2200      	movs	r2, #0
 8001ede:	61bb      	str	r3, [r7, #24]
 8001ee0:	61fa      	str	r2, [r7, #28]
 8001ee2:	4b6b      	ldr	r3, [pc, #428]	; (8002090 <S2LP_PLLConf+0x228>)
 8001ee4:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001ee8:	462a      	mov	r2, r5
 8001eea:	fb03 f202 	mul.w	r2, r3, r2
 8001eee:	2300      	movs	r3, #0
 8001ef0:	4621      	mov	r1, r4
 8001ef2:	fb01 f303 	mul.w	r3, r1, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	4a65      	ldr	r2, [pc, #404]	; (8002090 <S2LP_PLLConf+0x228>)
 8001efa:	4621      	mov	r1, r4
 8001efc:	fba1 1202 	umull	r1, r2, r1, r2
 8001f00:	637a      	str	r2, [r7, #52]	; 0x34
 8001f02:	460a      	mov	r2, r1
 8001f04:	633a      	str	r2, [r7, #48]	; 0x30
 8001f06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f08:	4413      	add	r3, r2
 8001f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8001f0c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001f10:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
 8001f14:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
  tgt2 = (uint64_t)XTAL_FREQ*(synth+1);
 8001f18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	617a      	str	r2, [r7, #20]
 8001f22:	4b5b      	ldr	r3, [pc, #364]	; (8002090 <S2LP_PLLConf+0x228>)
 8001f24:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001f28:	462a      	mov	r2, r5
 8001f2a:	fb03 f202 	mul.w	r2, r3, r2
 8001f2e:	2300      	movs	r3, #0
 8001f30:	4621      	mov	r1, r4
 8001f32:	fb01 f303 	mul.w	r3, r1, r3
 8001f36:	4413      	add	r3, r2
 8001f38:	4a55      	ldr	r2, [pc, #340]	; (8002090 <S2LP_PLLConf+0x228>)
 8001f3a:	4621      	mov	r1, r4
 8001f3c:	fba1 1202 	umull	r1, r2, r1, r2
 8001f40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f42:	460a      	mov	r2, r1
 8001f44:	62ba      	str	r2, [r7, #40]	; 0x28
 8001f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f48:	4413      	add	r3, r2
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f4c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001f50:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8001f54:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

  synth=((tgt2-tgt)<(tgt-tgt1))?(synth+1):(synth);
 8001f58:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001f5c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001f60:	1a84      	subs	r4, r0, r2
 8001f62:	60bc      	str	r4, [r7, #8]
 8001f64:	eb61 0303 	sbc.w	r3, r1, r3
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001f6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f72:	1a84      	subs	r4, r0, r2
 8001f74:	603c      	str	r4, [r7, #0]
 8001f76:	eb61 0303 	sbc.w	r3, r1, r3
 8001f7a:	607b      	str	r3, [r7, #4]
 8001f7c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f80:	4623      	mov	r3, r4
 8001f82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f86:	4602      	mov	r2, r0
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	462b      	mov	r3, r5
 8001f8c:	460a      	mov	r2, r1
 8001f8e:	4193      	sbcs	r3, r2
 8001f90:	d202      	bcs.n	8001f98 <S2LP_PLLConf+0x130>
 8001f92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f94:	3301      	adds	r3, #1
 8001f96:	e000      	b.n	8001f9a <S2LP_PLLConf+0x132>
 8001f98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f9a:	667b      	str	r3, [r7, #100]	; 0x64

  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc*BFactor;
 8001f9c:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8001fa0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fa2:	fb02 f303 	mul.w	r3, r2, r3
 8001fa6:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Calculates the reference frequency clock */
  lFRef = XTAL_FREQ/refdiv;
 8001fa8:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001fac:	4a38      	ldr	r2, [pc, #224]	; (8002090 <S2LP_PLLConf+0x228>)
 8001fae:	fb92 f3f3 	sdiv	r3, r2, r3
 8001fb2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Set the correct charge pump word */
  if (vcofreq >= VCO_CENTER_FREQ) {
 8001fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fb6:	4a37      	ldr	r2, [pc, #220]	; (8002094 <S2LP_PLLConf+0x22c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d911      	bls.n	8001fe0 <S2LP_PLLConf+0x178>
    if (lFRef > S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8001fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fbe:	4a36      	ldr	r2, [pc, #216]	; (8002098 <S2LP_PLLConf+0x230>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d906      	bls.n	8001fd2 <S2LP_PLLConf+0x16a>
      cp_isel = 0x02;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
      pfd_split = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001fd0:	e017      	b.n	8002002 <S2LP_PLLConf+0x19a>
    }
    else {
      cp_isel = 0x01;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
      pfd_split = 1;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001fde:	e010      	b.n	8002002 <S2LP_PLLConf+0x19a>
    }
  }
  else {
    if (lFRef > S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8001fe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fe2:	4a2d      	ldr	r2, [pc, #180]	; (8002098 <S2LP_PLLConf+0x230>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d906      	bls.n	8001ff6 <S2LP_PLLConf+0x18e>
      cp_isel = 0x03;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
      pfd_split = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001ff4:	e005      	b.n	8002002 <S2LP_PLLConf+0x19a>
    }
    else {
      cp_isel = 0x02;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
      pfd_split = 1;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
    }
  }

  //DEBUG_PRINT("SYNT: %lu, cp_ise=%u, pfd_split=%u\r\n", synth, cp_isel, pfd_split);

  uint8_t SYNT3 = (uint8_t) ((cp_isel << 5) | (synth >> 24));
 8002002:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002006:	015b      	lsls	r3, r3, #5
 8002008:	b2da      	uxtb	r2, r3
 800200a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800200c:	0e1b      	lsrs	r3, r3, #24
 800200e:	b2db      	uxtb	r3, r3
 8002010:	4313      	orrs	r3, r2
 8002012:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint8_t SYNT2 = (uint8_t) ((synth >> 16) & 0xFF);
 8002016:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002018:	0c1b      	lsrs	r3, r3, #16
 800201a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  uint8_t SYNT1 = (uint8_t) ((synth >> 8) & 0xFF);
 800201e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  uint8_t SYNT0 = (uint8_t) ((synth >> 0) & 0xFF);
 8002026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002028:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

  uint8_t SYNTH_CONFIG2 = 0xD0 + (pfd_split << 2);
 800202c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	b2db      	uxtb	r3, r3
 8002034:	3b30      	subs	r3, #48	; 0x30
 8002036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  S2LP_WriteReg(SYNT3_ADDR, SYNT3, NULL);
 800203a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800203e:	2200      	movs	r2, #0
 8002040:	4619      	mov	r1, r3
 8002042:	2005      	movs	r0, #5
 8002044:	f7ff fca2 	bl	800198c <S2LP_WriteReg>
  S2LP_WriteReg(SYNT2_ADDR, SYNT2, NULL);
 8002048:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800204c:	2200      	movs	r2, #0
 800204e:	4619      	mov	r1, r3
 8002050:	2006      	movs	r0, #6
 8002052:	f7ff fc9b 	bl	800198c <S2LP_WriteReg>
  S2LP_WriteReg(SYNT1_ADDR, SYNT1, NULL);
 8002056:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800205a:	2200      	movs	r2, #0
 800205c:	4619      	mov	r1, r3
 800205e:	2007      	movs	r0, #7
 8002060:	f7ff fc94 	bl	800198c <S2LP_WriteReg>
  S2LP_WriteReg(SYNT0_ADDR, SYNT0, NULL);
 8002064:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002068:	2200      	movs	r2, #0
 800206a:	4619      	mov	r1, r3
 800206c:	2008      	movs	r0, #8
 800206e:	f7ff fc8d 	bl	800198c <S2LP_WriteReg>
  S2LP_WriteReg(SYNTH_CONFIG2_ADDR, SYNTH_CONFIG2, NULL);
 8002072:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002076:	2200      	movs	r2, #0
 8002078:	4619      	mov	r1, r3
 800207a:	2065      	movs	r0, #101	; 0x65
 800207c:	f7ff fc86 	bl	800198c <S2LP_WriteReg>
}
 8002080:	bf00      	nop
 8002082:	3778      	adds	r7, #120	; 0x78
 8002084:	46bd      	mov	sp, r7
 8002086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800208a:	bf00      	nop
 800208c:	f3af 8000 	nop.w
 8002090:	02faf080 	.word	0x02faf080
 8002094:	d693a3ff 	.word	0xd693a3ff
 8002098:	01c9c380 	.word	0x01c9c380
 800209c:	02faf080 	.word	0x02faf080
 80020a0:	00000000 	.word	0x00000000

080020a4 <ComputeDatarate>:

uint32_t ComputeDatarate(uint16_t cM, uint8_t cE)
{
 80020a4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80020a8:	b091      	sub	sp, #68	; 0x44
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	4603      	mov	r3, r0
 80020ae:	460a      	mov	r2, r1
 80020b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80020b2:	4613      	mov	r3, r2
 80020b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint32_t f_dig=XTAL_FREQ;
 80020b8:	4b3f      	ldr	r3, [pc, #252]	; (80021b8 <ComputeDatarate+0x114>)
 80020ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint64_t dr;

  if(f_dig>S2LP_DIG_DOMAIN_XTAL_THRESH) {
 80020bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020be:	4b3f      	ldr	r3, [pc, #252]	; (80021bc <ComputeDatarate+0x118>)
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d902      	bls.n	80020ca <ComputeDatarate+0x26>
    f_dig >>= 1;
 80020c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020c6:	085b      	lsrs	r3, r3, #1
 80020c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if(cE==0) {
 80020ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d128      	bne.n	8002124 <ComputeDatarate+0x80>
    dr=((uint64_t)f_dig*cM);
 80020d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d4:	2200      	movs	r2, #0
 80020d6:	61bb      	str	r3, [r7, #24]
 80020d8:	61fa      	str	r2, [r7, #28]
 80020da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020dc:	2200      	movs	r2, #0
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	617a      	str	r2, [r7, #20]
 80020e2:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80020e6:	462b      	mov	r3, r5
 80020e8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80020ec:	4642      	mov	r2, r8
 80020ee:	fb02 f203 	mul.w	r2, r2, r3
 80020f2:	464b      	mov	r3, r9
 80020f4:	4621      	mov	r1, r4
 80020f6:	fb01 f303 	mul.w	r3, r1, r3
 80020fa:	4413      	add	r3, r2
 80020fc:	4622      	mov	r2, r4
 80020fe:	4641      	mov	r1, r8
 8002100:	fba2 ab01 	umull	sl, fp, r2, r1
 8002104:	445b      	add	r3, fp
 8002106:	469b      	mov	fp, r3
 8002108:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
 800210c:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    return (uint32_t)(dr>>32);
 8002110:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	000a      	movs	r2, r1
 800211e:	2300      	movs	r3, #0
 8002120:	4613      	mov	r3, r2
 8002122:	e043      	b.n	80021ac <ComputeDatarate+0x108>
  }

  dr=((uint64_t)f_dig)*((uint64_t)cM+65536);
 8002124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002126:	2200      	movs	r2, #0
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	60fa      	str	r2, [r7, #12]
 800212c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800212e:	2200      	movs	r2, #0
 8002130:	603b      	str	r3, [r7, #0]
 8002132:	607a      	str	r2, [r7, #4]
 8002134:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002138:	460b      	mov	r3, r1
 800213a:	f513 3380 	adds.w	r3, r3, #65536	; 0x10000
 800213e:	623b      	str	r3, [r7, #32]
 8002140:	4613      	mov	r3, r2
 8002142:	f143 0300 	adc.w	r3, r3, #0
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
 8002148:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800214c:	460b      	mov	r3, r1
 800214e:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 8002152:	4652      	mov	r2, sl
 8002154:	fb02 f203 	mul.w	r2, r2, r3
 8002158:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 800215c:	465b      	mov	r3, fp
 800215e:	4682      	mov	sl, r0
 8002160:	468b      	mov	fp, r1
 8002162:	4651      	mov	r1, sl
 8002164:	fb01 f303 	mul.w	r3, r1, r3
 8002168:	4413      	add	r3, r2
 800216a:	4652      	mov	r2, sl
 800216c:	6a39      	ldr	r1, [r7, #32]
 800216e:	fba2 4501 	umull	r4, r5, r2, r1
 8002172:	442b      	add	r3, r5
 8002174:	461d      	mov	r5, r3
 8002176:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
 800217a:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30

  return (uint32_t)(dr>>(33-cE));
 800217e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002182:	f1c3 0121 	rsb	r1, r3, #33	; 0x21
 8002186:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800218a:	f1c1 0420 	rsb	r4, r1, #32
 800218e:	f1a1 0020 	sub.w	r0, r1, #32
 8002192:	fa22 f801 	lsr.w	r8, r2, r1
 8002196:	fa03 f404 	lsl.w	r4, r3, r4
 800219a:	ea48 0804 	orr.w	r8, r8, r4
 800219e:	fa23 f000 	lsr.w	r0, r3, r0
 80021a2:	ea48 0800 	orr.w	r8, r8, r0
 80021a6:	fa23 f901 	lsr.w	r9, r3, r1
 80021aa:	4643      	mov	r3, r8
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3744      	adds	r7, #68	; 0x44
 80021b0:	46bd      	mov	sp, r7
 80021b2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80021b6:	4770      	bx	lr
 80021b8:	02faf080 	.word	0x02faf080
 80021bc:	01c9c380 	.word	0x01c9c380

080021c0 <SearchDatarateME>:

void SearchDatarateME(uint32_t lDatarate, uint16_t* pcM, uint8_t* pcE)
{
 80021c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021c4:	b0ae      	sub	sp, #184	; 0xb8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 80021cc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80021d0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
  uint32_t lDatarateTmp, f_dig=XTAL_FREQ;
 80021d4:	4ba5      	ldr	r3, [pc, #660]	; (800246c <SearchDatarateME+0x2ac>)
 80021d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint8_t uDrE;
  uint64_t tgt1,tgt2,tgt;

  if(f_dig>S2LP_DIG_DOMAIN_XTAL_THRESH) {
 80021da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80021de:	4ba4      	ldr	r3, [pc, #656]	; (8002470 <SearchDatarateME+0x2b0>)
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d904      	bls.n	80021ee <SearchDatarateME+0x2e>
    f_dig >>= 1;
 80021e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021e8:	085b      	lsrs	r3, r3, #1
 80021ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  }

  /* Search the exponent value */
  for(uDrE = 0; uDrE != 12; uDrE++) {
 80021ee:	2300      	movs	r3, #0
 80021f0:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 80021f4:	e013      	b.n	800221e <SearchDatarateME+0x5e>
    lDatarateTmp = ComputeDatarate(0xFFFF, uDrE);
 80021f6:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80021fa:	4619      	mov	r1, r3
 80021fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002200:	f7ff ff50 	bl	80020a4 <ComputeDatarate>
 8002204:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
    if(lDatarate<=lDatarateTmp)
 8002208:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800220c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002210:	429a      	cmp	r2, r3
 8002212:	d909      	bls.n	8002228 <SearchDatarateME+0x68>
  for(uDrE = 0; uDrE != 12; uDrE++) {
 8002214:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8002218:	3301      	adds	r3, #1
 800221a:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800221e:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8002222:	2b0c      	cmp	r3, #12
 8002224:	d1e7      	bne.n	80021f6 <SearchDatarateME+0x36>
 8002226:	e000      	b.n	800222a <SearchDatarateME+0x6a>
      break;
 8002228:	bf00      	nop
  }
  (*pcE) = (uint8_t)uDrE;
 800222a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800222e:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8002232:	7013      	strb	r3, [r2, #0]

  if(uDrE==0) {
 8002234:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d16b      	bne.n	8002314 <SearchDatarateME+0x154>
    tgt=((uint64_t)lDatarate)<<32;
 800223c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002240:	2200      	movs	r2, #0
 8002242:	663b      	str	r3, [r7, #96]	; 0x60
 8002244:	667a      	str	r2, [r7, #100]	; 0x64
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	f04f 0300 	mov.w	r3, #0
 800224e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002250:	000b      	movs	r3, r1
 8002252:	2200      	movs	r2, #0
 8002254:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
    (*pcM) = (uint16_t)(tgt/f_dig);
 8002258:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800225c:	2200      	movs	r2, #0
 800225e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002260:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002262:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002266:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800226a:	f7fe fcad 	bl	8000bc8 <__aeabi_uldivmod>
 800226e:	4602      	mov	r2, r0
 8002270:	460b      	mov	r3, r1
 8002272:	b293      	uxth	r3, r2
 8002274:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002278:	8013      	strh	r3, [r2, #0]
    tgt1=(uint64_t)f_dig*(*pcM);
 800227a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800227e:	2200      	movs	r2, #0
 8002280:	653b      	str	r3, [r7, #80]	; 0x50
 8002282:	657a      	str	r2, [r7, #84]	; 0x54
 8002284:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	b29b      	uxth	r3, r3
 800228c:	2200      	movs	r2, #0
 800228e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002290:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002292:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002296:	462b      	mov	r3, r5
 8002298:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800229c:	4642      	mov	r2, r8
 800229e:	fb02 f203 	mul.w	r2, r2, r3
 80022a2:	464b      	mov	r3, r9
 80022a4:	4621      	mov	r1, r4
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	4622      	mov	r2, r4
 80022ae:	4641      	mov	r1, r8
 80022b0:	fba2 1201 	umull	r1, r2, r2, r1
 80022b4:	67fa      	str	r2, [r7, #124]	; 0x7c
 80022b6:	460a      	mov	r2, r1
 80022b8:	67ba      	str	r2, [r7, #120]	; 0x78
 80022ba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80022bc:	4413      	add	r3, r2
 80022be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80022c0:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80022c4:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 80022c8:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
    tgt2=(uint64_t)f_dig*((*pcM)+1);
 80022cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022d0:	2200      	movs	r2, #0
 80022d2:	643b      	str	r3, [r7, #64]	; 0x40
 80022d4:	647a      	str	r2, [r7, #68]	; 0x44
 80022d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	3301      	adds	r3, #1
 80022de:	17da      	asrs	r2, r3, #31
 80022e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80022e2:	63fa      	str	r2, [r7, #60]	; 0x3c
 80022e4:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80022e8:	462b      	mov	r3, r5
 80022ea:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80022ee:	4642      	mov	r2, r8
 80022f0:	fb02 f203 	mul.w	r2, r2, r3
 80022f4:	464b      	mov	r3, r9
 80022f6:	4621      	mov	r1, r4
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	4622      	mov	r2, r4
 8002300:	4641      	mov	r1, r8
 8002302:	fba2 ab01 	umull	sl, fp, r2, r1
 8002306:	445b      	add	r3, fp
 8002308:	469b      	mov	fp, r3
 800230a:	e9c7 ab28 	strd	sl, fp, [r7, #160]	; 0xa0
 800230e:	e9c7 ab28 	strd	sl, fp, [r7, #160]	; 0xa0
 8002312:	e07d      	b.n	8002410 <SearchDatarateME+0x250>
  }
  else {
    tgt=((uint64_t)lDatarate)<<(33-uDrE);
 8002314:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002318:	2200      	movs	r2, #0
 800231a:	4698      	mov	r8, r3
 800231c:	4691      	mov	r9, r2
 800231e:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8002322:	f1c3 0121 	rsb	r1, r3, #33	; 0x21
 8002326:	f1a1 0320 	sub.w	r3, r1, #32
 800232a:	f1c1 0220 	rsb	r2, r1, #32
 800232e:	fa09 f501 	lsl.w	r5, r9, r1
 8002332:	fa08 f303 	lsl.w	r3, r8, r3
 8002336:	431d      	orrs	r5, r3
 8002338:	fa28 f202 	lsr.w	r2, r8, r2
 800233c:	4315      	orrs	r5, r2
 800233e:	fa08 f401 	lsl.w	r4, r8, r1
 8002342:	e9c7 4526 	strd	r4, r5, [r7, #152]	; 0x98
    (*pcM) = (uint16_t)((tgt/f_dig)-65536);
 8002346:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800234a:	2200      	movs	r2, #0
 800234c:	633b      	str	r3, [r7, #48]	; 0x30
 800234e:	637a      	str	r2, [r7, #52]	; 0x34
 8002350:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002354:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002358:	f7fe fc36 	bl	8000bc8 <__aeabi_uldivmod>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	b293      	uxth	r3, r2
 8002362:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002366:	8013      	strh	r3, [r2, #0]
    tgt1=(uint64_t)f_dig*((*pcM)+65536);
 8002368:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800236c:	2200      	movs	r2, #0
 800236e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002370:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002372:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800237c:	17da      	asrs	r2, r3, #31
 800237e:	623b      	str	r3, [r7, #32]
 8002380:	627a      	str	r2, [r7, #36]	; 0x24
 8002382:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002386:	462b      	mov	r3, r5
 8002388:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800238c:	4642      	mov	r2, r8
 800238e:	fb02 f203 	mul.w	r2, r2, r3
 8002392:	464b      	mov	r3, r9
 8002394:	4621      	mov	r1, r4
 8002396:	fb01 f303 	mul.w	r3, r1, r3
 800239a:	4413      	add	r3, r2
 800239c:	4622      	mov	r2, r4
 800239e:	4641      	mov	r1, r8
 80023a0:	fba2 1201 	umull	r1, r2, r2, r1
 80023a4:	677a      	str	r2, [r7, #116]	; 0x74
 80023a6:	460a      	mov	r2, r1
 80023a8:	673a      	str	r2, [r7, #112]	; 0x70
 80023aa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80023ac:	4413      	add	r3, r2
 80023ae:	677b      	str	r3, [r7, #116]	; 0x74
 80023b0:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 80023b4:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 80023b8:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
    tgt2=(uint64_t)f_dig*((*pcM)+1+65536);
 80023bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023c0:	2200      	movs	r2, #0
 80023c2:	61bb      	str	r3, [r7, #24]
 80023c4:	61fa      	str	r2, [r7, #28]
 80023c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80023d0:	17da      	asrs	r2, r3, #31
 80023d2:	613b      	str	r3, [r7, #16]
 80023d4:	617a      	str	r2, [r7, #20]
 80023d6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80023da:	462b      	mov	r3, r5
 80023dc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80023e0:	4642      	mov	r2, r8
 80023e2:	fb02 f203 	mul.w	r2, r2, r3
 80023e6:	464b      	mov	r3, r9
 80023e8:	4621      	mov	r1, r4
 80023ea:	fb01 f303 	mul.w	r3, r1, r3
 80023ee:	4413      	add	r3, r2
 80023f0:	4622      	mov	r2, r4
 80023f2:	4641      	mov	r1, r8
 80023f4:	fba2 1201 	umull	r1, r2, r2, r1
 80023f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80023fa:	460a      	mov	r2, r1
 80023fc:	66ba      	str	r2, [r7, #104]	; 0x68
 80023fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002400:	4413      	add	r3, r2
 8002402:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002404:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002408:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800240c:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
  }


  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 8002410:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002414:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8002418:	1a84      	subs	r4, r0, r2
 800241a:	60bc      	str	r4, [r7, #8]
 800241c:	eb61 0303 	sbc.w	r3, r1, r3
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002426:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800242a:	1a84      	subs	r4, r0, r2
 800242c:	603c      	str	r4, [r7, #0]
 800242e:	eb61 0303 	sbc.w	r3, r1, r3
 8002432:	607b      	str	r3, [r7, #4]
 8002434:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002438:	4623      	mov	r3, r4
 800243a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800243e:	4602      	mov	r2, r0
 8002440:	4293      	cmp	r3, r2
 8002442:	462b      	mov	r3, r5
 8002444:	460a      	mov	r2, r1
 8002446:	4193      	sbcs	r3, r2
 8002448:	d205      	bcs.n	8002456 <SearchDatarateME+0x296>
 800244a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	3301      	adds	r3, #1
 8002452:	b29b      	uxth	r3, r3
 8002454:	e002      	b.n	800245c <SearchDatarateME+0x29c>
 8002456:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002460:	8013      	strh	r3, [r2, #0]

}
 8002462:	bf00      	nop
 8002464:	37b8      	adds	r7, #184	; 0xb8
 8002466:	46bd      	mov	sp, r7
 8002468:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800246c:	02faf080 	.word	0x02faf080
 8002470:	01c9c380 	.word	0x01c9c380

08002474 <ComputeFreqDeviation>:

uint32_t ComputeFreqDeviation(uint8_t cM, uint8_t cE, uint8_t bs, uint8_t refdiv)
{
 8002474:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002478:	b08c      	sub	sp, #48	; 0x30
 800247a:	af00      	add	r7, sp, #0
 800247c:	461e      	mov	r6, r3
 800247e:	4603      	mov	r3, r0
 8002480:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002484:	460b      	mov	r3, r1
 8002486:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800248a:	4613      	mov	r3, r2
 800248c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002490:	4633      	mov	r3, r6
 8002492:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint32_t f_xo=XTAL_FREQ;
 8002496:	4b35      	ldr	r3, [pc, #212]	; (800256c <ComputeFreqDeviation+0xf8>)
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c

  if(cE==0) {
 800249a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d127      	bne.n	80024f2 <ComputeFreqDeviation+0x7e>
    return (uint32_t)(((uint64_t)f_xo*cM)>>22);
 80024a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a4:	2200      	movs	r2, #0
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	617a      	str	r2, [r7, #20]
 80024aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024ae:	2200      	movs	r2, #0
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	60fa      	str	r2, [r7, #12]
 80024b4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80024b8:	462b      	mov	r3, r5
 80024ba:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80024be:	4642      	mov	r2, r8
 80024c0:	fb02 f203 	mul.w	r2, r2, r3
 80024c4:	464b      	mov	r3, r9
 80024c6:	4621      	mov	r1, r4
 80024c8:	fb01 f303 	mul.w	r3, r1, r3
 80024cc:	4413      	add	r3, r2
 80024ce:	4622      	mov	r2, r4
 80024d0:	4641      	mov	r1, r8
 80024d2:	fba2 ab01 	umull	sl, fp, r2, r1
 80024d6:	445b      	add	r3, fp
 80024d8:	469b      	mov	fp, r3
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	ea4f 529a 	mov.w	r2, sl, lsr #22
 80024e6:	ea42 228b 	orr.w	r2, r2, fp, lsl #10
 80024ea:	ea4f 539b 	mov.w	r3, fp, lsr #22
 80024ee:	4613      	mov	r3, r2
 80024f0:	e036      	b.n	8002560 <ComputeFreqDeviation+0xec>
  }

  return (uint32_t)(((uint64_t)f_xo*(256+cM))>>(23-cE));
 80024f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f4:	2200      	movs	r2, #0
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024fe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002502:	17da      	asrs	r2, r3, #31
 8002504:	61bb      	str	r3, [r7, #24]
 8002506:	61fa      	str	r2, [r7, #28]
 8002508:	e9d7 0100 	ldrd	r0, r1, [r7]
 800250c:	460b      	mov	r3, r1
 800250e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002512:	4652      	mov	r2, sl
 8002514:	fb02 f203 	mul.w	r2, r2, r3
 8002518:	e9c7 ab06 	strd	sl, fp, [r7, #24]
 800251c:	465b      	mov	r3, fp
 800251e:	4682      	mov	sl, r0
 8002520:	468b      	mov	fp, r1
 8002522:	4651      	mov	r1, sl
 8002524:	fb01 f303 	mul.w	r3, r1, r3
 8002528:	4413      	add	r3, r2
 800252a:	4652      	mov	r2, sl
 800252c:	69b9      	ldr	r1, [r7, #24]
 800252e:	fba2 4501 	umull	r4, r5, r2, r1
 8002532:	442b      	add	r3, r5
 8002534:	461d      	mov	r5, r3
 8002536:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800253a:	f1c3 0317 	rsb	r3, r3, #23
 800253e:	f1c3 0120 	rsb	r1, r3, #32
 8002542:	f1a3 0220 	sub.w	r2, r3, #32
 8002546:	fa24 f803 	lsr.w	r8, r4, r3
 800254a:	fa05 f101 	lsl.w	r1, r5, r1
 800254e:	ea48 0801 	orr.w	r8, r8, r1
 8002552:	fa25 f202 	lsr.w	r2, r5, r2
 8002556:	ea48 0802 	orr.w	r8, r8, r2
 800255a:	fa25 f903 	lsr.w	r9, r5, r3
 800255e:	4643      	mov	r3, r8
}
 8002560:	4618      	mov	r0, r3
 8002562:	3730      	adds	r7, #48	; 0x30
 8002564:	46bd      	mov	sp, r7
 8002566:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800256a:	4770      	bx	lr
 800256c:	02faf080 	.word	0x02faf080

08002570 <SearchFreqDevME>:

void SearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8002570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002574:	b0a2      	sub	sp, #136	; 0x88
 8002576:	af00      	add	r7, sp, #0
 8002578:	65f8      	str	r0, [r7, #92]	; 0x5c
 800257a:	65b9      	str	r1, [r7, #88]	; 0x58
 800257c:	657a      	str	r2, [r7, #84]	; 0x54
  uint8_t uFDevE, bs = 4, refdiv = 1;
 800257e:	2304      	movs	r3, #4
 8002580:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002584:	2301      	movs	r3, #1
 8002586:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  uint32_t lFDevTmp;
  uint64_t tgt1,tgt2,tgt;

  /* Search the exponent of the frequency deviation value */
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 800258a:	2300      	movs	r3, #0
 800258c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8002590:	e012      	b.n	80025b8 <SearchFreqDevME+0x48>
    lFDevTmp = ComputeFreqDeviation(255, uFDevE, bs, refdiv);
 8002592:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8002596:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800259a:	f897 1087 	ldrb.w	r1, [r7, #135]	; 0x87
 800259e:	20ff      	movs	r0, #255	; 0xff
 80025a0:	f7ff ff68 	bl	8002474 <ComputeFreqDeviation>
 80025a4:	6638      	str	r0, [r7, #96]	; 0x60
    if(lFDev<lFDevTmp)
 80025a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80025a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d309      	bcc.n	80025c2 <SearchFreqDevME+0x52>
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 80025ae:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80025b2:	3301      	adds	r3, #1
 80025b4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80025b8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80025bc:	2b0c      	cmp	r3, #12
 80025be:	d1e8      	bne.n	8002592 <SearchFreqDevME+0x22>
 80025c0:	e000      	b.n	80025c4 <SearchFreqDevME+0x54>
      break;
 80025c2:	bf00      	nop
  }
  (*pcE) = (uint8_t)uFDevE;
 80025c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80025c6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80025ca:	7013      	strb	r3, [r2, #0]

  if(uFDevE==0)
 80025cc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d155      	bne.n	8002680 <SearchFreqDevME+0x110>
  {
    tgt=((uint64_t)lFDev)<<22;
 80025d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025d6:	2200      	movs	r2, #0
 80025d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80025da:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80025e8:	4629      	mov	r1, r5
 80025ea:	058b      	lsls	r3, r1, #22
 80025ec:	4621      	mov	r1, r4
 80025ee:	ea43 2391 	orr.w	r3, r3, r1, lsr #10
 80025f2:	4621      	mov	r1, r4
 80025f4:	058a      	lsls	r2, r1, #22
 80025f6:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    (*pcM)=(uint32_t)(tgt/XTAL_FREQ);
 80025fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80025fe:	a36e      	add	r3, pc, #440	; (adr r3, 80027b8 <SearchFreqDevME+0x248>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	f7fe fae0 	bl	8000bc8 <__aeabi_uldivmod>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	b2d3      	uxtb	r3, r2
 800260e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002610:	7013      	strb	r3, [r2, #0]
    tgt1=(uint64_t)XTAL_FREQ*(*pcM);
 8002612:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2200      	movs	r2, #0
 800261a:	633b      	str	r3, [r7, #48]	; 0x30
 800261c:	637a      	str	r2, [r7, #52]	; 0x34
 800261e:	4b68      	ldr	r3, [pc, #416]	; (80027c0 <SearchFreqDevME+0x250>)
 8002620:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002624:	462a      	mov	r2, r5
 8002626:	fb03 f202 	mul.w	r2, r3, r2
 800262a:	2300      	movs	r3, #0
 800262c:	4621      	mov	r1, r4
 800262e:	fb01 f303 	mul.w	r3, r1, r3
 8002632:	4413      	add	r3, r2
 8002634:	4a62      	ldr	r2, [pc, #392]	; (80027c0 <SearchFreqDevME+0x250>)
 8002636:	4621      	mov	r1, r4
 8002638:	fba1 ab02 	umull	sl, fp, r1, r2
 800263c:	445b      	add	r3, fp
 800263e:	469b      	mov	fp, r3
 8002640:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	; 0x78
 8002644:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	; 0x78
    tgt2=(uint64_t)XTAL_FREQ*((*pcM)+1);
 8002648:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	3301      	adds	r3, #1
 800264e:	17da      	asrs	r2, r3, #31
 8002650:	62bb      	str	r3, [r7, #40]	; 0x28
 8002652:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002654:	4b5a      	ldr	r3, [pc, #360]	; (80027c0 <SearchFreqDevME+0x250>)
 8002656:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800265a:	462a      	mov	r2, r5
 800265c:	fb03 f202 	mul.w	r2, r3, r2
 8002660:	2300      	movs	r3, #0
 8002662:	4621      	mov	r1, r4
 8002664:	fb01 f303 	mul.w	r3, r1, r3
 8002668:	4413      	add	r3, r2
 800266a:	4a55      	ldr	r2, [pc, #340]	; (80027c0 <SearchFreqDevME+0x250>)
 800266c:	4621      	mov	r1, r4
 800266e:	fba1 8902 	umull	r8, r9, r1, r2
 8002672:	444b      	add	r3, r9
 8002674:	4699      	mov	r9, r3
 8002676:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
 800267a:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
 800267e:	e06d      	b.n	800275c <SearchFreqDevME+0x1ec>
  }
  else
  {
    tgt=((uint64_t)lFDev)<<(23-uFDevE);
 8002680:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002682:	2200      	movs	r2, #0
 8002684:	623b      	str	r3, [r7, #32]
 8002686:	627a      	str	r2, [r7, #36]	; 0x24
 8002688:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800268c:	f1c3 0117 	rsb	r1, r3, #23
 8002690:	f1a1 0320 	sub.w	r3, r1, #32
 8002694:	f1c1 0220 	rsb	r2, r1, #32
 8002698:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800269c:	4648      	mov	r0, r9
 800269e:	fa00 f501 	lsl.w	r5, r0, r1
 80026a2:	4640      	mov	r0, r8
 80026a4:	fa00 f303 	lsl.w	r3, r0, r3
 80026a8:	431d      	orrs	r5, r3
 80026aa:	4643      	mov	r3, r8
 80026ac:	fa23 f202 	lsr.w	r2, r3, r2
 80026b0:	4315      	orrs	r5, r2
 80026b2:	4643      	mov	r3, r8
 80026b4:	408b      	lsls	r3, r1
 80026b6:	461c      	mov	r4, r3
 80026b8:	e9c7 451a 	strd	r4, r5, [r7, #104]	; 0x68
    (*pcM)=(uint32_t)(tgt/XTAL_FREQ)-256;
 80026bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80026c0:	a33d      	add	r3, pc, #244	; (adr r3, 80027b8 <SearchFreqDevME+0x248>)
 80026c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c6:	f7fe fa7f 	bl	8000bc8 <__aeabi_uldivmod>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	b2d3      	uxtb	r3, r2
 80026d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026d2:	7013      	strb	r3, [r2, #0]
    tgt1=(uint64_t)XTAL_FREQ*((*pcM)+256);
 80026d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80026dc:	17da      	asrs	r2, r3, #31
 80026de:	61bb      	str	r3, [r7, #24]
 80026e0:	61fa      	str	r2, [r7, #28]
 80026e2:	4b37      	ldr	r3, [pc, #220]	; (80027c0 <SearchFreqDevME+0x250>)
 80026e4:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80026e8:	462a      	mov	r2, r5
 80026ea:	fb03 f202 	mul.w	r2, r3, r2
 80026ee:	2300      	movs	r3, #0
 80026f0:	4621      	mov	r1, r4
 80026f2:	fb01 f303 	mul.w	r3, r1, r3
 80026f6:	4413      	add	r3, r2
 80026f8:	4a31      	ldr	r2, [pc, #196]	; (80027c0 <SearchFreqDevME+0x250>)
 80026fa:	4621      	mov	r1, r4
 80026fc:	fba1 1202 	umull	r1, r2, r1, r2
 8002700:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002702:	460a      	mov	r2, r1
 8002704:	64ba      	str	r2, [r7, #72]	; 0x48
 8002706:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002708:	4413      	add	r3, r2
 800270a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800270c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8002710:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8002714:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    tgt2=(uint64_t)XTAL_FREQ*((*pcM)+1+256);
 8002718:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	f203 1301 	addw	r3, r3, #257	; 0x101
 8002720:	17da      	asrs	r2, r3, #31
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	617a      	str	r2, [r7, #20]
 8002726:	4b26      	ldr	r3, [pc, #152]	; (80027c0 <SearchFreqDevME+0x250>)
 8002728:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800272c:	462a      	mov	r2, r5
 800272e:	fb03 f202 	mul.w	r2, r3, r2
 8002732:	2300      	movs	r3, #0
 8002734:	4621      	mov	r1, r4
 8002736:	fb01 f303 	mul.w	r3, r1, r3
 800273a:	4413      	add	r3, r2
 800273c:	4a20      	ldr	r2, [pc, #128]	; (80027c0 <SearchFreqDevME+0x250>)
 800273e:	4621      	mov	r1, r4
 8002740:	fba1 1202 	umull	r1, r2, r1, r2
 8002744:	647a      	str	r2, [r7, #68]	; 0x44
 8002746:	460a      	mov	r2, r1
 8002748:	643a      	str	r2, [r7, #64]	; 0x40
 800274a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800274c:	4413      	add	r3, r2
 800274e:	647b      	str	r3, [r7, #68]	; 0x44
 8002750:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002754:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 8002758:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
  }

  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 800275c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002760:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002764:	1a84      	subs	r4, r0, r2
 8002766:	60bc      	str	r4, [r7, #8]
 8002768:	eb61 0303 	sbc.w	r3, r1, r3
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002772:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002776:	1a84      	subs	r4, r0, r2
 8002778:	603c      	str	r4, [r7, #0]
 800277a:	eb61 0303 	sbc.w	r3, r1, r3
 800277e:	607b      	str	r3, [r7, #4]
 8002780:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002784:	4623      	mov	r3, r4
 8002786:	e9d7 0100 	ldrd	r0, r1, [r7]
 800278a:	4602      	mov	r2, r0
 800278c:	4293      	cmp	r3, r2
 800278e:	462b      	mov	r3, r5
 8002790:	460a      	mov	r2, r1
 8002792:	4193      	sbcs	r3, r2
 8002794:	d204      	bcs.n	80027a0 <SearchFreqDevME+0x230>
 8002796:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	3301      	adds	r3, #1
 800279c:	b2db      	uxtb	r3, r3
 800279e:	e001      	b.n	80027a4 <SearchFreqDevME+0x234>
 80027a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027a6:	7013      	strb	r3, [r2, #0]
}
 80027a8:	bf00      	nop
 80027aa:	3788      	adds	r7, #136	; 0x88
 80027ac:	46bd      	mov	sp, r7
 80027ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027b2:	bf00      	nop
 80027b4:	f3af 8000 	nop.w
 80027b8:	02faf080 	.word	0x02faf080
 80027bc:	00000000 	.word	0x00000000
 80027c0:	02faf080 	.word	0x02faf080

080027c4 <S2LP_SetModulation>:
*         [100 500000].
*         Frequency deviation expressed in Hz.
* @retval None.
*/
void S2LP_SetModulation(uint8_t mod_type, uint32_t datarate, uint32_t fdev)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	73fb      	strb	r3, [r7, #15]
  uint8_t dr_e;
  uint16_t dr_m;
  uint8_t uFDevM, uFDevE;

  /* Calculates the datarate mantissa and exponent */
  SearchDatarateME(datarate, &dr_m, &dr_e);
 80027d2:	f107 0217 	add.w	r2, r7, #23
 80027d6:	f107 0314 	add.w	r3, r7, #20
 80027da:	4619      	mov	r1, r3
 80027dc:	68b8      	ldr	r0, [r7, #8]
 80027de:	f7ff fcef 	bl	80021c0 <SearchDatarateME>
  /* Calculates the frequency deviation mantissa and exponent */
  SearchFreqDevME(fdev, &uFDevM, &uFDevE);
 80027e2:	f107 0212 	add.w	r2, r7, #18
 80027e6:	f107 0313 	add.w	r3, r7, #19
 80027ea:	4619      	mov	r1, r3
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff febf 	bl	8002570 <SearchFreqDevME>

  S2LP_WriteReg(MOD4_ADDR, (uint8_t)(dr_m >> 8), NULL);
 80027f2:	8abb      	ldrh	r3, [r7, #20]
 80027f4:	0a1b      	lsrs	r3, r3, #8
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2200      	movs	r2, #0
 80027fc:	4619      	mov	r1, r3
 80027fe:	200e      	movs	r0, #14
 8002800:	f7ff f8c4 	bl	800198c <S2LP_WriteReg>
  S2LP_WriteReg(MOD3_ADDR, (uint8_t)dr_m, NULL);
 8002804:	8abb      	ldrh	r3, [r7, #20]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2200      	movs	r2, #0
 800280a:	4619      	mov	r1, r3
 800280c:	200f      	movs	r0, #15
 800280e:	f7ff f8bd 	bl	800198c <S2LP_WriteReg>
  S2LP_WriteReg(MOD2_ADDR, mod_type | dr_e, NULL);
 8002812:	7dfa      	ldrb	r2, [r7, #23]
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	4313      	orrs	r3, r2
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2200      	movs	r2, #0
 800281c:	4619      	mov	r1, r3
 800281e:	2010      	movs	r0, #16
 8002820:	f7ff f8b4 	bl	800198c <S2LP_WriteReg>

  S2LP_WriteReg(MOD0_ADDR, uFDevM, NULL);
 8002824:	7cfb      	ldrb	r3, [r7, #19]
 8002826:	2200      	movs	r2, #0
 8002828:	4619      	mov	r1, r3
 800282a:	2012      	movs	r0, #18
 800282c:	f7ff f8ae 	bl	800198c <S2LP_WriteReg>
  S2LP_WriteReg(MOD1_ADDR, uFDevE, NULL);
 8002830:	7cbb      	ldrb	r3, [r7, #18]
 8002832:	2200      	movs	r2, #0
 8002834:	4619      	mov	r1, r3
 8002836:	2011      	movs	r0, #17
 8002838:	f7ff f8a8 	bl	800198c <S2LP_WriteReg>
}
 800283c:	bf00      	nop
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <S2LP_SetPALeveldBm>:

void S2LP_SetPALeveldBm(int32_t lPowerdBm)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint8_t paLevelValue;
  if(lPowerdBm> 14)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b0e      	cmp	r3, #14
 8002850:	dd02      	ble.n	8002858 <S2LP_SetPALeveldBm+0x14>
  {
    paLevelValue = 1;
 8002852:	2301      	movs	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
 8002856:	e006      	b.n	8002866 <S2LP_SetPALeveldBm+0x22>
  }
  else {
    paLevelValue = (uint8_t)((int32_t)29-2*lPowerdBm);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	b2db      	uxtb	r3, r3
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	b2db      	uxtb	r3, r3
 8002860:	f1c3 031d 	rsb	r3, r3, #29
 8002864:	73fb      	strb	r3, [r7, #15]
  }

  S2LP_WriteReg(PA_POWER0_ADDR, 0, NULL);
 8002866:	2200      	movs	r2, #0
 8002868:	2100      	movs	r1, #0
 800286a:	2062      	movs	r0, #98	; 0x62
 800286c:	f7ff f88e 	bl	800198c <S2LP_WriteReg>
  S2LP_WriteReg(PA_CONFIG1_ADDR+1, 0, NULL); // disable degeneration mode
 8002870:	2200      	movs	r2, #0
 8002872:	2100      	movs	r1, #0
 8002874:	2064      	movs	r0, #100	; 0x64
 8002876:	f7ff f889 	bl	800198c <S2LP_WriteReg>
  S2LP_WriteReg(PA_CONFIG1_ADDR, 0, NULL); // disable Tx Bessel FIR
 800287a:	2200      	movs	r2, #0
 800287c:	2100      	movs	r1, #0
 800287e:	2063      	movs	r0, #99	; 0x63
 8002880:	f7ff f884 	bl	800198c <S2LP_WriteReg>
  S2LP_WriteReg(PA_POWER1_ADDR, paLevelValue, NULL);
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	2200      	movs	r2, #0
 8002888:	4619      	mov	r1, r3
 800288a:	2061      	movs	r0, #97	; 0x61
 800288c:	f7ff f87e 	bl	800198c <S2LP_WriteReg>
}
 8002890:	bf00      	nop
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <S2LP_Init>:

	return HAL_OK;
}

HAL_StatusTypeDef S2LP_Init(SPI_HandleTypeDef *spi_handle)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
	gSPI = spi_handle;
 80028a0:	4a48      	ldr	r2, [pc, #288]	; (80029c4 <S2LP_Init+0x12c>)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6013      	str	r3, [r2, #0]
	uint32_t ncycles_start = HAL_RCC_GetHCLKFreq()/9600;
 80028a6:	f002 ff47 	bl	8005738 <HAL_RCC_GetHCLKFreq>
 80028aa:	4603      	mov	r3, r0
 80028ac:	4a46      	ldr	r2, [pc, #280]	; (80029c8 <S2LP_Init+0x130>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	0a9b      	lsrs	r3, r3, #10
 80028b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80028b6:	b672      	cpsid	i
}
 80028b8:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_RESET); // Power up S2LP
 80028ba:	2200      	movs	r2, #0
 80028bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028c0:	4842      	ldr	r0, [pc, #264]	; (80029cc <S2LP_Init+0x134>)
 80028c2:	f002 f8ef 	bl	8004aa4 <HAL_GPIO_WritePin>
	for(uint32_t i=0; i < ncycles_start; i++) // Wait for S2LP to start
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	e003      	b.n	80028d4 <S2LP_Init+0x3c>
		asm volatile("nop");
 80028cc:	bf00      	nop
	for(uint32_t i=0; i < ncycles_start; i++) // Wait for S2LP to start
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	3301      	adds	r3, #1
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d3f7      	bcc.n	80028cc <S2LP_Init+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
 80028dc:	b662      	cpsie	i
}
 80028de:	bf00      	nop
	__enable_irq();

	S2LP_WriteReg(GPIO0_CONF_ADDR, 3, NULL); // Set GPIO as interrupt line
 80028e0:	2200      	movs	r2, #0
 80028e2:	2103      	movs	r1, #3
 80028e4:	2000      	movs	r0, #0
 80028e6:	f7ff f851 	bl	800198c <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK0_ADDR, 0x80 | 0x20 | 0x04, NULL); // Enable "Tx Data sent" and "TX FIFO almost full" interrupts
 80028ea:	2200      	movs	r2, #0
 80028ec:	21a4      	movs	r1, #164	; 0xa4
 80028ee:	2053      	movs	r0, #83	; 0x53
 80028f0:	f7ff f84c 	bl	800198c <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK1_ADDR, 0x01, NULL); // Enable "TX FIFO almost empty" interrupt
 80028f4:	2200      	movs	r2, #0
 80028f6:	2101      	movs	r1, #1
 80028f8:	2052      	movs	r0, #82	; 0x52
 80028fa:	f7ff f847 	bl	800198c <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK2_ADDR, 0x00, NULL);
 80028fe:	2200      	movs	r2, #0
 8002900:	2100      	movs	r1, #0
 8002902:	2051      	movs	r0, #81	; 0x51
 8002904:	f7ff f842 	bl	800198c <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK3_ADDR, 0x00, NULL);
 8002908:	2200      	movs	r2, #0
 800290a:	2100      	movs	r1, #0
 800290c:	2050      	movs	r0, #80	; 0x50
 800290e:	f7ff f83d 	bl	800198c <S2LP_WriteReg>
	S2LP_WriteReg(FIFO_CONFIG0_ADDR, FIFO_EMPTY_THRESH * FIFO_CHUNK_SIZE, NULL);
 8002912:	2200      	movs	r2, #0
 8002914:	2120      	movs	r1, #32
 8002916:	203f      	movs	r0, #63	; 0x3f
 8002918:	f7ff f838 	bl	800198c <S2LP_WriteReg>

	// Change sync word bytes
	S2LP_WriteReg(SYNC3_ADDR, 0xB7, NULL);
 800291c:	2200      	movs	r2, #0
 800291e:	21b7      	movs	r1, #183	; 0xb7
 8002920:	2033      	movs	r0, #51	; 0x33
 8002922:	f7ff f833 	bl	800198c <S2LP_WriteReg>
	S2LP_WriteReg(SYNC2_ADDR, 0x54, NULL);
 8002926:	2200      	movs	r2, #0
 8002928:	2154      	movs	r1, #84	; 0x54
 800292a:	2034      	movs	r0, #52	; 0x34
 800292c:	f7ff f82e 	bl	800198c <S2LP_WriteReg>
	S2LP_WriteReg(SYNC1_ADDR, 0x2A, NULL);
 8002930:	2200      	movs	r2, #0
 8002932:	212a      	movs	r1, #42	; 0x2a
 8002934:	2035      	movs	r0, #53	; 0x35
 8002936:	f7ff f829 	bl	800198c <S2LP_WriteReg>
	S2LP_WriteReg(SYNC0_ADDR, 0x3E, NULL);
 800293a:	2200      	movs	r2, #0
 800293c:	213e      	movs	r1, #62	; 0x3e
 800293e:	2036      	movs	r0, #54	; 0x36
 8002940:	f7ff f824 	bl	800198c <S2LP_WriteReg>

	// PLL and PA configuration
	S2LP_PLLConf(BASE_FREQ);
 8002944:	4822      	ldr	r0, [pc, #136]	; (80029d0 <S2LP_Init+0x138>)
 8002946:	f7ff fa8f 	bl	8001e68 <S2LP_PLLConf>
	S2LP_SetPALeveldBm(PA_LEVEL);
 800294a:	2000      	movs	r0, #0
 800294c:	f7ff ff7a 	bl	8002844 <S2LP_SetPALeveldBm>

	// Modulation and packet configuration
	S2LP_SetModulation(MOD_2FSK, DATARATE, FREQDEV);
 8002950:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8002954:	f24c 3150 	movw	r1, #50000	; 0xc350
 8002958:	2000      	movs	r0, #0
 800295a:	f7ff ff33 	bl	80027c4 <S2LP_SetModulation>
	S2LP_WriteReg(PCKTCTRL1_ADDR, 0x20, NULL); // No whitening, CRC with poly 0x07
 800295e:	2200      	movs	r2, #0
 8002960:	2120      	movs	r1, #32
 8002962:	2030      	movs	r0, #48	; 0x30
 8002964:	f7ff f812 	bl	800198c <S2LP_WriteReg>
	S2LP_WriteReg(PCKTCTRL3_ADDR, 0x00, NULL); // Enable basic packet structure
 8002968:	2200      	movs	r2, #0
 800296a:	2100      	movs	r1, #0
 800296c:	202e      	movs	r0, #46	; 0x2e
 800296e:	f7ff f80d 	bl	800198c <S2LP_WriteReg>

	S2LPStatus radio_status;
	uint8_t rco_conf;
	HAL_StatusTypeDef err = S2LP_ReadReg(XO_RCO_CONF1_ADDR, &rco_conf, &radio_status); // fetch radio state
 8002972:	f107 020c 	add.w	r2, r7, #12
 8002976:	f107 030b 	add.w	r3, r7, #11
 800297a:	4619      	mov	r1, r3
 800297c:	206c      	movs	r0, #108	; 0x6c
 800297e:	f7fe ffc7 	bl	8001910 <S2LP_ReadReg>
 8002982:	4603      	mov	r3, r0
 8002984:	73fb      	strb	r3, [r7, #15]
	if (err) {
 8002986:	7bfb      	ldrb	r3, [r7, #15]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <S2LP_Init+0xf8>
		return err;
 800298c:	7bfb      	ldrb	r3, [r7, #15]
 800298e:	e015      	b.n	80029bc <S2LP_Init+0x124>
	} else if (rco_conf != 0x45) {
 8002990:	7afb      	ldrb	r3, [r7, #11]
 8002992:	2b45      	cmp	r3, #69	; 0x45
 8002994:	d006      	beq.n	80029a4 <S2LP_Init+0x10c>
		DEBUG_PRINT("[S2LP] Error: XO_RCO_CONF1 register is invalid (0x%X instead of 0x45), faulty SPI bus?\r\n", rco_conf);
 8002996:	7afb      	ldrb	r3, [r7, #11]
 8002998:	4619      	mov	r1, r3
 800299a:	480e      	ldr	r0, [pc, #56]	; (80029d4 <S2LP_Init+0x13c>)
 800299c:	f006 f888 	bl	8008ab0 <iprintf>
		return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e00b      	b.n	80029bc <S2LP_Init+0x124>
	}

	if (radio_status.MC_STATE != MC_STATE_READY) {
 80029a4:	7b7b      	ldrb	r3, [r7, #13]
 80029a6:	f023 0301 	bic.w	r3, r3, #1
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d004      	beq.n	80029ba <S2LP_Init+0x122>
		DEBUG_PRINT("[S2LP] Error: radio is not ready after initialization\r\n");
 80029b0:	4809      	ldr	r0, [pc, #36]	; (80029d8 <S2LP_Init+0x140>)
 80029b2:	f006 f8e3 	bl	8008b7c <puts>
		return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <S2LP_Init+0x124>
	}

	return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	200002a8 	.word	0x200002a8
 80029c8:	1b4e81b5 	.word	0x1b4e81b5
 80029cc:	48001400 	.word	0x48001400
 80029d0:	33db2580 	.word	0x33db2580
 80029d4:	0800afa0 	.word	0x0800afa0
 80029d8:	0800affc 	.word	0x0800affc

080029dc <S2LP_IRQ_Handler>:

void S2LP_IRQ_Handler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
	uint8_t irq_status1, irq_status0;
	S2LP_ReadReg(IRQ_STATUS1_ADDR, &irq_status1, NULL);
 80029e2:	1dfb      	adds	r3, r7, #7
 80029e4:	2200      	movs	r2, #0
 80029e6:	4619      	mov	r1, r3
 80029e8:	20fc      	movs	r0, #252	; 0xfc
 80029ea:	f7fe ff91 	bl	8001910 <S2LP_ReadReg>
	S2LP_ReadReg(IRQ_STATUS0_ADDR, &irq_status0, NULL);
 80029ee:	1dbb      	adds	r3, r7, #6
 80029f0:	2200      	movs	r2, #0
 80029f2:	4619      	mov	r1, r3
 80029f4:	20fd      	movs	r0, #253	; 0xfd
 80029f6:	f7fe ff8b 	bl	8001910 <S2LP_ReadReg>

	if (irq_status1 & 0x01) // TX FIFO almost empty
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d002      	beq.n	8002a0a <S2LP_IRQ_Handler+0x2e>
		fifo_almost_empty = 1;
 8002a04:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <S2LP_IRQ_Handler+0x58>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	701a      	strb	r2, [r3, #0]

	if (irq_status0 & 0x20) // TX/RX FIFO underflow or overflow
 8002a0a:	79bb      	ldrb	r3, [r7, #6]
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d002      	beq.n	8002a1a <S2LP_IRQ_Handler+0x3e>
		underflow = 1;
 8002a14:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <S2LP_IRQ_Handler+0x5c>)
 8002a16:	2201      	movs	r2, #1
 8002a18:	701a      	strb	r2, [r3, #0]

	if (irq_status0 & 0x04) // Packet transmitted
 8002a1a:	79bb      	ldrb	r3, [r7, #6]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d002      	beq.n	8002a2a <S2LP_IRQ_Handler+0x4e>
		packet_sent = 1;
 8002a24:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <S2LP_IRQ_Handler+0x60>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	701a      	strb	r2, [r3, #0]
}
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	200002ad 	.word	0x200002ad
 8002a38:	200002ae 	.word	0x200002ae
 8002a3c:	200002ac 	.word	0x200002ac

08002a40 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002a44:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002a46:	4a1c      	ldr	r2, [pc, #112]	; (8002ab8 <MX_SPI1_Init+0x78>)
 8002a48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a4a:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002a4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a52:	4b18      	ldr	r3, [pc, #96]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a58:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002a5a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a5e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a60:	4b14      	ldr	r3, [pc, #80]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a66:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a6c:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a72:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002a74:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002a76:	2208      	movs	r2, #8
 8002a78:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a86:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002a8c:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002a8e:	2207      	movs	r2, #7
 8002a90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a92:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002a9a:	2208      	movs	r2, #8
 8002a9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a9e:	4805      	ldr	r0, [pc, #20]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002aa0:	f003 fbac 	bl	80061fc <HAL_SPI_Init>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002aaa:	f7fe fdfd 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200002b0 	.word	0x200002b0
 8002ab8:	40013000 	.word	0x40013000

08002abc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	; 0x28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a26      	ldr	r2, [pc, #152]	; (8002b74 <HAL_SPI_MspInit+0xb8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d145      	bne.n	8002b6a <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ade:	4b26      	ldr	r3, [pc, #152]	; (8002b78 <HAL_SPI_MspInit+0xbc>)
 8002ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae2:	4a25      	ldr	r2, [pc, #148]	; (8002b78 <HAL_SPI_MspInit+0xbc>)
 8002ae4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ae8:	6613      	str	r3, [r2, #96]	; 0x60
 8002aea:	4b23      	ldr	r3, [pc, #140]	; (8002b78 <HAL_SPI_MspInit+0xbc>)
 8002aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af6:	4b20      	ldr	r3, [pc, #128]	; (8002b78 <HAL_SPI_MspInit+0xbc>)
 8002af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afa:	4a1f      	ldr	r2, [pc, #124]	; (8002b78 <HAL_SPI_MspInit+0xbc>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b02:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <HAL_SPI_MspInit+0xbc>)
 8002b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b0e:	4b1a      	ldr	r3, [pc, #104]	; (8002b78 <HAL_SPI_MspInit+0xbc>)
 8002b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b12:	4a19      	ldr	r2, [pc, #100]	; (8002b78 <HAL_SPI_MspInit+0xbc>)
 8002b14:	f043 0310 	orr.w	r3, r3, #16
 8002b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b1a:	4b17      	ldr	r3, [pc, #92]	; (8002b78 <HAL_SPI_MspInit+0xbc>)
 8002b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	60bb      	str	r3, [r7, #8]
 8002b24:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PE13     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b26:	23c0      	movs	r3, #192	; 0xc0
 8002b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b32:	2303      	movs	r3, #3
 8002b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b36:	2305      	movs	r3, #5
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3a:	f107 0314 	add.w	r3, r7, #20
 8002b3e:	4619      	mov	r1, r3
 8002b40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b44:	f001 fe1c 	bl	8004780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002b48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b56:	2303      	movs	r3, #3
 8002b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b5a:	2305      	movs	r3, #5
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b5e:	f107 0314 	add.w	r3, r7, #20
 8002b62:	4619      	mov	r1, r3
 8002b64:	4805      	ldr	r0, [pc, #20]	; (8002b7c <HAL_SPI_MspInit+0xc0>)
 8002b66:	f001 fe0b 	bl	8004780 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002b6a:	bf00      	nop
 8002b6c:	3728      	adds	r7, #40	; 0x28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40013000 	.word	0x40013000
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	48001000 	.word	0x48001000

08002b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b86:	4b0f      	ldr	r3, [pc, #60]	; (8002bc4 <HAL_MspInit+0x44>)
 8002b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b8a:	4a0e      	ldr	r2, [pc, #56]	; (8002bc4 <HAL_MspInit+0x44>)
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	6613      	str	r3, [r2, #96]	; 0x60
 8002b92:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <HAL_MspInit+0x44>)
 8002b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	607b      	str	r3, [r7, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <HAL_MspInit+0x44>)
 8002ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba2:	4a08      	ldr	r2, [pc, #32]	; (8002bc4 <HAL_MspInit+0x44>)
 8002ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba8:	6593      	str	r3, [r2, #88]	; 0x58
 8002baa:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <HAL_MspInit+0x44>)
 8002bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb2:	603b      	str	r3, [r7, #0]
 8002bb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000

08002bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bcc:	e7fe      	b.n	8002bcc <NMI_Handler+0x4>

08002bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bd2:	e7fe      	b.n	8002bd2 <HardFault_Handler+0x4>

08002bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bd8:	e7fe      	b.n	8002bd8 <MemManage_Handler+0x4>

08002bda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bde:	e7fe      	b.n	8002bde <BusFault_Handler+0x4>

08002be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002be4:	e7fe      	b.n	8002be4 <UsageFault_Handler+0x4>

08002be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bf8:	bf00      	nop
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c02:	b480      	push	{r7}
 8002c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c14:	f000 fa0e 	bl	8003034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c18:	bf00      	nop
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RADIO_INT_Pin);
 8002c20:	2008      	movs	r0, #8
 8002c22:	f001 ff57 	bl	8004ad4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c30:	4802      	ldr	r0, [pc, #8]	; (8002c3c <DMA1_Channel1_IRQHandler+0x10>)
 8002c32:	f001 fcf5 	bl	8004620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000258 	.word	0x20000258

08002c40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c44:	4802      	ldr	r0, [pc, #8]	; (8002c50 <TIM3_IRQHandler+0x10>)
 8002c46:	f003 ffc3 	bl	8006bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20000318 	.word	0x20000318

08002c54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002c58:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c5c:	f001 ff3a 	bl	8004ad4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c60:	bf00      	nop
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c6c:	4a14      	ldr	r2, [pc, #80]	; (8002cc0 <_sbrk+0x5c>)
 8002c6e:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <_sbrk+0x60>)
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c78:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <_sbrk+0x64>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d102      	bne.n	8002c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c80:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <_sbrk+0x64>)
 8002c82:	4a12      	ldr	r2, [pc, #72]	; (8002ccc <_sbrk+0x68>)
 8002c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c86:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <_sbrk+0x64>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d207      	bcs.n	8002ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c94:	f006 f952 	bl	8008f3c <__errno>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	220c      	movs	r2, #12
 8002c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ca2:	e009      	b.n	8002cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ca4:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <_sbrk+0x64>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002caa:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <_sbrk+0x64>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	4a05      	ldr	r2, [pc, #20]	; (8002cc8 <_sbrk+0x64>)
 8002cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	20050000 	.word	0x20050000
 8002cc4:	00000400 	.word	0x00000400
 8002cc8:	20000314 	.word	0x20000314
 8002ccc:	20000540 	.word	0x20000540

08002cd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002cd4:	4b15      	ldr	r3, [pc, #84]	; (8002d2c <SystemInit+0x5c>)
 8002cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cda:	4a14      	ldr	r2, [pc, #80]	; (8002d2c <SystemInit+0x5c>)
 8002cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002ce4:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <SystemInit+0x60>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a11      	ldr	r2, [pc, #68]	; (8002d30 <SystemInit+0x60>)
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002cf0:	4b0f      	ldr	r3, [pc, #60]	; (8002d30 <SystemInit+0x60>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002cf6:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <SystemInit+0x60>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a0d      	ldr	r2, [pc, #52]	; (8002d30 <SystemInit+0x60>)
 8002cfc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002d00:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002d04:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002d06:	4b0a      	ldr	r3, [pc, #40]	; (8002d30 <SystemInit+0x60>)
 8002d08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d0c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d0e:	4b08      	ldr	r3, [pc, #32]	; (8002d30 <SystemInit+0x60>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a07      	ldr	r2, [pc, #28]	; (8002d30 <SystemInit+0x60>)
 8002d14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d18:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002d1a:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <SystemInit+0x60>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	619a      	str	r2, [r3, #24]
}
 8002d20:	bf00      	nop
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	e000ed00 	.word	0xe000ed00
 8002d30:	40021000 	.word	0x40021000

08002d34 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d3a:	f107 0310 	add.w	r3, r7, #16
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	605a      	str	r2, [r3, #4]
 8002d44:	609a      	str	r2, [r3, #8]
 8002d46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d48:	1d3b      	adds	r3, r7, #4
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	605a      	str	r2, [r3, #4]
 8002d50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d52:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <MX_TIM3_Init+0x94>)
 8002d54:	4a1d      	ldr	r2, [pc, #116]	; (8002dcc <MX_TIM3_Init+0x98>)
 8002d56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5;
 8002d58:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <MX_TIM3_Init+0x94>)
 8002d5a:	2205      	movs	r2, #5
 8002d5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d5e:	4b1a      	ldr	r3, [pc, #104]	; (8002dc8 <MX_TIM3_Init+0x94>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 195;
 8002d64:	4b18      	ldr	r3, [pc, #96]	; (8002dc8 <MX_TIM3_Init+0x94>)
 8002d66:	22c3      	movs	r2, #195	; 0xc3
 8002d68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d6a:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <MX_TIM3_Init+0x94>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d70:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <MX_TIM3_Init+0x94>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d76:	4814      	ldr	r0, [pc, #80]	; (8002dc8 <MX_TIM3_Init+0x94>)
 8002d78:	f003 fe6a 	bl	8006a50 <HAL_TIM_Base_Init>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002d82:	f7fe fc91 	bl	80016a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d8a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d8c:	f107 0310 	add.w	r3, r7, #16
 8002d90:	4619      	mov	r1, r3
 8002d92:	480d      	ldr	r0, [pc, #52]	; (8002dc8 <MX_TIM3_Init+0x94>)
 8002d94:	f004 f81e 	bl	8006dd4 <HAL_TIM_ConfigClockSource>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002d9e:	f7fe fc83 	bl	80016a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002da2:	2320      	movs	r3, #32
 8002da4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002daa:	1d3b      	adds	r3, r7, #4
 8002dac:	4619      	mov	r1, r3
 8002dae:	4806      	ldr	r0, [pc, #24]	; (8002dc8 <MX_TIM3_Init+0x94>)
 8002db0:	f004 fa40 	bl	8007234 <HAL_TIMEx_MasterConfigSynchronization>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002dba:	f7fe fc75 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002dbe:	bf00      	nop
 8002dc0:	3720      	adds	r7, #32
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	20000318 	.word	0x20000318
 8002dcc:	40000400 	.word	0x40000400

08002dd0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a0d      	ldr	r2, [pc, #52]	; (8002e14 <HAL_TIM_Base_MspInit+0x44>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d113      	bne.n	8002e0a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002de2:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <HAL_TIM_Base_MspInit+0x48>)
 8002de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de6:	4a0c      	ldr	r2, [pc, #48]	; (8002e18 <HAL_TIM_Base_MspInit+0x48>)
 8002de8:	f043 0302 	orr.w	r3, r3, #2
 8002dec:	6593      	str	r3, [r2, #88]	; 0x58
 8002dee:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <HAL_TIM_Base_MspInit+0x48>)
 8002df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	201d      	movs	r0, #29
 8002e00:	f001 fb1f 	bl	8004442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e04:	201d      	movs	r0, #29
 8002e06:	f001 fb38 	bl	800447a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002e0a:	bf00      	nop
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40000400 	.word	0x40000400
 8002e18:	40021000 	.word	0x40021000

08002e1c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002e20:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <MX_LPUART1_UART_Init+0x50>)
 8002e22:	4a13      	ldr	r2, [pc, #76]	; (8002e70 <MX_LPUART1_UART_Init+0x54>)
 8002e24:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002e26:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <MX_LPUART1_UART_Init+0x50>)
 8002e28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e2c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e2e:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <MX_LPUART1_UART_Init+0x50>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002e34:	4b0d      	ldr	r3, [pc, #52]	; (8002e6c <MX_LPUART1_UART_Init+0x50>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002e3a:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <MX_LPUART1_UART_Init+0x50>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002e40:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <MX_LPUART1_UART_Init+0x50>)
 8002e42:	220c      	movs	r2, #12
 8002e44:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e46:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <MX_LPUART1_UART_Init+0x50>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e4c:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <MX_LPUART1_UART_Init+0x50>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e52:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <MX_LPUART1_UART_Init+0x50>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002e58:	4804      	ldr	r0, [pc, #16]	; (8002e6c <MX_LPUART1_UART_Init+0x50>)
 8002e5a:	f004 fa91 	bl	8007380 <HAL_UART_Init>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8002e64:	f7fe fc20 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002e68:	bf00      	nop
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	20000364 	.word	0x20000364
 8002e70:	40008000 	.word	0x40008000

08002e74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b0ac      	sub	sp, #176	; 0xb0
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	605a      	str	r2, [r3, #4]
 8002e86:	609a      	str	r2, [r3, #8]
 8002e88:	60da      	str	r2, [r3, #12]
 8002e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e8c:	f107 0310 	add.w	r3, r7, #16
 8002e90:	228c      	movs	r2, #140	; 0x8c
 8002e92:	2100      	movs	r1, #0
 8002e94:	4618      	mov	r0, r3
 8002e96:	f005 ffff 	bl	8008e98 <memset>
  if(uartHandle->Instance==LPUART1)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a23      	ldr	r2, [pc, #140]	; (8002f2c <HAL_UART_MspInit+0xb8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d13e      	bne.n	8002f22 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002ea4:	2320      	movs	r3, #32
 8002ea6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_SYSCLK;
 8002ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eac:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002eae:	f107 0310 	add.w	r3, r7, #16
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f002 fcd8 	bl	8005868 <HAL_RCCEx_PeriphCLKConfig>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002ebe:	f7fe fbf3 	bl	80016a8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002ec2:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <HAL_UART_MspInit+0xbc>)
 8002ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec6:	4a1a      	ldr	r2, [pc, #104]	; (8002f30 <HAL_UART_MspInit+0xbc>)
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002ece:	4b18      	ldr	r3, [pc, #96]	; (8002f30 <HAL_UART_MspInit+0xbc>)
 8002ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002eda:	4b15      	ldr	r3, [pc, #84]	; (8002f30 <HAL_UART_MspInit+0xbc>)
 8002edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ede:	4a14      	ldr	r2, [pc, #80]	; (8002f30 <HAL_UART_MspInit+0xbc>)
 8002ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ee6:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <HAL_UART_MspInit+0xbc>)
 8002ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8002ef2:	f001 fe6b 	bl	8004bcc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002ef6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002efa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efe:	2302      	movs	r3, #2
 8002f00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002f10:	2308      	movs	r3, #8
 8002f12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f16:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4805      	ldr	r0, [pc, #20]	; (8002f34 <HAL_UART_MspInit+0xc0>)
 8002f1e:	f001 fc2f 	bl	8004780 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8002f22:	bf00      	nop
 8002f24:	37b0      	adds	r7, #176	; 0xb0
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40008000 	.word	0x40008000
 8002f30:	40021000 	.word	0x40021000
 8002f34:	48001800 	.word	0x48001800

08002f38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002f38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f3c:	f7ff fec8 	bl	8002cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002f40:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002f42:	e003      	b.n	8002f4c <LoopCopyDataInit>

08002f44 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002f44:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002f46:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002f48:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002f4a:	3104      	adds	r1, #4

08002f4c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002f4c:	480a      	ldr	r0, [pc, #40]	; (8002f78 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002f4e:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002f50:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002f52:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002f54:	d3f6      	bcc.n	8002f44 <CopyDataInit>
	ldr	r2, =_sbss
 8002f56:	4a0a      	ldr	r2, [pc, #40]	; (8002f80 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002f58:	e002      	b.n	8002f60 <LoopFillZerobss>

08002f5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002f5a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002f5c:	f842 3b04 	str.w	r3, [r2], #4

08002f60 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002f60:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <LoopForever+0x16>)
	cmp	r2, r3
 8002f62:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002f64:	d3f9      	bcc.n	8002f5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f66:	f005 ffef 	bl	8008f48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f6a:	f7fe fafb 	bl	8001564 <main>

08002f6e <LoopForever>:

LoopForever:
    b LoopForever
 8002f6e:	e7fe      	b.n	8002f6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002f70:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8002f74:	0800b3fc 	.word	0x0800b3fc
	ldr	r0, =_sdata
 8002f78:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002f7c:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 8002f80:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 8002f84:	2000053c 	.word	0x2000053c

08002f88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f88:	e7fe      	b.n	8002f88 <ADC1_2_IRQHandler>

08002f8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f94:	2003      	movs	r0, #3
 8002f96:	f001 fa49 	bl	800442c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	f000 f80e 	bl	8002fbc <HAL_InitTick>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	71fb      	strb	r3, [r7, #7]
 8002faa:	e001      	b.n	8002fb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002fac:	f7ff fde8 	bl	8002b80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002fc8:	4b17      	ldr	r3, [pc, #92]	; (8003028 <HAL_InitTick+0x6c>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d023      	beq.n	8003018 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002fd0:	4b16      	ldr	r3, [pc, #88]	; (800302c <HAL_InitTick+0x70>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4b14      	ldr	r3, [pc, #80]	; (8003028 <HAL_InitTick+0x6c>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f001 fa55 	bl	8004496 <HAL_SYSTICK_Config>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10f      	bne.n	8003012 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b0f      	cmp	r3, #15
 8002ff6:	d809      	bhi.n	800300c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003000:	f001 fa1f 	bl	8004442 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003004:	4a0a      	ldr	r2, [pc, #40]	; (8003030 <HAL_InitTick+0x74>)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	e007      	b.n	800301c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	73fb      	strb	r3, [r7, #15]
 8003010:	e004      	b.n	800301c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	73fb      	strb	r3, [r7, #15]
 8003016:	e001      	b.n	800301c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800301c:	7bfb      	ldrb	r3, [r7, #15]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20000008 	.word	0x20000008
 800302c:	20000000 	.word	0x20000000
 8003030:	20000004 	.word	0x20000004

08003034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003038:	4b06      	ldr	r3, [pc, #24]	; (8003054 <HAL_IncTick+0x20>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_IncTick+0x24>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4413      	add	r3, r2
 8003044:	4a04      	ldr	r2, [pc, #16]	; (8003058 <HAL_IncTick+0x24>)
 8003046:	6013      	str	r3, [r2, #0]
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	20000008 	.word	0x20000008
 8003058:	200003ec 	.word	0x200003ec

0800305c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return uwTick;
 8003060:	4b03      	ldr	r3, [pc, #12]	; (8003070 <HAL_GetTick+0x14>)
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	200003ec 	.word	0x200003ec

08003074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800307c:	f7ff ffee 	bl	800305c <HAL_GetTick>
 8003080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800308c:	d005      	beq.n	800309a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800308e:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <HAL_Delay+0x44>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4413      	add	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800309a:	bf00      	nop
 800309c:	f7ff ffde 	bl	800305c <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d8f7      	bhi.n	800309c <HAL_Delay+0x28>
  {
  }
}
 80030ac:	bf00      	nop
 80030ae:	bf00      	nop
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000008 	.word	0x20000008

080030bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	431a      	orrs	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	609a      	str	r2, [r3, #8]
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	609a      	str	r2, [r3, #8]
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003118:	4618      	mov	r0, r3
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	3360      	adds	r3, #96	; 0x60
 8003136:	461a      	mov	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	4b08      	ldr	r3, [pc, #32]	; (8003168 <LL_ADC_SetOffset+0x44>)
 8003146:	4013      	ands	r3, r2
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	4313      	orrs	r3, r2
 8003154:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800315c:	bf00      	nop
 800315e:	371c      	adds	r7, #28
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	03fff000 	.word	0x03fff000

0800316c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3360      	adds	r3, #96	; 0x60
 800317a:	461a      	mov	r2, r3
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800318c:	4618      	mov	r0, r3
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	3360      	adds	r3, #96	; 0x60
 80031a8:	461a      	mov	r2, r3
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	431a      	orrs	r2, r3
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80031c2:	bf00      	nop
 80031c4:	371c      	adds	r7, #28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	615a      	str	r2, [r3, #20]
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	3330      	adds	r3, #48	; 0x30
 8003204:	461a      	mov	r2, r3
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	0a1b      	lsrs	r3, r3, #8
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	f003 030c 	and.w	r3, r3, #12
 8003210:	4413      	add	r3, r2
 8003212:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	211f      	movs	r1, #31
 8003220:	fa01 f303 	lsl.w	r3, r1, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	401a      	ands	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	0e9b      	lsrs	r3, r3, #26
 800322c:	f003 011f 	and.w	r1, r3, #31
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f003 031f 	and.w	r3, r3, #31
 8003236:	fa01 f303 	lsl.w	r3, r1, r3
 800323a:	431a      	orrs	r2, r3
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003240:	bf00      	nop
 8003242:	371c      	adds	r7, #28
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	3314      	adds	r3, #20
 800325c:	461a      	mov	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	0e5b      	lsrs	r3, r3, #25
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	4413      	add	r3, r2
 800326a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	0d1b      	lsrs	r3, r3, #20
 8003274:	f003 031f 	and.w	r3, r3, #31
 8003278:	2107      	movs	r1, #7
 800327a:	fa01 f303 	lsl.w	r3, r1, r3
 800327e:	43db      	mvns	r3, r3
 8003280:	401a      	ands	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	0d1b      	lsrs	r3, r3, #20
 8003286:	f003 031f 	and.w	r3, r3, #31
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	fa01 f303 	lsl.w	r3, r1, r3
 8003290:	431a      	orrs	r2, r3
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003296:	bf00      	nop
 8003298:	371c      	adds	r7, #28
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
	...

080032a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032bc:	43db      	mvns	r3, r3
 80032be:	401a      	ands	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f003 0318 	and.w	r3, r3, #24
 80032c6:	4908      	ldr	r1, [pc, #32]	; (80032e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80032c8:	40d9      	lsrs	r1, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	400b      	ands	r3, r1
 80032ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d2:	431a      	orrs	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80032da:	bf00      	nop
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	0007ffff 	.word	0x0007ffff

080032ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80032fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6093      	str	r3, [r2, #8]
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003324:	d101      	bne.n	800332a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003348:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800334c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003370:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003374:	d101      	bne.n	800337a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003398:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800339c:	f043 0202 	orr.w	r2, r3, #2
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <LL_ADC_IsEnabled+0x18>
 80033c4:	2301      	movs	r3, #1
 80033c6:	e000      	b.n	80033ca <LL_ADC_IsEnabled+0x1a>
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d101      	bne.n	80033ee <LL_ADC_IsDisableOngoing+0x18>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <LL_ADC_IsDisableOngoing+0x1a>
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b04      	cmp	r3, #4
 800340e:	d101      	bne.n	8003414 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	2b08      	cmp	r3, #8
 8003434:	d101      	bne.n	800343a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003436:	2301      	movs	r3, #1
 8003438:	e000      	b.n	800343c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003448:	b590      	push	{r4, r7, lr}
 800344a:	b089      	sub	sp, #36	; 0x24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e133      	b.n	80036ca <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346c:	2b00      	cmp	r3, #0
 800346e:	d109      	bne.n	8003484 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7fd fda1 	bl	8000fb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff ff41 	bl	8003310 <LL_ADC_IsDeepPowerDownEnabled>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d004      	beq.n	800349e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff ff27 	bl	80032ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff ff5c 	bl	8003360 <LL_ADC_IsInternalRegulatorEnabled>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d115      	bne.n	80034da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff ff40 	bl	8003338 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034b8:	4b86      	ldr	r3, [pc, #536]	; (80036d4 <HAL_ADC_Init+0x28c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	099b      	lsrs	r3, r3, #6
 80034be:	4a86      	ldr	r2, [pc, #536]	; (80036d8 <HAL_ADC_Init+0x290>)
 80034c0:	fba2 2303 	umull	r2, r3, r2, r3
 80034c4:	099b      	lsrs	r3, r3, #6
 80034c6:	3301      	adds	r3, #1
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80034cc:	e002      	b.n	80034d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	3b01      	subs	r3, #1
 80034d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f9      	bne.n	80034ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff ff3e 	bl	8003360 <LL_ADC_IsInternalRegulatorEnabled>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10d      	bne.n	8003506 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ee:	f043 0210 	orr.w	r2, r3, #16
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fa:	f043 0201 	orr.w	r2, r3, #1
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff ff76 	bl	80033fc <LL_ADC_REG_IsConversionOngoing>
 8003510:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003516:	f003 0310 	and.w	r3, r3, #16
 800351a:	2b00      	cmp	r3, #0
 800351c:	f040 80cc 	bne.w	80036b8 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2b00      	cmp	r3, #0
 8003524:	f040 80c8 	bne.w	80036b8 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003530:	f043 0202 	orr.w	r2, r3, #2
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff ff37 	bl	80033b0 <LL_ADC_IsEnabled>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d115      	bne.n	8003574 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003548:	4864      	ldr	r0, [pc, #400]	; (80036dc <HAL_ADC_Init+0x294>)
 800354a:	f7ff ff31 	bl	80033b0 <LL_ADC_IsEnabled>
 800354e:	4604      	mov	r4, r0
 8003550:	4863      	ldr	r0, [pc, #396]	; (80036e0 <HAL_ADC_Init+0x298>)
 8003552:	f7ff ff2d 	bl	80033b0 <LL_ADC_IsEnabled>
 8003556:	4603      	mov	r3, r0
 8003558:	431c      	orrs	r4, r3
 800355a:	4862      	ldr	r0, [pc, #392]	; (80036e4 <HAL_ADC_Init+0x29c>)
 800355c:	f7ff ff28 	bl	80033b0 <LL_ADC_IsEnabled>
 8003560:	4603      	mov	r3, r0
 8003562:	4323      	orrs	r3, r4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d105      	bne.n	8003574 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	4619      	mov	r1, r3
 800356e:	485e      	ldr	r0, [pc, #376]	; (80036e8 <HAL_ADC_Init+0x2a0>)
 8003570:	f7ff fda4 	bl	80030bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	7e5b      	ldrb	r3, [r3, #25]
 8003578:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800357e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003584:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800358a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003592:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003594:	4313      	orrs	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d106      	bne.n	80035b0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	3b01      	subs	r3, #1
 80035a8:	045b      	lsls	r3, r3, #17
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d009      	beq.n	80035cc <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035bc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	4b46      	ldr	r3, [pc, #280]	; (80036ec <HAL_ADC_Init+0x2a4>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6812      	ldr	r2, [r2, #0]
 80035da:	69b9      	ldr	r1, [r7, #24]
 80035dc:	430b      	orrs	r3, r1
 80035de:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff ff1c 	bl	8003422 <LL_ADC_INJ_IsConversionOngoing>
 80035ea:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d140      	bne.n	8003674 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d13d      	bne.n	8003674 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	7e1b      	ldrb	r3, [r3, #24]
 8003600:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003602:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800360a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800360c:	4313      	orrs	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800361a:	f023 0306 	bic.w	r3, r3, #6
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6812      	ldr	r2, [r2, #0]
 8003622:	69b9      	ldr	r1, [r7, #24]
 8003624:	430b      	orrs	r3, r1
 8003626:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800362e:	2b01      	cmp	r3, #1
 8003630:	d118      	bne.n	8003664 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800363c:	f023 0304 	bic.w	r3, r3, #4
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003648:	4311      	orrs	r1, r2
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800364e:	4311      	orrs	r1, r2
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003654:	430a      	orrs	r2, r1
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	611a      	str	r2, [r3, #16]
 8003662:	e007      	b.n	8003674 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691a      	ldr	r2, [r3, #16]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d10c      	bne.n	8003696 <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	f023 010f 	bic.w	r1, r3, #15
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	1e5a      	subs	r2, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	631a      	str	r2, [r3, #48]	; 0x30
 8003694:	e007      	b.n	80036a6 <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 020f 	bic.w	r2, r2, #15
 80036a4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036aa:	f023 0303 	bic.w	r3, r3, #3
 80036ae:	f043 0201 	orr.w	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	659a      	str	r2, [r3, #88]	; 0x58
 80036b6:	e007      	b.n	80036c8 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036bc:	f043 0210 	orr.w	r2, r3, #16
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80036c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3724      	adds	r7, #36	; 0x24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd90      	pop	{r4, r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20000000 	.word	0x20000000
 80036d8:	053e2d63 	.word	0x053e2d63
 80036dc:	50040000 	.word	0x50040000
 80036e0:	50040100 	.word	0x50040100
 80036e4:	50040200 	.word	0x50040200
 80036e8:	50040300 	.word	0x50040300
 80036ec:	fff0c007 	.word	0xfff0c007

080036f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b0b6      	sub	sp, #216	; 0xd8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003700:	2300      	movs	r3, #0
 8003702:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x22>
 800370e:	2302      	movs	r3, #2
 8003710:	e3e3      	b.n	8003eda <HAL_ADC_ConfigChannel+0x7ea>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff fe6c 	bl	80033fc <LL_ADC_REG_IsConversionOngoing>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	f040 83c4 	bne.w	8003eb4 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b05      	cmp	r3, #5
 800373a:	d824      	bhi.n	8003786 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	3b02      	subs	r3, #2
 8003742:	2b03      	cmp	r3, #3
 8003744:	d81b      	bhi.n	800377e <HAL_ADC_ConfigChannel+0x8e>
 8003746:	a201      	add	r2, pc, #4	; (adr r2, 800374c <HAL_ADC_ConfigChannel+0x5c>)
 8003748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374c:	0800375d 	.word	0x0800375d
 8003750:	08003765 	.word	0x08003765
 8003754:	0800376d 	.word	0x0800376d
 8003758:	08003775 	.word	0x08003775
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800375c:	230c      	movs	r3, #12
 800375e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003762:	e010      	b.n	8003786 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003764:	2312      	movs	r3, #18
 8003766:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800376a:	e00c      	b.n	8003786 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800376c:	2318      	movs	r3, #24
 800376e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003772:	e008      	b.n	8003786 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003774:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800377c:	e003      	b.n	8003786 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800377e:	2306      	movs	r3, #6
 8003780:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003784:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6818      	ldr	r0, [r3, #0]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003794:	f7ff fd2e 	bl	80031f4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff fe2d 	bl	80033fc <LL_ADC_REG_IsConversionOngoing>
 80037a2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff fe39 	bl	8003422 <LL_ADC_INJ_IsConversionOngoing>
 80037b0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f040 81bf 	bne.w	8003b3c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f040 81ba 	bne.w	8003b3c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037d0:	d10f      	bne.n	80037f2 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6818      	ldr	r0, [r3, #0]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2200      	movs	r2, #0
 80037dc:	4619      	mov	r1, r3
 80037de:	f7ff fd35 	bl	800324c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff fcef 	bl	80031ce <LL_ADC_SetSamplingTimeCommonConfig>
 80037f0:	e00e      	b.n	8003810 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	6819      	ldr	r1, [r3, #0]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	461a      	mov	r2, r3
 8003800:	f7ff fd24 	bl	800324c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2100      	movs	r1, #0
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff fcdf 	bl	80031ce <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	695a      	ldr	r2, [r3, #20]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	08db      	lsrs	r3, r3, #3
 800381c:	f003 0303 	and.w	r3, r3, #3
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	2b04      	cmp	r3, #4
 8003830:	d00a      	beq.n	8003848 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	6919      	ldr	r1, [r3, #16]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003842:	f7ff fc6f 	bl	8003124 <LL_ADC_SetOffset>
 8003846:	e179      	b.n	8003b3c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2100      	movs	r1, #0
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff fc8c 	bl	800316c <LL_ADC_GetOffsetChannel>
 8003854:	4603      	mov	r3, r0
 8003856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10a      	bne.n	8003874 <HAL_ADC_ConfigChannel+0x184>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2100      	movs	r1, #0
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff fc81 	bl	800316c <LL_ADC_GetOffsetChannel>
 800386a:	4603      	mov	r3, r0
 800386c:	0e9b      	lsrs	r3, r3, #26
 800386e:	f003 021f 	and.w	r2, r3, #31
 8003872:	e01e      	b.n	80038b2 <HAL_ADC_ConfigChannel+0x1c2>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2100      	movs	r1, #0
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff fc76 	bl	800316c <LL_ADC_GetOffsetChannel>
 8003880:	4603      	mov	r3, r0
 8003882:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003886:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800388a:	fa93 f3a3 	rbit	r3, r3
 800388e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003892:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003896:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800389a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80038a2:	2320      	movs	r3, #32
 80038a4:	e004      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80038a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80038aa:	fab3 f383 	clz	r3, r3
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d105      	bne.n	80038ca <HAL_ADC_ConfigChannel+0x1da>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	0e9b      	lsrs	r3, r3, #26
 80038c4:	f003 031f 	and.w	r3, r3, #31
 80038c8:	e018      	b.n	80038fc <HAL_ADC_ConfigChannel+0x20c>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038d6:	fa93 f3a3 	rbit	r3, r3
 80038da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80038de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80038e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80038e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80038ee:	2320      	movs	r3, #32
 80038f0:	e004      	b.n	80038fc <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80038f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80038f6:	fab3 f383 	clz	r3, r3
 80038fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d106      	bne.n	800390e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2200      	movs	r2, #0
 8003906:	2100      	movs	r1, #0
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff fc45 	bl	8003198 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2101      	movs	r1, #1
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff fc29 	bl	800316c <LL_ADC_GetOffsetChannel>
 800391a:	4603      	mov	r3, r0
 800391c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10a      	bne.n	800393a <HAL_ADC_ConfigChannel+0x24a>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2101      	movs	r1, #1
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff fc1e 	bl	800316c <LL_ADC_GetOffsetChannel>
 8003930:	4603      	mov	r3, r0
 8003932:	0e9b      	lsrs	r3, r3, #26
 8003934:	f003 021f 	and.w	r2, r3, #31
 8003938:	e01e      	b.n	8003978 <HAL_ADC_ConfigChannel+0x288>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2101      	movs	r1, #1
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff fc13 	bl	800316c <LL_ADC_GetOffsetChannel>
 8003946:	4603      	mov	r3, r0
 8003948:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003950:	fa93 f3a3 	rbit	r3, r3
 8003954:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003958:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800395c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003960:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003968:	2320      	movs	r3, #32
 800396a:	e004      	b.n	8003976 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 800396c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003970:	fab3 f383 	clz	r3, r3
 8003974:	b2db      	uxtb	r3, r3
 8003976:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003980:	2b00      	cmp	r3, #0
 8003982:	d105      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x2a0>
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	0e9b      	lsrs	r3, r3, #26
 800398a:	f003 031f 	and.w	r3, r3, #31
 800398e:	e018      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x2d2>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003998:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800399c:	fa93 f3a3 	rbit	r3, r3
 80039a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80039a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80039ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80039b4:	2320      	movs	r3, #32
 80039b6:	e004      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80039b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039bc:	fab3 f383 	clz	r3, r3
 80039c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d106      	bne.n	80039d4 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2200      	movs	r2, #0
 80039cc:	2101      	movs	r1, #1
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff fbe2 	bl	8003198 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2102      	movs	r1, #2
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff fbc6 	bl	800316c <LL_ADC_GetOffsetChannel>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10a      	bne.n	8003a00 <HAL_ADC_ConfigChannel+0x310>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2102      	movs	r1, #2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff fbbb 	bl	800316c <LL_ADC_GetOffsetChannel>
 80039f6:	4603      	mov	r3, r0
 80039f8:	0e9b      	lsrs	r3, r3, #26
 80039fa:	f003 021f 	and.w	r2, r3, #31
 80039fe:	e01e      	b.n	8003a3e <HAL_ADC_ConfigChannel+0x34e>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2102      	movs	r1, #2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff fbb0 	bl	800316c <LL_ADC_GetOffsetChannel>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a16:	fa93 f3a3 	rbit	r3, r3
 8003a1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003a1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003a26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8003a2e:	2320      	movs	r3, #32
 8003a30:	e004      	b.n	8003a3c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8003a32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a36:	fab3 f383 	clz	r3, r3
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d105      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x366>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	0e9b      	lsrs	r3, r3, #26
 8003a50:	f003 031f 	and.w	r3, r3, #31
 8003a54:	e014      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x390>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a5e:	fa93 f3a3 	rbit	r3, r3
 8003a62:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003a64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003a6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003a72:	2320      	movs	r3, #32
 8003a74:	e004      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8003a76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a7a:	fab3 f383 	clz	r3, r3
 8003a7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d106      	bne.n	8003a92 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2102      	movs	r1, #2
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff fb83 	bl	8003198 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2103      	movs	r1, #3
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff fb67 	bl	800316c <LL_ADC_GetOffsetChannel>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10a      	bne.n	8003abe <HAL_ADC_ConfigChannel+0x3ce>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2103      	movs	r1, #3
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff fb5c 	bl	800316c <LL_ADC_GetOffsetChannel>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	0e9b      	lsrs	r3, r3, #26
 8003ab8:	f003 021f 	and.w	r2, r3, #31
 8003abc:	e017      	b.n	8003aee <HAL_ADC_ConfigChannel+0x3fe>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2103      	movs	r1, #3
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff fb51 	bl	800316c <LL_ADC_GetOffsetChannel>
 8003aca:	4603      	mov	r3, r0
 8003acc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ace:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ad0:	fa93 f3a3 	rbit	r3, r3
 8003ad4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad8:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8003ae0:	2320      	movs	r3, #32
 8003ae2:	e003      	b.n	8003aec <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8003ae4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ae6:	fab3 f383 	clz	r3, r3
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d105      	bne.n	8003b06 <HAL_ADC_ConfigChannel+0x416>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	0e9b      	lsrs	r3, r3, #26
 8003b00:	f003 031f 	and.w	r3, r3, #31
 8003b04:	e011      	b.n	8003b2a <HAL_ADC_ConfigChannel+0x43a>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b0e:	fa93 f3a3 	rbit	r3, r3
 8003b12:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003b14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b16:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003b18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8003b1e:	2320      	movs	r3, #32
 8003b20:	e003      	b.n	8003b2a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8003b22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b24:	fab3 f383 	clz	r3, r3
 8003b28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d106      	bne.n	8003b3c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2200      	movs	r2, #0
 8003b34:	2103      	movs	r1, #3
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff fb2e 	bl	8003198 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff fc35 	bl	80033b0 <LL_ADC_IsEnabled>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f040 813f 	bne.w	8003dcc <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6818      	ldr	r0, [r3, #0]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	6819      	ldr	r1, [r3, #0]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f7ff fba2 	bl	80032a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	4a8e      	ldr	r2, [pc, #568]	; (8003da0 <HAL_ADC_ConfigChannel+0x6b0>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	f040 8130 	bne.w	8003dcc <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10b      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x4a4>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	0e9b      	lsrs	r3, r3, #26
 8003b82:	3301      	adds	r3, #1
 8003b84:	f003 031f 	and.w	r3, r3, #31
 8003b88:	2b09      	cmp	r3, #9
 8003b8a:	bf94      	ite	ls
 8003b8c:	2301      	movls	r3, #1
 8003b8e:	2300      	movhi	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	e019      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x4d8>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b9c:	fa93 f3a3 	rbit	r3, r3
 8003ba0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003ba6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8003bac:	2320      	movs	r3, #32
 8003bae:	e003      	b.n	8003bb8 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003bb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bb2:	fab3 f383 	clz	r3, r3
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	3301      	adds	r3, #1
 8003bba:	f003 031f 	and.w	r3, r3, #31
 8003bbe:	2b09      	cmp	r3, #9
 8003bc0:	bf94      	ite	ls
 8003bc2:	2301      	movls	r3, #1
 8003bc4:	2300      	movhi	r3, #0
 8003bc6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d079      	beq.n	8003cc0 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d107      	bne.n	8003be8 <HAL_ADC_ConfigChannel+0x4f8>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	0e9b      	lsrs	r3, r3, #26
 8003bde:	3301      	adds	r3, #1
 8003be0:	069b      	lsls	r3, r3, #26
 8003be2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003be6:	e015      	b.n	8003c14 <HAL_ADC_ConfigChannel+0x524>
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bf0:	fa93 f3a3 	rbit	r3, r3
 8003bf4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bf8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8003c00:	2320      	movs	r3, #32
 8003c02:	e003      	b.n	8003c0c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8003c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c06:	fab3 f383 	clz	r3, r3
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	069b      	lsls	r3, r3, #26
 8003c10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d109      	bne.n	8003c34 <HAL_ADC_ConfigChannel+0x544>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	0e9b      	lsrs	r3, r3, #26
 8003c26:	3301      	adds	r3, #1
 8003c28:	f003 031f 	and.w	r3, r3, #31
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c32:	e017      	b.n	8003c64 <HAL_ADC_ConfigChannel+0x574>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c3c:	fa93 f3a3 	rbit	r3, r3
 8003c40:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c44:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003c4c:	2320      	movs	r3, #32
 8003c4e:	e003      	b.n	8003c58 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c52:	fab3 f383 	clz	r3, r3
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	3301      	adds	r3, #1
 8003c5a:	f003 031f 	and.w	r3, r3, #31
 8003c5e:	2101      	movs	r1, #1
 8003c60:	fa01 f303 	lsl.w	r3, r1, r3
 8003c64:	ea42 0103 	orr.w	r1, r2, r3
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10a      	bne.n	8003c8a <HAL_ADC_ConfigChannel+0x59a>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	0e9b      	lsrs	r3, r3, #26
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	f003 021f 	and.w	r2, r3, #31
 8003c80:	4613      	mov	r3, r2
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	4413      	add	r3, r2
 8003c86:	051b      	lsls	r3, r3, #20
 8003c88:	e018      	b.n	8003cbc <HAL_ADC_ConfigChannel+0x5cc>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c92:	fa93 f3a3 	rbit	r3, r3
 8003c96:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8003ca2:	2320      	movs	r3, #32
 8003ca4:	e003      	b.n	8003cae <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8003ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca8:	fab3 f383 	clz	r3, r3
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	3301      	adds	r3, #1
 8003cb0:	f003 021f 	and.w	r2, r3, #31
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	4413      	add	r3, r2
 8003cba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cbc:	430b      	orrs	r3, r1
 8003cbe:	e080      	b.n	8003dc2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d107      	bne.n	8003cdc <HAL_ADC_ConfigChannel+0x5ec>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	0e9b      	lsrs	r3, r3, #26
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	069b      	lsls	r3, r3, #26
 8003cd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cda:	e015      	b.n	8003d08 <HAL_ADC_ConfigChannel+0x618>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce4:	fa93 f3a3 	rbit	r3, r3
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8003cf4:	2320      	movs	r3, #32
 8003cf6:	e003      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfa:	fab3 f383 	clz	r3, r3
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	3301      	adds	r3, #1
 8003d02:	069b      	lsls	r3, r3, #26
 8003d04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d109      	bne.n	8003d28 <HAL_ADC_ConfigChannel+0x638>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	0e9b      	lsrs	r3, r3, #26
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	f003 031f 	and.w	r3, r3, #31
 8003d20:	2101      	movs	r1, #1
 8003d22:	fa01 f303 	lsl.w	r3, r1, r3
 8003d26:	e017      	b.n	8003d58 <HAL_ADC_ConfigChannel+0x668>
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	fa93 f3a3 	rbit	r3, r3
 8003d34:	61bb      	str	r3, [r7, #24]
  return result;
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003d40:	2320      	movs	r3, #32
 8003d42:	e003      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003d44:	6a3b      	ldr	r3, [r7, #32]
 8003d46:	fab3 f383 	clz	r3, r3
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	f003 031f 	and.w	r3, r3, #31
 8003d52:	2101      	movs	r1, #1
 8003d54:	fa01 f303 	lsl.w	r3, r1, r3
 8003d58:	ea42 0103 	orr.w	r1, r2, r3
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10d      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x694>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	0e9b      	lsrs	r3, r3, #26
 8003d6e:	3301      	adds	r3, #1
 8003d70:	f003 021f 	and.w	r2, r3, #31
 8003d74:	4613      	mov	r3, r2
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	4413      	add	r3, r2
 8003d7a:	3b1e      	subs	r3, #30
 8003d7c:	051b      	lsls	r3, r3, #20
 8003d7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d82:	e01d      	b.n	8003dc0 <HAL_ADC_ConfigChannel+0x6d0>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	fa93 f3a3 	rbit	r3, r3
 8003d90:	60fb      	str	r3, [r7, #12]
  return result;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d103      	bne.n	8003da4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003d9c:	2320      	movs	r3, #32
 8003d9e:	e005      	b.n	8003dac <HAL_ADC_ConfigChannel+0x6bc>
 8003da0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	fab3 f383 	clz	r3, r3
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	3301      	adds	r3, #1
 8003dae:	f003 021f 	and.w	r2, r3, #31
 8003db2:	4613      	mov	r3, r2
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	4413      	add	r3, r2
 8003db8:	3b1e      	subs	r3, #30
 8003dba:	051b      	lsls	r3, r3, #20
 8003dbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dc0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	f7ff fa40 	bl	800324c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	4b44      	ldr	r3, [pc, #272]	; (8003ee4 <HAL_ADC_ConfigChannel+0x7f4>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d07a      	beq.n	8003ece <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003dd8:	4843      	ldr	r0, [pc, #268]	; (8003ee8 <HAL_ADC_ConfigChannel+0x7f8>)
 8003dda:	f7ff f995 	bl	8003108 <LL_ADC_GetCommonPathInternalCh>
 8003dde:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a41      	ldr	r2, [pc, #260]	; (8003eec <HAL_ADC_ConfigChannel+0x7fc>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d12c      	bne.n	8003e46 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003dec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003df0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d126      	bne.n	8003e46 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a3c      	ldr	r2, [pc, #240]	; (8003ef0 <HAL_ADC_ConfigChannel+0x800>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d004      	beq.n	8003e0c <HAL_ADC_ConfigChannel+0x71c>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a3b      	ldr	r2, [pc, #236]	; (8003ef4 <HAL_ADC_ConfigChannel+0x804>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d15d      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e14:	4619      	mov	r1, r3
 8003e16:	4834      	ldr	r0, [pc, #208]	; (8003ee8 <HAL_ADC_ConfigChannel+0x7f8>)
 8003e18:	f7ff f963 	bl	80030e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e1c:	4b36      	ldr	r3, [pc, #216]	; (8003ef8 <HAL_ADC_ConfigChannel+0x808>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	099b      	lsrs	r3, r3, #6
 8003e22:	4a36      	ldr	r2, [pc, #216]	; (8003efc <HAL_ADC_ConfigChannel+0x80c>)
 8003e24:	fba2 2303 	umull	r2, r3, r2, r3
 8003e28:	099b      	lsrs	r3, r3, #6
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003e36:	e002      	b.n	8003e3e <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1f9      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e44:	e040      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a2d      	ldr	r2, [pc, #180]	; (8003f00 <HAL_ADC_ConfigChannel+0x810>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d118      	bne.n	8003e82 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d112      	bne.n	8003e82 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a23      	ldr	r2, [pc, #140]	; (8003ef0 <HAL_ADC_ConfigChannel+0x800>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d004      	beq.n	8003e70 <HAL_ADC_ConfigChannel+0x780>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a22      	ldr	r2, [pc, #136]	; (8003ef4 <HAL_ADC_ConfigChannel+0x804>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d12d      	bne.n	8003ecc <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e78:	4619      	mov	r1, r3
 8003e7a:	481b      	ldr	r0, [pc, #108]	; (8003ee8 <HAL_ADC_ConfigChannel+0x7f8>)
 8003e7c:	f7ff f931 	bl	80030e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e80:	e024      	b.n	8003ecc <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a1f      	ldr	r2, [pc, #124]	; (8003f04 <HAL_ADC_ConfigChannel+0x814>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d120      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d11a      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a14      	ldr	r2, [pc, #80]	; (8003ef0 <HAL_ADC_ConfigChannel+0x800>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d115      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ea2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ea6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003eaa:	4619      	mov	r1, r3
 8003eac:	480e      	ldr	r0, [pc, #56]	; (8003ee8 <HAL_ADC_ConfigChannel+0x7f8>)
 8003eae:	f7ff f918 	bl	80030e2 <LL_ADC_SetCommonPathInternalCh>
 8003eb2:	e00c      	b.n	8003ece <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb8:	f043 0220 	orr.w	r2, r3, #32
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003ec6:	e002      	b.n	8003ece <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ec8:	bf00      	nop
 8003eca:	e000      	b.n	8003ece <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ecc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003ed6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	37d8      	adds	r7, #216	; 0xd8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	80080000 	.word	0x80080000
 8003ee8:	50040300 	.word	0x50040300
 8003eec:	c7520000 	.word	0xc7520000
 8003ef0:	50040000 	.word	0x50040000
 8003ef4:	50040200 	.word	0x50040200
 8003ef8:	20000000 	.word	0x20000000
 8003efc:	053e2d63 	.word	0x053e2d63
 8003f00:	cb840000 	.word	0xcb840000
 8003f04:	80000001 	.word	0x80000001

08003f08 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff fa5e 	bl	80033d6 <LL_ADC_IsDisableOngoing>
 8003f1a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff fa45 	bl	80033b0 <LL_ADC_IsEnabled>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d047      	beq.n	8003fbc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d144      	bne.n	8003fbc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f003 030d 	and.w	r3, r3, #13
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d10c      	bne.n	8003f5a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff fa1f 	bl	8003388 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2203      	movs	r2, #3
 8003f50:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f52:	f7ff f883 	bl	800305c <HAL_GetTick>
 8003f56:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f58:	e029      	b.n	8003fae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5e:	f043 0210 	orr.w	r2, r3, #16
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6a:	f043 0201 	orr.w	r2, r3, #1
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e023      	b.n	8003fbe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f76:	f7ff f871 	bl	800305c <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d914      	bls.n	8003fae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00d      	beq.n	8003fae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f96:	f043 0210 	orr.w	r2, r3, #16
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa2:	f043 0201 	orr.w	r2, r3, #1
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e007      	b.n	8003fbe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1dc      	bne.n	8003f76 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <LL_ADC_IsEnabled>:
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d101      	bne.n	8003fde <LL_ADC_IsEnabled+0x18>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <LL_ADC_IsEnabled+0x1a>
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <LL_ADC_StartCalibration>:
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003ffe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004008:	4313      	orrs	r3, r2
 800400a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	609a      	str	r2, [r3, #8]
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <LL_ADC_IsCalibrationOnGoing>:
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800402e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004032:	d101      	bne.n	8004038 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <LL_ADC_REG_IsConversionOngoing>:
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b04      	cmp	r3, #4
 8004058:	d101      	bne.n	800405e <LL_ADC_REG_IsConversionOngoing+0x18>
 800405a:	2301      	movs	r3, #1
 800405c:	e000      	b.n	8004060 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004076:	2300      	movs	r3, #0
 8004078:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_ADCEx_Calibration_Start+0x1c>
 8004084:	2302      	movs	r3, #2
 8004086:	e04d      	b.n	8004124 <HAL_ADCEx_Calibration_Start+0xb8>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff ff39 	bl	8003f08 <ADC_Disable>
 8004096:	4603      	mov	r3, r0
 8004098:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800409a:	7bfb      	ldrb	r3, [r7, #15]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d136      	bne.n	800410e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80040a8:	f023 0302 	bic.w	r3, r3, #2
 80040ac:	f043 0202 	orr.w	r2, r3, #2
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6839      	ldr	r1, [r7, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff ff96 	bl	8003fec <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80040c0:	e014      	b.n	80040ec <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	3301      	adds	r3, #1
 80040c6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80040ce:	d30d      	bcc.n	80040ec <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d4:	f023 0312 	bic.w	r3, r3, #18
 80040d8:	f043 0210 	orr.w	r2, r3, #16
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e01b      	b.n	8004124 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff ff94 	bl	800401e <LL_ADC_IsCalibrationOnGoing>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e2      	bne.n	80040c2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004100:	f023 0303 	bic.w	r3, r3, #3
 8004104:	f043 0201 	orr.w	r2, r3, #1
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	659a      	str	r2, [r3, #88]	; 0x58
 800410c:	e005      	b.n	800411a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004112:	f043 0210 	orr.w	r2, r3, #16
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8004122:	7bfb      	ldrb	r3, [r7, #15]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800412c:	b590      	push	{r4, r7, lr}
 800412e:	b0a1      	sub	sp, #132	; 0x84
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004142:	2b01      	cmp	r3, #1
 8004144:	d101      	bne.n	800414a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004146:	2302      	movs	r3, #2
 8004148:	e093      	b.n	8004272 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004152:	2300      	movs	r3, #0
 8004154:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004156:	2300      	movs	r3, #0
 8004158:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a47      	ldr	r2, [pc, #284]	; (800427c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d102      	bne.n	800416a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004164:	4b46      	ldr	r3, [pc, #280]	; (8004280 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	e001      	b.n	800416e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10b      	bne.n	800418c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004178:	f043 0220 	orr.w	r2, r3, #32
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e072      	b.n	8004272 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4618      	mov	r0, r3
 8004190:	f7ff ff59 	bl	8004046 <LL_ADC_REG_IsConversionOngoing>
 8004194:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff ff53 	bl	8004046 <LL_ADC_REG_IsConversionOngoing>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d154      	bne.n	8004250 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80041a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d151      	bne.n	8004250 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80041ac:	4b35      	ldr	r3, [pc, #212]	; (8004284 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80041ae:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d02c      	beq.n	8004212 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80041b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	6859      	ldr	r1, [r3, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80041ca:	035b      	lsls	r3, r3, #13
 80041cc:	430b      	orrs	r3, r1
 80041ce:	431a      	orrs	r2, r3
 80041d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041d2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041d4:	4829      	ldr	r0, [pc, #164]	; (800427c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80041d6:	f7ff fef6 	bl	8003fc6 <LL_ADC_IsEnabled>
 80041da:	4604      	mov	r4, r0
 80041dc:	4828      	ldr	r0, [pc, #160]	; (8004280 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80041de:	f7ff fef2 	bl	8003fc6 <LL_ADC_IsEnabled>
 80041e2:	4603      	mov	r3, r0
 80041e4:	431c      	orrs	r4, r3
 80041e6:	4828      	ldr	r0, [pc, #160]	; (8004288 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80041e8:	f7ff feed 	bl	8003fc6 <LL_ADC_IsEnabled>
 80041ec:	4603      	mov	r3, r0
 80041ee:	4323      	orrs	r3, r4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d137      	bne.n	8004264 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80041f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80041fc:	f023 030f 	bic.w	r3, r3, #15
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	6811      	ldr	r1, [r2, #0]
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	6892      	ldr	r2, [r2, #8]
 8004208:	430a      	orrs	r2, r1
 800420a:	431a      	orrs	r2, r3
 800420c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800420e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004210:	e028      	b.n	8004264 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800421a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800421c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800421e:	4817      	ldr	r0, [pc, #92]	; (800427c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004220:	f7ff fed1 	bl	8003fc6 <LL_ADC_IsEnabled>
 8004224:	4604      	mov	r4, r0
 8004226:	4816      	ldr	r0, [pc, #88]	; (8004280 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004228:	f7ff fecd 	bl	8003fc6 <LL_ADC_IsEnabled>
 800422c:	4603      	mov	r3, r0
 800422e:	431c      	orrs	r4, r3
 8004230:	4815      	ldr	r0, [pc, #84]	; (8004288 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004232:	f7ff fec8 	bl	8003fc6 <LL_ADC_IsEnabled>
 8004236:	4603      	mov	r3, r0
 8004238:	4323      	orrs	r3, r4
 800423a:	2b00      	cmp	r3, #0
 800423c:	d112      	bne.n	8004264 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800423e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004246:	f023 030f 	bic.w	r3, r3, #15
 800424a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800424c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800424e:	e009      	b.n	8004264 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004254:	f043 0220 	orr.w	r2, r3, #32
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004262:	e000      	b.n	8004266 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004264:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800426e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004272:	4618      	mov	r0, r3
 8004274:	3784      	adds	r7, #132	; 0x84
 8004276:	46bd      	mov	sp, r7
 8004278:	bd90      	pop	{r4, r7, pc}
 800427a:	bf00      	nop
 800427c:	50040000 	.word	0x50040000
 8004280:	50040100 	.word	0x50040100
 8004284:	50040300 	.word	0x50040300
 8004288:	50040200 	.word	0x50040200

0800428c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800429c:	4b0c      	ldr	r3, [pc, #48]	; (80042d0 <__NVIC_SetPriorityGrouping+0x44>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042a8:	4013      	ands	r3, r2
 80042aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042be:	4a04      	ldr	r2, [pc, #16]	; (80042d0 <__NVIC_SetPriorityGrouping+0x44>)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	60d3      	str	r3, [r2, #12]
}
 80042c4:	bf00      	nop
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	e000ed00 	.word	0xe000ed00

080042d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042d8:	4b04      	ldr	r3, [pc, #16]	; (80042ec <__NVIC_GetPriorityGrouping+0x18>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	0a1b      	lsrs	r3, r3, #8
 80042de:	f003 0307 	and.w	r3, r3, #7
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	e000ed00 	.word	0xe000ed00

080042f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	4603      	mov	r3, r0
 80042f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	db0b      	blt.n	800431a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004302:	79fb      	ldrb	r3, [r7, #7]
 8004304:	f003 021f 	and.w	r2, r3, #31
 8004308:	4907      	ldr	r1, [pc, #28]	; (8004328 <__NVIC_EnableIRQ+0x38>)
 800430a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430e:	095b      	lsrs	r3, r3, #5
 8004310:	2001      	movs	r0, #1
 8004312:	fa00 f202 	lsl.w	r2, r0, r2
 8004316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	e000e100 	.word	0xe000e100

0800432c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	4603      	mov	r3, r0
 8004334:	6039      	str	r1, [r7, #0]
 8004336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433c:	2b00      	cmp	r3, #0
 800433e:	db0a      	blt.n	8004356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	b2da      	uxtb	r2, r3
 8004344:	490c      	ldr	r1, [pc, #48]	; (8004378 <__NVIC_SetPriority+0x4c>)
 8004346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434a:	0112      	lsls	r2, r2, #4
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	440b      	add	r3, r1
 8004350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004354:	e00a      	b.n	800436c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	b2da      	uxtb	r2, r3
 800435a:	4908      	ldr	r1, [pc, #32]	; (800437c <__NVIC_SetPriority+0x50>)
 800435c:	79fb      	ldrb	r3, [r7, #7]
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	3b04      	subs	r3, #4
 8004364:	0112      	lsls	r2, r2, #4
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	440b      	add	r3, r1
 800436a:	761a      	strb	r2, [r3, #24]
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	e000e100 	.word	0xe000e100
 800437c:	e000ed00 	.word	0xe000ed00

08004380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004380:	b480      	push	{r7}
 8004382:	b089      	sub	sp, #36	; 0x24
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	f1c3 0307 	rsb	r3, r3, #7
 800439a:	2b04      	cmp	r3, #4
 800439c:	bf28      	it	cs
 800439e:	2304      	movcs	r3, #4
 80043a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	3304      	adds	r3, #4
 80043a6:	2b06      	cmp	r3, #6
 80043a8:	d902      	bls.n	80043b0 <NVIC_EncodePriority+0x30>
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	3b03      	subs	r3, #3
 80043ae:	e000      	b.n	80043b2 <NVIC_EncodePriority+0x32>
 80043b0:	2300      	movs	r3, #0
 80043b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	fa02 f303 	lsl.w	r3, r2, r3
 80043be:	43da      	mvns	r2, r3
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	401a      	ands	r2, r3
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	fa01 f303 	lsl.w	r3, r1, r3
 80043d2:	43d9      	mvns	r1, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043d8:	4313      	orrs	r3, r2
         );
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3724      	adds	r7, #36	; 0x24
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
	...

080043e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3b01      	subs	r3, #1
 80043f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043f8:	d301      	bcc.n	80043fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043fa:	2301      	movs	r3, #1
 80043fc:	e00f      	b.n	800441e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043fe:	4a0a      	ldr	r2, [pc, #40]	; (8004428 <SysTick_Config+0x40>)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3b01      	subs	r3, #1
 8004404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004406:	210f      	movs	r1, #15
 8004408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800440c:	f7ff ff8e 	bl	800432c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004410:	4b05      	ldr	r3, [pc, #20]	; (8004428 <SysTick_Config+0x40>)
 8004412:	2200      	movs	r2, #0
 8004414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004416:	4b04      	ldr	r3, [pc, #16]	; (8004428 <SysTick_Config+0x40>)
 8004418:	2207      	movs	r2, #7
 800441a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	e000e010 	.word	0xe000e010

0800442c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7ff ff29 	bl	800428c <__NVIC_SetPriorityGrouping>
}
 800443a:	bf00      	nop
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b086      	sub	sp, #24
 8004446:	af00      	add	r7, sp, #0
 8004448:	4603      	mov	r3, r0
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	607a      	str	r2, [r7, #4]
 800444e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004450:	2300      	movs	r3, #0
 8004452:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004454:	f7ff ff3e 	bl	80042d4 <__NVIC_GetPriorityGrouping>
 8004458:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	68b9      	ldr	r1, [r7, #8]
 800445e:	6978      	ldr	r0, [r7, #20]
 8004460:	f7ff ff8e 	bl	8004380 <NVIC_EncodePriority>
 8004464:	4602      	mov	r2, r0
 8004466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800446a:	4611      	mov	r1, r2
 800446c:	4618      	mov	r0, r3
 800446e:	f7ff ff5d 	bl	800432c <__NVIC_SetPriority>
}
 8004472:	bf00      	nop
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b082      	sub	sp, #8
 800447e:	af00      	add	r7, sp, #0
 8004480:	4603      	mov	r3, r0
 8004482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff ff31 	bl	80042f0 <__NVIC_EnableIRQ>
}
 800448e:	bf00      	nop
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b082      	sub	sp, #8
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7ff ffa2 	bl	80043e8 <SysTick_Config>
 80044a4:	4603      	mov	r3, r0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
	...

080044b0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e098      	b.n	80045f4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	4b4d      	ldr	r3, [pc, #308]	; (8004600 <HAL_DMA_Init+0x150>)
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d80f      	bhi.n	80044ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	461a      	mov	r2, r3
 80044d4:	4b4b      	ldr	r3, [pc, #300]	; (8004604 <HAL_DMA_Init+0x154>)
 80044d6:	4413      	add	r3, r2
 80044d8:	4a4b      	ldr	r2, [pc, #300]	; (8004608 <HAL_DMA_Init+0x158>)
 80044da:	fba2 2303 	umull	r2, r3, r2, r3
 80044de:	091b      	lsrs	r3, r3, #4
 80044e0:	009a      	lsls	r2, r3, #2
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a48      	ldr	r2, [pc, #288]	; (800460c <HAL_DMA_Init+0x15c>)
 80044ea:	641a      	str	r2, [r3, #64]	; 0x40
 80044ec:	e00e      	b.n	800450c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	4b46      	ldr	r3, [pc, #280]	; (8004610 <HAL_DMA_Init+0x160>)
 80044f6:	4413      	add	r3, r2
 80044f8:	4a43      	ldr	r2, [pc, #268]	; (8004608 <HAL_DMA_Init+0x158>)
 80044fa:	fba2 2303 	umull	r2, r3, r2, r3
 80044fe:	091b      	lsrs	r3, r3, #4
 8004500:	009a      	lsls	r2, r3, #2
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a42      	ldr	r2, [pc, #264]	; (8004614 <HAL_DMA_Init+0x164>)
 800450a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004526:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004530:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800453c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004548:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	4313      	orrs	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004566:	d039      	beq.n	80045dc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	4a27      	ldr	r2, [pc, #156]	; (800460c <HAL_DMA_Init+0x15c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d11a      	bne.n	80045a8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004572:	4b29      	ldr	r3, [pc, #164]	; (8004618 <HAL_DMA_Init+0x168>)
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457a:	f003 031c 	and.w	r3, r3, #28
 800457e:	210f      	movs	r1, #15
 8004580:	fa01 f303 	lsl.w	r3, r1, r3
 8004584:	43db      	mvns	r3, r3
 8004586:	4924      	ldr	r1, [pc, #144]	; (8004618 <HAL_DMA_Init+0x168>)
 8004588:	4013      	ands	r3, r2
 800458a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800458c:	4b22      	ldr	r3, [pc, #136]	; (8004618 <HAL_DMA_Init+0x168>)
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6859      	ldr	r1, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004598:	f003 031c 	and.w	r3, r3, #28
 800459c:	fa01 f303 	lsl.w	r3, r1, r3
 80045a0:	491d      	ldr	r1, [pc, #116]	; (8004618 <HAL_DMA_Init+0x168>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	600b      	str	r3, [r1, #0]
 80045a6:	e019      	b.n	80045dc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80045a8:	4b1c      	ldr	r3, [pc, #112]	; (800461c <HAL_DMA_Init+0x16c>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b0:	f003 031c 	and.w	r3, r3, #28
 80045b4:	210f      	movs	r1, #15
 80045b6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ba:	43db      	mvns	r3, r3
 80045bc:	4917      	ldr	r1, [pc, #92]	; (800461c <HAL_DMA_Init+0x16c>)
 80045be:	4013      	ands	r3, r2
 80045c0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80045c2:	4b16      	ldr	r3, [pc, #88]	; (800461c <HAL_DMA_Init+0x16c>)
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6859      	ldr	r1, [r3, #4]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ce:	f003 031c 	and.w	r3, r3, #28
 80045d2:	fa01 f303 	lsl.w	r3, r1, r3
 80045d6:	4911      	ldr	r1, [pc, #68]	; (800461c <HAL_DMA_Init+0x16c>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	40020407 	.word	0x40020407
 8004604:	bffdfff8 	.word	0xbffdfff8
 8004608:	cccccccd 	.word	0xcccccccd
 800460c:	40020000 	.word	0x40020000
 8004610:	bffdfbf8 	.word	0xbffdfbf8
 8004614:	40020400 	.word	0x40020400
 8004618:	400200a8 	.word	0x400200a8
 800461c:	400204a8 	.word	0x400204a8

08004620 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463c:	f003 031c 	and.w	r3, r3, #28
 8004640:	2204      	movs	r2, #4
 8004642:	409a      	lsls	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4013      	ands	r3, r2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d026      	beq.n	800469a <HAL_DMA_IRQHandler+0x7a>
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	2b00      	cmp	r3, #0
 8004654:	d021      	beq.n	800469a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0320 	and.w	r3, r3, #32
 8004660:	2b00      	cmp	r3, #0
 8004662:	d107      	bne.n	8004674 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0204 	bic.w	r2, r2, #4
 8004672:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004678:	f003 021c 	and.w	r2, r3, #28
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	2104      	movs	r1, #4
 8004682:	fa01 f202 	lsl.w	r2, r1, r2
 8004686:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468c:	2b00      	cmp	r3, #0
 800468e:	d071      	beq.n	8004774 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004698:	e06c      	b.n	8004774 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469e:	f003 031c 	and.w	r3, r3, #28
 80046a2:	2202      	movs	r2, #2
 80046a4:	409a      	lsls	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4013      	ands	r3, r2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d02e      	beq.n	800470c <HAL_DMA_IRQHandler+0xec>
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d029      	beq.n	800470c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10b      	bne.n	80046de <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 020a 	bic.w	r2, r2, #10
 80046d4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e2:	f003 021c 	and.w	r2, r3, #28
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	2102      	movs	r1, #2
 80046ec:	fa01 f202 	lsl.w	r2, r1, r2
 80046f0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d038      	beq.n	8004774 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800470a:	e033      	b.n	8004774 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004710:	f003 031c 	and.w	r3, r3, #28
 8004714:	2208      	movs	r2, #8
 8004716:	409a      	lsls	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4013      	ands	r3, r2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d02a      	beq.n	8004776 <HAL_DMA_IRQHandler+0x156>
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b00      	cmp	r3, #0
 8004728:	d025      	beq.n	8004776 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 020e 	bic.w	r2, r2, #14
 8004738:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473e:	f003 021c 	and.w	r2, r3, #28
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	2101      	movs	r1, #1
 8004748:	fa01 f202 	lsl.w	r2, r1, r2
 800474c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004768:	2b00      	cmp	r3, #0
 800476a:	d004      	beq.n	8004776 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004774:	bf00      	nop
 8004776:	bf00      	nop
}
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800478e:	e166      	b.n	8004a5e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	2101      	movs	r1, #1
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	fa01 f303 	lsl.w	r3, r1, r3
 800479c:	4013      	ands	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 8158 	beq.w	8004a58 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f003 0303 	and.w	r3, r3, #3
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d005      	beq.n	80047c0 <HAL_GPIO_Init+0x40>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f003 0303 	and.w	r3, r3, #3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d130      	bne.n	8004822 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	2203      	movs	r2, #3
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	43db      	mvns	r3, r3
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	4013      	ands	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047f6:	2201      	movs	r2, #1
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	43db      	mvns	r3, r3
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	4013      	ands	r3, r2
 8004804:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	091b      	lsrs	r3, r3, #4
 800480c:	f003 0201 	and.w	r2, r3, #1
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	2b03      	cmp	r3, #3
 800482c:	d017      	beq.n	800485e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	2203      	movs	r2, #3
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	43db      	mvns	r3, r3
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	4013      	ands	r3, r2
 8004844:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	689a      	ldr	r2, [r3, #8]
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	4313      	orrs	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d123      	bne.n	80048b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	08da      	lsrs	r2, r3, #3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3208      	adds	r2, #8
 8004872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004876:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	220f      	movs	r2, #15
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	43db      	mvns	r3, r3
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	4013      	ands	r3, r2
 800488c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	691a      	ldr	r2, [r3, #16]
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	08da      	lsrs	r2, r3, #3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	3208      	adds	r2, #8
 80048ac:	6939      	ldr	r1, [r7, #16]
 80048ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	2203      	movs	r2, #3
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	43db      	mvns	r3, r3
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4013      	ands	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f003 0203 	and.w	r2, r3, #3
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f000 80b2 	beq.w	8004a58 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048f4:	4b61      	ldr	r3, [pc, #388]	; (8004a7c <HAL_GPIO_Init+0x2fc>)
 80048f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f8:	4a60      	ldr	r2, [pc, #384]	; (8004a7c <HAL_GPIO_Init+0x2fc>)
 80048fa:	f043 0301 	orr.w	r3, r3, #1
 80048fe:	6613      	str	r3, [r2, #96]	; 0x60
 8004900:	4b5e      	ldr	r3, [pc, #376]	; (8004a7c <HAL_GPIO_Init+0x2fc>)
 8004902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	60bb      	str	r3, [r7, #8]
 800490a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800490c:	4a5c      	ldr	r2, [pc, #368]	; (8004a80 <HAL_GPIO_Init+0x300>)
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	089b      	lsrs	r3, r3, #2
 8004912:	3302      	adds	r3, #2
 8004914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004918:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f003 0303 	and.w	r3, r3, #3
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	220f      	movs	r2, #15
 8004924:	fa02 f303 	lsl.w	r3, r2, r3
 8004928:	43db      	mvns	r3, r3
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	4013      	ands	r3, r2
 800492e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004936:	d02b      	beq.n	8004990 <HAL_GPIO_Init+0x210>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a52      	ldr	r2, [pc, #328]	; (8004a84 <HAL_GPIO_Init+0x304>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d025      	beq.n	800498c <HAL_GPIO_Init+0x20c>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a51      	ldr	r2, [pc, #324]	; (8004a88 <HAL_GPIO_Init+0x308>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d01f      	beq.n	8004988 <HAL_GPIO_Init+0x208>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a50      	ldr	r2, [pc, #320]	; (8004a8c <HAL_GPIO_Init+0x30c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d019      	beq.n	8004984 <HAL_GPIO_Init+0x204>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a4f      	ldr	r2, [pc, #316]	; (8004a90 <HAL_GPIO_Init+0x310>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d013      	beq.n	8004980 <HAL_GPIO_Init+0x200>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a4e      	ldr	r2, [pc, #312]	; (8004a94 <HAL_GPIO_Init+0x314>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d00d      	beq.n	800497c <HAL_GPIO_Init+0x1fc>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a4d      	ldr	r2, [pc, #308]	; (8004a98 <HAL_GPIO_Init+0x318>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d007      	beq.n	8004978 <HAL_GPIO_Init+0x1f8>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a4c      	ldr	r2, [pc, #304]	; (8004a9c <HAL_GPIO_Init+0x31c>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d101      	bne.n	8004974 <HAL_GPIO_Init+0x1f4>
 8004970:	2307      	movs	r3, #7
 8004972:	e00e      	b.n	8004992 <HAL_GPIO_Init+0x212>
 8004974:	2308      	movs	r3, #8
 8004976:	e00c      	b.n	8004992 <HAL_GPIO_Init+0x212>
 8004978:	2306      	movs	r3, #6
 800497a:	e00a      	b.n	8004992 <HAL_GPIO_Init+0x212>
 800497c:	2305      	movs	r3, #5
 800497e:	e008      	b.n	8004992 <HAL_GPIO_Init+0x212>
 8004980:	2304      	movs	r3, #4
 8004982:	e006      	b.n	8004992 <HAL_GPIO_Init+0x212>
 8004984:	2303      	movs	r3, #3
 8004986:	e004      	b.n	8004992 <HAL_GPIO_Init+0x212>
 8004988:	2302      	movs	r3, #2
 800498a:	e002      	b.n	8004992 <HAL_GPIO_Init+0x212>
 800498c:	2301      	movs	r3, #1
 800498e:	e000      	b.n	8004992 <HAL_GPIO_Init+0x212>
 8004990:	2300      	movs	r3, #0
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	f002 0203 	and.w	r2, r2, #3
 8004998:	0092      	lsls	r2, r2, #2
 800499a:	4093      	lsls	r3, r2
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	4313      	orrs	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80049a2:	4937      	ldr	r1, [pc, #220]	; (8004a80 <HAL_GPIO_Init+0x300>)
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	089b      	lsrs	r3, r3, #2
 80049a8:	3302      	adds	r3, #2
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049b0:	4b3b      	ldr	r3, [pc, #236]	; (8004aa0 <HAL_GPIO_Init+0x320>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	43db      	mvns	r3, r3
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4013      	ands	r3, r2
 80049be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80049d4:	4a32      	ldr	r2, [pc, #200]	; (8004aa0 <HAL_GPIO_Init+0x320>)
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80049da:	4b31      	ldr	r3, [pc, #196]	; (8004aa0 <HAL_GPIO_Init+0x320>)
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	43db      	mvns	r3, r3
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	4013      	ands	r3, r2
 80049e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80049fe:	4a28      	ldr	r2, [pc, #160]	; (8004aa0 <HAL_GPIO_Init+0x320>)
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004a04:	4b26      	ldr	r3, [pc, #152]	; (8004aa0 <HAL_GPIO_Init+0x320>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	43db      	mvns	r3, r3
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	4013      	ands	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a28:	4a1d      	ldr	r2, [pc, #116]	; (8004aa0 <HAL_GPIO_Init+0x320>)
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004a2e:	4b1c      	ldr	r3, [pc, #112]	; (8004aa0 <HAL_GPIO_Init+0x320>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	43db      	mvns	r3, r3
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a52:	4a13      	ldr	r2, [pc, #76]	; (8004aa0 <HAL_GPIO_Init+0x320>)
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	fa22 f303 	lsr.w	r3, r2, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f47f ae91 	bne.w	8004790 <HAL_GPIO_Init+0x10>
  }
}
 8004a6e:	bf00      	nop
 8004a70:	bf00      	nop
 8004a72:	371c      	adds	r7, #28
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	40010000 	.word	0x40010000
 8004a84:	48000400 	.word	0x48000400
 8004a88:	48000800 	.word	0x48000800
 8004a8c:	48000c00 	.word	0x48000c00
 8004a90:	48001000 	.word	0x48001000
 8004a94:	48001400 	.word	0x48001400
 8004a98:	48001800 	.word	0x48001800
 8004a9c:	48001c00 	.word	0x48001c00
 8004aa0:	40010400 	.word	0x40010400

08004aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	460b      	mov	r3, r1
 8004aae:	807b      	strh	r3, [r7, #2]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ab4:	787b      	ldrb	r3, [r7, #1]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004aba:	887a      	ldrh	r2, [r7, #2]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ac0:	e002      	b.n	8004ac8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ac2:	887a      	ldrh	r2, [r7, #2]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	4603      	mov	r3, r0
 8004adc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004ade:	4b08      	ldr	r3, [pc, #32]	; (8004b00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ae0:	695a      	ldr	r2, [r3, #20]
 8004ae2:	88fb      	ldrh	r3, [r7, #6]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d006      	beq.n	8004af8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004aea:	4a05      	ldr	r2, [pc, #20]	; (8004b00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004aec:	88fb      	ldrh	r3, [r7, #6]
 8004aee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004af0:	88fb      	ldrh	r3, [r7, #6]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fc fd1e 	bl	8001534 <HAL_GPIO_EXTI_Callback>
  }
}
 8004af8:	bf00      	nop
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40010400 	.word	0x40010400

08004b04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004b08:	4b04      	ldr	r3, [pc, #16]	; (8004b1c <HAL_PWREx_GetVoltageRange+0x18>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	40007000 	.word	0x40007000

08004b20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b2e:	d130      	bne.n	8004b92 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b30:	4b23      	ldr	r3, [pc, #140]	; (8004bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b3c:	d038      	beq.n	8004bb0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b3e:	4b20      	ldr	r3, [pc, #128]	; (8004bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b46:	4a1e      	ldr	r2, [pc, #120]	; (8004bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b4c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b4e:	4b1d      	ldr	r3, [pc, #116]	; (8004bc4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2232      	movs	r2, #50	; 0x32
 8004b54:	fb02 f303 	mul.w	r3, r2, r3
 8004b58:	4a1b      	ldr	r2, [pc, #108]	; (8004bc8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5e:	0c9b      	lsrs	r3, r3, #18
 8004b60:	3301      	adds	r3, #1
 8004b62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b64:	e002      	b.n	8004b6c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b6c:	4b14      	ldr	r3, [pc, #80]	; (8004bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b78:	d102      	bne.n	8004b80 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1f2      	bne.n	8004b66 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b80:	4b0f      	ldr	r3, [pc, #60]	; (8004bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b8c:	d110      	bne.n	8004bb0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e00f      	b.n	8004bb2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b92:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b9e:	d007      	beq.n	8004bb0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ba0:	4b07      	ldr	r3, [pc, #28]	; (8004bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ba8:	4a05      	ldr	r2, [pc, #20]	; (8004bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004baa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	40007000 	.word	0x40007000
 8004bc4:	20000000 	.word	0x20000000
 8004bc8:	431bde83 	.word	0x431bde83

08004bcc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004bd0:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	4a04      	ldr	r2, [pc, #16]	; (8004be8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bda:	6053      	str	r3, [r2, #4]
}
 8004bdc:	bf00      	nop
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	40007000 	.word	0x40007000

08004bec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b088      	sub	sp, #32
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d102      	bne.n	8004c00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	f000 bc08 	b.w	8005410 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c00:	4b96      	ldr	r3, [pc, #600]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f003 030c 	and.w	r3, r3, #12
 8004c08:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c0a:	4b94      	ldr	r3, [pc, #592]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f003 0303 	and.w	r3, r3, #3
 8004c12:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 80e4 	beq.w	8004dea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d007      	beq.n	8004c38 <HAL_RCC_OscConfig+0x4c>
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	2b0c      	cmp	r3, #12
 8004c2c:	f040 808b 	bne.w	8004d46 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	f040 8087 	bne.w	8004d46 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c38:	4b88      	ldr	r3, [pc, #544]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d005      	beq.n	8004c50 <HAL_RCC_OscConfig+0x64>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e3df      	b.n	8005410 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a1a      	ldr	r2, [r3, #32]
 8004c54:	4b81      	ldr	r3, [pc, #516]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0308 	and.w	r3, r3, #8
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d004      	beq.n	8004c6a <HAL_RCC_OscConfig+0x7e>
 8004c60:	4b7e      	ldr	r3, [pc, #504]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c68:	e005      	b.n	8004c76 <HAL_RCC_OscConfig+0x8a>
 8004c6a:	4b7c      	ldr	r3, [pc, #496]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c70:	091b      	lsrs	r3, r3, #4
 8004c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d223      	bcs.n	8004cc2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 fd92 	bl	80057a8 <RCC_SetFlashLatencyFromMSIRange>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e3c0      	b.n	8005410 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c8e:	4b73      	ldr	r3, [pc, #460]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a72      	ldr	r2, [pc, #456]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004c94:	f043 0308 	orr.w	r3, r3, #8
 8004c98:	6013      	str	r3, [r2, #0]
 8004c9a:	4b70      	ldr	r3, [pc, #448]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	496d      	ldr	r1, [pc, #436]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cac:	4b6b      	ldr	r3, [pc, #428]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	021b      	lsls	r3, r3, #8
 8004cba:	4968      	ldr	r1, [pc, #416]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	604b      	str	r3, [r1, #4]
 8004cc0:	e025      	b.n	8004d0e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cc2:	4b66      	ldr	r3, [pc, #408]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a65      	ldr	r2, [pc, #404]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004cc8:	f043 0308 	orr.w	r3, r3, #8
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	4b63      	ldr	r3, [pc, #396]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	4960      	ldr	r1, [pc, #384]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ce0:	4b5e      	ldr	r3, [pc, #376]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	021b      	lsls	r3, r3, #8
 8004cee:	495b      	ldr	r1, [pc, #364]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d109      	bne.n	8004d0e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 fd52 	bl	80057a8 <RCC_SetFlashLatencyFromMSIRange>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e380      	b.n	8005410 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d0e:	f000 fc87 	bl	8005620 <HAL_RCC_GetSysClockFreq>
 8004d12:	4602      	mov	r2, r0
 8004d14:	4b51      	ldr	r3, [pc, #324]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	091b      	lsrs	r3, r3, #4
 8004d1a:	f003 030f 	and.w	r3, r3, #15
 8004d1e:	4950      	ldr	r1, [pc, #320]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004d20:	5ccb      	ldrb	r3, [r1, r3]
 8004d22:	f003 031f 	and.w	r3, r3, #31
 8004d26:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2a:	4a4e      	ldr	r2, [pc, #312]	; (8004e64 <HAL_RCC_OscConfig+0x278>)
 8004d2c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004d2e:	4b4e      	ldr	r3, [pc, #312]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fe f942 	bl	8002fbc <HAL_InitTick>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004d3c:	7bfb      	ldrb	r3, [r7, #15]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d052      	beq.n	8004de8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004d42:	7bfb      	ldrb	r3, [r7, #15]
 8004d44:	e364      	b.n	8005410 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d032      	beq.n	8004db4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d4e:	4b43      	ldr	r3, [pc, #268]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a42      	ldr	r2, [pc, #264]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004d54:	f043 0301 	orr.w	r3, r3, #1
 8004d58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d5a:	f7fe f97f 	bl	800305c <HAL_GetTick>
 8004d5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d62:	f7fe f97b 	bl	800305c <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e34d      	b.n	8005410 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d74:	4b39      	ldr	r3, [pc, #228]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0f0      	beq.n	8004d62 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d80:	4b36      	ldr	r3, [pc, #216]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a35      	ldr	r2, [pc, #212]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004d86:	f043 0308 	orr.w	r3, r3, #8
 8004d8a:	6013      	str	r3, [r2, #0]
 8004d8c:	4b33      	ldr	r3, [pc, #204]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	4930      	ldr	r1, [pc, #192]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d9e:	4b2f      	ldr	r3, [pc, #188]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	021b      	lsls	r3, r3, #8
 8004dac:	492b      	ldr	r1, [pc, #172]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	604b      	str	r3, [r1, #4]
 8004db2:	e01a      	b.n	8004dea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004db4:	4b29      	ldr	r3, [pc, #164]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a28      	ldr	r2, [pc, #160]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004dba:	f023 0301 	bic.w	r3, r3, #1
 8004dbe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004dc0:	f7fe f94c 	bl	800305c <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004dc8:	f7fe f948 	bl	800305c <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e31a      	b.n	8005410 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004dda:	4b20      	ldr	r3, [pc, #128]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f0      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x1dc>
 8004de6:	e000      	b.n	8004dea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004de8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d073      	beq.n	8004ede <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d005      	beq.n	8004e08 <HAL_RCC_OscConfig+0x21c>
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	2b0c      	cmp	r3, #12
 8004e00:	d10e      	bne.n	8004e20 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2b03      	cmp	r3, #3
 8004e06:	d10b      	bne.n	8004e20 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e08:	4b14      	ldr	r3, [pc, #80]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d063      	beq.n	8004edc <HAL_RCC_OscConfig+0x2f0>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d15f      	bne.n	8004edc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e2f7      	b.n	8005410 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e28:	d106      	bne.n	8004e38 <HAL_RCC_OscConfig+0x24c>
 8004e2a:	4b0c      	ldr	r3, [pc, #48]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a0b      	ldr	r2, [pc, #44]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	e025      	b.n	8004e84 <HAL_RCC_OscConfig+0x298>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e40:	d114      	bne.n	8004e6c <HAL_RCC_OscConfig+0x280>
 8004e42:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a05      	ldr	r2, [pc, #20]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e4c:	6013      	str	r3, [r2, #0]
 8004e4e:	4b03      	ldr	r3, [pc, #12]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a02      	ldr	r2, [pc, #8]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	e013      	b.n	8004e84 <HAL_RCC_OscConfig+0x298>
 8004e5c:	40021000 	.word	0x40021000
 8004e60:	0800b034 	.word	0x0800b034
 8004e64:	20000000 	.word	0x20000000
 8004e68:	20000004 	.word	0x20000004
 8004e6c:	4ba0      	ldr	r3, [pc, #640]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a9f      	ldr	r2, [pc, #636]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 8004e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e76:	6013      	str	r3, [r2, #0]
 8004e78:	4b9d      	ldr	r3, [pc, #628]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a9c      	ldr	r2, [pc, #624]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 8004e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d013      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e8c:	f7fe f8e6 	bl	800305c <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e94:	f7fe f8e2 	bl	800305c <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b64      	cmp	r3, #100	; 0x64
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e2b4      	b.n	8005410 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ea6:	4b92      	ldr	r3, [pc, #584]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0f0      	beq.n	8004e94 <HAL_RCC_OscConfig+0x2a8>
 8004eb2:	e014      	b.n	8004ede <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb4:	f7fe f8d2 	bl	800305c <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ebc:	f7fe f8ce 	bl	800305c <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b64      	cmp	r3, #100	; 0x64
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e2a0      	b.n	8005410 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ece:	4b88      	ldr	r3, [pc, #544]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1f0      	bne.n	8004ebc <HAL_RCC_OscConfig+0x2d0>
 8004eda:	e000      	b.n	8004ede <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d060      	beq.n	8004fac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	2b04      	cmp	r3, #4
 8004eee:	d005      	beq.n	8004efc <HAL_RCC_OscConfig+0x310>
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	2b0c      	cmp	r3, #12
 8004ef4:	d119      	bne.n	8004f2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d116      	bne.n	8004f2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004efc:	4b7c      	ldr	r3, [pc, #496]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d005      	beq.n	8004f14 <HAL_RCC_OscConfig+0x328>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e27d      	b.n	8005410 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f14:	4b76      	ldr	r3, [pc, #472]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	061b      	lsls	r3, r3, #24
 8004f22:	4973      	ldr	r1, [pc, #460]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f28:	e040      	b.n	8004fac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d023      	beq.n	8004f7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f32:	4b6f      	ldr	r3, [pc, #444]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a6e      	ldr	r2, [pc, #440]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 8004f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3e:	f7fe f88d 	bl	800305c <HAL_GetTick>
 8004f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f44:	e008      	b.n	8004f58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f46:	f7fe f889 	bl	800305c <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e25b      	b.n	8005410 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f58:	4b65      	ldr	r3, [pc, #404]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0f0      	beq.n	8004f46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f64:	4b62      	ldr	r3, [pc, #392]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	061b      	lsls	r3, r3, #24
 8004f72:	495f      	ldr	r1, [pc, #380]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	604b      	str	r3, [r1, #4]
 8004f78:	e018      	b.n	8004fac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f7a:	4b5d      	ldr	r3, [pc, #372]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a5c      	ldr	r2, [pc, #368]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 8004f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f86:	f7fe f869 	bl	800305c <HAL_GetTick>
 8004f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f8c:	e008      	b.n	8004fa0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f8e:	f7fe f865 	bl	800305c <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d901      	bls.n	8004fa0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e237      	b.n	8005410 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fa0:	4b53      	ldr	r3, [pc, #332]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1f0      	bne.n	8004f8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0308 	and.w	r3, r3, #8
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d03c      	beq.n	8005032 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d01c      	beq.n	8004ffa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fc0:	4b4b      	ldr	r3, [pc, #300]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 8004fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fc6:	4a4a      	ldr	r2, [pc, #296]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 8004fc8:	f043 0301 	orr.w	r3, r3, #1
 8004fcc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd0:	f7fe f844 	bl	800305c <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fd8:	f7fe f840 	bl	800305c <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e212      	b.n	8005410 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fea:	4b41      	ldr	r3, [pc, #260]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 8004fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0ef      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x3ec>
 8004ff8:	e01b      	b.n	8005032 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ffa:	4b3d      	ldr	r3, [pc, #244]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 8004ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005000:	4a3b      	ldr	r2, [pc, #236]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 8005002:	f023 0301 	bic.w	r3, r3, #1
 8005006:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500a:	f7fe f827 	bl	800305c <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005010:	e008      	b.n	8005024 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005012:	f7fe f823 	bl	800305c <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e1f5      	b.n	8005410 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005024:	4b32      	ldr	r3, [pc, #200]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 8005026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1ef      	bne.n	8005012 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0304 	and.w	r3, r3, #4
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 80a6 	beq.w	800518c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005040:	2300      	movs	r3, #0
 8005042:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005044:	4b2a      	ldr	r3, [pc, #168]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 8005046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10d      	bne.n	800506c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005050:	4b27      	ldr	r3, [pc, #156]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 8005052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005054:	4a26      	ldr	r2, [pc, #152]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 8005056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800505a:	6593      	str	r3, [r2, #88]	; 0x58
 800505c:	4b24      	ldr	r3, [pc, #144]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 800505e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005064:	60bb      	str	r3, [r7, #8]
 8005066:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005068:	2301      	movs	r3, #1
 800506a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800506c:	4b21      	ldr	r3, [pc, #132]	; (80050f4 <HAL_RCC_OscConfig+0x508>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005074:	2b00      	cmp	r3, #0
 8005076:	d118      	bne.n	80050aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005078:	4b1e      	ldr	r3, [pc, #120]	; (80050f4 <HAL_RCC_OscConfig+0x508>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a1d      	ldr	r2, [pc, #116]	; (80050f4 <HAL_RCC_OscConfig+0x508>)
 800507e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005082:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005084:	f7fd ffea 	bl	800305c <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800508c:	f7fd ffe6 	bl	800305c <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e1b8      	b.n	8005410 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800509e:	4b15      	ldr	r3, [pc, #84]	; (80050f4 <HAL_RCC_OscConfig+0x508>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0f0      	beq.n	800508c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d108      	bne.n	80050c4 <HAL_RCC_OscConfig+0x4d8>
 80050b2:	4b0f      	ldr	r3, [pc, #60]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 80050b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b8:	4a0d      	ldr	r2, [pc, #52]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 80050ba:	f043 0301 	orr.w	r3, r3, #1
 80050be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050c2:	e029      	b.n	8005118 <HAL_RCC_OscConfig+0x52c>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	2b05      	cmp	r3, #5
 80050ca:	d115      	bne.n	80050f8 <HAL_RCC_OscConfig+0x50c>
 80050cc:	4b08      	ldr	r3, [pc, #32]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 80050ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d2:	4a07      	ldr	r2, [pc, #28]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 80050d4:	f043 0304 	orr.w	r3, r3, #4
 80050d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050dc:	4b04      	ldr	r3, [pc, #16]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 80050de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e2:	4a03      	ldr	r2, [pc, #12]	; (80050f0 <HAL_RCC_OscConfig+0x504>)
 80050e4:	f043 0301 	orr.w	r3, r3, #1
 80050e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050ec:	e014      	b.n	8005118 <HAL_RCC_OscConfig+0x52c>
 80050ee:	bf00      	nop
 80050f0:	40021000 	.word	0x40021000
 80050f4:	40007000 	.word	0x40007000
 80050f8:	4b9d      	ldr	r3, [pc, #628]	; (8005370 <HAL_RCC_OscConfig+0x784>)
 80050fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fe:	4a9c      	ldr	r2, [pc, #624]	; (8005370 <HAL_RCC_OscConfig+0x784>)
 8005100:	f023 0301 	bic.w	r3, r3, #1
 8005104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005108:	4b99      	ldr	r3, [pc, #612]	; (8005370 <HAL_RCC_OscConfig+0x784>)
 800510a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510e:	4a98      	ldr	r2, [pc, #608]	; (8005370 <HAL_RCC_OscConfig+0x784>)
 8005110:	f023 0304 	bic.w	r3, r3, #4
 8005114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d016      	beq.n	800514e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005120:	f7fd ff9c 	bl	800305c <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005126:	e00a      	b.n	800513e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005128:	f7fd ff98 	bl	800305c <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	f241 3288 	movw	r2, #5000	; 0x1388
 8005136:	4293      	cmp	r3, r2
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e168      	b.n	8005410 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800513e:	4b8c      	ldr	r3, [pc, #560]	; (8005370 <HAL_RCC_OscConfig+0x784>)
 8005140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0ed      	beq.n	8005128 <HAL_RCC_OscConfig+0x53c>
 800514c:	e015      	b.n	800517a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514e:	f7fd ff85 	bl	800305c <HAL_GetTick>
 8005152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005154:	e00a      	b.n	800516c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005156:	f7fd ff81 	bl	800305c <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	f241 3288 	movw	r2, #5000	; 0x1388
 8005164:	4293      	cmp	r3, r2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e151      	b.n	8005410 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800516c:	4b80      	ldr	r3, [pc, #512]	; (8005370 <HAL_RCC_OscConfig+0x784>)
 800516e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1ed      	bne.n	8005156 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800517a:	7ffb      	ldrb	r3, [r7, #31]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d105      	bne.n	800518c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005180:	4b7b      	ldr	r3, [pc, #492]	; (8005370 <HAL_RCC_OscConfig+0x784>)
 8005182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005184:	4a7a      	ldr	r2, [pc, #488]	; (8005370 <HAL_RCC_OscConfig+0x784>)
 8005186:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800518a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0320 	and.w	r3, r3, #32
 8005194:	2b00      	cmp	r3, #0
 8005196:	d03c      	beq.n	8005212 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	2b00      	cmp	r3, #0
 800519e:	d01c      	beq.n	80051da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80051a0:	4b73      	ldr	r3, [pc, #460]	; (8005370 <HAL_RCC_OscConfig+0x784>)
 80051a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051a6:	4a72      	ldr	r2, [pc, #456]	; (8005370 <HAL_RCC_OscConfig+0x784>)
 80051a8:	f043 0301 	orr.w	r3, r3, #1
 80051ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b0:	f7fd ff54 	bl	800305c <HAL_GetTick>
 80051b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051b6:	e008      	b.n	80051ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051b8:	f7fd ff50 	bl	800305c <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e122      	b.n	8005410 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051ca:	4b69      	ldr	r3, [pc, #420]	; (8005370 <HAL_RCC_OscConfig+0x784>)
 80051cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d0ef      	beq.n	80051b8 <HAL_RCC_OscConfig+0x5cc>
 80051d8:	e01b      	b.n	8005212 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80051da:	4b65      	ldr	r3, [pc, #404]	; (8005370 <HAL_RCC_OscConfig+0x784>)
 80051dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051e0:	4a63      	ldr	r2, [pc, #396]	; (8005370 <HAL_RCC_OscConfig+0x784>)
 80051e2:	f023 0301 	bic.w	r3, r3, #1
 80051e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ea:	f7fd ff37 	bl	800305c <HAL_GetTick>
 80051ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051f0:	e008      	b.n	8005204 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051f2:	f7fd ff33 	bl	800305c <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e105      	b.n	8005410 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005204:	4b5a      	ldr	r3, [pc, #360]	; (8005370 <HAL_RCC_OscConfig+0x784>)
 8005206:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1ef      	bne.n	80051f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 80f9 	beq.w	800540e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005220:	2b02      	cmp	r3, #2
 8005222:	f040 80cf 	bne.w	80053c4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005226:	4b52      	ldr	r3, [pc, #328]	; (8005370 <HAL_RCC_OscConfig+0x784>)
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f003 0203 	and.w	r2, r3, #3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005236:	429a      	cmp	r2, r3
 8005238:	d12c      	bne.n	8005294 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005244:	3b01      	subs	r3, #1
 8005246:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005248:	429a      	cmp	r2, r3
 800524a:	d123      	bne.n	8005294 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005256:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005258:	429a      	cmp	r2, r3
 800525a:	d11b      	bne.n	8005294 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005266:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005268:	429a      	cmp	r2, r3
 800526a:	d113      	bne.n	8005294 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005276:	085b      	lsrs	r3, r3, #1
 8005278:	3b01      	subs	r3, #1
 800527a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800527c:	429a      	cmp	r2, r3
 800527e:	d109      	bne.n	8005294 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	085b      	lsrs	r3, r3, #1
 800528c:	3b01      	subs	r3, #1
 800528e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005290:	429a      	cmp	r2, r3
 8005292:	d071      	beq.n	8005378 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	2b0c      	cmp	r3, #12
 8005298:	d068      	beq.n	800536c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800529a:	4b35      	ldr	r3, [pc, #212]	; (8005370 <HAL_RCC_OscConfig+0x784>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d105      	bne.n	80052b2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80052a6:	4b32      	ldr	r3, [pc, #200]	; (8005370 <HAL_RCC_OscConfig+0x784>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e0ac      	b.n	8005410 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80052b6:	4b2e      	ldr	r3, [pc, #184]	; (8005370 <HAL_RCC_OscConfig+0x784>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a2d      	ldr	r2, [pc, #180]	; (8005370 <HAL_RCC_OscConfig+0x784>)
 80052bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80052c2:	f7fd fecb 	bl	800305c <HAL_GetTick>
 80052c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052c8:	e008      	b.n	80052dc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ca:	f7fd fec7 	bl	800305c <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d901      	bls.n	80052dc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e099      	b.n	8005410 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052dc:	4b24      	ldr	r3, [pc, #144]	; (8005370 <HAL_RCC_OscConfig+0x784>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1f0      	bne.n	80052ca <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052e8:	4b21      	ldr	r3, [pc, #132]	; (8005370 <HAL_RCC_OscConfig+0x784>)
 80052ea:	68da      	ldr	r2, [r3, #12]
 80052ec:	4b21      	ldr	r3, [pc, #132]	; (8005374 <HAL_RCC_OscConfig+0x788>)
 80052ee:	4013      	ands	r3, r2
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80052f8:	3a01      	subs	r2, #1
 80052fa:	0112      	lsls	r2, r2, #4
 80052fc:	4311      	orrs	r1, r2
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005302:	0212      	lsls	r2, r2, #8
 8005304:	4311      	orrs	r1, r2
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800530a:	0852      	lsrs	r2, r2, #1
 800530c:	3a01      	subs	r2, #1
 800530e:	0552      	lsls	r2, r2, #21
 8005310:	4311      	orrs	r1, r2
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005316:	0852      	lsrs	r2, r2, #1
 8005318:	3a01      	subs	r2, #1
 800531a:	0652      	lsls	r2, r2, #25
 800531c:	4311      	orrs	r1, r2
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005322:	06d2      	lsls	r2, r2, #27
 8005324:	430a      	orrs	r2, r1
 8005326:	4912      	ldr	r1, [pc, #72]	; (8005370 <HAL_RCC_OscConfig+0x784>)
 8005328:	4313      	orrs	r3, r2
 800532a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800532c:	4b10      	ldr	r3, [pc, #64]	; (8005370 <HAL_RCC_OscConfig+0x784>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a0f      	ldr	r2, [pc, #60]	; (8005370 <HAL_RCC_OscConfig+0x784>)
 8005332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005336:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005338:	4b0d      	ldr	r3, [pc, #52]	; (8005370 <HAL_RCC_OscConfig+0x784>)
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	4a0c      	ldr	r2, [pc, #48]	; (8005370 <HAL_RCC_OscConfig+0x784>)
 800533e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005342:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005344:	f7fd fe8a 	bl	800305c <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800534a:	e008      	b.n	800535e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800534c:	f7fd fe86 	bl	800305c <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b02      	cmp	r3, #2
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e058      	b.n	8005410 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800535e:	4b04      	ldr	r3, [pc, #16]	; (8005370 <HAL_RCC_OscConfig+0x784>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0f0      	beq.n	800534c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800536a:	e050      	b.n	800540e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e04f      	b.n	8005410 <HAL_RCC_OscConfig+0x824>
 8005370:	40021000 	.word	0x40021000
 8005374:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005378:	4b27      	ldr	r3, [pc, #156]	; (8005418 <HAL_RCC_OscConfig+0x82c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d144      	bne.n	800540e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005384:	4b24      	ldr	r3, [pc, #144]	; (8005418 <HAL_RCC_OscConfig+0x82c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a23      	ldr	r2, [pc, #140]	; (8005418 <HAL_RCC_OscConfig+0x82c>)
 800538a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800538e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005390:	4b21      	ldr	r3, [pc, #132]	; (8005418 <HAL_RCC_OscConfig+0x82c>)
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	4a20      	ldr	r2, [pc, #128]	; (8005418 <HAL_RCC_OscConfig+0x82c>)
 8005396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800539a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800539c:	f7fd fe5e 	bl	800305c <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053a4:	f7fd fe5a 	bl	800305c <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e02c      	b.n	8005410 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053b6:	4b18      	ldr	r3, [pc, #96]	; (8005418 <HAL_RCC_OscConfig+0x82c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d0f0      	beq.n	80053a4 <HAL_RCC_OscConfig+0x7b8>
 80053c2:	e024      	b.n	800540e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	2b0c      	cmp	r3, #12
 80053c8:	d01f      	beq.n	800540a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ca:	4b13      	ldr	r3, [pc, #76]	; (8005418 <HAL_RCC_OscConfig+0x82c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a12      	ldr	r2, [pc, #72]	; (8005418 <HAL_RCC_OscConfig+0x82c>)
 80053d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d6:	f7fd fe41 	bl	800305c <HAL_GetTick>
 80053da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053dc:	e008      	b.n	80053f0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053de:	f7fd fe3d 	bl	800305c <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d901      	bls.n	80053f0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e00f      	b.n	8005410 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053f0:	4b09      	ldr	r3, [pc, #36]	; (8005418 <HAL_RCC_OscConfig+0x82c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1f0      	bne.n	80053de <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80053fc:	4b06      	ldr	r3, [pc, #24]	; (8005418 <HAL_RCC_OscConfig+0x82c>)
 80053fe:	68da      	ldr	r2, [r3, #12]
 8005400:	4905      	ldr	r1, [pc, #20]	; (8005418 <HAL_RCC_OscConfig+0x82c>)
 8005402:	4b06      	ldr	r3, [pc, #24]	; (800541c <HAL_RCC_OscConfig+0x830>)
 8005404:	4013      	ands	r3, r2
 8005406:	60cb      	str	r3, [r1, #12]
 8005408:	e001      	b.n	800540e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e000      	b.n	8005410 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3720      	adds	r7, #32
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	40021000 	.word	0x40021000
 800541c:	feeefffc 	.word	0xfeeefffc

08005420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d101      	bne.n	8005434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e0e7      	b.n	8005604 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005434:	4b75      	ldr	r3, [pc, #468]	; (800560c <HAL_RCC_ClockConfig+0x1ec>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0307 	and.w	r3, r3, #7
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	429a      	cmp	r2, r3
 8005440:	d910      	bls.n	8005464 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005442:	4b72      	ldr	r3, [pc, #456]	; (800560c <HAL_RCC_ClockConfig+0x1ec>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f023 0207 	bic.w	r2, r3, #7
 800544a:	4970      	ldr	r1, [pc, #448]	; (800560c <HAL_RCC_ClockConfig+0x1ec>)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	4313      	orrs	r3, r2
 8005450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005452:	4b6e      	ldr	r3, [pc, #440]	; (800560c <HAL_RCC_ClockConfig+0x1ec>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0307 	and.w	r3, r3, #7
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	429a      	cmp	r2, r3
 800545e:	d001      	beq.n	8005464 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e0cf      	b.n	8005604 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d010      	beq.n	8005492 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	4b66      	ldr	r3, [pc, #408]	; (8005610 <HAL_RCC_ClockConfig+0x1f0>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800547c:	429a      	cmp	r2, r3
 800547e:	d908      	bls.n	8005492 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005480:	4b63      	ldr	r3, [pc, #396]	; (8005610 <HAL_RCC_ClockConfig+0x1f0>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	4960      	ldr	r1, [pc, #384]	; (8005610 <HAL_RCC_ClockConfig+0x1f0>)
 800548e:	4313      	orrs	r3, r2
 8005490:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d04c      	beq.n	8005538 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	2b03      	cmp	r3, #3
 80054a4:	d107      	bne.n	80054b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054a6:	4b5a      	ldr	r3, [pc, #360]	; (8005610 <HAL_RCC_ClockConfig+0x1f0>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d121      	bne.n	80054f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e0a6      	b.n	8005604 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d107      	bne.n	80054ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054be:	4b54      	ldr	r3, [pc, #336]	; (8005610 <HAL_RCC_ClockConfig+0x1f0>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d115      	bne.n	80054f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e09a      	b.n	8005604 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d107      	bne.n	80054e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054d6:	4b4e      	ldr	r3, [pc, #312]	; (8005610 <HAL_RCC_ClockConfig+0x1f0>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d109      	bne.n	80054f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e08e      	b.n	8005604 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054e6:	4b4a      	ldr	r3, [pc, #296]	; (8005610 <HAL_RCC_ClockConfig+0x1f0>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e086      	b.n	8005604 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054f6:	4b46      	ldr	r3, [pc, #280]	; (8005610 <HAL_RCC_ClockConfig+0x1f0>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f023 0203 	bic.w	r2, r3, #3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	4943      	ldr	r1, [pc, #268]	; (8005610 <HAL_RCC_ClockConfig+0x1f0>)
 8005504:	4313      	orrs	r3, r2
 8005506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005508:	f7fd fda8 	bl	800305c <HAL_GetTick>
 800550c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800550e:	e00a      	b.n	8005526 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005510:	f7fd fda4 	bl	800305c <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	f241 3288 	movw	r2, #5000	; 0x1388
 800551e:	4293      	cmp	r3, r2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e06e      	b.n	8005604 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005526:	4b3a      	ldr	r3, [pc, #232]	; (8005610 <HAL_RCC_ClockConfig+0x1f0>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f003 020c 	and.w	r2, r3, #12
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	429a      	cmp	r2, r3
 8005536:	d1eb      	bne.n	8005510 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d010      	beq.n	8005566 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	4b31      	ldr	r3, [pc, #196]	; (8005610 <HAL_RCC_ClockConfig+0x1f0>)
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005550:	429a      	cmp	r2, r3
 8005552:	d208      	bcs.n	8005566 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005554:	4b2e      	ldr	r3, [pc, #184]	; (8005610 <HAL_RCC_ClockConfig+0x1f0>)
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	492b      	ldr	r1, [pc, #172]	; (8005610 <HAL_RCC_ClockConfig+0x1f0>)
 8005562:	4313      	orrs	r3, r2
 8005564:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005566:	4b29      	ldr	r3, [pc, #164]	; (800560c <HAL_RCC_ClockConfig+0x1ec>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0307 	and.w	r3, r3, #7
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	d210      	bcs.n	8005596 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005574:	4b25      	ldr	r3, [pc, #148]	; (800560c <HAL_RCC_ClockConfig+0x1ec>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f023 0207 	bic.w	r2, r3, #7
 800557c:	4923      	ldr	r1, [pc, #140]	; (800560c <HAL_RCC_ClockConfig+0x1ec>)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	4313      	orrs	r3, r2
 8005582:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005584:	4b21      	ldr	r3, [pc, #132]	; (800560c <HAL_RCC_ClockConfig+0x1ec>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0307 	and.w	r3, r3, #7
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	429a      	cmp	r2, r3
 8005590:	d001      	beq.n	8005596 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e036      	b.n	8005604 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0304 	and.w	r3, r3, #4
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d008      	beq.n	80055b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055a2:	4b1b      	ldr	r3, [pc, #108]	; (8005610 <HAL_RCC_ClockConfig+0x1f0>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	4918      	ldr	r1, [pc, #96]	; (8005610 <HAL_RCC_ClockConfig+0x1f0>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0308 	and.w	r3, r3, #8
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d009      	beq.n	80055d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055c0:	4b13      	ldr	r3, [pc, #76]	; (8005610 <HAL_RCC_ClockConfig+0x1f0>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	00db      	lsls	r3, r3, #3
 80055ce:	4910      	ldr	r1, [pc, #64]	; (8005610 <HAL_RCC_ClockConfig+0x1f0>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055d4:	f000 f824 	bl	8005620 <HAL_RCC_GetSysClockFreq>
 80055d8:	4602      	mov	r2, r0
 80055da:	4b0d      	ldr	r3, [pc, #52]	; (8005610 <HAL_RCC_ClockConfig+0x1f0>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	091b      	lsrs	r3, r3, #4
 80055e0:	f003 030f 	and.w	r3, r3, #15
 80055e4:	490b      	ldr	r1, [pc, #44]	; (8005614 <HAL_RCC_ClockConfig+0x1f4>)
 80055e6:	5ccb      	ldrb	r3, [r1, r3]
 80055e8:	f003 031f 	and.w	r3, r3, #31
 80055ec:	fa22 f303 	lsr.w	r3, r2, r3
 80055f0:	4a09      	ldr	r2, [pc, #36]	; (8005618 <HAL_RCC_ClockConfig+0x1f8>)
 80055f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80055f4:	4b09      	ldr	r3, [pc, #36]	; (800561c <HAL_RCC_ClockConfig+0x1fc>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7fd fcdf 	bl	8002fbc <HAL_InitTick>
 80055fe:	4603      	mov	r3, r0
 8005600:	72fb      	strb	r3, [r7, #11]

  return status;
 8005602:	7afb      	ldrb	r3, [r7, #11]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	40022000 	.word	0x40022000
 8005610:	40021000 	.word	0x40021000
 8005614:	0800b034 	.word	0x0800b034
 8005618:	20000000 	.word	0x20000000
 800561c:	20000004 	.word	0x20000004

08005620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005620:	b480      	push	{r7}
 8005622:	b089      	sub	sp, #36	; 0x24
 8005624:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005626:	2300      	movs	r3, #0
 8005628:	61fb      	str	r3, [r7, #28]
 800562a:	2300      	movs	r3, #0
 800562c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800562e:	4b3e      	ldr	r3, [pc, #248]	; (8005728 <HAL_RCC_GetSysClockFreq+0x108>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 030c 	and.w	r3, r3, #12
 8005636:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005638:	4b3b      	ldr	r3, [pc, #236]	; (8005728 <HAL_RCC_GetSysClockFreq+0x108>)
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f003 0303 	and.w	r3, r3, #3
 8005640:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d005      	beq.n	8005654 <HAL_RCC_GetSysClockFreq+0x34>
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	2b0c      	cmp	r3, #12
 800564c:	d121      	bne.n	8005692 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d11e      	bne.n	8005692 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005654:	4b34      	ldr	r3, [pc, #208]	; (8005728 <HAL_RCC_GetSysClockFreq+0x108>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0308 	and.w	r3, r3, #8
 800565c:	2b00      	cmp	r3, #0
 800565e:	d107      	bne.n	8005670 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005660:	4b31      	ldr	r3, [pc, #196]	; (8005728 <HAL_RCC_GetSysClockFreq+0x108>)
 8005662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005666:	0a1b      	lsrs	r3, r3, #8
 8005668:	f003 030f 	and.w	r3, r3, #15
 800566c:	61fb      	str	r3, [r7, #28]
 800566e:	e005      	b.n	800567c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005670:	4b2d      	ldr	r3, [pc, #180]	; (8005728 <HAL_RCC_GetSysClockFreq+0x108>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	091b      	lsrs	r3, r3, #4
 8005676:	f003 030f 	and.w	r3, r3, #15
 800567a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800567c:	4a2b      	ldr	r2, [pc, #172]	; (800572c <HAL_RCC_GetSysClockFreq+0x10c>)
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005684:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10d      	bne.n	80056a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005690:	e00a      	b.n	80056a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	2b04      	cmp	r3, #4
 8005696:	d102      	bne.n	800569e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005698:	4b25      	ldr	r3, [pc, #148]	; (8005730 <HAL_RCC_GetSysClockFreq+0x110>)
 800569a:	61bb      	str	r3, [r7, #24]
 800569c:	e004      	b.n	80056a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	d101      	bne.n	80056a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80056a4:	4b23      	ldr	r3, [pc, #140]	; (8005734 <HAL_RCC_GetSysClockFreq+0x114>)
 80056a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	2b0c      	cmp	r3, #12
 80056ac:	d134      	bne.n	8005718 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80056ae:	4b1e      	ldr	r3, [pc, #120]	; (8005728 <HAL_RCC_GetSysClockFreq+0x108>)
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f003 0303 	and.w	r3, r3, #3
 80056b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d003      	beq.n	80056c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2b03      	cmp	r3, #3
 80056c2:	d003      	beq.n	80056cc <HAL_RCC_GetSysClockFreq+0xac>
 80056c4:	e005      	b.n	80056d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80056c6:	4b1a      	ldr	r3, [pc, #104]	; (8005730 <HAL_RCC_GetSysClockFreq+0x110>)
 80056c8:	617b      	str	r3, [r7, #20]
      break;
 80056ca:	e005      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80056cc:	4b19      	ldr	r3, [pc, #100]	; (8005734 <HAL_RCC_GetSysClockFreq+0x114>)
 80056ce:	617b      	str	r3, [r7, #20]
      break;
 80056d0:	e002      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	617b      	str	r3, [r7, #20]
      break;
 80056d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056d8:	4b13      	ldr	r3, [pc, #76]	; (8005728 <HAL_RCC_GetSysClockFreq+0x108>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	091b      	lsrs	r3, r3, #4
 80056de:	f003 0307 	and.w	r3, r3, #7
 80056e2:	3301      	adds	r3, #1
 80056e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80056e6:	4b10      	ldr	r3, [pc, #64]	; (8005728 <HAL_RCC_GetSysClockFreq+0x108>)
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	0a1b      	lsrs	r3, r3, #8
 80056ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	fb03 f202 	mul.w	r2, r3, r2
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056fe:	4b0a      	ldr	r3, [pc, #40]	; (8005728 <HAL_RCC_GetSysClockFreq+0x108>)
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	0e5b      	lsrs	r3, r3, #25
 8005704:	f003 0303 	and.w	r3, r3, #3
 8005708:	3301      	adds	r3, #1
 800570a:	005b      	lsls	r3, r3, #1
 800570c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	fbb2 f3f3 	udiv	r3, r2, r3
 8005716:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005718:	69bb      	ldr	r3, [r7, #24]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3724      	adds	r7, #36	; 0x24
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	40021000 	.word	0x40021000
 800572c:	0800b04c 	.word	0x0800b04c
 8005730:	00f42400 	.word	0x00f42400
 8005734:	007a1200 	.word	0x007a1200

08005738 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800573c:	4b03      	ldr	r3, [pc, #12]	; (800574c <HAL_RCC_GetHCLKFreq+0x14>)
 800573e:	681b      	ldr	r3, [r3, #0]
}
 8005740:	4618      	mov	r0, r3
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	20000000 	.word	0x20000000

08005750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005754:	f7ff fff0 	bl	8005738 <HAL_RCC_GetHCLKFreq>
 8005758:	4602      	mov	r2, r0
 800575a:	4b06      	ldr	r3, [pc, #24]	; (8005774 <HAL_RCC_GetPCLK1Freq+0x24>)
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	0a1b      	lsrs	r3, r3, #8
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	4904      	ldr	r1, [pc, #16]	; (8005778 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005766:	5ccb      	ldrb	r3, [r1, r3]
 8005768:	f003 031f 	and.w	r3, r3, #31
 800576c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005770:	4618      	mov	r0, r3
 8005772:	bd80      	pop	{r7, pc}
 8005774:	40021000 	.word	0x40021000
 8005778:	0800b044 	.word	0x0800b044

0800577c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005780:	f7ff ffda 	bl	8005738 <HAL_RCC_GetHCLKFreq>
 8005784:	4602      	mov	r2, r0
 8005786:	4b06      	ldr	r3, [pc, #24]	; (80057a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	0adb      	lsrs	r3, r3, #11
 800578c:	f003 0307 	and.w	r3, r3, #7
 8005790:	4904      	ldr	r1, [pc, #16]	; (80057a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005792:	5ccb      	ldrb	r3, [r1, r3]
 8005794:	f003 031f 	and.w	r3, r3, #31
 8005798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800579c:	4618      	mov	r0, r3
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	40021000 	.word	0x40021000
 80057a4:	0800b044 	.word	0x0800b044

080057a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80057b0:	2300      	movs	r3, #0
 80057b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80057b4:	4b2a      	ldr	r3, [pc, #168]	; (8005860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d003      	beq.n	80057c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80057c0:	f7ff f9a0 	bl	8004b04 <HAL_PWREx_GetVoltageRange>
 80057c4:	6178      	str	r0, [r7, #20]
 80057c6:	e014      	b.n	80057f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80057c8:	4b25      	ldr	r3, [pc, #148]	; (8005860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057cc:	4a24      	ldr	r2, [pc, #144]	; (8005860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057d2:	6593      	str	r3, [r2, #88]	; 0x58
 80057d4:	4b22      	ldr	r3, [pc, #136]	; (8005860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057dc:	60fb      	str	r3, [r7, #12]
 80057de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80057e0:	f7ff f990 	bl	8004b04 <HAL_PWREx_GetVoltageRange>
 80057e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80057e6:	4b1e      	ldr	r3, [pc, #120]	; (8005860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ea:	4a1d      	ldr	r2, [pc, #116]	; (8005860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057f8:	d10b      	bne.n	8005812 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b80      	cmp	r3, #128	; 0x80
 80057fe:	d919      	bls.n	8005834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2ba0      	cmp	r3, #160	; 0xa0
 8005804:	d902      	bls.n	800580c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005806:	2302      	movs	r3, #2
 8005808:	613b      	str	r3, [r7, #16]
 800580a:	e013      	b.n	8005834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800580c:	2301      	movs	r3, #1
 800580e:	613b      	str	r3, [r7, #16]
 8005810:	e010      	b.n	8005834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b80      	cmp	r3, #128	; 0x80
 8005816:	d902      	bls.n	800581e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005818:	2303      	movs	r3, #3
 800581a:	613b      	str	r3, [r7, #16]
 800581c:	e00a      	b.n	8005834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2b80      	cmp	r3, #128	; 0x80
 8005822:	d102      	bne.n	800582a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005824:	2302      	movs	r3, #2
 8005826:	613b      	str	r3, [r7, #16]
 8005828:	e004      	b.n	8005834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b70      	cmp	r3, #112	; 0x70
 800582e:	d101      	bne.n	8005834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005830:	2301      	movs	r3, #1
 8005832:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005834:	4b0b      	ldr	r3, [pc, #44]	; (8005864 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f023 0207 	bic.w	r2, r3, #7
 800583c:	4909      	ldr	r1, [pc, #36]	; (8005864 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	4313      	orrs	r3, r2
 8005842:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005844:	4b07      	ldr	r3, [pc, #28]	; (8005864 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	429a      	cmp	r2, r3
 8005850:	d001      	beq.n	8005856 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e000      	b.n	8005858 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	40021000 	.word	0x40021000
 8005864:	40022000 	.word	0x40022000

08005868 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005870:	2300      	movs	r3, #0
 8005872:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005874:	2300      	movs	r3, #0
 8005876:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005880:	2b00      	cmp	r3, #0
 8005882:	d041      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005888:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800588c:	d02a      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800588e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005892:	d824      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005894:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005898:	d008      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 800589a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800589e:	d81e      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00a      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80058a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058a8:	d010      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80058aa:	e018      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80058ac:	4b86      	ldr	r3, [pc, #536]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	4a85      	ldr	r2, [pc, #532]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058b6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80058b8:	e015      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	3304      	adds	r3, #4
 80058be:	2100      	movs	r1, #0
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 facd 	bl	8005e60 <RCCEx_PLLSAI1_Config>
 80058c6:	4603      	mov	r3, r0
 80058c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80058ca:	e00c      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3320      	adds	r3, #32
 80058d0:	2100      	movs	r1, #0
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 fbb6 	bl	8006044 <RCCEx_PLLSAI2_Config>
 80058d8:	4603      	mov	r3, r0
 80058da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80058dc:	e003      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	74fb      	strb	r3, [r7, #19]
      break;
 80058e2:	e000      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80058e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058e6:	7cfb      	ldrb	r3, [r7, #19]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10b      	bne.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058ec:	4b76      	ldr	r3, [pc, #472]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058fa:	4973      	ldr	r1, [pc, #460]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005902:	e001      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005904:	7cfb      	ldrb	r3, [r7, #19]
 8005906:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d041      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005918:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800591c:	d02a      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800591e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005922:	d824      	bhi.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005924:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005928:	d008      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800592a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800592e:	d81e      	bhi.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00a      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005934:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005938:	d010      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800593a:	e018      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800593c:	4b62      	ldr	r3, [pc, #392]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	4a61      	ldr	r2, [pc, #388]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005946:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005948:	e015      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	3304      	adds	r3, #4
 800594e:	2100      	movs	r1, #0
 8005950:	4618      	mov	r0, r3
 8005952:	f000 fa85 	bl	8005e60 <RCCEx_PLLSAI1_Config>
 8005956:	4603      	mov	r3, r0
 8005958:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800595a:	e00c      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	3320      	adds	r3, #32
 8005960:	2100      	movs	r1, #0
 8005962:	4618      	mov	r0, r3
 8005964:	f000 fb6e 	bl	8006044 <RCCEx_PLLSAI2_Config>
 8005968:	4603      	mov	r3, r0
 800596a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800596c:	e003      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	74fb      	strb	r3, [r7, #19]
      break;
 8005972:	e000      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005974:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005976:	7cfb      	ldrb	r3, [r7, #19]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10b      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800597c:	4b52      	ldr	r3, [pc, #328]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800597e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005982:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800598a:	494f      	ldr	r1, [pc, #316]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800598c:	4313      	orrs	r3, r2
 800598e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005992:	e001      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005994:	7cfb      	ldrb	r3, [r7, #19]
 8005996:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 80a0 	beq.w	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059a6:	2300      	movs	r3, #0
 80059a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80059aa:	4b47      	ldr	r3, [pc, #284]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x152>
 80059b6:	2301      	movs	r3, #1
 80059b8:	e000      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80059ba:	2300      	movs	r3, #0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00d      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059c0:	4b41      	ldr	r3, [pc, #260]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c4:	4a40      	ldr	r2, [pc, #256]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ca:	6593      	str	r3, [r2, #88]	; 0x58
 80059cc:	4b3e      	ldr	r3, [pc, #248]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059d4:	60bb      	str	r3, [r7, #8]
 80059d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059d8:	2301      	movs	r3, #1
 80059da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059dc:	4b3b      	ldr	r3, [pc, #236]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a3a      	ldr	r2, [pc, #232]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80059e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059e8:	f7fd fb38 	bl	800305c <HAL_GetTick>
 80059ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80059ee:	e009      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059f0:	f7fd fb34 	bl	800305c <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d902      	bls.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	74fb      	strb	r3, [r7, #19]
        break;
 8005a02:	e005      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005a04:	4b31      	ldr	r3, [pc, #196]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d0ef      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005a10:	7cfb      	ldrb	r3, [r7, #19]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d15c      	bne.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a16:	4b2c      	ldr	r3, [pc, #176]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a20:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d01f      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d019      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a34:	4b24      	ldr	r3, [pc, #144]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a40:	4b21      	ldr	r3, [pc, #132]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a46:	4a20      	ldr	r2, [pc, #128]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a50:	4b1d      	ldr	r3, [pc, #116]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a56:	4a1c      	ldr	r2, [pc, #112]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a60:	4a19      	ldr	r2, [pc, #100]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d016      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a72:	f7fd faf3 	bl	800305c <HAL_GetTick>
 8005a76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a78:	e00b      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a7a:	f7fd faef 	bl	800305c <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d902      	bls.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	74fb      	strb	r3, [r7, #19]
            break;
 8005a90:	e006      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a92:	4b0d      	ldr	r3, [pc, #52]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0ec      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005aa0:	7cfb      	ldrb	r3, [r7, #19]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10c      	bne.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005aa6:	4b08      	ldr	r3, [pc, #32]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab6:	4904      	ldr	r1, [pc, #16]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005abe:	e009      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ac0:	7cfb      	ldrb	r3, [r7, #19]
 8005ac2:	74bb      	strb	r3, [r7, #18]
 8005ac4:	e006      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005ac6:	bf00      	nop
 8005ac8:	40021000 	.word	0x40021000
 8005acc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad0:	7cfb      	ldrb	r3, [r7, #19]
 8005ad2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ad4:	7c7b      	ldrb	r3, [r7, #17]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d105      	bne.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ada:	4ba6      	ldr	r3, [pc, #664]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ade:	4aa5      	ldr	r2, [pc, #660]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ae4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00a      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005af2:	4ba0      	ldr	r3, [pc, #640]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af8:	f023 0203 	bic.w	r2, r3, #3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	499c      	ldr	r1, [pc, #624]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00a      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b14:	4b97      	ldr	r3, [pc, #604]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b1a:	f023 020c 	bic.w	r2, r3, #12
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b22:	4994      	ldr	r1, [pc, #592]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0304 	and.w	r3, r3, #4
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00a      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b36:	4b8f      	ldr	r3, [pc, #572]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b44:	498b      	ldr	r1, [pc, #556]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0308 	and.w	r3, r3, #8
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00a      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b58:	4b86      	ldr	r3, [pc, #536]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b66:	4983      	ldr	r1, [pc, #524]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0310 	and.w	r3, r3, #16
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00a      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b7a:	4b7e      	ldr	r3, [pc, #504]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b88:	497a      	ldr	r1, [pc, #488]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0320 	and.w	r3, r3, #32
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00a      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b9c:	4b75      	ldr	r3, [pc, #468]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005baa:	4972      	ldr	r1, [pc, #456]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00a      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bbe:	4b6d      	ldr	r3, [pc, #436]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bcc:	4969      	ldr	r1, [pc, #420]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00a      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005be0:	4b64      	ldr	r3, [pc, #400]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bee:	4961      	ldr	r1, [pc, #388]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00a      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c02:	4b5c      	ldr	r3, [pc, #368]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c08:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c10:	4958      	ldr	r1, [pc, #352]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00a      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c24:	4b53      	ldr	r3, [pc, #332]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c2a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c32:	4950      	ldr	r1, [pc, #320]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00a      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c46:	4b4b      	ldr	r3, [pc, #300]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c54:	4947      	ldr	r1, [pc, #284]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00a      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c68:	4b42      	ldr	r3, [pc, #264]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c6e:	f023 0203 	bic.w	r2, r3, #3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c76:	493f      	ldr	r1, [pc, #252]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d028      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c8a:	4b3a      	ldr	r3, [pc, #232]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c98:	4936      	ldr	r1, [pc, #216]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ca8:	d106      	bne.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005caa:	4b32      	ldr	r3, [pc, #200]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	4a31      	ldr	r2, [pc, #196]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005cb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cb4:	60d3      	str	r3, [r2, #12]
 8005cb6:	e011      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cc0:	d10c      	bne.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	3304      	adds	r3, #4
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 f8c9 	bl	8005e60 <RCCEx_PLLSAI1_Config>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005cd2:	7cfb      	ldrb	r3, [r7, #19]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8005cd8:	7cfb      	ldrb	r3, [r7, #19]
 8005cda:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d028      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ce8:	4b22      	ldr	r3, [pc, #136]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cf6:	491f      	ldr	r1, [pc, #124]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d06:	d106      	bne.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d08:	4b1a      	ldr	r3, [pc, #104]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	4a19      	ldr	r2, [pc, #100]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d12:	60d3      	str	r3, [r2, #12]
 8005d14:	e011      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d1e:	d10c      	bne.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	3304      	adds	r3, #4
 8005d24:	2101      	movs	r1, #1
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 f89a 	bl	8005e60 <RCCEx_PLLSAI1_Config>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d30:	7cfb      	ldrb	r3, [r7, #19]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8005d36:	7cfb      	ldrb	r3, [r7, #19]
 8005d38:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d02a      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d46:	4b0b      	ldr	r3, [pc, #44]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d54:	4907      	ldr	r1, [pc, #28]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d64:	d108      	bne.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d66:	4b03      	ldr	r3, [pc, #12]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	4a02      	ldr	r2, [pc, #8]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d70:	60d3      	str	r3, [r2, #12]
 8005d72:	e013      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8005d74:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d80:	d10c      	bne.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	3304      	adds	r3, #4
 8005d86:	2101      	movs	r1, #1
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 f869 	bl	8005e60 <RCCEx_PLLSAI1_Config>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d92:	7cfb      	ldrb	r3, [r7, #19]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8005d98:	7cfb      	ldrb	r3, [r7, #19]
 8005d9a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d02f      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005da8:	4b2c      	ldr	r3, [pc, #176]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005db6:	4929      	ldr	r1, [pc, #164]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dc6:	d10d      	bne.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	3304      	adds	r3, #4
 8005dcc:	2102      	movs	r1, #2
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f000 f846 	bl	8005e60 <RCCEx_PLLSAI1_Config>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005dd8:	7cfb      	ldrb	r3, [r7, #19]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d014      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005dde:	7cfb      	ldrb	r3, [r7, #19]
 8005de0:	74bb      	strb	r3, [r7, #18]
 8005de2:	e011      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dec:	d10c      	bne.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	3320      	adds	r3, #32
 8005df2:	2102      	movs	r1, #2
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 f925 	bl	8006044 <RCCEx_PLLSAI2_Config>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005dfe:	7cfb      	ldrb	r3, [r7, #19]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005e04:	7cfb      	ldrb	r3, [r7, #19]
 8005e06:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00b      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005e14:	4b11      	ldr	r3, [pc, #68]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e24:	490d      	ldr	r1, [pc, #52]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00b      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005e38:	4b08      	ldr	r3, [pc, #32]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e48:	4904      	ldr	r1, [pc, #16]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005e50:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3718      	adds	r7, #24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	40021000 	.word	0x40021000

08005e60 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e6e:	4b74      	ldr	r3, [pc, #464]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	f003 0303 	and.w	r3, r3, #3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d018      	beq.n	8005eac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005e7a:	4b71      	ldr	r3, [pc, #452]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f003 0203 	and.w	r2, r3, #3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d10d      	bne.n	8005ea6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
       ||
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d009      	beq.n	8005ea6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005e92:	4b6b      	ldr	r3, [pc, #428]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	091b      	lsrs	r3, r3, #4
 8005e98:	f003 0307 	and.w	r3, r3, #7
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
       ||
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d047      	beq.n	8005f36 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	73fb      	strb	r3, [r7, #15]
 8005eaa:	e044      	b.n	8005f36 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b03      	cmp	r3, #3
 8005eb2:	d018      	beq.n	8005ee6 <RCCEx_PLLSAI1_Config+0x86>
 8005eb4:	2b03      	cmp	r3, #3
 8005eb6:	d825      	bhi.n	8005f04 <RCCEx_PLLSAI1_Config+0xa4>
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d002      	beq.n	8005ec2 <RCCEx_PLLSAI1_Config+0x62>
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d009      	beq.n	8005ed4 <RCCEx_PLLSAI1_Config+0x74>
 8005ec0:	e020      	b.n	8005f04 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ec2:	4b5f      	ldr	r3, [pc, #380]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d11d      	bne.n	8005f0a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ed2:	e01a      	b.n	8005f0a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ed4:	4b5a      	ldr	r3, [pc, #360]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d116      	bne.n	8005f0e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ee4:	e013      	b.n	8005f0e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ee6:	4b56      	ldr	r3, [pc, #344]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10f      	bne.n	8005f12 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ef2:	4b53      	ldr	r3, [pc, #332]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d109      	bne.n	8005f12 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f02:	e006      	b.n	8005f12 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	73fb      	strb	r3, [r7, #15]
      break;
 8005f08:	e004      	b.n	8005f14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f0a:	bf00      	nop
 8005f0c:	e002      	b.n	8005f14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f0e:	bf00      	nop
 8005f10:	e000      	b.n	8005f14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f12:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f14:	7bfb      	ldrb	r3, [r7, #15]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10d      	bne.n	8005f36 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005f1a:	4b49      	ldr	r3, [pc, #292]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6819      	ldr	r1, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	011b      	lsls	r3, r3, #4
 8005f2e:	430b      	orrs	r3, r1
 8005f30:	4943      	ldr	r1, [pc, #268]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005f36:	7bfb      	ldrb	r3, [r7, #15]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d17c      	bne.n	8006036 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005f3c:	4b40      	ldr	r3, [pc, #256]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a3f      	ldr	r2, [pc, #252]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f48:	f7fd f888 	bl	800305c <HAL_GetTick>
 8005f4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f4e:	e009      	b.n	8005f64 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f50:	f7fd f884 	bl	800305c <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d902      	bls.n	8005f64 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	73fb      	strb	r3, [r7, #15]
        break;
 8005f62:	e005      	b.n	8005f70 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f64:	4b36      	ldr	r3, [pc, #216]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1ef      	bne.n	8005f50 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d15f      	bne.n	8006036 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d110      	bne.n	8005f9e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f7c:	4b30      	ldr	r3, [pc, #192]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005f84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	6892      	ldr	r2, [r2, #8]
 8005f8c:	0211      	lsls	r1, r2, #8
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	68d2      	ldr	r2, [r2, #12]
 8005f92:	06d2      	lsls	r2, r2, #27
 8005f94:	430a      	orrs	r2, r1
 8005f96:	492a      	ldr	r1, [pc, #168]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	610b      	str	r3, [r1, #16]
 8005f9c:	e027      	b.n	8005fee <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d112      	bne.n	8005fca <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fa4:	4b26      	ldr	r3, [pc, #152]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005fac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	6892      	ldr	r2, [r2, #8]
 8005fb4:	0211      	lsls	r1, r2, #8
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	6912      	ldr	r2, [r2, #16]
 8005fba:	0852      	lsrs	r2, r2, #1
 8005fbc:	3a01      	subs	r2, #1
 8005fbe:	0552      	lsls	r2, r2, #21
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	491f      	ldr	r1, [pc, #124]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	610b      	str	r3, [r1, #16]
 8005fc8:	e011      	b.n	8005fee <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fca:	4b1d      	ldr	r3, [pc, #116]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005fd2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	6892      	ldr	r2, [r2, #8]
 8005fda:	0211      	lsls	r1, r2, #8
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	6952      	ldr	r2, [r2, #20]
 8005fe0:	0852      	lsrs	r2, r2, #1
 8005fe2:	3a01      	subs	r2, #1
 8005fe4:	0652      	lsls	r2, r2, #25
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	4915      	ldr	r1, [pc, #84]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005fee:	4b14      	ldr	r3, [pc, #80]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a13      	ldr	r2, [pc, #76]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ff4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ff8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ffa:	f7fd f82f 	bl	800305c <HAL_GetTick>
 8005ffe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006000:	e009      	b.n	8006016 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006002:	f7fd f82b 	bl	800305c <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	2b02      	cmp	r3, #2
 800600e:	d902      	bls.n	8006016 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	73fb      	strb	r3, [r7, #15]
          break;
 8006014:	e005      	b.n	8006022 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006016:	4b0a      	ldr	r3, [pc, #40]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0ef      	beq.n	8006002 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006022:	7bfb      	ldrb	r3, [r7, #15]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d106      	bne.n	8006036 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006028:	4b05      	ldr	r3, [pc, #20]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e0>)
 800602a:	691a      	ldr	r2, [r3, #16]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	4903      	ldr	r1, [pc, #12]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006032:	4313      	orrs	r3, r2
 8006034:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006036:	7bfb      	ldrb	r3, [r7, #15]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	40021000 	.word	0x40021000

08006044 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800604e:	2300      	movs	r3, #0
 8006050:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006052:	4b69      	ldr	r3, [pc, #420]	; (80061f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	f003 0303 	and.w	r3, r3, #3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d018      	beq.n	8006090 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800605e:	4b66      	ldr	r3, [pc, #408]	; (80061f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	f003 0203 	and.w	r2, r3, #3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	429a      	cmp	r2, r3
 800606c:	d10d      	bne.n	800608a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
       ||
 8006072:	2b00      	cmp	r3, #0
 8006074:	d009      	beq.n	800608a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006076:	4b60      	ldr	r3, [pc, #384]	; (80061f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	091b      	lsrs	r3, r3, #4
 800607c:	f003 0307 	and.w	r3, r3, #7
 8006080:	1c5a      	adds	r2, r3, #1
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
       ||
 8006086:	429a      	cmp	r2, r3
 8006088:	d047      	beq.n	800611a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	73fb      	strb	r3, [r7, #15]
 800608e:	e044      	b.n	800611a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2b03      	cmp	r3, #3
 8006096:	d018      	beq.n	80060ca <RCCEx_PLLSAI2_Config+0x86>
 8006098:	2b03      	cmp	r3, #3
 800609a:	d825      	bhi.n	80060e8 <RCCEx_PLLSAI2_Config+0xa4>
 800609c:	2b01      	cmp	r3, #1
 800609e:	d002      	beq.n	80060a6 <RCCEx_PLLSAI2_Config+0x62>
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d009      	beq.n	80060b8 <RCCEx_PLLSAI2_Config+0x74>
 80060a4:	e020      	b.n	80060e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80060a6:	4b54      	ldr	r3, [pc, #336]	; (80061f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d11d      	bne.n	80060ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060b6:	e01a      	b.n	80060ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80060b8:	4b4f      	ldr	r3, [pc, #316]	; (80061f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d116      	bne.n	80060f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060c8:	e013      	b.n	80060f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80060ca:	4b4b      	ldr	r3, [pc, #300]	; (80061f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10f      	bne.n	80060f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80060d6:	4b48      	ldr	r3, [pc, #288]	; (80061f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d109      	bne.n	80060f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80060e6:	e006      	b.n	80060f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	73fb      	strb	r3, [r7, #15]
      break;
 80060ec:	e004      	b.n	80060f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80060ee:	bf00      	nop
 80060f0:	e002      	b.n	80060f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80060f2:	bf00      	nop
 80060f4:	e000      	b.n	80060f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80060f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10d      	bne.n	800611a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80060fe:	4b3e      	ldr	r3, [pc, #248]	; (80061f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6819      	ldr	r1, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	3b01      	subs	r3, #1
 8006110:	011b      	lsls	r3, r3, #4
 8006112:	430b      	orrs	r3, r1
 8006114:	4938      	ldr	r1, [pc, #224]	; (80061f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006116:	4313      	orrs	r3, r2
 8006118:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800611a:	7bfb      	ldrb	r3, [r7, #15]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d166      	bne.n	80061ee <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006120:	4b35      	ldr	r3, [pc, #212]	; (80061f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a34      	ldr	r2, [pc, #208]	; (80061f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800612a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800612c:	f7fc ff96 	bl	800305c <HAL_GetTick>
 8006130:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006132:	e009      	b.n	8006148 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006134:	f7fc ff92 	bl	800305c <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d902      	bls.n	8006148 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	73fb      	strb	r3, [r7, #15]
        break;
 8006146:	e005      	b.n	8006154 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006148:	4b2b      	ldr	r3, [pc, #172]	; (80061f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1ef      	bne.n	8006134 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006154:	7bfb      	ldrb	r3, [r7, #15]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d149      	bne.n	80061ee <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d110      	bne.n	8006182 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006160:	4b25      	ldr	r3, [pc, #148]	; (80061f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006168:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	6892      	ldr	r2, [r2, #8]
 8006170:	0211      	lsls	r1, r2, #8
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	68d2      	ldr	r2, [r2, #12]
 8006176:	06d2      	lsls	r2, r2, #27
 8006178:	430a      	orrs	r2, r1
 800617a:	491f      	ldr	r1, [pc, #124]	; (80061f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800617c:	4313      	orrs	r3, r2
 800617e:	614b      	str	r3, [r1, #20]
 8006180:	e011      	b.n	80061a6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006182:	4b1d      	ldr	r3, [pc, #116]	; (80061f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800618a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	6892      	ldr	r2, [r2, #8]
 8006192:	0211      	lsls	r1, r2, #8
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	6912      	ldr	r2, [r2, #16]
 8006198:	0852      	lsrs	r2, r2, #1
 800619a:	3a01      	subs	r2, #1
 800619c:	0652      	lsls	r2, r2, #25
 800619e:	430a      	orrs	r2, r1
 80061a0:	4915      	ldr	r1, [pc, #84]	; (80061f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80061a6:	4b14      	ldr	r3, [pc, #80]	; (80061f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a13      	ldr	r2, [pc, #76]	; (80061f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80061ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061b0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061b2:	f7fc ff53 	bl	800305c <HAL_GetTick>
 80061b6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80061b8:	e009      	b.n	80061ce <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80061ba:	f7fc ff4f 	bl	800305c <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d902      	bls.n	80061ce <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	73fb      	strb	r3, [r7, #15]
          break;
 80061cc:	e005      	b.n	80061da <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80061ce:	4b0a      	ldr	r3, [pc, #40]	; (80061f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d0ef      	beq.n	80061ba <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80061da:	7bfb      	ldrb	r3, [r7, #15]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d106      	bne.n	80061ee <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80061e0:	4b05      	ldr	r3, [pc, #20]	; (80061f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80061e2:	695a      	ldr	r2, [r3, #20]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	4903      	ldr	r1, [pc, #12]	; (80061f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80061ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	40021000 	.word	0x40021000

080061fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e095      	b.n	800633a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006212:	2b00      	cmp	r3, #0
 8006214:	d108      	bne.n	8006228 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800621e:	d009      	beq.n	8006234 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	61da      	str	r2, [r3, #28]
 8006226:	e005      	b.n	8006234 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d106      	bne.n	8006254 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7fc fc34 	bl	8002abc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800626a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006274:	d902      	bls.n	800627c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006276:	2300      	movs	r3, #0
 8006278:	60fb      	str	r3, [r7, #12]
 800627a:	e002      	b.n	8006282 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800627c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006280:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800628a:	d007      	beq.n	800629c <HAL_SPI_Init+0xa0>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006294:	d002      	beq.n	800629c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80062ac:	431a      	orrs	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	431a      	orrs	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	431a      	orrs	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062ca:	431a      	orrs	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062d4:	431a      	orrs	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062de:	ea42 0103 	orr.w	r1, r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	430a      	orrs	r2, r1
 80062f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	0c1b      	lsrs	r3, r3, #16
 80062f8:	f003 0204 	and.w	r2, r3, #4
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	f003 0310 	and.w	r3, r3, #16
 8006304:	431a      	orrs	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800630a:	f003 0308 	and.w	r3, r3, #8
 800630e:	431a      	orrs	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006318:	ea42 0103 	orr.w	r1, r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	430a      	orrs	r2, r1
 8006328:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b08a      	sub	sp, #40	; 0x28
 8006346:	af00      	add	r7, sp, #0
 8006348:	60f8      	str	r0, [r7, #12]
 800634a:	60b9      	str	r1, [r7, #8]
 800634c:	607a      	str	r2, [r7, #4]
 800634e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006350:	2301      	movs	r3, #1
 8006352:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006354:	2300      	movs	r3, #0
 8006356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006360:	2b01      	cmp	r3, #1
 8006362:	d101      	bne.n	8006368 <HAL_SPI_TransmitReceive+0x26>
 8006364:	2302      	movs	r3, #2
 8006366:	e20a      	b.n	800677e <HAL_SPI_TransmitReceive+0x43c>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006370:	f7fc fe74 	bl	800305c <HAL_GetTick>
 8006374:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800637c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006384:	887b      	ldrh	r3, [r7, #2]
 8006386:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006388:	887b      	ldrh	r3, [r7, #2]
 800638a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800638c:	7efb      	ldrb	r3, [r7, #27]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d00e      	beq.n	80063b0 <HAL_SPI_TransmitReceive+0x6e>
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006398:	d106      	bne.n	80063a8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d102      	bne.n	80063a8 <HAL_SPI_TransmitReceive+0x66>
 80063a2:	7efb      	ldrb	r3, [r7, #27]
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	d003      	beq.n	80063b0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80063a8:	2302      	movs	r3, #2
 80063aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80063ae:	e1e0      	b.n	8006772 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d005      	beq.n	80063c2 <HAL_SPI_TransmitReceive+0x80>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d002      	beq.n	80063c2 <HAL_SPI_TransmitReceive+0x80>
 80063bc:	887b      	ldrh	r3, [r7, #2]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d103      	bne.n	80063ca <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80063c8:	e1d3      	b.n	8006772 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b04      	cmp	r3, #4
 80063d4:	d003      	beq.n	80063de <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2205      	movs	r2, #5
 80063da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	887a      	ldrh	r2, [r7, #2]
 80063ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	887a      	ldrh	r2, [r7, #2]
 80063f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	887a      	ldrh	r2, [r7, #2]
 8006404:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	887a      	ldrh	r2, [r7, #2]
 800640a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006420:	d802      	bhi.n	8006428 <HAL_SPI_TransmitReceive+0xe6>
 8006422:	8a3b      	ldrh	r3, [r7, #16]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d908      	bls.n	800643a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006436:	605a      	str	r2, [r3, #4]
 8006438:	e007      	b.n	800644a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006448:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006454:	2b40      	cmp	r3, #64	; 0x40
 8006456:	d007      	beq.n	8006468 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006466:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006470:	f240 8081 	bls.w	8006576 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <HAL_SPI_TransmitReceive+0x140>
 800647c:	8a7b      	ldrh	r3, [r7, #18]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d16d      	bne.n	800655e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006486:	881a      	ldrh	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006492:	1c9a      	adds	r2, r3, #2
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800649c:	b29b      	uxth	r3, r3
 800649e:	3b01      	subs	r3, #1
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064a6:	e05a      	b.n	800655e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d11b      	bne.n	80064ee <HAL_SPI_TransmitReceive+0x1ac>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d016      	beq.n	80064ee <HAL_SPI_TransmitReceive+0x1ac>
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d113      	bne.n	80064ee <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ca:	881a      	ldrh	r2, [r3, #0]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d6:	1c9a      	adds	r2, r3, #2
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	3b01      	subs	r3, #1
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064ea:	2300      	movs	r3, #0
 80064ec:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d11c      	bne.n	8006536 <HAL_SPI_TransmitReceive+0x1f4>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006502:	b29b      	uxth	r3, r3
 8006504:	2b00      	cmp	r3, #0
 8006506:	d016      	beq.n	8006536 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68da      	ldr	r2, [r3, #12]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006512:	b292      	uxth	r2, r2
 8006514:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651a:	1c9a      	adds	r2, r3, #2
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006526:	b29b      	uxth	r3, r3
 8006528:	3b01      	subs	r3, #1
 800652a:	b29a      	uxth	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006532:	2301      	movs	r3, #1
 8006534:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006536:	f7fc fd91 	bl	800305c <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006542:	429a      	cmp	r2, r3
 8006544:	d80b      	bhi.n	800655e <HAL_SPI_TransmitReceive+0x21c>
 8006546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800654c:	d007      	beq.n	800655e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800655c:	e109      	b.n	8006772 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006562:	b29b      	uxth	r3, r3
 8006564:	2b00      	cmp	r3, #0
 8006566:	d19f      	bne.n	80064a8 <HAL_SPI_TransmitReceive+0x166>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800656e:	b29b      	uxth	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	d199      	bne.n	80064a8 <HAL_SPI_TransmitReceive+0x166>
 8006574:	e0e3      	b.n	800673e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <HAL_SPI_TransmitReceive+0x244>
 800657e:	8a7b      	ldrh	r3, [r7, #18]
 8006580:	2b01      	cmp	r3, #1
 8006582:	f040 80cf 	bne.w	8006724 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800658a:	b29b      	uxth	r3, r3
 800658c:	2b01      	cmp	r3, #1
 800658e:	d912      	bls.n	80065b6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006594:	881a      	ldrh	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a0:	1c9a      	adds	r2, r3, #2
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	3b02      	subs	r3, #2
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065b4:	e0b6      	b.n	8006724 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	330c      	adds	r3, #12
 80065c0:	7812      	ldrb	r2, [r2, #0]
 80065c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c8:	1c5a      	adds	r2, r3, #1
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	3b01      	subs	r3, #1
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065dc:	e0a2      	b.n	8006724 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d134      	bne.n	8006656 <HAL_SPI_TransmitReceive+0x314>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d02f      	beq.n	8006656 <HAL_SPI_TransmitReceive+0x314>
 80065f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d12c      	bne.n	8006656 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006600:	b29b      	uxth	r3, r3
 8006602:	2b01      	cmp	r3, #1
 8006604:	d912      	bls.n	800662c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660a:	881a      	ldrh	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006616:	1c9a      	adds	r2, r3, #2
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006620:	b29b      	uxth	r3, r3
 8006622:	3b02      	subs	r3, #2
 8006624:	b29a      	uxth	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	87da      	strh	r2, [r3, #62]	; 0x3e
 800662a:	e012      	b.n	8006652 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	330c      	adds	r3, #12
 8006636:	7812      	ldrb	r2, [r2, #0]
 8006638:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663e:	1c5a      	adds	r2, r3, #1
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006648:	b29b      	uxth	r3, r3
 800664a:	3b01      	subs	r3, #1
 800664c:	b29a      	uxth	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006652:	2300      	movs	r3, #0
 8006654:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	2b01      	cmp	r3, #1
 8006662:	d148      	bne.n	80066f6 <HAL_SPI_TransmitReceive+0x3b4>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800666a:	b29b      	uxth	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	d042      	beq.n	80066f6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006676:	b29b      	uxth	r3, r3
 8006678:	2b01      	cmp	r3, #1
 800667a:	d923      	bls.n	80066c4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006686:	b292      	uxth	r2, r2
 8006688:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668e:	1c9a      	adds	r2, r3, #2
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800669a:	b29b      	uxth	r3, r3
 800669c:	3b02      	subs	r3, #2
 800669e:	b29a      	uxth	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d81f      	bhi.n	80066f2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80066c0:	605a      	str	r2, [r3, #4]
 80066c2:	e016      	b.n	80066f2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f103 020c 	add.w	r2, r3, #12
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d0:	7812      	ldrb	r2, [r2, #0]
 80066d2:	b2d2      	uxtb	r2, r2
 80066d4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066da:	1c5a      	adds	r2, r3, #1
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	3b01      	subs	r3, #1
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066f2:	2301      	movs	r3, #1
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80066f6:	f7fc fcb1 	bl	800305c <HAL_GetTick>
 80066fa:	4602      	mov	r2, r0
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006702:	429a      	cmp	r2, r3
 8006704:	d803      	bhi.n	800670e <HAL_SPI_TransmitReceive+0x3cc>
 8006706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006708:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800670c:	d102      	bne.n	8006714 <HAL_SPI_TransmitReceive+0x3d2>
 800670e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006710:	2b00      	cmp	r3, #0
 8006712:	d107      	bne.n	8006724 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006722:	e026      	b.n	8006772 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006728:	b29b      	uxth	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	f47f af57 	bne.w	80065de <HAL_SPI_TransmitReceive+0x29c>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006736:	b29b      	uxth	r3, r3
 8006738:	2b00      	cmp	r3, #0
 800673a:	f47f af50 	bne.w	80065de <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800673e:	69fa      	ldr	r2, [r7, #28]
 8006740:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 f93e 	bl	80069c4 <SPI_EndRxTxTransaction>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d005      	beq.n	800675a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2220      	movs	r2, #32
 8006758:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006768:	e003      	b.n	8006772 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2201      	movs	r2, #1
 800676e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800677a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800677e:	4618      	mov	r0, r3
 8006780:	3728      	adds	r7, #40	; 0x28
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
	...

08006788 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b088      	sub	sp, #32
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	603b      	str	r3, [r7, #0]
 8006794:	4613      	mov	r3, r2
 8006796:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006798:	f7fc fc60 	bl	800305c <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a0:	1a9b      	subs	r3, r3, r2
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	4413      	add	r3, r2
 80067a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80067a8:	f7fc fc58 	bl	800305c <HAL_GetTick>
 80067ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80067ae:	4b39      	ldr	r3, [pc, #228]	; (8006894 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	015b      	lsls	r3, r3, #5
 80067b4:	0d1b      	lsrs	r3, r3, #20
 80067b6:	69fa      	ldr	r2, [r7, #28]
 80067b8:	fb02 f303 	mul.w	r3, r2, r3
 80067bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067be:	e054      	b.n	800686a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067c6:	d050      	beq.n	800686a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067c8:	f7fc fc48 	bl	800305c <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	69fa      	ldr	r2, [r7, #28]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d902      	bls.n	80067de <SPI_WaitFlagStateUntilTimeout+0x56>
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d13d      	bne.n	800685a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	685a      	ldr	r2, [r3, #4]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80067ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067f6:	d111      	bne.n	800681c <SPI_WaitFlagStateUntilTimeout+0x94>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006800:	d004      	beq.n	800680c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800680a:	d107      	bne.n	800681c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800681a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006824:	d10f      	bne.n	8006846 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006834:	601a      	str	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006844:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e017      	b.n	800688a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d101      	bne.n	8006864 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006860:	2300      	movs	r3, #0
 8006862:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	3b01      	subs	r3, #1
 8006868:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	689a      	ldr	r2, [r3, #8]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	4013      	ands	r3, r2
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	429a      	cmp	r2, r3
 8006878:	bf0c      	ite	eq
 800687a:	2301      	moveq	r3, #1
 800687c:	2300      	movne	r3, #0
 800687e:	b2db      	uxtb	r3, r3
 8006880:	461a      	mov	r2, r3
 8006882:	79fb      	ldrb	r3, [r7, #7]
 8006884:	429a      	cmp	r2, r3
 8006886:	d19b      	bne.n	80067c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3720      	adds	r7, #32
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	20000000 	.word	0x20000000

08006898 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b08a      	sub	sp, #40	; 0x28
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
 80068a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80068a6:	2300      	movs	r3, #0
 80068a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80068aa:	f7fc fbd7 	bl	800305c <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b2:	1a9b      	subs	r3, r3, r2
 80068b4:	683a      	ldr	r2, [r7, #0]
 80068b6:	4413      	add	r3, r2
 80068b8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80068ba:	f7fc fbcf 	bl	800305c <HAL_GetTick>
 80068be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	330c      	adds	r3, #12
 80068c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80068c8:	4b3d      	ldr	r3, [pc, #244]	; (80069c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	4613      	mov	r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	00da      	lsls	r2, r3, #3
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	0d1b      	lsrs	r3, r3, #20
 80068d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068da:	fb02 f303 	mul.w	r3, r2, r3
 80068de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80068e0:	e060      	b.n	80069a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80068e8:	d107      	bne.n	80068fa <SPI_WaitFifoStateUntilTimeout+0x62>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d104      	bne.n	80068fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80068f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006900:	d050      	beq.n	80069a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006902:	f7fc fbab 	bl	800305c <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	6a3b      	ldr	r3, [r7, #32]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800690e:	429a      	cmp	r2, r3
 8006910:	d902      	bls.n	8006918 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	2b00      	cmp	r3, #0
 8006916:	d13d      	bne.n	8006994 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006926:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006930:	d111      	bne.n	8006956 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800693a:	d004      	beq.n	8006946 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006944:	d107      	bne.n	8006956 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006954:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800695e:	d10f      	bne.n	8006980 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800696e:	601a      	str	r2, [r3, #0]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800697e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e010      	b.n	80069b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d101      	bne.n	800699e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	3b01      	subs	r3, #1
 80069a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689a      	ldr	r2, [r3, #8]
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	4013      	ands	r3, r2
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d196      	bne.n	80068e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3728      	adds	r7, #40	; 0x28
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	20000000 	.word	0x20000000

080069c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af02      	add	r7, sp, #8
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	9300      	str	r3, [sp, #0]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f7ff ff5b 	bl	8006898 <SPI_WaitFifoStateUntilTimeout>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d007      	beq.n	80069f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069ec:	f043 0220 	orr.w	r2, r3, #32
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e027      	b.n	8006a48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	2200      	movs	r2, #0
 8006a00:	2180      	movs	r1, #128	; 0x80
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f7ff fec0 	bl	8006788 <SPI_WaitFlagStateUntilTimeout>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d007      	beq.n	8006a1e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a12:	f043 0220 	orr.w	r2, r3, #32
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e014      	b.n	8006a48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	9300      	str	r3, [sp, #0]
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f7ff ff34 	bl	8006898 <SPI_WaitFifoStateUntilTimeout>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d007      	beq.n	8006a46 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a3a:	f043 0220 	orr.w	r2, r3, #32
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e000      	b.n	8006a48 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e049      	b.n	8006af6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d106      	bne.n	8006a7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7fc f9aa 	bl	8002dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3304      	adds	r3, #4
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	4610      	mov	r0, r2
 8006a90:	f000 fa9c 	bl	8006fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
	...

08006b00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d001      	beq.n	8006b18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e047      	b.n	8006ba8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a23      	ldr	r2, [pc, #140]	; (8006bb4 <HAL_TIM_Base_Start+0xb4>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d01d      	beq.n	8006b66 <HAL_TIM_Base_Start+0x66>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b32:	d018      	beq.n	8006b66 <HAL_TIM_Base_Start+0x66>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a1f      	ldr	r2, [pc, #124]	; (8006bb8 <HAL_TIM_Base_Start+0xb8>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d013      	beq.n	8006b66 <HAL_TIM_Base_Start+0x66>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a1e      	ldr	r2, [pc, #120]	; (8006bbc <HAL_TIM_Base_Start+0xbc>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d00e      	beq.n	8006b66 <HAL_TIM_Base_Start+0x66>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a1c      	ldr	r2, [pc, #112]	; (8006bc0 <HAL_TIM_Base_Start+0xc0>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d009      	beq.n	8006b66 <HAL_TIM_Base_Start+0x66>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a1b      	ldr	r2, [pc, #108]	; (8006bc4 <HAL_TIM_Base_Start+0xc4>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d004      	beq.n	8006b66 <HAL_TIM_Base_Start+0x66>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a19      	ldr	r2, [pc, #100]	; (8006bc8 <HAL_TIM_Base_Start+0xc8>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d115      	bne.n	8006b92 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	689a      	ldr	r2, [r3, #8]
 8006b6c:	4b17      	ldr	r3, [pc, #92]	; (8006bcc <HAL_TIM_Base_Start+0xcc>)
 8006b6e:	4013      	ands	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2b06      	cmp	r3, #6
 8006b76:	d015      	beq.n	8006ba4 <HAL_TIM_Base_Start+0xa4>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b7e:	d011      	beq.n	8006ba4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f042 0201 	orr.w	r2, r2, #1
 8006b8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b90:	e008      	b.n	8006ba4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f042 0201 	orr.w	r2, r2, #1
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	e000      	b.n	8006ba6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ba4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	40012c00 	.word	0x40012c00
 8006bb8:	40000400 	.word	0x40000400
 8006bbc:	40000800 	.word	0x40000800
 8006bc0:	40000c00 	.word	0x40000c00
 8006bc4:	40013400 	.word	0x40013400
 8006bc8:	40014000 	.word	0x40014000
 8006bcc:	00010007 	.word	0x00010007

08006bd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d020      	beq.n	8006c34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f003 0302 	and.w	r3, r3, #2
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d01b      	beq.n	8006c34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f06f 0202 	mvn.w	r2, #2
 8006c04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	f003 0303 	and.w	r3, r3, #3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f9b7 	bl	8006f8e <HAL_TIM_IC_CaptureCallback>
 8006c20:	e005      	b.n	8006c2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f9a9 	bl	8006f7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f9ba 	bl	8006fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f003 0304 	and.w	r3, r3, #4
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d020      	beq.n	8006c80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f003 0304 	and.w	r3, r3, #4
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d01b      	beq.n	8006c80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f06f 0204 	mvn.w	r2, #4
 8006c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2202      	movs	r2, #2
 8006c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d003      	beq.n	8006c6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f991 	bl	8006f8e <HAL_TIM_IC_CaptureCallback>
 8006c6c:	e005      	b.n	8006c7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f983 	bl	8006f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f994 	bl	8006fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	f003 0308 	and.w	r3, r3, #8
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d020      	beq.n	8006ccc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f003 0308 	and.w	r3, r3, #8
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d01b      	beq.n	8006ccc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f06f 0208 	mvn.w	r2, #8
 8006c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2204      	movs	r2, #4
 8006ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	f003 0303 	and.w	r3, r3, #3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f96b 	bl	8006f8e <HAL_TIM_IC_CaptureCallback>
 8006cb8:	e005      	b.n	8006cc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f95d 	bl	8006f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 f96e 	bl	8006fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	f003 0310 	and.w	r3, r3, #16
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d020      	beq.n	8006d18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f003 0310 	and.w	r3, r3, #16
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d01b      	beq.n	8006d18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f06f 0210 	mvn.w	r2, #16
 8006ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2208      	movs	r2, #8
 8006cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	69db      	ldr	r3, [r3, #28]
 8006cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d003      	beq.n	8006d06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f945 	bl	8006f8e <HAL_TIM_IC_CaptureCallback>
 8006d04:	e005      	b.n	8006d12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f937 	bl	8006f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f948 	bl	8006fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00c      	beq.n	8006d3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d007      	beq.n	8006d3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f06f 0201 	mvn.w	r2, #1
 8006d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f915 	bl	8006f66 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00c      	beq.n	8006d60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d007      	beq.n	8006d60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fafc 	bl	8007358 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00c      	beq.n	8006d84 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d007      	beq.n	8006d84 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 faf4 	bl	800736c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00c      	beq.n	8006da8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d007      	beq.n	8006da8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f907 	bl	8006fb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	f003 0320 	and.w	r3, r3, #32
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00c      	beq.n	8006dcc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f003 0320 	and.w	r3, r3, #32
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d007      	beq.n	8006dcc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f06f 0220 	mvn.w	r2, #32
 8006dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fabc 	bl	8007344 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006dcc:	bf00      	nop
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dde:	2300      	movs	r3, #0
 8006de0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d101      	bne.n	8006df0 <HAL_TIM_ConfigClockSource+0x1c>
 8006dec:	2302      	movs	r3, #2
 8006dee:	e0b6      	b.n	8006f5e <HAL_TIM_ConfigClockSource+0x18a>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e2c:	d03e      	beq.n	8006eac <HAL_TIM_ConfigClockSource+0xd8>
 8006e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e32:	f200 8087 	bhi.w	8006f44 <HAL_TIM_ConfigClockSource+0x170>
 8006e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e3a:	f000 8086 	beq.w	8006f4a <HAL_TIM_ConfigClockSource+0x176>
 8006e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e42:	d87f      	bhi.n	8006f44 <HAL_TIM_ConfigClockSource+0x170>
 8006e44:	2b70      	cmp	r3, #112	; 0x70
 8006e46:	d01a      	beq.n	8006e7e <HAL_TIM_ConfigClockSource+0xaa>
 8006e48:	2b70      	cmp	r3, #112	; 0x70
 8006e4a:	d87b      	bhi.n	8006f44 <HAL_TIM_ConfigClockSource+0x170>
 8006e4c:	2b60      	cmp	r3, #96	; 0x60
 8006e4e:	d050      	beq.n	8006ef2 <HAL_TIM_ConfigClockSource+0x11e>
 8006e50:	2b60      	cmp	r3, #96	; 0x60
 8006e52:	d877      	bhi.n	8006f44 <HAL_TIM_ConfigClockSource+0x170>
 8006e54:	2b50      	cmp	r3, #80	; 0x50
 8006e56:	d03c      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0xfe>
 8006e58:	2b50      	cmp	r3, #80	; 0x50
 8006e5a:	d873      	bhi.n	8006f44 <HAL_TIM_ConfigClockSource+0x170>
 8006e5c:	2b40      	cmp	r3, #64	; 0x40
 8006e5e:	d058      	beq.n	8006f12 <HAL_TIM_ConfigClockSource+0x13e>
 8006e60:	2b40      	cmp	r3, #64	; 0x40
 8006e62:	d86f      	bhi.n	8006f44 <HAL_TIM_ConfigClockSource+0x170>
 8006e64:	2b30      	cmp	r3, #48	; 0x30
 8006e66:	d064      	beq.n	8006f32 <HAL_TIM_ConfigClockSource+0x15e>
 8006e68:	2b30      	cmp	r3, #48	; 0x30
 8006e6a:	d86b      	bhi.n	8006f44 <HAL_TIM_ConfigClockSource+0x170>
 8006e6c:	2b20      	cmp	r3, #32
 8006e6e:	d060      	beq.n	8006f32 <HAL_TIM_ConfigClockSource+0x15e>
 8006e70:	2b20      	cmp	r3, #32
 8006e72:	d867      	bhi.n	8006f44 <HAL_TIM_ConfigClockSource+0x170>
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d05c      	beq.n	8006f32 <HAL_TIM_ConfigClockSource+0x15e>
 8006e78:	2b10      	cmp	r3, #16
 8006e7a:	d05a      	beq.n	8006f32 <HAL_TIM_ConfigClockSource+0x15e>
 8006e7c:	e062      	b.n	8006f44 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e8e:	f000 f9b1 	bl	80071f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ea0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	609a      	str	r2, [r3, #8]
      break;
 8006eaa:	e04f      	b.n	8006f4c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ebc:	f000 f99a 	bl	80071f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689a      	ldr	r2, [r3, #8]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ece:	609a      	str	r2, [r3, #8]
      break;
 8006ed0:	e03c      	b.n	8006f4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ede:	461a      	mov	r2, r3
 8006ee0:	f000 f90e 	bl	8007100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2150      	movs	r1, #80	; 0x50
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 f967 	bl	80071be <TIM_ITRx_SetConfig>
      break;
 8006ef0:	e02c      	b.n	8006f4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006efe:	461a      	mov	r2, r3
 8006f00:	f000 f92d 	bl	800715e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2160      	movs	r1, #96	; 0x60
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 f957 	bl	80071be <TIM_ITRx_SetConfig>
      break;
 8006f10:	e01c      	b.n	8006f4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f1e:	461a      	mov	r2, r3
 8006f20:	f000 f8ee 	bl	8007100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2140      	movs	r1, #64	; 0x40
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f000 f947 	bl	80071be <TIM_ITRx_SetConfig>
      break;
 8006f30:	e00c      	b.n	8006f4c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	f000 f93e 	bl	80071be <TIM_ITRx_SetConfig>
      break;
 8006f42:	e003      	b.n	8006f4c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	73fb      	strb	r3, [r7, #15]
      break;
 8006f48:	e000      	b.n	8006f4c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006f4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b083      	sub	sp, #12
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006f6e:	bf00      	nop
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b083      	sub	sp, #12
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f82:	bf00      	nop
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b083      	sub	sp, #12
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f96:	bf00      	nop
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b083      	sub	sp, #12
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006faa:	bf00      	nop
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	b083      	sub	sp, #12
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fbe:	bf00      	nop
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
	...

08006fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a40      	ldr	r2, [pc, #256]	; (80070e0 <TIM_Base_SetConfig+0x114>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d013      	beq.n	800700c <TIM_Base_SetConfig+0x40>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fea:	d00f      	beq.n	800700c <TIM_Base_SetConfig+0x40>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a3d      	ldr	r2, [pc, #244]	; (80070e4 <TIM_Base_SetConfig+0x118>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d00b      	beq.n	800700c <TIM_Base_SetConfig+0x40>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a3c      	ldr	r2, [pc, #240]	; (80070e8 <TIM_Base_SetConfig+0x11c>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d007      	beq.n	800700c <TIM_Base_SetConfig+0x40>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a3b      	ldr	r2, [pc, #236]	; (80070ec <TIM_Base_SetConfig+0x120>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d003      	beq.n	800700c <TIM_Base_SetConfig+0x40>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a3a      	ldr	r2, [pc, #232]	; (80070f0 <TIM_Base_SetConfig+0x124>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d108      	bne.n	800701e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	4313      	orrs	r3, r2
 800701c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a2f      	ldr	r2, [pc, #188]	; (80070e0 <TIM_Base_SetConfig+0x114>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d01f      	beq.n	8007066 <TIM_Base_SetConfig+0x9a>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800702c:	d01b      	beq.n	8007066 <TIM_Base_SetConfig+0x9a>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a2c      	ldr	r2, [pc, #176]	; (80070e4 <TIM_Base_SetConfig+0x118>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d017      	beq.n	8007066 <TIM_Base_SetConfig+0x9a>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a2b      	ldr	r2, [pc, #172]	; (80070e8 <TIM_Base_SetConfig+0x11c>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d013      	beq.n	8007066 <TIM_Base_SetConfig+0x9a>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a2a      	ldr	r2, [pc, #168]	; (80070ec <TIM_Base_SetConfig+0x120>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d00f      	beq.n	8007066 <TIM_Base_SetConfig+0x9a>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a29      	ldr	r2, [pc, #164]	; (80070f0 <TIM_Base_SetConfig+0x124>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d00b      	beq.n	8007066 <TIM_Base_SetConfig+0x9a>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a28      	ldr	r2, [pc, #160]	; (80070f4 <TIM_Base_SetConfig+0x128>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d007      	beq.n	8007066 <TIM_Base_SetConfig+0x9a>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a27      	ldr	r2, [pc, #156]	; (80070f8 <TIM_Base_SetConfig+0x12c>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d003      	beq.n	8007066 <TIM_Base_SetConfig+0x9a>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a26      	ldr	r2, [pc, #152]	; (80070fc <TIM_Base_SetConfig+0x130>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d108      	bne.n	8007078 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800706c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	4313      	orrs	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	4313      	orrs	r3, r2
 8007084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	689a      	ldr	r2, [r3, #8]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a10      	ldr	r2, [pc, #64]	; (80070e0 <TIM_Base_SetConfig+0x114>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d00f      	beq.n	80070c4 <TIM_Base_SetConfig+0xf8>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a12      	ldr	r2, [pc, #72]	; (80070f0 <TIM_Base_SetConfig+0x124>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d00b      	beq.n	80070c4 <TIM_Base_SetConfig+0xf8>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a11      	ldr	r2, [pc, #68]	; (80070f4 <TIM_Base_SetConfig+0x128>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d007      	beq.n	80070c4 <TIM_Base_SetConfig+0xf8>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a10      	ldr	r2, [pc, #64]	; (80070f8 <TIM_Base_SetConfig+0x12c>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d003      	beq.n	80070c4 <TIM_Base_SetConfig+0xf8>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a0f      	ldr	r2, [pc, #60]	; (80070fc <TIM_Base_SetConfig+0x130>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d103      	bne.n	80070cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	691a      	ldr	r2, [r3, #16]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	615a      	str	r2, [r3, #20]
}
 80070d2:	bf00      	nop
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	40012c00 	.word	0x40012c00
 80070e4:	40000400 	.word	0x40000400
 80070e8:	40000800 	.word	0x40000800
 80070ec:	40000c00 	.word	0x40000c00
 80070f0:	40013400 	.word	0x40013400
 80070f4:	40014000 	.word	0x40014000
 80070f8:	40014400 	.word	0x40014400
 80070fc:	40014800 	.word	0x40014800

08007100 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007100:	b480      	push	{r7}
 8007102:	b087      	sub	sp, #28
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	f023 0201 	bic.w	r2, r3, #1
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800712a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	011b      	lsls	r3, r3, #4
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	4313      	orrs	r3, r2
 8007134:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f023 030a 	bic.w	r3, r3, #10
 800713c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	4313      	orrs	r3, r2
 8007144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	621a      	str	r2, [r3, #32]
}
 8007152:	bf00      	nop
 8007154:	371c      	adds	r7, #28
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800715e:	b480      	push	{r7}
 8007160:	b087      	sub	sp, #28
 8007162:	af00      	add	r7, sp, #0
 8007164:	60f8      	str	r0, [r7, #12]
 8007166:	60b9      	str	r1, [r7, #8]
 8007168:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	f023 0210 	bic.w	r2, r3, #16
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007188:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	031b      	lsls	r3, r3, #12
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	4313      	orrs	r3, r2
 8007192:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800719a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	011b      	lsls	r3, r3, #4
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	621a      	str	r2, [r3, #32]
}
 80071b2:	bf00      	nop
 80071b4:	371c      	adds	r7, #28
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071be:	b480      	push	{r7}
 80071c0:	b085      	sub	sp, #20
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	4313      	orrs	r3, r2
 80071dc:	f043 0307 	orr.w	r3, r3, #7
 80071e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	609a      	str	r2, [r3, #8]
}
 80071e8:	bf00      	nop
 80071ea:	3714      	adds	r7, #20
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
 8007200:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800720e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	021a      	lsls	r2, r3, #8
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	431a      	orrs	r2, r3
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	4313      	orrs	r3, r2
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	4313      	orrs	r3, r2
 8007220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	609a      	str	r2, [r3, #8]
}
 8007228:	bf00      	nop
 800722a:	371c      	adds	r7, #28
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007244:	2b01      	cmp	r3, #1
 8007246:	d101      	bne.n	800724c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007248:	2302      	movs	r3, #2
 800724a:	e068      	b.n	800731e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2202      	movs	r2, #2
 8007258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a2e      	ldr	r2, [pc, #184]	; (800732c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d004      	beq.n	8007280 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a2d      	ldr	r2, [pc, #180]	; (8007330 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d108      	bne.n	8007292 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007286:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	4313      	orrs	r3, r2
 8007290:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007298:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a1e      	ldr	r2, [pc, #120]	; (800732c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d01d      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072be:	d018      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a1b      	ldr	r2, [pc, #108]	; (8007334 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d013      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a1a      	ldr	r2, [pc, #104]	; (8007338 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d00e      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a18      	ldr	r2, [pc, #96]	; (800733c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d009      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a13      	ldr	r2, [pc, #76]	; (8007330 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d004      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a14      	ldr	r2, [pc, #80]	; (8007340 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d10c      	bne.n	800730c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	4313      	orrs	r3, r2
 8007302:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3714      	adds	r7, #20
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	40012c00 	.word	0x40012c00
 8007330:	40013400 	.word	0x40013400
 8007334:	40000400 	.word	0x40000400
 8007338:	40000800 	.word	0x40000800
 800733c:	40000c00 	.word	0x40000c00
 8007340:	40014000 	.word	0x40014000

08007344 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d101      	bne.n	8007392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e040      	b.n	8007414 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007396:	2b00      	cmp	r3, #0
 8007398:	d106      	bne.n	80073a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f7fb fd66 	bl	8002e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2224      	movs	r2, #36	; 0x24
 80073ac:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f022 0201 	bic.w	r2, r2, #1
 80073bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d002      	beq.n	80073cc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 fc34 	bl	8007c34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 f979 	bl	80076c4 <UART_SetConfig>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d101      	bne.n	80073dc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e01b      	b.n	8007414 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	685a      	ldr	r2, [r3, #4]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	689a      	ldr	r2, [r3, #8]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f042 0201 	orr.w	r2, r2, #1
 800740a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fcb3 	bl	8007d78 <UART_CheckIdleState>
 8007412:	4603      	mov	r3, r0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b08a      	sub	sp, #40	; 0x28
 8007420:	af02      	add	r7, sp, #8
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	603b      	str	r3, [r7, #0]
 8007428:	4613      	mov	r3, r2
 800742a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007430:	2b20      	cmp	r3, #32
 8007432:	d178      	bne.n	8007526 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <HAL_UART_Transmit+0x24>
 800743a:	88fb      	ldrh	r3, [r7, #6]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d101      	bne.n	8007444 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e071      	b.n	8007528 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2221      	movs	r2, #33	; 0x21
 8007450:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007452:	f7fb fe03 	bl	800305c <HAL_GetTick>
 8007456:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	88fa      	ldrh	r2, [r7, #6]
 800745c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	88fa      	ldrh	r2, [r7, #6]
 8007464:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007470:	d108      	bne.n	8007484 <HAL_UART_Transmit+0x68>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d104      	bne.n	8007484 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800747a:	2300      	movs	r3, #0
 800747c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	61bb      	str	r3, [r7, #24]
 8007482:	e003      	b.n	800748c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007488:	2300      	movs	r3, #0
 800748a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800748c:	e030      	b.n	80074f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	2200      	movs	r2, #0
 8007496:	2180      	movs	r1, #128	; 0x80
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f000 fd15 	bl	8007ec8 <UART_WaitOnFlagUntilTimeout>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d004      	beq.n	80074ae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2220      	movs	r2, #32
 80074a8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e03c      	b.n	8007528 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10b      	bne.n	80074cc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	881a      	ldrh	r2, [r3, #0]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074c0:	b292      	uxth	r2, r2
 80074c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	3302      	adds	r3, #2
 80074c8:	61bb      	str	r3, [r7, #24]
 80074ca:	e008      	b.n	80074de <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	781a      	ldrb	r2, [r3, #0]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	b292      	uxth	r2, r2
 80074d6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	3301      	adds	r3, #1
 80074dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	3b01      	subs	r3, #1
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1c8      	bne.n	800748e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	2200      	movs	r2, #0
 8007504:	2140      	movs	r1, #64	; 0x40
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f000 fcde 	bl	8007ec8 <UART_WaitOnFlagUntilTimeout>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d004      	beq.n	800751c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2220      	movs	r2, #32
 8007516:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007518:	2303      	movs	r3, #3
 800751a:	e005      	b.n	8007528 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2220      	movs	r2, #32
 8007520:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007522:	2300      	movs	r3, #0
 8007524:	e000      	b.n	8007528 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007526:	2302      	movs	r3, #2
  }
}
 8007528:	4618      	mov	r0, r3
 800752a:	3720      	adds	r7, #32
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b08a      	sub	sp, #40	; 0x28
 8007534:	af02      	add	r7, sp, #8
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	603b      	str	r3, [r7, #0]
 800753c:	4613      	mov	r3, r2
 800753e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007546:	2b20      	cmp	r3, #32
 8007548:	f040 80b6 	bne.w	80076b8 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d002      	beq.n	8007558 <HAL_UART_Receive+0x28>
 8007552:	88fb      	ldrh	r3, [r7, #6]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d101      	bne.n	800755c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e0ae      	b.n	80076ba <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2222      	movs	r2, #34	; 0x22
 8007568:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007572:	f7fb fd73 	bl	800305c <HAL_GetTick>
 8007576:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	88fa      	ldrh	r2, [r7, #6]
 800757c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	88fa      	ldrh	r2, [r7, #6]
 8007584:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007590:	d10e      	bne.n	80075b0 <HAL_UART_Receive+0x80>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d105      	bne.n	80075a6 <HAL_UART_Receive+0x76>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f240 12ff 	movw	r2, #511	; 0x1ff
 80075a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075a4:	e02d      	b.n	8007602 <HAL_UART_Receive+0xd2>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	22ff      	movs	r2, #255	; 0xff
 80075aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075ae:	e028      	b.n	8007602 <HAL_UART_Receive+0xd2>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10d      	bne.n	80075d4 <HAL_UART_Receive+0xa4>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d104      	bne.n	80075ca <HAL_UART_Receive+0x9a>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	22ff      	movs	r2, #255	; 0xff
 80075c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075c8:	e01b      	b.n	8007602 <HAL_UART_Receive+0xd2>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	227f      	movs	r2, #127	; 0x7f
 80075ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075d2:	e016      	b.n	8007602 <HAL_UART_Receive+0xd2>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075dc:	d10d      	bne.n	80075fa <HAL_UART_Receive+0xca>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d104      	bne.n	80075f0 <HAL_UART_Receive+0xc0>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	227f      	movs	r2, #127	; 0x7f
 80075ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075ee:	e008      	b.n	8007602 <HAL_UART_Receive+0xd2>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	223f      	movs	r2, #63	; 0x3f
 80075f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075f8:	e003      	b.n	8007602 <HAL_UART_Receive+0xd2>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007608:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007612:	d108      	bne.n	8007626 <HAL_UART_Receive+0xf6>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d104      	bne.n	8007626 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800761c:	2300      	movs	r3, #0
 800761e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	61bb      	str	r3, [r7, #24]
 8007624:	e003      	b.n	800762e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800762a:	2300      	movs	r3, #0
 800762c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800762e:	e037      	b.n	80076a0 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	2200      	movs	r2, #0
 8007638:	2120      	movs	r1, #32
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f000 fc44 	bl	8007ec8 <UART_WaitOnFlagUntilTimeout>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d005      	beq.n	8007652 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2220      	movs	r2, #32
 800764a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800764e:	2303      	movs	r3, #3
 8007650:	e033      	b.n	80076ba <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10c      	bne.n	8007672 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800765e:	b29a      	uxth	r2, r3
 8007660:	8a7b      	ldrh	r3, [r7, #18]
 8007662:	4013      	ands	r3, r2
 8007664:	b29a      	uxth	r2, r3
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	3302      	adds	r3, #2
 800766e:	61bb      	str	r3, [r7, #24]
 8007670:	e00d      	b.n	800768e <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007678:	b29b      	uxth	r3, r3
 800767a:	b2da      	uxtb	r2, r3
 800767c:	8a7b      	ldrh	r3, [r7, #18]
 800767e:	b2db      	uxtb	r3, r3
 8007680:	4013      	ands	r3, r2
 8007682:	b2da      	uxtb	r2, r3
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	3301      	adds	r3, #1
 800768c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007694:	b29b      	uxth	r3, r3
 8007696:	3b01      	subs	r3, #1
 8007698:	b29a      	uxth	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1c1      	bne.n	8007630 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2220      	movs	r2, #32
 80076b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80076b4:	2300      	movs	r3, #0
 80076b6:	e000      	b.n	80076ba <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80076b8:	2302      	movs	r3, #2
  }
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3720      	adds	r7, #32
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
	...

080076c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076c8:	b08a      	sub	sp, #40	; 0x28
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	689a      	ldr	r2, [r3, #8]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	431a      	orrs	r2, r3
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	431a      	orrs	r2, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	69db      	ldr	r3, [r3, #28]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	4ba4      	ldr	r3, [pc, #656]	; (8007984 <UART_SetConfig+0x2c0>)
 80076f4:	4013      	ands	r3, r2
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	6812      	ldr	r2, [r2, #0]
 80076fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076fc:	430b      	orrs	r3, r1
 80076fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	68da      	ldr	r2, [r3, #12]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	430a      	orrs	r2, r1
 8007714:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a99      	ldr	r2, [pc, #612]	; (8007988 <UART_SetConfig+0x2c4>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d004      	beq.n	8007730 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800772c:	4313      	orrs	r3, r2
 800772e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007740:	430a      	orrs	r2, r1
 8007742:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a90      	ldr	r2, [pc, #576]	; (800798c <UART_SetConfig+0x2c8>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d126      	bne.n	800779c <UART_SetConfig+0xd8>
 800774e:	4b90      	ldr	r3, [pc, #576]	; (8007990 <UART_SetConfig+0x2cc>)
 8007750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007754:	f003 0303 	and.w	r3, r3, #3
 8007758:	2b03      	cmp	r3, #3
 800775a:	d81b      	bhi.n	8007794 <UART_SetConfig+0xd0>
 800775c:	a201      	add	r2, pc, #4	; (adr r2, 8007764 <UART_SetConfig+0xa0>)
 800775e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007762:	bf00      	nop
 8007764:	08007775 	.word	0x08007775
 8007768:	08007785 	.word	0x08007785
 800776c:	0800777d 	.word	0x0800777d
 8007770:	0800778d 	.word	0x0800778d
 8007774:	2301      	movs	r3, #1
 8007776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800777a:	e116      	b.n	80079aa <UART_SetConfig+0x2e6>
 800777c:	2302      	movs	r3, #2
 800777e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007782:	e112      	b.n	80079aa <UART_SetConfig+0x2e6>
 8007784:	2304      	movs	r3, #4
 8007786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800778a:	e10e      	b.n	80079aa <UART_SetConfig+0x2e6>
 800778c:	2308      	movs	r3, #8
 800778e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007792:	e10a      	b.n	80079aa <UART_SetConfig+0x2e6>
 8007794:	2310      	movs	r3, #16
 8007796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800779a:	e106      	b.n	80079aa <UART_SetConfig+0x2e6>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a7c      	ldr	r2, [pc, #496]	; (8007994 <UART_SetConfig+0x2d0>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d138      	bne.n	8007818 <UART_SetConfig+0x154>
 80077a6:	4b7a      	ldr	r3, [pc, #488]	; (8007990 <UART_SetConfig+0x2cc>)
 80077a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ac:	f003 030c 	and.w	r3, r3, #12
 80077b0:	2b0c      	cmp	r3, #12
 80077b2:	d82d      	bhi.n	8007810 <UART_SetConfig+0x14c>
 80077b4:	a201      	add	r2, pc, #4	; (adr r2, 80077bc <UART_SetConfig+0xf8>)
 80077b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ba:	bf00      	nop
 80077bc:	080077f1 	.word	0x080077f1
 80077c0:	08007811 	.word	0x08007811
 80077c4:	08007811 	.word	0x08007811
 80077c8:	08007811 	.word	0x08007811
 80077cc:	08007801 	.word	0x08007801
 80077d0:	08007811 	.word	0x08007811
 80077d4:	08007811 	.word	0x08007811
 80077d8:	08007811 	.word	0x08007811
 80077dc:	080077f9 	.word	0x080077f9
 80077e0:	08007811 	.word	0x08007811
 80077e4:	08007811 	.word	0x08007811
 80077e8:	08007811 	.word	0x08007811
 80077ec:	08007809 	.word	0x08007809
 80077f0:	2300      	movs	r3, #0
 80077f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077f6:	e0d8      	b.n	80079aa <UART_SetConfig+0x2e6>
 80077f8:	2302      	movs	r3, #2
 80077fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077fe:	e0d4      	b.n	80079aa <UART_SetConfig+0x2e6>
 8007800:	2304      	movs	r3, #4
 8007802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007806:	e0d0      	b.n	80079aa <UART_SetConfig+0x2e6>
 8007808:	2308      	movs	r3, #8
 800780a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800780e:	e0cc      	b.n	80079aa <UART_SetConfig+0x2e6>
 8007810:	2310      	movs	r3, #16
 8007812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007816:	e0c8      	b.n	80079aa <UART_SetConfig+0x2e6>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a5e      	ldr	r2, [pc, #376]	; (8007998 <UART_SetConfig+0x2d4>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d125      	bne.n	800786e <UART_SetConfig+0x1aa>
 8007822:	4b5b      	ldr	r3, [pc, #364]	; (8007990 <UART_SetConfig+0x2cc>)
 8007824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007828:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800782c:	2b30      	cmp	r3, #48	; 0x30
 800782e:	d016      	beq.n	800785e <UART_SetConfig+0x19a>
 8007830:	2b30      	cmp	r3, #48	; 0x30
 8007832:	d818      	bhi.n	8007866 <UART_SetConfig+0x1a2>
 8007834:	2b20      	cmp	r3, #32
 8007836:	d00a      	beq.n	800784e <UART_SetConfig+0x18a>
 8007838:	2b20      	cmp	r3, #32
 800783a:	d814      	bhi.n	8007866 <UART_SetConfig+0x1a2>
 800783c:	2b00      	cmp	r3, #0
 800783e:	d002      	beq.n	8007846 <UART_SetConfig+0x182>
 8007840:	2b10      	cmp	r3, #16
 8007842:	d008      	beq.n	8007856 <UART_SetConfig+0x192>
 8007844:	e00f      	b.n	8007866 <UART_SetConfig+0x1a2>
 8007846:	2300      	movs	r3, #0
 8007848:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800784c:	e0ad      	b.n	80079aa <UART_SetConfig+0x2e6>
 800784e:	2302      	movs	r3, #2
 8007850:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007854:	e0a9      	b.n	80079aa <UART_SetConfig+0x2e6>
 8007856:	2304      	movs	r3, #4
 8007858:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800785c:	e0a5      	b.n	80079aa <UART_SetConfig+0x2e6>
 800785e:	2308      	movs	r3, #8
 8007860:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007864:	e0a1      	b.n	80079aa <UART_SetConfig+0x2e6>
 8007866:	2310      	movs	r3, #16
 8007868:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800786c:	e09d      	b.n	80079aa <UART_SetConfig+0x2e6>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a4a      	ldr	r2, [pc, #296]	; (800799c <UART_SetConfig+0x2d8>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d125      	bne.n	80078c4 <UART_SetConfig+0x200>
 8007878:	4b45      	ldr	r3, [pc, #276]	; (8007990 <UART_SetConfig+0x2cc>)
 800787a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800787e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007882:	2bc0      	cmp	r3, #192	; 0xc0
 8007884:	d016      	beq.n	80078b4 <UART_SetConfig+0x1f0>
 8007886:	2bc0      	cmp	r3, #192	; 0xc0
 8007888:	d818      	bhi.n	80078bc <UART_SetConfig+0x1f8>
 800788a:	2b80      	cmp	r3, #128	; 0x80
 800788c:	d00a      	beq.n	80078a4 <UART_SetConfig+0x1e0>
 800788e:	2b80      	cmp	r3, #128	; 0x80
 8007890:	d814      	bhi.n	80078bc <UART_SetConfig+0x1f8>
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <UART_SetConfig+0x1d8>
 8007896:	2b40      	cmp	r3, #64	; 0x40
 8007898:	d008      	beq.n	80078ac <UART_SetConfig+0x1e8>
 800789a:	e00f      	b.n	80078bc <UART_SetConfig+0x1f8>
 800789c:	2300      	movs	r3, #0
 800789e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078a2:	e082      	b.n	80079aa <UART_SetConfig+0x2e6>
 80078a4:	2302      	movs	r3, #2
 80078a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078aa:	e07e      	b.n	80079aa <UART_SetConfig+0x2e6>
 80078ac:	2304      	movs	r3, #4
 80078ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078b2:	e07a      	b.n	80079aa <UART_SetConfig+0x2e6>
 80078b4:	2308      	movs	r3, #8
 80078b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078ba:	e076      	b.n	80079aa <UART_SetConfig+0x2e6>
 80078bc:	2310      	movs	r3, #16
 80078be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078c2:	e072      	b.n	80079aa <UART_SetConfig+0x2e6>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a35      	ldr	r2, [pc, #212]	; (80079a0 <UART_SetConfig+0x2dc>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d12a      	bne.n	8007924 <UART_SetConfig+0x260>
 80078ce:	4b30      	ldr	r3, [pc, #192]	; (8007990 <UART_SetConfig+0x2cc>)
 80078d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078dc:	d01a      	beq.n	8007914 <UART_SetConfig+0x250>
 80078de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078e2:	d81b      	bhi.n	800791c <UART_SetConfig+0x258>
 80078e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078e8:	d00c      	beq.n	8007904 <UART_SetConfig+0x240>
 80078ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078ee:	d815      	bhi.n	800791c <UART_SetConfig+0x258>
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d003      	beq.n	80078fc <UART_SetConfig+0x238>
 80078f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078f8:	d008      	beq.n	800790c <UART_SetConfig+0x248>
 80078fa:	e00f      	b.n	800791c <UART_SetConfig+0x258>
 80078fc:	2300      	movs	r3, #0
 80078fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007902:	e052      	b.n	80079aa <UART_SetConfig+0x2e6>
 8007904:	2302      	movs	r3, #2
 8007906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800790a:	e04e      	b.n	80079aa <UART_SetConfig+0x2e6>
 800790c:	2304      	movs	r3, #4
 800790e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007912:	e04a      	b.n	80079aa <UART_SetConfig+0x2e6>
 8007914:	2308      	movs	r3, #8
 8007916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800791a:	e046      	b.n	80079aa <UART_SetConfig+0x2e6>
 800791c:	2310      	movs	r3, #16
 800791e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007922:	e042      	b.n	80079aa <UART_SetConfig+0x2e6>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a17      	ldr	r2, [pc, #92]	; (8007988 <UART_SetConfig+0x2c4>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d13a      	bne.n	80079a4 <UART_SetConfig+0x2e0>
 800792e:	4b18      	ldr	r3, [pc, #96]	; (8007990 <UART_SetConfig+0x2cc>)
 8007930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007934:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007938:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800793c:	d01a      	beq.n	8007974 <UART_SetConfig+0x2b0>
 800793e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007942:	d81b      	bhi.n	800797c <UART_SetConfig+0x2b8>
 8007944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007948:	d00c      	beq.n	8007964 <UART_SetConfig+0x2a0>
 800794a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800794e:	d815      	bhi.n	800797c <UART_SetConfig+0x2b8>
 8007950:	2b00      	cmp	r3, #0
 8007952:	d003      	beq.n	800795c <UART_SetConfig+0x298>
 8007954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007958:	d008      	beq.n	800796c <UART_SetConfig+0x2a8>
 800795a:	e00f      	b.n	800797c <UART_SetConfig+0x2b8>
 800795c:	2300      	movs	r3, #0
 800795e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007962:	e022      	b.n	80079aa <UART_SetConfig+0x2e6>
 8007964:	2302      	movs	r3, #2
 8007966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800796a:	e01e      	b.n	80079aa <UART_SetConfig+0x2e6>
 800796c:	2304      	movs	r3, #4
 800796e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007972:	e01a      	b.n	80079aa <UART_SetConfig+0x2e6>
 8007974:	2308      	movs	r3, #8
 8007976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800797a:	e016      	b.n	80079aa <UART_SetConfig+0x2e6>
 800797c:	2310      	movs	r3, #16
 800797e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007982:	e012      	b.n	80079aa <UART_SetConfig+0x2e6>
 8007984:	efff69f3 	.word	0xefff69f3
 8007988:	40008000 	.word	0x40008000
 800798c:	40013800 	.word	0x40013800
 8007990:	40021000 	.word	0x40021000
 8007994:	40004400 	.word	0x40004400
 8007998:	40004800 	.word	0x40004800
 800799c:	40004c00 	.word	0x40004c00
 80079a0:	40005000 	.word	0x40005000
 80079a4:	2310      	movs	r3, #16
 80079a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a9f      	ldr	r2, [pc, #636]	; (8007c2c <UART_SetConfig+0x568>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d17a      	bne.n	8007aaa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079b8:	2b08      	cmp	r3, #8
 80079ba:	d824      	bhi.n	8007a06 <UART_SetConfig+0x342>
 80079bc:	a201      	add	r2, pc, #4	; (adr r2, 80079c4 <UART_SetConfig+0x300>)
 80079be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c2:	bf00      	nop
 80079c4:	080079e9 	.word	0x080079e9
 80079c8:	08007a07 	.word	0x08007a07
 80079cc:	080079f1 	.word	0x080079f1
 80079d0:	08007a07 	.word	0x08007a07
 80079d4:	080079f7 	.word	0x080079f7
 80079d8:	08007a07 	.word	0x08007a07
 80079dc:	08007a07 	.word	0x08007a07
 80079e0:	08007a07 	.word	0x08007a07
 80079e4:	080079ff 	.word	0x080079ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079e8:	f7fd feb2 	bl	8005750 <HAL_RCC_GetPCLK1Freq>
 80079ec:	61f8      	str	r0, [r7, #28]
        break;
 80079ee:	e010      	b.n	8007a12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079f0:	4b8f      	ldr	r3, [pc, #572]	; (8007c30 <UART_SetConfig+0x56c>)
 80079f2:	61fb      	str	r3, [r7, #28]
        break;
 80079f4:	e00d      	b.n	8007a12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079f6:	f7fd fe13 	bl	8005620 <HAL_RCC_GetSysClockFreq>
 80079fa:	61f8      	str	r0, [r7, #28]
        break;
 80079fc:	e009      	b.n	8007a12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a02:	61fb      	str	r3, [r7, #28]
        break;
 8007a04:	e005      	b.n	8007a12 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007a06:	2300      	movs	r3, #0
 8007a08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007a10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f000 80fb 	beq.w	8007c10 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	685a      	ldr	r2, [r3, #4]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	005b      	lsls	r3, r3, #1
 8007a22:	4413      	add	r3, r2
 8007a24:	69fa      	ldr	r2, [r7, #28]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d305      	bcc.n	8007a36 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007a30:	69fa      	ldr	r2, [r7, #28]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d903      	bls.n	8007a3e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007a3c:	e0e8      	b.n	8007c10 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	2200      	movs	r2, #0
 8007a42:	461c      	mov	r4, r3
 8007a44:	4615      	mov	r5, r2
 8007a46:	f04f 0200 	mov.w	r2, #0
 8007a4a:	f04f 0300 	mov.w	r3, #0
 8007a4e:	022b      	lsls	r3, r5, #8
 8007a50:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007a54:	0222      	lsls	r2, r4, #8
 8007a56:	68f9      	ldr	r1, [r7, #12]
 8007a58:	6849      	ldr	r1, [r1, #4]
 8007a5a:	0849      	lsrs	r1, r1, #1
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	4688      	mov	r8, r1
 8007a60:	4681      	mov	r9, r0
 8007a62:	eb12 0a08 	adds.w	sl, r2, r8
 8007a66:	eb43 0b09 	adc.w	fp, r3, r9
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	603b      	str	r3, [r7, #0]
 8007a72:	607a      	str	r2, [r7, #4]
 8007a74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a78:	4650      	mov	r0, sl
 8007a7a:	4659      	mov	r1, fp
 8007a7c:	f7f9 f8a4 	bl	8000bc8 <__aeabi_uldivmod>
 8007a80:	4602      	mov	r2, r0
 8007a82:	460b      	mov	r3, r1
 8007a84:	4613      	mov	r3, r2
 8007a86:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a8e:	d308      	bcc.n	8007aa2 <UART_SetConfig+0x3de>
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a96:	d204      	bcs.n	8007aa2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	69ba      	ldr	r2, [r7, #24]
 8007a9e:	60da      	str	r2, [r3, #12]
 8007aa0:	e0b6      	b.n	8007c10 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007aa8:	e0b2      	b.n	8007c10 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	69db      	ldr	r3, [r3, #28]
 8007aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ab2:	d15e      	bne.n	8007b72 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007ab4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ab8:	2b08      	cmp	r3, #8
 8007aba:	d828      	bhi.n	8007b0e <UART_SetConfig+0x44a>
 8007abc:	a201      	add	r2, pc, #4	; (adr r2, 8007ac4 <UART_SetConfig+0x400>)
 8007abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac2:	bf00      	nop
 8007ac4:	08007ae9 	.word	0x08007ae9
 8007ac8:	08007af1 	.word	0x08007af1
 8007acc:	08007af9 	.word	0x08007af9
 8007ad0:	08007b0f 	.word	0x08007b0f
 8007ad4:	08007aff 	.word	0x08007aff
 8007ad8:	08007b0f 	.word	0x08007b0f
 8007adc:	08007b0f 	.word	0x08007b0f
 8007ae0:	08007b0f 	.word	0x08007b0f
 8007ae4:	08007b07 	.word	0x08007b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ae8:	f7fd fe32 	bl	8005750 <HAL_RCC_GetPCLK1Freq>
 8007aec:	61f8      	str	r0, [r7, #28]
        break;
 8007aee:	e014      	b.n	8007b1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007af0:	f7fd fe44 	bl	800577c <HAL_RCC_GetPCLK2Freq>
 8007af4:	61f8      	str	r0, [r7, #28]
        break;
 8007af6:	e010      	b.n	8007b1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007af8:	4b4d      	ldr	r3, [pc, #308]	; (8007c30 <UART_SetConfig+0x56c>)
 8007afa:	61fb      	str	r3, [r7, #28]
        break;
 8007afc:	e00d      	b.n	8007b1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007afe:	f7fd fd8f 	bl	8005620 <HAL_RCC_GetSysClockFreq>
 8007b02:	61f8      	str	r0, [r7, #28]
        break;
 8007b04:	e009      	b.n	8007b1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b0a:	61fb      	str	r3, [r7, #28]
        break;
 8007b0c:	e005      	b.n	8007b1a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007b18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d077      	beq.n	8007c10 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	005a      	lsls	r2, r3, #1
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	085b      	lsrs	r3, r3, #1
 8007b2a:	441a      	add	r2, r3
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b34:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	2b0f      	cmp	r3, #15
 8007b3a:	d916      	bls.n	8007b6a <UART_SetConfig+0x4a6>
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b42:	d212      	bcs.n	8007b6a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	f023 030f 	bic.w	r3, r3, #15
 8007b4c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	085b      	lsrs	r3, r3, #1
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	f003 0307 	and.w	r3, r3, #7
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	8afb      	ldrh	r3, [r7, #22]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	8afa      	ldrh	r2, [r7, #22]
 8007b66:	60da      	str	r2, [r3, #12]
 8007b68:	e052      	b.n	8007c10 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007b70:	e04e      	b.n	8007c10 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b76:	2b08      	cmp	r3, #8
 8007b78:	d827      	bhi.n	8007bca <UART_SetConfig+0x506>
 8007b7a:	a201      	add	r2, pc, #4	; (adr r2, 8007b80 <UART_SetConfig+0x4bc>)
 8007b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b80:	08007ba5 	.word	0x08007ba5
 8007b84:	08007bad 	.word	0x08007bad
 8007b88:	08007bb5 	.word	0x08007bb5
 8007b8c:	08007bcb 	.word	0x08007bcb
 8007b90:	08007bbb 	.word	0x08007bbb
 8007b94:	08007bcb 	.word	0x08007bcb
 8007b98:	08007bcb 	.word	0x08007bcb
 8007b9c:	08007bcb 	.word	0x08007bcb
 8007ba0:	08007bc3 	.word	0x08007bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ba4:	f7fd fdd4 	bl	8005750 <HAL_RCC_GetPCLK1Freq>
 8007ba8:	61f8      	str	r0, [r7, #28]
        break;
 8007baa:	e014      	b.n	8007bd6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bac:	f7fd fde6 	bl	800577c <HAL_RCC_GetPCLK2Freq>
 8007bb0:	61f8      	str	r0, [r7, #28]
        break;
 8007bb2:	e010      	b.n	8007bd6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bb4:	4b1e      	ldr	r3, [pc, #120]	; (8007c30 <UART_SetConfig+0x56c>)
 8007bb6:	61fb      	str	r3, [r7, #28]
        break;
 8007bb8:	e00d      	b.n	8007bd6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bba:	f7fd fd31 	bl	8005620 <HAL_RCC_GetSysClockFreq>
 8007bbe:	61f8      	str	r0, [r7, #28]
        break;
 8007bc0:	e009      	b.n	8007bd6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bc6:	61fb      	str	r3, [r7, #28]
        break;
 8007bc8:	e005      	b.n	8007bd6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007bd4:	bf00      	nop
    }

    if (pclk != 0U)
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d019      	beq.n	8007c10 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	085a      	lsrs	r2, r3, #1
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	441a      	add	r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	2b0f      	cmp	r3, #15
 8007bf4:	d909      	bls.n	8007c0a <UART_SetConfig+0x546>
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bfc:	d205      	bcs.n	8007c0a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	60da      	str	r2, [r3, #12]
 8007c08:	e002      	b.n	8007c10 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2200      	movs	r2, #0
 8007c14:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007c1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3728      	adds	r7, #40	; 0x28
 8007c24:	46bd      	mov	sp, r7
 8007c26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c2a:	bf00      	nop
 8007c2c:	40008000 	.word	0x40008000
 8007c30:	00f42400 	.word	0x00f42400

08007c34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c40:	f003 0308 	and.w	r3, r3, #8
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00a      	beq.n	8007c5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00a      	beq.n	8007c80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	430a      	orrs	r2, r1
 8007c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c84:	f003 0302 	and.w	r3, r3, #2
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00a      	beq.n	8007ca2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca6:	f003 0304 	and.w	r3, r3, #4
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00a      	beq.n	8007cc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	430a      	orrs	r2, r1
 8007cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc8:	f003 0310 	and.w	r3, r3, #16
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00a      	beq.n	8007ce6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	430a      	orrs	r2, r1
 8007ce4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cea:	f003 0320 	and.w	r3, r3, #32
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00a      	beq.n	8007d08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	430a      	orrs	r2, r1
 8007d06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d01a      	beq.n	8007d4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	430a      	orrs	r2, r1
 8007d28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d32:	d10a      	bne.n	8007d4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	430a      	orrs	r2, r1
 8007d48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00a      	beq.n	8007d6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	605a      	str	r2, [r3, #4]
  }
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b098      	sub	sp, #96	; 0x60
 8007d7c:	af02      	add	r7, sp, #8
 8007d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d88:	f7fb f968 	bl	800305c <HAL_GetTick>
 8007d8c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0308 	and.w	r3, r3, #8
 8007d98:	2b08      	cmp	r3, #8
 8007d9a:	d12e      	bne.n	8007dfa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007da0:	9300      	str	r3, [sp, #0]
 8007da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007da4:	2200      	movs	r2, #0
 8007da6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f88c 	bl	8007ec8 <UART_WaitOnFlagUntilTimeout>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d021      	beq.n	8007dfa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dbe:	e853 3f00 	ldrex	r3, [r3]
 8007dc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dca:	653b      	str	r3, [r7, #80]	; 0x50
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dd4:	647b      	str	r3, [r7, #68]	; 0x44
 8007dd6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ddc:	e841 2300 	strex	r3, r2, [r1]
 8007de0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1e6      	bne.n	8007db6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2220      	movs	r2, #32
 8007dec:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e062      	b.n	8007ec0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 0304 	and.w	r3, r3, #4
 8007e04:	2b04      	cmp	r3, #4
 8007e06:	d149      	bne.n	8007e9c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e10:	2200      	movs	r2, #0
 8007e12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f856 	bl	8007ec8 <UART_WaitOnFlagUntilTimeout>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d03c      	beq.n	8007e9c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	e853 3f00 	ldrex	r3, [r3]
 8007e2e:	623b      	str	r3, [r7, #32]
   return(result);
 8007e30:	6a3b      	ldr	r3, [r7, #32]
 8007e32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e40:	633b      	str	r3, [r7, #48]	; 0x30
 8007e42:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e48:	e841 2300 	strex	r3, r2, [r1]
 8007e4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1e6      	bne.n	8007e22 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	3308      	adds	r3, #8
 8007e5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	e853 3f00 	ldrex	r3, [r3]
 8007e62:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f023 0301 	bic.w	r3, r3, #1
 8007e6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	3308      	adds	r3, #8
 8007e72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e74:	61fa      	str	r2, [r7, #28]
 8007e76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e78:	69b9      	ldr	r1, [r7, #24]
 8007e7a:	69fa      	ldr	r2, [r7, #28]
 8007e7c:	e841 2300 	strex	r3, r2, [r1]
 8007e80:	617b      	str	r3, [r7, #20]
   return(result);
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1e5      	bne.n	8007e54 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2220      	movs	r2, #32
 8007e8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e011      	b.n	8007ec0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2220      	movs	r2, #32
 8007ea6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3758      	adds	r7, #88	; 0x58
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	603b      	str	r3, [r7, #0]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ed8:	e049      	b.n	8007f6e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ee0:	d045      	beq.n	8007f6e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ee2:	f7fb f8bb 	bl	800305c <HAL_GetTick>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	1ad3      	subs	r3, r2, r3
 8007eec:	69ba      	ldr	r2, [r7, #24]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d302      	bcc.n	8007ef8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d101      	bne.n	8007efc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e048      	b.n	8007f8e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0304 	and.w	r3, r3, #4
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d031      	beq.n	8007f6e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	69db      	ldr	r3, [r3, #28]
 8007f10:	f003 0308 	and.w	r3, r3, #8
 8007f14:	2b08      	cmp	r3, #8
 8007f16:	d110      	bne.n	8007f3a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2208      	movs	r2, #8
 8007f1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f000 f838 	bl	8007f96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2208      	movs	r2, #8
 8007f2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e029      	b.n	8007f8e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	69db      	ldr	r3, [r3, #28]
 8007f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f48:	d111      	bne.n	8007f6e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f000 f81e 	bl	8007f96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2220      	movs	r2, #32
 8007f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e00f      	b.n	8007f8e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	69da      	ldr	r2, [r3, #28]
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	4013      	ands	r3, r2
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	bf0c      	ite	eq
 8007f7e:	2301      	moveq	r3, #1
 8007f80:	2300      	movne	r3, #0
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	461a      	mov	r2, r3
 8007f86:	79fb      	ldrb	r3, [r7, #7]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d0a6      	beq.n	8007eda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f96:	b480      	push	{r7}
 8007f98:	b095      	sub	sp, #84	; 0x54
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fa6:	e853 3f00 	ldrex	r3, [r3]
 8007faa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	461a      	mov	r2, r3
 8007fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fbc:	643b      	str	r3, [r7, #64]	; 0x40
 8007fbe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fc4:	e841 2300 	strex	r3, r2, [r1]
 8007fc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1e6      	bne.n	8007f9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	3308      	adds	r3, #8
 8007fd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd8:	6a3b      	ldr	r3, [r7, #32]
 8007fda:	e853 3f00 	ldrex	r3, [r3]
 8007fde:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	f023 0301 	bic.w	r3, r3, #1
 8007fe6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	3308      	adds	r3, #8
 8007fee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ff0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ff2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ff8:	e841 2300 	strex	r3, r2, [r1]
 8007ffc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1e5      	bne.n	8007fd0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008008:	2b01      	cmp	r3, #1
 800800a:	d118      	bne.n	800803e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	e853 3f00 	ldrex	r3, [r3]
 8008018:	60bb      	str	r3, [r7, #8]
   return(result);
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	f023 0310 	bic.w	r3, r3, #16
 8008020:	647b      	str	r3, [r7, #68]	; 0x44
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	461a      	mov	r2, r3
 8008028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800802a:	61bb      	str	r3, [r7, #24]
 800802c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802e:	6979      	ldr	r1, [r7, #20]
 8008030:	69ba      	ldr	r2, [r7, #24]
 8008032:	e841 2300 	strex	r3, r2, [r1]
 8008036:	613b      	str	r3, [r7, #16]
   return(result);
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1e6      	bne.n	800800c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2220      	movs	r2, #32
 8008042:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008052:	bf00      	nop
 8008054:	3754      	adds	r7, #84	; 0x54
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <__cvt>:
 800805e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008062:	ec55 4b10 	vmov	r4, r5, d0
 8008066:	2d00      	cmp	r5, #0
 8008068:	460e      	mov	r6, r1
 800806a:	4619      	mov	r1, r3
 800806c:	462b      	mov	r3, r5
 800806e:	bfbb      	ittet	lt
 8008070:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008074:	461d      	movlt	r5, r3
 8008076:	2300      	movge	r3, #0
 8008078:	232d      	movlt	r3, #45	; 0x2d
 800807a:	700b      	strb	r3, [r1, #0]
 800807c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800807e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008082:	4691      	mov	r9, r2
 8008084:	f023 0820 	bic.w	r8, r3, #32
 8008088:	bfbc      	itt	lt
 800808a:	4622      	movlt	r2, r4
 800808c:	4614      	movlt	r4, r2
 800808e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008092:	d005      	beq.n	80080a0 <__cvt+0x42>
 8008094:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008098:	d100      	bne.n	800809c <__cvt+0x3e>
 800809a:	3601      	adds	r6, #1
 800809c:	2102      	movs	r1, #2
 800809e:	e000      	b.n	80080a2 <__cvt+0x44>
 80080a0:	2103      	movs	r1, #3
 80080a2:	ab03      	add	r3, sp, #12
 80080a4:	9301      	str	r3, [sp, #4]
 80080a6:	ab02      	add	r3, sp, #8
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	ec45 4b10 	vmov	d0, r4, r5
 80080ae:	4653      	mov	r3, sl
 80080b0:	4632      	mov	r2, r6
 80080b2:	f001 f809 	bl	80090c8 <_dtoa_r>
 80080b6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80080ba:	4607      	mov	r7, r0
 80080bc:	d102      	bne.n	80080c4 <__cvt+0x66>
 80080be:	f019 0f01 	tst.w	r9, #1
 80080c2:	d022      	beq.n	800810a <__cvt+0xac>
 80080c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080c8:	eb07 0906 	add.w	r9, r7, r6
 80080cc:	d110      	bne.n	80080f0 <__cvt+0x92>
 80080ce:	783b      	ldrb	r3, [r7, #0]
 80080d0:	2b30      	cmp	r3, #48	; 0x30
 80080d2:	d10a      	bne.n	80080ea <__cvt+0x8c>
 80080d4:	2200      	movs	r2, #0
 80080d6:	2300      	movs	r3, #0
 80080d8:	4620      	mov	r0, r4
 80080da:	4629      	mov	r1, r5
 80080dc:	f7f8 fd04 	bl	8000ae8 <__aeabi_dcmpeq>
 80080e0:	b918      	cbnz	r0, 80080ea <__cvt+0x8c>
 80080e2:	f1c6 0601 	rsb	r6, r6, #1
 80080e6:	f8ca 6000 	str.w	r6, [sl]
 80080ea:	f8da 3000 	ldr.w	r3, [sl]
 80080ee:	4499      	add	r9, r3
 80080f0:	2200      	movs	r2, #0
 80080f2:	2300      	movs	r3, #0
 80080f4:	4620      	mov	r0, r4
 80080f6:	4629      	mov	r1, r5
 80080f8:	f7f8 fcf6 	bl	8000ae8 <__aeabi_dcmpeq>
 80080fc:	b108      	cbz	r0, 8008102 <__cvt+0xa4>
 80080fe:	f8cd 900c 	str.w	r9, [sp, #12]
 8008102:	2230      	movs	r2, #48	; 0x30
 8008104:	9b03      	ldr	r3, [sp, #12]
 8008106:	454b      	cmp	r3, r9
 8008108:	d307      	bcc.n	800811a <__cvt+0xbc>
 800810a:	9b03      	ldr	r3, [sp, #12]
 800810c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800810e:	1bdb      	subs	r3, r3, r7
 8008110:	4638      	mov	r0, r7
 8008112:	6013      	str	r3, [r2, #0]
 8008114:	b004      	add	sp, #16
 8008116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800811a:	1c59      	adds	r1, r3, #1
 800811c:	9103      	str	r1, [sp, #12]
 800811e:	701a      	strb	r2, [r3, #0]
 8008120:	e7f0      	b.n	8008104 <__cvt+0xa6>

08008122 <__exponent>:
 8008122:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008124:	4603      	mov	r3, r0
 8008126:	2900      	cmp	r1, #0
 8008128:	bfb8      	it	lt
 800812a:	4249      	neglt	r1, r1
 800812c:	f803 2b02 	strb.w	r2, [r3], #2
 8008130:	bfb4      	ite	lt
 8008132:	222d      	movlt	r2, #45	; 0x2d
 8008134:	222b      	movge	r2, #43	; 0x2b
 8008136:	2909      	cmp	r1, #9
 8008138:	7042      	strb	r2, [r0, #1]
 800813a:	dd2a      	ble.n	8008192 <__exponent+0x70>
 800813c:	f10d 0207 	add.w	r2, sp, #7
 8008140:	4617      	mov	r7, r2
 8008142:	260a      	movs	r6, #10
 8008144:	4694      	mov	ip, r2
 8008146:	fb91 f5f6 	sdiv	r5, r1, r6
 800814a:	fb06 1415 	mls	r4, r6, r5, r1
 800814e:	3430      	adds	r4, #48	; 0x30
 8008150:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008154:	460c      	mov	r4, r1
 8008156:	2c63      	cmp	r4, #99	; 0x63
 8008158:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800815c:	4629      	mov	r1, r5
 800815e:	dcf1      	bgt.n	8008144 <__exponent+0x22>
 8008160:	3130      	adds	r1, #48	; 0x30
 8008162:	f1ac 0402 	sub.w	r4, ip, #2
 8008166:	f802 1c01 	strb.w	r1, [r2, #-1]
 800816a:	1c41      	adds	r1, r0, #1
 800816c:	4622      	mov	r2, r4
 800816e:	42ba      	cmp	r2, r7
 8008170:	d30a      	bcc.n	8008188 <__exponent+0x66>
 8008172:	f10d 0209 	add.w	r2, sp, #9
 8008176:	eba2 020c 	sub.w	r2, r2, ip
 800817a:	42bc      	cmp	r4, r7
 800817c:	bf88      	it	hi
 800817e:	2200      	movhi	r2, #0
 8008180:	4413      	add	r3, r2
 8008182:	1a18      	subs	r0, r3, r0
 8008184:	b003      	add	sp, #12
 8008186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008188:	f812 5b01 	ldrb.w	r5, [r2], #1
 800818c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008190:	e7ed      	b.n	800816e <__exponent+0x4c>
 8008192:	2330      	movs	r3, #48	; 0x30
 8008194:	3130      	adds	r1, #48	; 0x30
 8008196:	7083      	strb	r3, [r0, #2]
 8008198:	70c1      	strb	r1, [r0, #3]
 800819a:	1d03      	adds	r3, r0, #4
 800819c:	e7f1      	b.n	8008182 <__exponent+0x60>
	...

080081a0 <_printf_float>:
 80081a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a4:	ed2d 8b02 	vpush	{d8}
 80081a8:	b08d      	sub	sp, #52	; 0x34
 80081aa:	460c      	mov	r4, r1
 80081ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80081b0:	4616      	mov	r6, r2
 80081b2:	461f      	mov	r7, r3
 80081b4:	4605      	mov	r5, r0
 80081b6:	f000 fe77 	bl	8008ea8 <_localeconv_r>
 80081ba:	f8d0 a000 	ldr.w	sl, [r0]
 80081be:	4650      	mov	r0, sl
 80081c0:	f7f8 f866 	bl	8000290 <strlen>
 80081c4:	2300      	movs	r3, #0
 80081c6:	930a      	str	r3, [sp, #40]	; 0x28
 80081c8:	6823      	ldr	r3, [r4, #0]
 80081ca:	9305      	str	r3, [sp, #20]
 80081cc:	f8d8 3000 	ldr.w	r3, [r8]
 80081d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80081d4:	3307      	adds	r3, #7
 80081d6:	f023 0307 	bic.w	r3, r3, #7
 80081da:	f103 0208 	add.w	r2, r3, #8
 80081de:	f8c8 2000 	str.w	r2, [r8]
 80081e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80081e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081ea:	9307      	str	r3, [sp, #28]
 80081ec:	f8cd 8018 	str.w	r8, [sp, #24]
 80081f0:	ee08 0a10 	vmov	s16, r0
 80081f4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80081f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081fc:	4b9e      	ldr	r3, [pc, #632]	; (8008478 <_printf_float+0x2d8>)
 80081fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008202:	f7f8 fca3 	bl	8000b4c <__aeabi_dcmpun>
 8008206:	bb88      	cbnz	r0, 800826c <_printf_float+0xcc>
 8008208:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800820c:	4b9a      	ldr	r3, [pc, #616]	; (8008478 <_printf_float+0x2d8>)
 800820e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008212:	f7f8 fc7d 	bl	8000b10 <__aeabi_dcmple>
 8008216:	bb48      	cbnz	r0, 800826c <_printf_float+0xcc>
 8008218:	2200      	movs	r2, #0
 800821a:	2300      	movs	r3, #0
 800821c:	4640      	mov	r0, r8
 800821e:	4649      	mov	r1, r9
 8008220:	f7f8 fc6c 	bl	8000afc <__aeabi_dcmplt>
 8008224:	b110      	cbz	r0, 800822c <_printf_float+0x8c>
 8008226:	232d      	movs	r3, #45	; 0x2d
 8008228:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800822c:	4a93      	ldr	r2, [pc, #588]	; (800847c <_printf_float+0x2dc>)
 800822e:	4b94      	ldr	r3, [pc, #592]	; (8008480 <_printf_float+0x2e0>)
 8008230:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008234:	bf94      	ite	ls
 8008236:	4690      	movls	r8, r2
 8008238:	4698      	movhi	r8, r3
 800823a:	2303      	movs	r3, #3
 800823c:	6123      	str	r3, [r4, #16]
 800823e:	9b05      	ldr	r3, [sp, #20]
 8008240:	f023 0304 	bic.w	r3, r3, #4
 8008244:	6023      	str	r3, [r4, #0]
 8008246:	f04f 0900 	mov.w	r9, #0
 800824a:	9700      	str	r7, [sp, #0]
 800824c:	4633      	mov	r3, r6
 800824e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008250:	4621      	mov	r1, r4
 8008252:	4628      	mov	r0, r5
 8008254:	f000 f9da 	bl	800860c <_printf_common>
 8008258:	3001      	adds	r0, #1
 800825a:	f040 8090 	bne.w	800837e <_printf_float+0x1de>
 800825e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008262:	b00d      	add	sp, #52	; 0x34
 8008264:	ecbd 8b02 	vpop	{d8}
 8008268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800826c:	4642      	mov	r2, r8
 800826e:	464b      	mov	r3, r9
 8008270:	4640      	mov	r0, r8
 8008272:	4649      	mov	r1, r9
 8008274:	f7f8 fc6a 	bl	8000b4c <__aeabi_dcmpun>
 8008278:	b140      	cbz	r0, 800828c <_printf_float+0xec>
 800827a:	464b      	mov	r3, r9
 800827c:	2b00      	cmp	r3, #0
 800827e:	bfbc      	itt	lt
 8008280:	232d      	movlt	r3, #45	; 0x2d
 8008282:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008286:	4a7f      	ldr	r2, [pc, #508]	; (8008484 <_printf_float+0x2e4>)
 8008288:	4b7f      	ldr	r3, [pc, #508]	; (8008488 <_printf_float+0x2e8>)
 800828a:	e7d1      	b.n	8008230 <_printf_float+0x90>
 800828c:	6863      	ldr	r3, [r4, #4]
 800828e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008292:	9206      	str	r2, [sp, #24]
 8008294:	1c5a      	adds	r2, r3, #1
 8008296:	d13f      	bne.n	8008318 <_printf_float+0x178>
 8008298:	2306      	movs	r3, #6
 800829a:	6063      	str	r3, [r4, #4]
 800829c:	9b05      	ldr	r3, [sp, #20]
 800829e:	6861      	ldr	r1, [r4, #4]
 80082a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80082a4:	2300      	movs	r3, #0
 80082a6:	9303      	str	r3, [sp, #12]
 80082a8:	ab0a      	add	r3, sp, #40	; 0x28
 80082aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80082ae:	ab09      	add	r3, sp, #36	; 0x24
 80082b0:	ec49 8b10 	vmov	d0, r8, r9
 80082b4:	9300      	str	r3, [sp, #0]
 80082b6:	6022      	str	r2, [r4, #0]
 80082b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80082bc:	4628      	mov	r0, r5
 80082be:	f7ff fece 	bl	800805e <__cvt>
 80082c2:	9b06      	ldr	r3, [sp, #24]
 80082c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082c6:	2b47      	cmp	r3, #71	; 0x47
 80082c8:	4680      	mov	r8, r0
 80082ca:	d108      	bne.n	80082de <_printf_float+0x13e>
 80082cc:	1cc8      	adds	r0, r1, #3
 80082ce:	db02      	blt.n	80082d6 <_printf_float+0x136>
 80082d0:	6863      	ldr	r3, [r4, #4]
 80082d2:	4299      	cmp	r1, r3
 80082d4:	dd41      	ble.n	800835a <_printf_float+0x1ba>
 80082d6:	f1ab 0302 	sub.w	r3, fp, #2
 80082da:	fa5f fb83 	uxtb.w	fp, r3
 80082de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80082e2:	d820      	bhi.n	8008326 <_printf_float+0x186>
 80082e4:	3901      	subs	r1, #1
 80082e6:	465a      	mov	r2, fp
 80082e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80082ec:	9109      	str	r1, [sp, #36]	; 0x24
 80082ee:	f7ff ff18 	bl	8008122 <__exponent>
 80082f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082f4:	1813      	adds	r3, r2, r0
 80082f6:	2a01      	cmp	r2, #1
 80082f8:	4681      	mov	r9, r0
 80082fa:	6123      	str	r3, [r4, #16]
 80082fc:	dc02      	bgt.n	8008304 <_printf_float+0x164>
 80082fe:	6822      	ldr	r2, [r4, #0]
 8008300:	07d2      	lsls	r2, r2, #31
 8008302:	d501      	bpl.n	8008308 <_printf_float+0x168>
 8008304:	3301      	adds	r3, #1
 8008306:	6123      	str	r3, [r4, #16]
 8008308:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800830c:	2b00      	cmp	r3, #0
 800830e:	d09c      	beq.n	800824a <_printf_float+0xaa>
 8008310:	232d      	movs	r3, #45	; 0x2d
 8008312:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008316:	e798      	b.n	800824a <_printf_float+0xaa>
 8008318:	9a06      	ldr	r2, [sp, #24]
 800831a:	2a47      	cmp	r2, #71	; 0x47
 800831c:	d1be      	bne.n	800829c <_printf_float+0xfc>
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1bc      	bne.n	800829c <_printf_float+0xfc>
 8008322:	2301      	movs	r3, #1
 8008324:	e7b9      	b.n	800829a <_printf_float+0xfa>
 8008326:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800832a:	d118      	bne.n	800835e <_printf_float+0x1be>
 800832c:	2900      	cmp	r1, #0
 800832e:	6863      	ldr	r3, [r4, #4]
 8008330:	dd0b      	ble.n	800834a <_printf_float+0x1aa>
 8008332:	6121      	str	r1, [r4, #16]
 8008334:	b913      	cbnz	r3, 800833c <_printf_float+0x19c>
 8008336:	6822      	ldr	r2, [r4, #0]
 8008338:	07d0      	lsls	r0, r2, #31
 800833a:	d502      	bpl.n	8008342 <_printf_float+0x1a2>
 800833c:	3301      	adds	r3, #1
 800833e:	440b      	add	r3, r1
 8008340:	6123      	str	r3, [r4, #16]
 8008342:	65a1      	str	r1, [r4, #88]	; 0x58
 8008344:	f04f 0900 	mov.w	r9, #0
 8008348:	e7de      	b.n	8008308 <_printf_float+0x168>
 800834a:	b913      	cbnz	r3, 8008352 <_printf_float+0x1b2>
 800834c:	6822      	ldr	r2, [r4, #0]
 800834e:	07d2      	lsls	r2, r2, #31
 8008350:	d501      	bpl.n	8008356 <_printf_float+0x1b6>
 8008352:	3302      	adds	r3, #2
 8008354:	e7f4      	b.n	8008340 <_printf_float+0x1a0>
 8008356:	2301      	movs	r3, #1
 8008358:	e7f2      	b.n	8008340 <_printf_float+0x1a0>
 800835a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800835e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008360:	4299      	cmp	r1, r3
 8008362:	db05      	blt.n	8008370 <_printf_float+0x1d0>
 8008364:	6823      	ldr	r3, [r4, #0]
 8008366:	6121      	str	r1, [r4, #16]
 8008368:	07d8      	lsls	r0, r3, #31
 800836a:	d5ea      	bpl.n	8008342 <_printf_float+0x1a2>
 800836c:	1c4b      	adds	r3, r1, #1
 800836e:	e7e7      	b.n	8008340 <_printf_float+0x1a0>
 8008370:	2900      	cmp	r1, #0
 8008372:	bfd4      	ite	le
 8008374:	f1c1 0202 	rsble	r2, r1, #2
 8008378:	2201      	movgt	r2, #1
 800837a:	4413      	add	r3, r2
 800837c:	e7e0      	b.n	8008340 <_printf_float+0x1a0>
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	055a      	lsls	r2, r3, #21
 8008382:	d407      	bmi.n	8008394 <_printf_float+0x1f4>
 8008384:	6923      	ldr	r3, [r4, #16]
 8008386:	4642      	mov	r2, r8
 8008388:	4631      	mov	r1, r6
 800838a:	4628      	mov	r0, r5
 800838c:	47b8      	blx	r7
 800838e:	3001      	adds	r0, #1
 8008390:	d12c      	bne.n	80083ec <_printf_float+0x24c>
 8008392:	e764      	b.n	800825e <_printf_float+0xbe>
 8008394:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008398:	f240 80e0 	bls.w	800855c <_printf_float+0x3bc>
 800839c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083a0:	2200      	movs	r2, #0
 80083a2:	2300      	movs	r3, #0
 80083a4:	f7f8 fba0 	bl	8000ae8 <__aeabi_dcmpeq>
 80083a8:	2800      	cmp	r0, #0
 80083aa:	d034      	beq.n	8008416 <_printf_float+0x276>
 80083ac:	4a37      	ldr	r2, [pc, #220]	; (800848c <_printf_float+0x2ec>)
 80083ae:	2301      	movs	r3, #1
 80083b0:	4631      	mov	r1, r6
 80083b2:	4628      	mov	r0, r5
 80083b4:	47b8      	blx	r7
 80083b6:	3001      	adds	r0, #1
 80083b8:	f43f af51 	beq.w	800825e <_printf_float+0xbe>
 80083bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083c0:	429a      	cmp	r2, r3
 80083c2:	db02      	blt.n	80083ca <_printf_float+0x22a>
 80083c4:	6823      	ldr	r3, [r4, #0]
 80083c6:	07d8      	lsls	r0, r3, #31
 80083c8:	d510      	bpl.n	80083ec <_printf_float+0x24c>
 80083ca:	ee18 3a10 	vmov	r3, s16
 80083ce:	4652      	mov	r2, sl
 80083d0:	4631      	mov	r1, r6
 80083d2:	4628      	mov	r0, r5
 80083d4:	47b8      	blx	r7
 80083d6:	3001      	adds	r0, #1
 80083d8:	f43f af41 	beq.w	800825e <_printf_float+0xbe>
 80083dc:	f04f 0800 	mov.w	r8, #0
 80083e0:	f104 091a 	add.w	r9, r4, #26
 80083e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083e6:	3b01      	subs	r3, #1
 80083e8:	4543      	cmp	r3, r8
 80083ea:	dc09      	bgt.n	8008400 <_printf_float+0x260>
 80083ec:	6823      	ldr	r3, [r4, #0]
 80083ee:	079b      	lsls	r3, r3, #30
 80083f0:	f100 8107 	bmi.w	8008602 <_printf_float+0x462>
 80083f4:	68e0      	ldr	r0, [r4, #12]
 80083f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083f8:	4298      	cmp	r0, r3
 80083fa:	bfb8      	it	lt
 80083fc:	4618      	movlt	r0, r3
 80083fe:	e730      	b.n	8008262 <_printf_float+0xc2>
 8008400:	2301      	movs	r3, #1
 8008402:	464a      	mov	r2, r9
 8008404:	4631      	mov	r1, r6
 8008406:	4628      	mov	r0, r5
 8008408:	47b8      	blx	r7
 800840a:	3001      	adds	r0, #1
 800840c:	f43f af27 	beq.w	800825e <_printf_float+0xbe>
 8008410:	f108 0801 	add.w	r8, r8, #1
 8008414:	e7e6      	b.n	80083e4 <_printf_float+0x244>
 8008416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008418:	2b00      	cmp	r3, #0
 800841a:	dc39      	bgt.n	8008490 <_printf_float+0x2f0>
 800841c:	4a1b      	ldr	r2, [pc, #108]	; (800848c <_printf_float+0x2ec>)
 800841e:	2301      	movs	r3, #1
 8008420:	4631      	mov	r1, r6
 8008422:	4628      	mov	r0, r5
 8008424:	47b8      	blx	r7
 8008426:	3001      	adds	r0, #1
 8008428:	f43f af19 	beq.w	800825e <_printf_float+0xbe>
 800842c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008430:	4313      	orrs	r3, r2
 8008432:	d102      	bne.n	800843a <_printf_float+0x29a>
 8008434:	6823      	ldr	r3, [r4, #0]
 8008436:	07d9      	lsls	r1, r3, #31
 8008438:	d5d8      	bpl.n	80083ec <_printf_float+0x24c>
 800843a:	ee18 3a10 	vmov	r3, s16
 800843e:	4652      	mov	r2, sl
 8008440:	4631      	mov	r1, r6
 8008442:	4628      	mov	r0, r5
 8008444:	47b8      	blx	r7
 8008446:	3001      	adds	r0, #1
 8008448:	f43f af09 	beq.w	800825e <_printf_float+0xbe>
 800844c:	f04f 0900 	mov.w	r9, #0
 8008450:	f104 0a1a 	add.w	sl, r4, #26
 8008454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008456:	425b      	negs	r3, r3
 8008458:	454b      	cmp	r3, r9
 800845a:	dc01      	bgt.n	8008460 <_printf_float+0x2c0>
 800845c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800845e:	e792      	b.n	8008386 <_printf_float+0x1e6>
 8008460:	2301      	movs	r3, #1
 8008462:	4652      	mov	r2, sl
 8008464:	4631      	mov	r1, r6
 8008466:	4628      	mov	r0, r5
 8008468:	47b8      	blx	r7
 800846a:	3001      	adds	r0, #1
 800846c:	f43f aef7 	beq.w	800825e <_printf_float+0xbe>
 8008470:	f109 0901 	add.w	r9, r9, #1
 8008474:	e7ee      	b.n	8008454 <_printf_float+0x2b4>
 8008476:	bf00      	nop
 8008478:	7fefffff 	.word	0x7fefffff
 800847c:	0800b07c 	.word	0x0800b07c
 8008480:	0800b080 	.word	0x0800b080
 8008484:	0800b084 	.word	0x0800b084
 8008488:	0800b088 	.word	0x0800b088
 800848c:	0800b08c 	.word	0x0800b08c
 8008490:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008492:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008494:	429a      	cmp	r2, r3
 8008496:	bfa8      	it	ge
 8008498:	461a      	movge	r2, r3
 800849a:	2a00      	cmp	r2, #0
 800849c:	4691      	mov	r9, r2
 800849e:	dc37      	bgt.n	8008510 <_printf_float+0x370>
 80084a0:	f04f 0b00 	mov.w	fp, #0
 80084a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084a8:	f104 021a 	add.w	r2, r4, #26
 80084ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084ae:	9305      	str	r3, [sp, #20]
 80084b0:	eba3 0309 	sub.w	r3, r3, r9
 80084b4:	455b      	cmp	r3, fp
 80084b6:	dc33      	bgt.n	8008520 <_printf_float+0x380>
 80084b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084bc:	429a      	cmp	r2, r3
 80084be:	db3b      	blt.n	8008538 <_printf_float+0x398>
 80084c0:	6823      	ldr	r3, [r4, #0]
 80084c2:	07da      	lsls	r2, r3, #31
 80084c4:	d438      	bmi.n	8008538 <_printf_float+0x398>
 80084c6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80084ca:	eba2 0903 	sub.w	r9, r2, r3
 80084ce:	9b05      	ldr	r3, [sp, #20]
 80084d0:	1ad2      	subs	r2, r2, r3
 80084d2:	4591      	cmp	r9, r2
 80084d4:	bfa8      	it	ge
 80084d6:	4691      	movge	r9, r2
 80084d8:	f1b9 0f00 	cmp.w	r9, #0
 80084dc:	dc35      	bgt.n	800854a <_printf_float+0x3aa>
 80084de:	f04f 0800 	mov.w	r8, #0
 80084e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084e6:	f104 0a1a 	add.w	sl, r4, #26
 80084ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084ee:	1a9b      	subs	r3, r3, r2
 80084f0:	eba3 0309 	sub.w	r3, r3, r9
 80084f4:	4543      	cmp	r3, r8
 80084f6:	f77f af79 	ble.w	80083ec <_printf_float+0x24c>
 80084fa:	2301      	movs	r3, #1
 80084fc:	4652      	mov	r2, sl
 80084fe:	4631      	mov	r1, r6
 8008500:	4628      	mov	r0, r5
 8008502:	47b8      	blx	r7
 8008504:	3001      	adds	r0, #1
 8008506:	f43f aeaa 	beq.w	800825e <_printf_float+0xbe>
 800850a:	f108 0801 	add.w	r8, r8, #1
 800850e:	e7ec      	b.n	80084ea <_printf_float+0x34a>
 8008510:	4613      	mov	r3, r2
 8008512:	4631      	mov	r1, r6
 8008514:	4642      	mov	r2, r8
 8008516:	4628      	mov	r0, r5
 8008518:	47b8      	blx	r7
 800851a:	3001      	adds	r0, #1
 800851c:	d1c0      	bne.n	80084a0 <_printf_float+0x300>
 800851e:	e69e      	b.n	800825e <_printf_float+0xbe>
 8008520:	2301      	movs	r3, #1
 8008522:	4631      	mov	r1, r6
 8008524:	4628      	mov	r0, r5
 8008526:	9205      	str	r2, [sp, #20]
 8008528:	47b8      	blx	r7
 800852a:	3001      	adds	r0, #1
 800852c:	f43f ae97 	beq.w	800825e <_printf_float+0xbe>
 8008530:	9a05      	ldr	r2, [sp, #20]
 8008532:	f10b 0b01 	add.w	fp, fp, #1
 8008536:	e7b9      	b.n	80084ac <_printf_float+0x30c>
 8008538:	ee18 3a10 	vmov	r3, s16
 800853c:	4652      	mov	r2, sl
 800853e:	4631      	mov	r1, r6
 8008540:	4628      	mov	r0, r5
 8008542:	47b8      	blx	r7
 8008544:	3001      	adds	r0, #1
 8008546:	d1be      	bne.n	80084c6 <_printf_float+0x326>
 8008548:	e689      	b.n	800825e <_printf_float+0xbe>
 800854a:	9a05      	ldr	r2, [sp, #20]
 800854c:	464b      	mov	r3, r9
 800854e:	4442      	add	r2, r8
 8008550:	4631      	mov	r1, r6
 8008552:	4628      	mov	r0, r5
 8008554:	47b8      	blx	r7
 8008556:	3001      	adds	r0, #1
 8008558:	d1c1      	bne.n	80084de <_printf_float+0x33e>
 800855a:	e680      	b.n	800825e <_printf_float+0xbe>
 800855c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800855e:	2a01      	cmp	r2, #1
 8008560:	dc01      	bgt.n	8008566 <_printf_float+0x3c6>
 8008562:	07db      	lsls	r3, r3, #31
 8008564:	d53a      	bpl.n	80085dc <_printf_float+0x43c>
 8008566:	2301      	movs	r3, #1
 8008568:	4642      	mov	r2, r8
 800856a:	4631      	mov	r1, r6
 800856c:	4628      	mov	r0, r5
 800856e:	47b8      	blx	r7
 8008570:	3001      	adds	r0, #1
 8008572:	f43f ae74 	beq.w	800825e <_printf_float+0xbe>
 8008576:	ee18 3a10 	vmov	r3, s16
 800857a:	4652      	mov	r2, sl
 800857c:	4631      	mov	r1, r6
 800857e:	4628      	mov	r0, r5
 8008580:	47b8      	blx	r7
 8008582:	3001      	adds	r0, #1
 8008584:	f43f ae6b 	beq.w	800825e <_printf_float+0xbe>
 8008588:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800858c:	2200      	movs	r2, #0
 800858e:	2300      	movs	r3, #0
 8008590:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008594:	f7f8 faa8 	bl	8000ae8 <__aeabi_dcmpeq>
 8008598:	b9d8      	cbnz	r0, 80085d2 <_printf_float+0x432>
 800859a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800859e:	f108 0201 	add.w	r2, r8, #1
 80085a2:	4631      	mov	r1, r6
 80085a4:	4628      	mov	r0, r5
 80085a6:	47b8      	blx	r7
 80085a8:	3001      	adds	r0, #1
 80085aa:	d10e      	bne.n	80085ca <_printf_float+0x42a>
 80085ac:	e657      	b.n	800825e <_printf_float+0xbe>
 80085ae:	2301      	movs	r3, #1
 80085b0:	4652      	mov	r2, sl
 80085b2:	4631      	mov	r1, r6
 80085b4:	4628      	mov	r0, r5
 80085b6:	47b8      	blx	r7
 80085b8:	3001      	adds	r0, #1
 80085ba:	f43f ae50 	beq.w	800825e <_printf_float+0xbe>
 80085be:	f108 0801 	add.w	r8, r8, #1
 80085c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085c4:	3b01      	subs	r3, #1
 80085c6:	4543      	cmp	r3, r8
 80085c8:	dcf1      	bgt.n	80085ae <_printf_float+0x40e>
 80085ca:	464b      	mov	r3, r9
 80085cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80085d0:	e6da      	b.n	8008388 <_printf_float+0x1e8>
 80085d2:	f04f 0800 	mov.w	r8, #0
 80085d6:	f104 0a1a 	add.w	sl, r4, #26
 80085da:	e7f2      	b.n	80085c2 <_printf_float+0x422>
 80085dc:	2301      	movs	r3, #1
 80085de:	4642      	mov	r2, r8
 80085e0:	e7df      	b.n	80085a2 <_printf_float+0x402>
 80085e2:	2301      	movs	r3, #1
 80085e4:	464a      	mov	r2, r9
 80085e6:	4631      	mov	r1, r6
 80085e8:	4628      	mov	r0, r5
 80085ea:	47b8      	blx	r7
 80085ec:	3001      	adds	r0, #1
 80085ee:	f43f ae36 	beq.w	800825e <_printf_float+0xbe>
 80085f2:	f108 0801 	add.w	r8, r8, #1
 80085f6:	68e3      	ldr	r3, [r4, #12]
 80085f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085fa:	1a5b      	subs	r3, r3, r1
 80085fc:	4543      	cmp	r3, r8
 80085fe:	dcf0      	bgt.n	80085e2 <_printf_float+0x442>
 8008600:	e6f8      	b.n	80083f4 <_printf_float+0x254>
 8008602:	f04f 0800 	mov.w	r8, #0
 8008606:	f104 0919 	add.w	r9, r4, #25
 800860a:	e7f4      	b.n	80085f6 <_printf_float+0x456>

0800860c <_printf_common>:
 800860c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008610:	4616      	mov	r6, r2
 8008612:	4699      	mov	r9, r3
 8008614:	688a      	ldr	r2, [r1, #8]
 8008616:	690b      	ldr	r3, [r1, #16]
 8008618:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800861c:	4293      	cmp	r3, r2
 800861e:	bfb8      	it	lt
 8008620:	4613      	movlt	r3, r2
 8008622:	6033      	str	r3, [r6, #0]
 8008624:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008628:	4607      	mov	r7, r0
 800862a:	460c      	mov	r4, r1
 800862c:	b10a      	cbz	r2, 8008632 <_printf_common+0x26>
 800862e:	3301      	adds	r3, #1
 8008630:	6033      	str	r3, [r6, #0]
 8008632:	6823      	ldr	r3, [r4, #0]
 8008634:	0699      	lsls	r1, r3, #26
 8008636:	bf42      	ittt	mi
 8008638:	6833      	ldrmi	r3, [r6, #0]
 800863a:	3302      	addmi	r3, #2
 800863c:	6033      	strmi	r3, [r6, #0]
 800863e:	6825      	ldr	r5, [r4, #0]
 8008640:	f015 0506 	ands.w	r5, r5, #6
 8008644:	d106      	bne.n	8008654 <_printf_common+0x48>
 8008646:	f104 0a19 	add.w	sl, r4, #25
 800864a:	68e3      	ldr	r3, [r4, #12]
 800864c:	6832      	ldr	r2, [r6, #0]
 800864e:	1a9b      	subs	r3, r3, r2
 8008650:	42ab      	cmp	r3, r5
 8008652:	dc26      	bgt.n	80086a2 <_printf_common+0x96>
 8008654:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008658:	1e13      	subs	r3, r2, #0
 800865a:	6822      	ldr	r2, [r4, #0]
 800865c:	bf18      	it	ne
 800865e:	2301      	movne	r3, #1
 8008660:	0692      	lsls	r2, r2, #26
 8008662:	d42b      	bmi.n	80086bc <_printf_common+0xb0>
 8008664:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008668:	4649      	mov	r1, r9
 800866a:	4638      	mov	r0, r7
 800866c:	47c0      	blx	r8
 800866e:	3001      	adds	r0, #1
 8008670:	d01e      	beq.n	80086b0 <_printf_common+0xa4>
 8008672:	6823      	ldr	r3, [r4, #0]
 8008674:	6922      	ldr	r2, [r4, #16]
 8008676:	f003 0306 	and.w	r3, r3, #6
 800867a:	2b04      	cmp	r3, #4
 800867c:	bf02      	ittt	eq
 800867e:	68e5      	ldreq	r5, [r4, #12]
 8008680:	6833      	ldreq	r3, [r6, #0]
 8008682:	1aed      	subeq	r5, r5, r3
 8008684:	68a3      	ldr	r3, [r4, #8]
 8008686:	bf0c      	ite	eq
 8008688:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800868c:	2500      	movne	r5, #0
 800868e:	4293      	cmp	r3, r2
 8008690:	bfc4      	itt	gt
 8008692:	1a9b      	subgt	r3, r3, r2
 8008694:	18ed      	addgt	r5, r5, r3
 8008696:	2600      	movs	r6, #0
 8008698:	341a      	adds	r4, #26
 800869a:	42b5      	cmp	r5, r6
 800869c:	d11a      	bne.n	80086d4 <_printf_common+0xc8>
 800869e:	2000      	movs	r0, #0
 80086a0:	e008      	b.n	80086b4 <_printf_common+0xa8>
 80086a2:	2301      	movs	r3, #1
 80086a4:	4652      	mov	r2, sl
 80086a6:	4649      	mov	r1, r9
 80086a8:	4638      	mov	r0, r7
 80086aa:	47c0      	blx	r8
 80086ac:	3001      	adds	r0, #1
 80086ae:	d103      	bne.n	80086b8 <_printf_common+0xac>
 80086b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086b8:	3501      	adds	r5, #1
 80086ba:	e7c6      	b.n	800864a <_printf_common+0x3e>
 80086bc:	18e1      	adds	r1, r4, r3
 80086be:	1c5a      	adds	r2, r3, #1
 80086c0:	2030      	movs	r0, #48	; 0x30
 80086c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086c6:	4422      	add	r2, r4
 80086c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086d0:	3302      	adds	r3, #2
 80086d2:	e7c7      	b.n	8008664 <_printf_common+0x58>
 80086d4:	2301      	movs	r3, #1
 80086d6:	4622      	mov	r2, r4
 80086d8:	4649      	mov	r1, r9
 80086da:	4638      	mov	r0, r7
 80086dc:	47c0      	blx	r8
 80086de:	3001      	adds	r0, #1
 80086e0:	d0e6      	beq.n	80086b0 <_printf_common+0xa4>
 80086e2:	3601      	adds	r6, #1
 80086e4:	e7d9      	b.n	800869a <_printf_common+0x8e>
	...

080086e8 <_printf_i>:
 80086e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086ec:	7e0f      	ldrb	r7, [r1, #24]
 80086ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086f0:	2f78      	cmp	r7, #120	; 0x78
 80086f2:	4691      	mov	r9, r2
 80086f4:	4680      	mov	r8, r0
 80086f6:	460c      	mov	r4, r1
 80086f8:	469a      	mov	sl, r3
 80086fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80086fe:	d807      	bhi.n	8008710 <_printf_i+0x28>
 8008700:	2f62      	cmp	r7, #98	; 0x62
 8008702:	d80a      	bhi.n	800871a <_printf_i+0x32>
 8008704:	2f00      	cmp	r7, #0
 8008706:	f000 80d4 	beq.w	80088b2 <_printf_i+0x1ca>
 800870a:	2f58      	cmp	r7, #88	; 0x58
 800870c:	f000 80c0 	beq.w	8008890 <_printf_i+0x1a8>
 8008710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008714:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008718:	e03a      	b.n	8008790 <_printf_i+0xa8>
 800871a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800871e:	2b15      	cmp	r3, #21
 8008720:	d8f6      	bhi.n	8008710 <_printf_i+0x28>
 8008722:	a101      	add	r1, pc, #4	; (adr r1, 8008728 <_printf_i+0x40>)
 8008724:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008728:	08008781 	.word	0x08008781
 800872c:	08008795 	.word	0x08008795
 8008730:	08008711 	.word	0x08008711
 8008734:	08008711 	.word	0x08008711
 8008738:	08008711 	.word	0x08008711
 800873c:	08008711 	.word	0x08008711
 8008740:	08008795 	.word	0x08008795
 8008744:	08008711 	.word	0x08008711
 8008748:	08008711 	.word	0x08008711
 800874c:	08008711 	.word	0x08008711
 8008750:	08008711 	.word	0x08008711
 8008754:	08008899 	.word	0x08008899
 8008758:	080087c1 	.word	0x080087c1
 800875c:	08008853 	.word	0x08008853
 8008760:	08008711 	.word	0x08008711
 8008764:	08008711 	.word	0x08008711
 8008768:	080088bb 	.word	0x080088bb
 800876c:	08008711 	.word	0x08008711
 8008770:	080087c1 	.word	0x080087c1
 8008774:	08008711 	.word	0x08008711
 8008778:	08008711 	.word	0x08008711
 800877c:	0800885b 	.word	0x0800885b
 8008780:	682b      	ldr	r3, [r5, #0]
 8008782:	1d1a      	adds	r2, r3, #4
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	602a      	str	r2, [r5, #0]
 8008788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800878c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008790:	2301      	movs	r3, #1
 8008792:	e09f      	b.n	80088d4 <_printf_i+0x1ec>
 8008794:	6820      	ldr	r0, [r4, #0]
 8008796:	682b      	ldr	r3, [r5, #0]
 8008798:	0607      	lsls	r7, r0, #24
 800879a:	f103 0104 	add.w	r1, r3, #4
 800879e:	6029      	str	r1, [r5, #0]
 80087a0:	d501      	bpl.n	80087a6 <_printf_i+0xbe>
 80087a2:	681e      	ldr	r6, [r3, #0]
 80087a4:	e003      	b.n	80087ae <_printf_i+0xc6>
 80087a6:	0646      	lsls	r6, r0, #25
 80087a8:	d5fb      	bpl.n	80087a2 <_printf_i+0xba>
 80087aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80087ae:	2e00      	cmp	r6, #0
 80087b0:	da03      	bge.n	80087ba <_printf_i+0xd2>
 80087b2:	232d      	movs	r3, #45	; 0x2d
 80087b4:	4276      	negs	r6, r6
 80087b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087ba:	485a      	ldr	r0, [pc, #360]	; (8008924 <_printf_i+0x23c>)
 80087bc:	230a      	movs	r3, #10
 80087be:	e012      	b.n	80087e6 <_printf_i+0xfe>
 80087c0:	682b      	ldr	r3, [r5, #0]
 80087c2:	6820      	ldr	r0, [r4, #0]
 80087c4:	1d19      	adds	r1, r3, #4
 80087c6:	6029      	str	r1, [r5, #0]
 80087c8:	0605      	lsls	r5, r0, #24
 80087ca:	d501      	bpl.n	80087d0 <_printf_i+0xe8>
 80087cc:	681e      	ldr	r6, [r3, #0]
 80087ce:	e002      	b.n	80087d6 <_printf_i+0xee>
 80087d0:	0641      	lsls	r1, r0, #25
 80087d2:	d5fb      	bpl.n	80087cc <_printf_i+0xe4>
 80087d4:	881e      	ldrh	r6, [r3, #0]
 80087d6:	4853      	ldr	r0, [pc, #332]	; (8008924 <_printf_i+0x23c>)
 80087d8:	2f6f      	cmp	r7, #111	; 0x6f
 80087da:	bf0c      	ite	eq
 80087dc:	2308      	moveq	r3, #8
 80087de:	230a      	movne	r3, #10
 80087e0:	2100      	movs	r1, #0
 80087e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087e6:	6865      	ldr	r5, [r4, #4]
 80087e8:	60a5      	str	r5, [r4, #8]
 80087ea:	2d00      	cmp	r5, #0
 80087ec:	bfa2      	ittt	ge
 80087ee:	6821      	ldrge	r1, [r4, #0]
 80087f0:	f021 0104 	bicge.w	r1, r1, #4
 80087f4:	6021      	strge	r1, [r4, #0]
 80087f6:	b90e      	cbnz	r6, 80087fc <_printf_i+0x114>
 80087f8:	2d00      	cmp	r5, #0
 80087fa:	d04b      	beq.n	8008894 <_printf_i+0x1ac>
 80087fc:	4615      	mov	r5, r2
 80087fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8008802:	fb03 6711 	mls	r7, r3, r1, r6
 8008806:	5dc7      	ldrb	r7, [r0, r7]
 8008808:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800880c:	4637      	mov	r7, r6
 800880e:	42bb      	cmp	r3, r7
 8008810:	460e      	mov	r6, r1
 8008812:	d9f4      	bls.n	80087fe <_printf_i+0x116>
 8008814:	2b08      	cmp	r3, #8
 8008816:	d10b      	bne.n	8008830 <_printf_i+0x148>
 8008818:	6823      	ldr	r3, [r4, #0]
 800881a:	07de      	lsls	r6, r3, #31
 800881c:	d508      	bpl.n	8008830 <_printf_i+0x148>
 800881e:	6923      	ldr	r3, [r4, #16]
 8008820:	6861      	ldr	r1, [r4, #4]
 8008822:	4299      	cmp	r1, r3
 8008824:	bfde      	ittt	le
 8008826:	2330      	movle	r3, #48	; 0x30
 8008828:	f805 3c01 	strble.w	r3, [r5, #-1]
 800882c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008830:	1b52      	subs	r2, r2, r5
 8008832:	6122      	str	r2, [r4, #16]
 8008834:	f8cd a000 	str.w	sl, [sp]
 8008838:	464b      	mov	r3, r9
 800883a:	aa03      	add	r2, sp, #12
 800883c:	4621      	mov	r1, r4
 800883e:	4640      	mov	r0, r8
 8008840:	f7ff fee4 	bl	800860c <_printf_common>
 8008844:	3001      	adds	r0, #1
 8008846:	d14a      	bne.n	80088de <_printf_i+0x1f6>
 8008848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800884c:	b004      	add	sp, #16
 800884e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008852:	6823      	ldr	r3, [r4, #0]
 8008854:	f043 0320 	orr.w	r3, r3, #32
 8008858:	6023      	str	r3, [r4, #0]
 800885a:	4833      	ldr	r0, [pc, #204]	; (8008928 <_printf_i+0x240>)
 800885c:	2778      	movs	r7, #120	; 0x78
 800885e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008862:	6823      	ldr	r3, [r4, #0]
 8008864:	6829      	ldr	r1, [r5, #0]
 8008866:	061f      	lsls	r7, r3, #24
 8008868:	f851 6b04 	ldr.w	r6, [r1], #4
 800886c:	d402      	bmi.n	8008874 <_printf_i+0x18c>
 800886e:	065f      	lsls	r7, r3, #25
 8008870:	bf48      	it	mi
 8008872:	b2b6      	uxthmi	r6, r6
 8008874:	07df      	lsls	r7, r3, #31
 8008876:	bf48      	it	mi
 8008878:	f043 0320 	orrmi.w	r3, r3, #32
 800887c:	6029      	str	r1, [r5, #0]
 800887e:	bf48      	it	mi
 8008880:	6023      	strmi	r3, [r4, #0]
 8008882:	b91e      	cbnz	r6, 800888c <_printf_i+0x1a4>
 8008884:	6823      	ldr	r3, [r4, #0]
 8008886:	f023 0320 	bic.w	r3, r3, #32
 800888a:	6023      	str	r3, [r4, #0]
 800888c:	2310      	movs	r3, #16
 800888e:	e7a7      	b.n	80087e0 <_printf_i+0xf8>
 8008890:	4824      	ldr	r0, [pc, #144]	; (8008924 <_printf_i+0x23c>)
 8008892:	e7e4      	b.n	800885e <_printf_i+0x176>
 8008894:	4615      	mov	r5, r2
 8008896:	e7bd      	b.n	8008814 <_printf_i+0x12c>
 8008898:	682b      	ldr	r3, [r5, #0]
 800889a:	6826      	ldr	r6, [r4, #0]
 800889c:	6961      	ldr	r1, [r4, #20]
 800889e:	1d18      	adds	r0, r3, #4
 80088a0:	6028      	str	r0, [r5, #0]
 80088a2:	0635      	lsls	r5, r6, #24
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	d501      	bpl.n	80088ac <_printf_i+0x1c4>
 80088a8:	6019      	str	r1, [r3, #0]
 80088aa:	e002      	b.n	80088b2 <_printf_i+0x1ca>
 80088ac:	0670      	lsls	r0, r6, #25
 80088ae:	d5fb      	bpl.n	80088a8 <_printf_i+0x1c0>
 80088b0:	8019      	strh	r1, [r3, #0]
 80088b2:	2300      	movs	r3, #0
 80088b4:	6123      	str	r3, [r4, #16]
 80088b6:	4615      	mov	r5, r2
 80088b8:	e7bc      	b.n	8008834 <_printf_i+0x14c>
 80088ba:	682b      	ldr	r3, [r5, #0]
 80088bc:	1d1a      	adds	r2, r3, #4
 80088be:	602a      	str	r2, [r5, #0]
 80088c0:	681d      	ldr	r5, [r3, #0]
 80088c2:	6862      	ldr	r2, [r4, #4]
 80088c4:	2100      	movs	r1, #0
 80088c6:	4628      	mov	r0, r5
 80088c8:	f7f7 fc92 	bl	80001f0 <memchr>
 80088cc:	b108      	cbz	r0, 80088d2 <_printf_i+0x1ea>
 80088ce:	1b40      	subs	r0, r0, r5
 80088d0:	6060      	str	r0, [r4, #4]
 80088d2:	6863      	ldr	r3, [r4, #4]
 80088d4:	6123      	str	r3, [r4, #16]
 80088d6:	2300      	movs	r3, #0
 80088d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088dc:	e7aa      	b.n	8008834 <_printf_i+0x14c>
 80088de:	6923      	ldr	r3, [r4, #16]
 80088e0:	462a      	mov	r2, r5
 80088e2:	4649      	mov	r1, r9
 80088e4:	4640      	mov	r0, r8
 80088e6:	47d0      	blx	sl
 80088e8:	3001      	adds	r0, #1
 80088ea:	d0ad      	beq.n	8008848 <_printf_i+0x160>
 80088ec:	6823      	ldr	r3, [r4, #0]
 80088ee:	079b      	lsls	r3, r3, #30
 80088f0:	d413      	bmi.n	800891a <_printf_i+0x232>
 80088f2:	68e0      	ldr	r0, [r4, #12]
 80088f4:	9b03      	ldr	r3, [sp, #12]
 80088f6:	4298      	cmp	r0, r3
 80088f8:	bfb8      	it	lt
 80088fa:	4618      	movlt	r0, r3
 80088fc:	e7a6      	b.n	800884c <_printf_i+0x164>
 80088fe:	2301      	movs	r3, #1
 8008900:	4632      	mov	r2, r6
 8008902:	4649      	mov	r1, r9
 8008904:	4640      	mov	r0, r8
 8008906:	47d0      	blx	sl
 8008908:	3001      	adds	r0, #1
 800890a:	d09d      	beq.n	8008848 <_printf_i+0x160>
 800890c:	3501      	adds	r5, #1
 800890e:	68e3      	ldr	r3, [r4, #12]
 8008910:	9903      	ldr	r1, [sp, #12]
 8008912:	1a5b      	subs	r3, r3, r1
 8008914:	42ab      	cmp	r3, r5
 8008916:	dcf2      	bgt.n	80088fe <_printf_i+0x216>
 8008918:	e7eb      	b.n	80088f2 <_printf_i+0x20a>
 800891a:	2500      	movs	r5, #0
 800891c:	f104 0619 	add.w	r6, r4, #25
 8008920:	e7f5      	b.n	800890e <_printf_i+0x226>
 8008922:	bf00      	nop
 8008924:	0800b08e 	.word	0x0800b08e
 8008928:	0800b09f 	.word	0x0800b09f

0800892c <std>:
 800892c:	2300      	movs	r3, #0
 800892e:	b510      	push	{r4, lr}
 8008930:	4604      	mov	r4, r0
 8008932:	e9c0 3300 	strd	r3, r3, [r0]
 8008936:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800893a:	6083      	str	r3, [r0, #8]
 800893c:	8181      	strh	r1, [r0, #12]
 800893e:	6643      	str	r3, [r0, #100]	; 0x64
 8008940:	81c2      	strh	r2, [r0, #14]
 8008942:	6183      	str	r3, [r0, #24]
 8008944:	4619      	mov	r1, r3
 8008946:	2208      	movs	r2, #8
 8008948:	305c      	adds	r0, #92	; 0x5c
 800894a:	f000 faa5 	bl	8008e98 <memset>
 800894e:	4b0d      	ldr	r3, [pc, #52]	; (8008984 <std+0x58>)
 8008950:	6263      	str	r3, [r4, #36]	; 0x24
 8008952:	4b0d      	ldr	r3, [pc, #52]	; (8008988 <std+0x5c>)
 8008954:	62a3      	str	r3, [r4, #40]	; 0x28
 8008956:	4b0d      	ldr	r3, [pc, #52]	; (800898c <std+0x60>)
 8008958:	62e3      	str	r3, [r4, #44]	; 0x2c
 800895a:	4b0d      	ldr	r3, [pc, #52]	; (8008990 <std+0x64>)
 800895c:	6323      	str	r3, [r4, #48]	; 0x30
 800895e:	4b0d      	ldr	r3, [pc, #52]	; (8008994 <std+0x68>)
 8008960:	6224      	str	r4, [r4, #32]
 8008962:	429c      	cmp	r4, r3
 8008964:	d006      	beq.n	8008974 <std+0x48>
 8008966:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800896a:	4294      	cmp	r4, r2
 800896c:	d002      	beq.n	8008974 <std+0x48>
 800896e:	33d0      	adds	r3, #208	; 0xd0
 8008970:	429c      	cmp	r4, r3
 8008972:	d105      	bne.n	8008980 <std+0x54>
 8008974:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800897c:	f000 bb08 	b.w	8008f90 <__retarget_lock_init_recursive>
 8008980:	bd10      	pop	{r4, pc}
 8008982:	bf00      	nop
 8008984:	08008ce9 	.word	0x08008ce9
 8008988:	08008d0b 	.word	0x08008d0b
 800898c:	08008d43 	.word	0x08008d43
 8008990:	08008d67 	.word	0x08008d67
 8008994:	200003f0 	.word	0x200003f0

08008998 <stdio_exit_handler>:
 8008998:	4a02      	ldr	r2, [pc, #8]	; (80089a4 <stdio_exit_handler+0xc>)
 800899a:	4903      	ldr	r1, [pc, #12]	; (80089a8 <stdio_exit_handler+0x10>)
 800899c:	4803      	ldr	r0, [pc, #12]	; (80089ac <stdio_exit_handler+0x14>)
 800899e:	f000 b869 	b.w	8008a74 <_fwalk_sglue>
 80089a2:	bf00      	nop
 80089a4:	2000000c 	.word	0x2000000c
 80089a8:	0800a939 	.word	0x0800a939
 80089ac:	20000018 	.word	0x20000018

080089b0 <cleanup_stdio>:
 80089b0:	6841      	ldr	r1, [r0, #4]
 80089b2:	4b0c      	ldr	r3, [pc, #48]	; (80089e4 <cleanup_stdio+0x34>)
 80089b4:	4299      	cmp	r1, r3
 80089b6:	b510      	push	{r4, lr}
 80089b8:	4604      	mov	r4, r0
 80089ba:	d001      	beq.n	80089c0 <cleanup_stdio+0x10>
 80089bc:	f001 ffbc 	bl	800a938 <_fflush_r>
 80089c0:	68a1      	ldr	r1, [r4, #8]
 80089c2:	4b09      	ldr	r3, [pc, #36]	; (80089e8 <cleanup_stdio+0x38>)
 80089c4:	4299      	cmp	r1, r3
 80089c6:	d002      	beq.n	80089ce <cleanup_stdio+0x1e>
 80089c8:	4620      	mov	r0, r4
 80089ca:	f001 ffb5 	bl	800a938 <_fflush_r>
 80089ce:	68e1      	ldr	r1, [r4, #12]
 80089d0:	4b06      	ldr	r3, [pc, #24]	; (80089ec <cleanup_stdio+0x3c>)
 80089d2:	4299      	cmp	r1, r3
 80089d4:	d004      	beq.n	80089e0 <cleanup_stdio+0x30>
 80089d6:	4620      	mov	r0, r4
 80089d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089dc:	f001 bfac 	b.w	800a938 <_fflush_r>
 80089e0:	bd10      	pop	{r4, pc}
 80089e2:	bf00      	nop
 80089e4:	200003f0 	.word	0x200003f0
 80089e8:	20000458 	.word	0x20000458
 80089ec:	200004c0 	.word	0x200004c0

080089f0 <global_stdio_init.part.0>:
 80089f0:	b510      	push	{r4, lr}
 80089f2:	4b0b      	ldr	r3, [pc, #44]	; (8008a20 <global_stdio_init.part.0+0x30>)
 80089f4:	4c0b      	ldr	r4, [pc, #44]	; (8008a24 <global_stdio_init.part.0+0x34>)
 80089f6:	4a0c      	ldr	r2, [pc, #48]	; (8008a28 <global_stdio_init.part.0+0x38>)
 80089f8:	601a      	str	r2, [r3, #0]
 80089fa:	4620      	mov	r0, r4
 80089fc:	2200      	movs	r2, #0
 80089fe:	2104      	movs	r1, #4
 8008a00:	f7ff ff94 	bl	800892c <std>
 8008a04:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008a08:	2201      	movs	r2, #1
 8008a0a:	2109      	movs	r1, #9
 8008a0c:	f7ff ff8e 	bl	800892c <std>
 8008a10:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008a14:	2202      	movs	r2, #2
 8008a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a1a:	2112      	movs	r1, #18
 8008a1c:	f7ff bf86 	b.w	800892c <std>
 8008a20:	20000528 	.word	0x20000528
 8008a24:	200003f0 	.word	0x200003f0
 8008a28:	08008999 	.word	0x08008999

08008a2c <__sfp_lock_acquire>:
 8008a2c:	4801      	ldr	r0, [pc, #4]	; (8008a34 <__sfp_lock_acquire+0x8>)
 8008a2e:	f000 bab0 	b.w	8008f92 <__retarget_lock_acquire_recursive>
 8008a32:	bf00      	nop
 8008a34:	20000531 	.word	0x20000531

08008a38 <__sfp_lock_release>:
 8008a38:	4801      	ldr	r0, [pc, #4]	; (8008a40 <__sfp_lock_release+0x8>)
 8008a3a:	f000 baab 	b.w	8008f94 <__retarget_lock_release_recursive>
 8008a3e:	bf00      	nop
 8008a40:	20000531 	.word	0x20000531

08008a44 <__sinit>:
 8008a44:	b510      	push	{r4, lr}
 8008a46:	4604      	mov	r4, r0
 8008a48:	f7ff fff0 	bl	8008a2c <__sfp_lock_acquire>
 8008a4c:	6a23      	ldr	r3, [r4, #32]
 8008a4e:	b11b      	cbz	r3, 8008a58 <__sinit+0x14>
 8008a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a54:	f7ff bff0 	b.w	8008a38 <__sfp_lock_release>
 8008a58:	4b04      	ldr	r3, [pc, #16]	; (8008a6c <__sinit+0x28>)
 8008a5a:	6223      	str	r3, [r4, #32]
 8008a5c:	4b04      	ldr	r3, [pc, #16]	; (8008a70 <__sinit+0x2c>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d1f5      	bne.n	8008a50 <__sinit+0xc>
 8008a64:	f7ff ffc4 	bl	80089f0 <global_stdio_init.part.0>
 8008a68:	e7f2      	b.n	8008a50 <__sinit+0xc>
 8008a6a:	bf00      	nop
 8008a6c:	080089b1 	.word	0x080089b1
 8008a70:	20000528 	.word	0x20000528

08008a74 <_fwalk_sglue>:
 8008a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a78:	4607      	mov	r7, r0
 8008a7a:	4688      	mov	r8, r1
 8008a7c:	4614      	mov	r4, r2
 8008a7e:	2600      	movs	r6, #0
 8008a80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a84:	f1b9 0901 	subs.w	r9, r9, #1
 8008a88:	d505      	bpl.n	8008a96 <_fwalk_sglue+0x22>
 8008a8a:	6824      	ldr	r4, [r4, #0]
 8008a8c:	2c00      	cmp	r4, #0
 8008a8e:	d1f7      	bne.n	8008a80 <_fwalk_sglue+0xc>
 8008a90:	4630      	mov	r0, r6
 8008a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a96:	89ab      	ldrh	r3, [r5, #12]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d907      	bls.n	8008aac <_fwalk_sglue+0x38>
 8008a9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	d003      	beq.n	8008aac <_fwalk_sglue+0x38>
 8008aa4:	4629      	mov	r1, r5
 8008aa6:	4638      	mov	r0, r7
 8008aa8:	47c0      	blx	r8
 8008aaa:	4306      	orrs	r6, r0
 8008aac:	3568      	adds	r5, #104	; 0x68
 8008aae:	e7e9      	b.n	8008a84 <_fwalk_sglue+0x10>

08008ab0 <iprintf>:
 8008ab0:	b40f      	push	{r0, r1, r2, r3}
 8008ab2:	b507      	push	{r0, r1, r2, lr}
 8008ab4:	4906      	ldr	r1, [pc, #24]	; (8008ad0 <iprintf+0x20>)
 8008ab6:	ab04      	add	r3, sp, #16
 8008ab8:	6808      	ldr	r0, [r1, #0]
 8008aba:	f853 2b04 	ldr.w	r2, [r3], #4
 8008abe:	6881      	ldr	r1, [r0, #8]
 8008ac0:	9301      	str	r3, [sp, #4]
 8008ac2:	f001 fd99 	bl	800a5f8 <_vfiprintf_r>
 8008ac6:	b003      	add	sp, #12
 8008ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008acc:	b004      	add	sp, #16
 8008ace:	4770      	bx	lr
 8008ad0:	20000064 	.word	0x20000064

08008ad4 <_puts_r>:
 8008ad4:	6a03      	ldr	r3, [r0, #32]
 8008ad6:	b570      	push	{r4, r5, r6, lr}
 8008ad8:	6884      	ldr	r4, [r0, #8]
 8008ada:	4605      	mov	r5, r0
 8008adc:	460e      	mov	r6, r1
 8008ade:	b90b      	cbnz	r3, 8008ae4 <_puts_r+0x10>
 8008ae0:	f7ff ffb0 	bl	8008a44 <__sinit>
 8008ae4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ae6:	07db      	lsls	r3, r3, #31
 8008ae8:	d405      	bmi.n	8008af6 <_puts_r+0x22>
 8008aea:	89a3      	ldrh	r3, [r4, #12]
 8008aec:	0598      	lsls	r0, r3, #22
 8008aee:	d402      	bmi.n	8008af6 <_puts_r+0x22>
 8008af0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008af2:	f000 fa4e 	bl	8008f92 <__retarget_lock_acquire_recursive>
 8008af6:	89a3      	ldrh	r3, [r4, #12]
 8008af8:	0719      	lsls	r1, r3, #28
 8008afa:	d513      	bpl.n	8008b24 <_puts_r+0x50>
 8008afc:	6923      	ldr	r3, [r4, #16]
 8008afe:	b18b      	cbz	r3, 8008b24 <_puts_r+0x50>
 8008b00:	3e01      	subs	r6, #1
 8008b02:	68a3      	ldr	r3, [r4, #8]
 8008b04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	60a3      	str	r3, [r4, #8]
 8008b0c:	b9e9      	cbnz	r1, 8008b4a <_puts_r+0x76>
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	da2e      	bge.n	8008b70 <_puts_r+0x9c>
 8008b12:	4622      	mov	r2, r4
 8008b14:	210a      	movs	r1, #10
 8008b16:	4628      	mov	r0, r5
 8008b18:	f000 f929 	bl	8008d6e <__swbuf_r>
 8008b1c:	3001      	adds	r0, #1
 8008b1e:	d007      	beq.n	8008b30 <_puts_r+0x5c>
 8008b20:	250a      	movs	r5, #10
 8008b22:	e007      	b.n	8008b34 <_puts_r+0x60>
 8008b24:	4621      	mov	r1, r4
 8008b26:	4628      	mov	r0, r5
 8008b28:	f000 f95e 	bl	8008de8 <__swsetup_r>
 8008b2c:	2800      	cmp	r0, #0
 8008b2e:	d0e7      	beq.n	8008b00 <_puts_r+0x2c>
 8008b30:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008b34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b36:	07da      	lsls	r2, r3, #31
 8008b38:	d405      	bmi.n	8008b46 <_puts_r+0x72>
 8008b3a:	89a3      	ldrh	r3, [r4, #12]
 8008b3c:	059b      	lsls	r3, r3, #22
 8008b3e:	d402      	bmi.n	8008b46 <_puts_r+0x72>
 8008b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b42:	f000 fa27 	bl	8008f94 <__retarget_lock_release_recursive>
 8008b46:	4628      	mov	r0, r5
 8008b48:	bd70      	pop	{r4, r5, r6, pc}
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	da04      	bge.n	8008b58 <_puts_r+0x84>
 8008b4e:	69a2      	ldr	r2, [r4, #24]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	dc06      	bgt.n	8008b62 <_puts_r+0x8e>
 8008b54:	290a      	cmp	r1, #10
 8008b56:	d004      	beq.n	8008b62 <_puts_r+0x8e>
 8008b58:	6823      	ldr	r3, [r4, #0]
 8008b5a:	1c5a      	adds	r2, r3, #1
 8008b5c:	6022      	str	r2, [r4, #0]
 8008b5e:	7019      	strb	r1, [r3, #0]
 8008b60:	e7cf      	b.n	8008b02 <_puts_r+0x2e>
 8008b62:	4622      	mov	r2, r4
 8008b64:	4628      	mov	r0, r5
 8008b66:	f000 f902 	bl	8008d6e <__swbuf_r>
 8008b6a:	3001      	adds	r0, #1
 8008b6c:	d1c9      	bne.n	8008b02 <_puts_r+0x2e>
 8008b6e:	e7df      	b.n	8008b30 <_puts_r+0x5c>
 8008b70:	6823      	ldr	r3, [r4, #0]
 8008b72:	250a      	movs	r5, #10
 8008b74:	1c5a      	adds	r2, r3, #1
 8008b76:	6022      	str	r2, [r4, #0]
 8008b78:	701d      	strb	r5, [r3, #0]
 8008b7a:	e7db      	b.n	8008b34 <_puts_r+0x60>

08008b7c <puts>:
 8008b7c:	4b02      	ldr	r3, [pc, #8]	; (8008b88 <puts+0xc>)
 8008b7e:	4601      	mov	r1, r0
 8008b80:	6818      	ldr	r0, [r3, #0]
 8008b82:	f7ff bfa7 	b.w	8008ad4 <_puts_r>
 8008b86:	bf00      	nop
 8008b88:	20000064 	.word	0x20000064

08008b8c <setvbuf>:
 8008b8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b90:	461d      	mov	r5, r3
 8008b92:	4b54      	ldr	r3, [pc, #336]	; (8008ce4 <setvbuf+0x158>)
 8008b94:	681f      	ldr	r7, [r3, #0]
 8008b96:	4604      	mov	r4, r0
 8008b98:	460e      	mov	r6, r1
 8008b9a:	4690      	mov	r8, r2
 8008b9c:	b127      	cbz	r7, 8008ba8 <setvbuf+0x1c>
 8008b9e:	6a3b      	ldr	r3, [r7, #32]
 8008ba0:	b913      	cbnz	r3, 8008ba8 <setvbuf+0x1c>
 8008ba2:	4638      	mov	r0, r7
 8008ba4:	f7ff ff4e 	bl	8008a44 <__sinit>
 8008ba8:	f1b8 0f02 	cmp.w	r8, #2
 8008bac:	d006      	beq.n	8008bbc <setvbuf+0x30>
 8008bae:	f1b8 0f01 	cmp.w	r8, #1
 8008bb2:	f200 8094 	bhi.w	8008cde <setvbuf+0x152>
 8008bb6:	2d00      	cmp	r5, #0
 8008bb8:	f2c0 8091 	blt.w	8008cde <setvbuf+0x152>
 8008bbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bbe:	07da      	lsls	r2, r3, #31
 8008bc0:	d405      	bmi.n	8008bce <setvbuf+0x42>
 8008bc2:	89a3      	ldrh	r3, [r4, #12]
 8008bc4:	059b      	lsls	r3, r3, #22
 8008bc6:	d402      	bmi.n	8008bce <setvbuf+0x42>
 8008bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bca:	f000 f9e2 	bl	8008f92 <__retarget_lock_acquire_recursive>
 8008bce:	4621      	mov	r1, r4
 8008bd0:	4638      	mov	r0, r7
 8008bd2:	f001 feb1 	bl	800a938 <_fflush_r>
 8008bd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bd8:	b141      	cbz	r1, 8008bec <setvbuf+0x60>
 8008bda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bde:	4299      	cmp	r1, r3
 8008be0:	d002      	beq.n	8008be8 <setvbuf+0x5c>
 8008be2:	4638      	mov	r0, r7
 8008be4:	f001 f862 	bl	8009cac <_free_r>
 8008be8:	2300      	movs	r3, #0
 8008bea:	6363      	str	r3, [r4, #52]	; 0x34
 8008bec:	2300      	movs	r3, #0
 8008bee:	61a3      	str	r3, [r4, #24]
 8008bf0:	6063      	str	r3, [r4, #4]
 8008bf2:	89a3      	ldrh	r3, [r4, #12]
 8008bf4:	0618      	lsls	r0, r3, #24
 8008bf6:	d503      	bpl.n	8008c00 <setvbuf+0x74>
 8008bf8:	6921      	ldr	r1, [r4, #16]
 8008bfa:	4638      	mov	r0, r7
 8008bfc:	f001 f856 	bl	8009cac <_free_r>
 8008c00:	89a3      	ldrh	r3, [r4, #12]
 8008c02:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008c06:	f023 0303 	bic.w	r3, r3, #3
 8008c0a:	f1b8 0f02 	cmp.w	r8, #2
 8008c0e:	81a3      	strh	r3, [r4, #12]
 8008c10:	d05f      	beq.n	8008cd2 <setvbuf+0x146>
 8008c12:	ab01      	add	r3, sp, #4
 8008c14:	466a      	mov	r2, sp
 8008c16:	4621      	mov	r1, r4
 8008c18:	4638      	mov	r0, r7
 8008c1a:	f001 feb5 	bl	800a988 <__swhatbuf_r>
 8008c1e:	89a3      	ldrh	r3, [r4, #12]
 8008c20:	4318      	orrs	r0, r3
 8008c22:	81a0      	strh	r0, [r4, #12]
 8008c24:	bb2d      	cbnz	r5, 8008c72 <setvbuf+0xe6>
 8008c26:	9d00      	ldr	r5, [sp, #0]
 8008c28:	4628      	mov	r0, r5
 8008c2a:	f001 f88b 	bl	8009d44 <malloc>
 8008c2e:	4606      	mov	r6, r0
 8008c30:	2800      	cmp	r0, #0
 8008c32:	d150      	bne.n	8008cd6 <setvbuf+0x14a>
 8008c34:	f8dd 9000 	ldr.w	r9, [sp]
 8008c38:	45a9      	cmp	r9, r5
 8008c3a:	d13e      	bne.n	8008cba <setvbuf+0x12e>
 8008c3c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008c40:	2200      	movs	r2, #0
 8008c42:	60a2      	str	r2, [r4, #8]
 8008c44:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8008c48:	6022      	str	r2, [r4, #0]
 8008c4a:	6122      	str	r2, [r4, #16]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c52:	6162      	str	r2, [r4, #20]
 8008c54:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c56:	f043 0302 	orr.w	r3, r3, #2
 8008c5a:	07d1      	lsls	r1, r2, #31
 8008c5c:	81a3      	strh	r3, [r4, #12]
 8008c5e:	d404      	bmi.n	8008c6a <setvbuf+0xde>
 8008c60:	059b      	lsls	r3, r3, #22
 8008c62:	d402      	bmi.n	8008c6a <setvbuf+0xde>
 8008c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c66:	f000 f995 	bl	8008f94 <__retarget_lock_release_recursive>
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	b003      	add	sp, #12
 8008c6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c72:	2e00      	cmp	r6, #0
 8008c74:	d0d8      	beq.n	8008c28 <setvbuf+0x9c>
 8008c76:	6a3b      	ldr	r3, [r7, #32]
 8008c78:	b913      	cbnz	r3, 8008c80 <setvbuf+0xf4>
 8008c7a:	4638      	mov	r0, r7
 8008c7c:	f7ff fee2 	bl	8008a44 <__sinit>
 8008c80:	f1b8 0f01 	cmp.w	r8, #1
 8008c84:	bf08      	it	eq
 8008c86:	89a3      	ldrheq	r3, [r4, #12]
 8008c88:	6026      	str	r6, [r4, #0]
 8008c8a:	bf04      	itt	eq
 8008c8c:	f043 0301 	orreq.w	r3, r3, #1
 8008c90:	81a3      	strheq	r3, [r4, #12]
 8008c92:	89a3      	ldrh	r3, [r4, #12]
 8008c94:	f013 0208 	ands.w	r2, r3, #8
 8008c98:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008c9c:	d01d      	beq.n	8008cda <setvbuf+0x14e>
 8008c9e:	07da      	lsls	r2, r3, #31
 8008ca0:	bf41      	itttt	mi
 8008ca2:	2200      	movmi	r2, #0
 8008ca4:	426d      	negmi	r5, r5
 8008ca6:	60a2      	strmi	r2, [r4, #8]
 8008ca8:	61a5      	strmi	r5, [r4, #24]
 8008caa:	bf58      	it	pl
 8008cac:	60a5      	strpl	r5, [r4, #8]
 8008cae:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008cb0:	f015 0501 	ands.w	r5, r5, #1
 8008cb4:	d0d4      	beq.n	8008c60 <setvbuf+0xd4>
 8008cb6:	2500      	movs	r5, #0
 8008cb8:	e7d7      	b.n	8008c6a <setvbuf+0xde>
 8008cba:	4648      	mov	r0, r9
 8008cbc:	f001 f842 	bl	8009d44 <malloc>
 8008cc0:	4606      	mov	r6, r0
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	d0ba      	beq.n	8008c3c <setvbuf+0xb0>
 8008cc6:	89a3      	ldrh	r3, [r4, #12]
 8008cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ccc:	81a3      	strh	r3, [r4, #12]
 8008cce:	464d      	mov	r5, r9
 8008cd0:	e7d1      	b.n	8008c76 <setvbuf+0xea>
 8008cd2:	2500      	movs	r5, #0
 8008cd4:	e7b4      	b.n	8008c40 <setvbuf+0xb4>
 8008cd6:	46a9      	mov	r9, r5
 8008cd8:	e7f5      	b.n	8008cc6 <setvbuf+0x13a>
 8008cda:	60a2      	str	r2, [r4, #8]
 8008cdc:	e7e7      	b.n	8008cae <setvbuf+0x122>
 8008cde:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008ce2:	e7c2      	b.n	8008c6a <setvbuf+0xde>
 8008ce4:	20000064 	.word	0x20000064

08008ce8 <__sread>:
 8008ce8:	b510      	push	{r4, lr}
 8008cea:	460c      	mov	r4, r1
 8008cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cf0:	f000 f900 	bl	8008ef4 <_read_r>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	bfab      	itete	ge
 8008cf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008cfa:	89a3      	ldrhlt	r3, [r4, #12]
 8008cfc:	181b      	addge	r3, r3, r0
 8008cfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d02:	bfac      	ite	ge
 8008d04:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d06:	81a3      	strhlt	r3, [r4, #12]
 8008d08:	bd10      	pop	{r4, pc}

08008d0a <__swrite>:
 8008d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d0e:	461f      	mov	r7, r3
 8008d10:	898b      	ldrh	r3, [r1, #12]
 8008d12:	05db      	lsls	r3, r3, #23
 8008d14:	4605      	mov	r5, r0
 8008d16:	460c      	mov	r4, r1
 8008d18:	4616      	mov	r6, r2
 8008d1a:	d505      	bpl.n	8008d28 <__swrite+0x1e>
 8008d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d20:	2302      	movs	r3, #2
 8008d22:	2200      	movs	r2, #0
 8008d24:	f000 f8d4 	bl	8008ed0 <_lseek_r>
 8008d28:	89a3      	ldrh	r3, [r4, #12]
 8008d2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d32:	81a3      	strh	r3, [r4, #12]
 8008d34:	4632      	mov	r2, r6
 8008d36:	463b      	mov	r3, r7
 8008d38:	4628      	mov	r0, r5
 8008d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d3e:	f000 b8eb 	b.w	8008f18 <_write_r>

08008d42 <__sseek>:
 8008d42:	b510      	push	{r4, lr}
 8008d44:	460c      	mov	r4, r1
 8008d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d4a:	f000 f8c1 	bl	8008ed0 <_lseek_r>
 8008d4e:	1c43      	adds	r3, r0, #1
 8008d50:	89a3      	ldrh	r3, [r4, #12]
 8008d52:	bf15      	itete	ne
 8008d54:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d5e:	81a3      	strheq	r3, [r4, #12]
 8008d60:	bf18      	it	ne
 8008d62:	81a3      	strhne	r3, [r4, #12]
 8008d64:	bd10      	pop	{r4, pc}

08008d66 <__sclose>:
 8008d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d6a:	f000 b8a1 	b.w	8008eb0 <_close_r>

08008d6e <__swbuf_r>:
 8008d6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d70:	460e      	mov	r6, r1
 8008d72:	4614      	mov	r4, r2
 8008d74:	4605      	mov	r5, r0
 8008d76:	b118      	cbz	r0, 8008d80 <__swbuf_r+0x12>
 8008d78:	6a03      	ldr	r3, [r0, #32]
 8008d7a:	b90b      	cbnz	r3, 8008d80 <__swbuf_r+0x12>
 8008d7c:	f7ff fe62 	bl	8008a44 <__sinit>
 8008d80:	69a3      	ldr	r3, [r4, #24]
 8008d82:	60a3      	str	r3, [r4, #8]
 8008d84:	89a3      	ldrh	r3, [r4, #12]
 8008d86:	071a      	lsls	r2, r3, #28
 8008d88:	d525      	bpl.n	8008dd6 <__swbuf_r+0x68>
 8008d8a:	6923      	ldr	r3, [r4, #16]
 8008d8c:	b31b      	cbz	r3, 8008dd6 <__swbuf_r+0x68>
 8008d8e:	6823      	ldr	r3, [r4, #0]
 8008d90:	6922      	ldr	r2, [r4, #16]
 8008d92:	1a98      	subs	r0, r3, r2
 8008d94:	6963      	ldr	r3, [r4, #20]
 8008d96:	b2f6      	uxtb	r6, r6
 8008d98:	4283      	cmp	r3, r0
 8008d9a:	4637      	mov	r7, r6
 8008d9c:	dc04      	bgt.n	8008da8 <__swbuf_r+0x3a>
 8008d9e:	4621      	mov	r1, r4
 8008da0:	4628      	mov	r0, r5
 8008da2:	f001 fdc9 	bl	800a938 <_fflush_r>
 8008da6:	b9e0      	cbnz	r0, 8008de2 <__swbuf_r+0x74>
 8008da8:	68a3      	ldr	r3, [r4, #8]
 8008daa:	3b01      	subs	r3, #1
 8008dac:	60a3      	str	r3, [r4, #8]
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	1c5a      	adds	r2, r3, #1
 8008db2:	6022      	str	r2, [r4, #0]
 8008db4:	701e      	strb	r6, [r3, #0]
 8008db6:	6962      	ldr	r2, [r4, #20]
 8008db8:	1c43      	adds	r3, r0, #1
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d004      	beq.n	8008dc8 <__swbuf_r+0x5a>
 8008dbe:	89a3      	ldrh	r3, [r4, #12]
 8008dc0:	07db      	lsls	r3, r3, #31
 8008dc2:	d506      	bpl.n	8008dd2 <__swbuf_r+0x64>
 8008dc4:	2e0a      	cmp	r6, #10
 8008dc6:	d104      	bne.n	8008dd2 <__swbuf_r+0x64>
 8008dc8:	4621      	mov	r1, r4
 8008dca:	4628      	mov	r0, r5
 8008dcc:	f001 fdb4 	bl	800a938 <_fflush_r>
 8008dd0:	b938      	cbnz	r0, 8008de2 <__swbuf_r+0x74>
 8008dd2:	4638      	mov	r0, r7
 8008dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	4628      	mov	r0, r5
 8008dda:	f000 f805 	bl	8008de8 <__swsetup_r>
 8008dde:	2800      	cmp	r0, #0
 8008de0:	d0d5      	beq.n	8008d8e <__swbuf_r+0x20>
 8008de2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008de6:	e7f4      	b.n	8008dd2 <__swbuf_r+0x64>

08008de8 <__swsetup_r>:
 8008de8:	b538      	push	{r3, r4, r5, lr}
 8008dea:	4b2a      	ldr	r3, [pc, #168]	; (8008e94 <__swsetup_r+0xac>)
 8008dec:	4605      	mov	r5, r0
 8008dee:	6818      	ldr	r0, [r3, #0]
 8008df0:	460c      	mov	r4, r1
 8008df2:	b118      	cbz	r0, 8008dfc <__swsetup_r+0x14>
 8008df4:	6a03      	ldr	r3, [r0, #32]
 8008df6:	b90b      	cbnz	r3, 8008dfc <__swsetup_r+0x14>
 8008df8:	f7ff fe24 	bl	8008a44 <__sinit>
 8008dfc:	89a3      	ldrh	r3, [r4, #12]
 8008dfe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e02:	0718      	lsls	r0, r3, #28
 8008e04:	d422      	bmi.n	8008e4c <__swsetup_r+0x64>
 8008e06:	06d9      	lsls	r1, r3, #27
 8008e08:	d407      	bmi.n	8008e1a <__swsetup_r+0x32>
 8008e0a:	2309      	movs	r3, #9
 8008e0c:	602b      	str	r3, [r5, #0]
 8008e0e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e12:	81a3      	strh	r3, [r4, #12]
 8008e14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e18:	e034      	b.n	8008e84 <__swsetup_r+0x9c>
 8008e1a:	0758      	lsls	r0, r3, #29
 8008e1c:	d512      	bpl.n	8008e44 <__swsetup_r+0x5c>
 8008e1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e20:	b141      	cbz	r1, 8008e34 <__swsetup_r+0x4c>
 8008e22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e26:	4299      	cmp	r1, r3
 8008e28:	d002      	beq.n	8008e30 <__swsetup_r+0x48>
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	f000 ff3e 	bl	8009cac <_free_r>
 8008e30:	2300      	movs	r3, #0
 8008e32:	6363      	str	r3, [r4, #52]	; 0x34
 8008e34:	89a3      	ldrh	r3, [r4, #12]
 8008e36:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e3a:	81a3      	strh	r3, [r4, #12]
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	6063      	str	r3, [r4, #4]
 8008e40:	6923      	ldr	r3, [r4, #16]
 8008e42:	6023      	str	r3, [r4, #0]
 8008e44:	89a3      	ldrh	r3, [r4, #12]
 8008e46:	f043 0308 	orr.w	r3, r3, #8
 8008e4a:	81a3      	strh	r3, [r4, #12]
 8008e4c:	6923      	ldr	r3, [r4, #16]
 8008e4e:	b94b      	cbnz	r3, 8008e64 <__swsetup_r+0x7c>
 8008e50:	89a3      	ldrh	r3, [r4, #12]
 8008e52:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e5a:	d003      	beq.n	8008e64 <__swsetup_r+0x7c>
 8008e5c:	4621      	mov	r1, r4
 8008e5e:	4628      	mov	r0, r5
 8008e60:	f001 fdb8 	bl	800a9d4 <__smakebuf_r>
 8008e64:	89a0      	ldrh	r0, [r4, #12]
 8008e66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e6a:	f010 0301 	ands.w	r3, r0, #1
 8008e6e:	d00a      	beq.n	8008e86 <__swsetup_r+0x9e>
 8008e70:	2300      	movs	r3, #0
 8008e72:	60a3      	str	r3, [r4, #8]
 8008e74:	6963      	ldr	r3, [r4, #20]
 8008e76:	425b      	negs	r3, r3
 8008e78:	61a3      	str	r3, [r4, #24]
 8008e7a:	6923      	ldr	r3, [r4, #16]
 8008e7c:	b943      	cbnz	r3, 8008e90 <__swsetup_r+0xa8>
 8008e7e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e82:	d1c4      	bne.n	8008e0e <__swsetup_r+0x26>
 8008e84:	bd38      	pop	{r3, r4, r5, pc}
 8008e86:	0781      	lsls	r1, r0, #30
 8008e88:	bf58      	it	pl
 8008e8a:	6963      	ldrpl	r3, [r4, #20]
 8008e8c:	60a3      	str	r3, [r4, #8]
 8008e8e:	e7f4      	b.n	8008e7a <__swsetup_r+0x92>
 8008e90:	2000      	movs	r0, #0
 8008e92:	e7f7      	b.n	8008e84 <__swsetup_r+0x9c>
 8008e94:	20000064 	.word	0x20000064

08008e98 <memset>:
 8008e98:	4402      	add	r2, r0
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d100      	bne.n	8008ea2 <memset+0xa>
 8008ea0:	4770      	bx	lr
 8008ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ea6:	e7f9      	b.n	8008e9c <memset+0x4>

08008ea8 <_localeconv_r>:
 8008ea8:	4800      	ldr	r0, [pc, #0]	; (8008eac <_localeconv_r+0x4>)
 8008eaa:	4770      	bx	lr
 8008eac:	20000158 	.word	0x20000158

08008eb0 <_close_r>:
 8008eb0:	b538      	push	{r3, r4, r5, lr}
 8008eb2:	4d06      	ldr	r5, [pc, #24]	; (8008ecc <_close_r+0x1c>)
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	4604      	mov	r4, r0
 8008eb8:	4608      	mov	r0, r1
 8008eba:	602b      	str	r3, [r5, #0]
 8008ebc:	f7f8 fc8a 	bl	80017d4 <_close>
 8008ec0:	1c43      	adds	r3, r0, #1
 8008ec2:	d102      	bne.n	8008eca <_close_r+0x1a>
 8008ec4:	682b      	ldr	r3, [r5, #0]
 8008ec6:	b103      	cbz	r3, 8008eca <_close_r+0x1a>
 8008ec8:	6023      	str	r3, [r4, #0]
 8008eca:	bd38      	pop	{r3, r4, r5, pc}
 8008ecc:	2000052c 	.word	0x2000052c

08008ed0 <_lseek_r>:
 8008ed0:	b538      	push	{r3, r4, r5, lr}
 8008ed2:	4d07      	ldr	r5, [pc, #28]	; (8008ef0 <_lseek_r+0x20>)
 8008ed4:	4604      	mov	r4, r0
 8008ed6:	4608      	mov	r0, r1
 8008ed8:	4611      	mov	r1, r2
 8008eda:	2200      	movs	r2, #0
 8008edc:	602a      	str	r2, [r5, #0]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	f7f8 fc8f 	bl	8001802 <_lseek>
 8008ee4:	1c43      	adds	r3, r0, #1
 8008ee6:	d102      	bne.n	8008eee <_lseek_r+0x1e>
 8008ee8:	682b      	ldr	r3, [r5, #0]
 8008eea:	b103      	cbz	r3, 8008eee <_lseek_r+0x1e>
 8008eec:	6023      	str	r3, [r4, #0]
 8008eee:	bd38      	pop	{r3, r4, r5, pc}
 8008ef0:	2000052c 	.word	0x2000052c

08008ef4 <_read_r>:
 8008ef4:	b538      	push	{r3, r4, r5, lr}
 8008ef6:	4d07      	ldr	r5, [pc, #28]	; (8008f14 <_read_r+0x20>)
 8008ef8:	4604      	mov	r4, r0
 8008efa:	4608      	mov	r0, r1
 8008efc:	4611      	mov	r1, r2
 8008efe:	2200      	movs	r2, #0
 8008f00:	602a      	str	r2, [r5, #0]
 8008f02:	461a      	mov	r2, r3
 8008f04:	f7f8 fc8e 	bl	8001824 <_read>
 8008f08:	1c43      	adds	r3, r0, #1
 8008f0a:	d102      	bne.n	8008f12 <_read_r+0x1e>
 8008f0c:	682b      	ldr	r3, [r5, #0]
 8008f0e:	b103      	cbz	r3, 8008f12 <_read_r+0x1e>
 8008f10:	6023      	str	r3, [r4, #0]
 8008f12:	bd38      	pop	{r3, r4, r5, pc}
 8008f14:	2000052c 	.word	0x2000052c

08008f18 <_write_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	4d07      	ldr	r5, [pc, #28]	; (8008f38 <_write_r+0x20>)
 8008f1c:	4604      	mov	r4, r0
 8008f1e:	4608      	mov	r0, r1
 8008f20:	4611      	mov	r1, r2
 8008f22:	2200      	movs	r2, #0
 8008f24:	602a      	str	r2, [r5, #0]
 8008f26:	461a      	mov	r2, r3
 8008f28:	f7f8 fc28 	bl	800177c <_write>
 8008f2c:	1c43      	adds	r3, r0, #1
 8008f2e:	d102      	bne.n	8008f36 <_write_r+0x1e>
 8008f30:	682b      	ldr	r3, [r5, #0]
 8008f32:	b103      	cbz	r3, 8008f36 <_write_r+0x1e>
 8008f34:	6023      	str	r3, [r4, #0]
 8008f36:	bd38      	pop	{r3, r4, r5, pc}
 8008f38:	2000052c 	.word	0x2000052c

08008f3c <__errno>:
 8008f3c:	4b01      	ldr	r3, [pc, #4]	; (8008f44 <__errno+0x8>)
 8008f3e:	6818      	ldr	r0, [r3, #0]
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	20000064 	.word	0x20000064

08008f48 <__libc_init_array>:
 8008f48:	b570      	push	{r4, r5, r6, lr}
 8008f4a:	4d0d      	ldr	r5, [pc, #52]	; (8008f80 <__libc_init_array+0x38>)
 8008f4c:	4c0d      	ldr	r4, [pc, #52]	; (8008f84 <__libc_init_array+0x3c>)
 8008f4e:	1b64      	subs	r4, r4, r5
 8008f50:	10a4      	asrs	r4, r4, #2
 8008f52:	2600      	movs	r6, #0
 8008f54:	42a6      	cmp	r6, r4
 8008f56:	d109      	bne.n	8008f6c <__libc_init_array+0x24>
 8008f58:	4d0b      	ldr	r5, [pc, #44]	; (8008f88 <__libc_init_array+0x40>)
 8008f5a:	4c0c      	ldr	r4, [pc, #48]	; (8008f8c <__libc_init_array+0x44>)
 8008f5c:	f001 fe6c 	bl	800ac38 <_init>
 8008f60:	1b64      	subs	r4, r4, r5
 8008f62:	10a4      	asrs	r4, r4, #2
 8008f64:	2600      	movs	r6, #0
 8008f66:	42a6      	cmp	r6, r4
 8008f68:	d105      	bne.n	8008f76 <__libc_init_array+0x2e>
 8008f6a:	bd70      	pop	{r4, r5, r6, pc}
 8008f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f70:	4798      	blx	r3
 8008f72:	3601      	adds	r6, #1
 8008f74:	e7ee      	b.n	8008f54 <__libc_init_array+0xc>
 8008f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f7a:	4798      	blx	r3
 8008f7c:	3601      	adds	r6, #1
 8008f7e:	e7f2      	b.n	8008f66 <__libc_init_array+0x1e>
 8008f80:	0800b3f4 	.word	0x0800b3f4
 8008f84:	0800b3f4 	.word	0x0800b3f4
 8008f88:	0800b3f4 	.word	0x0800b3f4
 8008f8c:	0800b3f8 	.word	0x0800b3f8

08008f90 <__retarget_lock_init_recursive>:
 8008f90:	4770      	bx	lr

08008f92 <__retarget_lock_acquire_recursive>:
 8008f92:	4770      	bx	lr

08008f94 <__retarget_lock_release_recursive>:
 8008f94:	4770      	bx	lr

08008f96 <memcpy>:
 8008f96:	440a      	add	r2, r1
 8008f98:	4291      	cmp	r1, r2
 8008f9a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008f9e:	d100      	bne.n	8008fa2 <memcpy+0xc>
 8008fa0:	4770      	bx	lr
 8008fa2:	b510      	push	{r4, lr}
 8008fa4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fa8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fac:	4291      	cmp	r1, r2
 8008fae:	d1f9      	bne.n	8008fa4 <memcpy+0xe>
 8008fb0:	bd10      	pop	{r4, pc}

08008fb2 <quorem>:
 8008fb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb6:	6903      	ldr	r3, [r0, #16]
 8008fb8:	690c      	ldr	r4, [r1, #16]
 8008fba:	42a3      	cmp	r3, r4
 8008fbc:	4607      	mov	r7, r0
 8008fbe:	db7e      	blt.n	80090be <quorem+0x10c>
 8008fc0:	3c01      	subs	r4, #1
 8008fc2:	f101 0814 	add.w	r8, r1, #20
 8008fc6:	f100 0514 	add.w	r5, r0, #20
 8008fca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fce:	9301      	str	r3, [sp, #4]
 8008fd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008fd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008fe0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008fe4:	fbb2 f6f3 	udiv	r6, r2, r3
 8008fe8:	d331      	bcc.n	800904e <quorem+0x9c>
 8008fea:	f04f 0e00 	mov.w	lr, #0
 8008fee:	4640      	mov	r0, r8
 8008ff0:	46ac      	mov	ip, r5
 8008ff2:	46f2      	mov	sl, lr
 8008ff4:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ff8:	b293      	uxth	r3, r2
 8008ffa:	fb06 e303 	mla	r3, r6, r3, lr
 8008ffe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009002:	0c1a      	lsrs	r2, r3, #16
 8009004:	b29b      	uxth	r3, r3
 8009006:	ebaa 0303 	sub.w	r3, sl, r3
 800900a:	f8dc a000 	ldr.w	sl, [ip]
 800900e:	fa13 f38a 	uxtah	r3, r3, sl
 8009012:	fb06 220e 	mla	r2, r6, lr, r2
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	9b00      	ldr	r3, [sp, #0]
 800901a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800901e:	b292      	uxth	r2, r2
 8009020:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009024:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009028:	f8bd 3000 	ldrh.w	r3, [sp]
 800902c:	4581      	cmp	r9, r0
 800902e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009032:	f84c 3b04 	str.w	r3, [ip], #4
 8009036:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800903a:	d2db      	bcs.n	8008ff4 <quorem+0x42>
 800903c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009040:	b92b      	cbnz	r3, 800904e <quorem+0x9c>
 8009042:	9b01      	ldr	r3, [sp, #4]
 8009044:	3b04      	subs	r3, #4
 8009046:	429d      	cmp	r5, r3
 8009048:	461a      	mov	r2, r3
 800904a:	d32c      	bcc.n	80090a6 <quorem+0xf4>
 800904c:	613c      	str	r4, [r7, #16]
 800904e:	4638      	mov	r0, r7
 8009050:	f001 f9a8 	bl	800a3a4 <__mcmp>
 8009054:	2800      	cmp	r0, #0
 8009056:	db22      	blt.n	800909e <quorem+0xec>
 8009058:	3601      	adds	r6, #1
 800905a:	4629      	mov	r1, r5
 800905c:	2000      	movs	r0, #0
 800905e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009062:	f8d1 c000 	ldr.w	ip, [r1]
 8009066:	b293      	uxth	r3, r2
 8009068:	1ac3      	subs	r3, r0, r3
 800906a:	0c12      	lsrs	r2, r2, #16
 800906c:	fa13 f38c 	uxtah	r3, r3, ip
 8009070:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009074:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009078:	b29b      	uxth	r3, r3
 800907a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800907e:	45c1      	cmp	r9, r8
 8009080:	f841 3b04 	str.w	r3, [r1], #4
 8009084:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009088:	d2e9      	bcs.n	800905e <quorem+0xac>
 800908a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800908e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009092:	b922      	cbnz	r2, 800909e <quorem+0xec>
 8009094:	3b04      	subs	r3, #4
 8009096:	429d      	cmp	r5, r3
 8009098:	461a      	mov	r2, r3
 800909a:	d30a      	bcc.n	80090b2 <quorem+0x100>
 800909c:	613c      	str	r4, [r7, #16]
 800909e:	4630      	mov	r0, r6
 80090a0:	b003      	add	sp, #12
 80090a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a6:	6812      	ldr	r2, [r2, #0]
 80090a8:	3b04      	subs	r3, #4
 80090aa:	2a00      	cmp	r2, #0
 80090ac:	d1ce      	bne.n	800904c <quorem+0x9a>
 80090ae:	3c01      	subs	r4, #1
 80090b0:	e7c9      	b.n	8009046 <quorem+0x94>
 80090b2:	6812      	ldr	r2, [r2, #0]
 80090b4:	3b04      	subs	r3, #4
 80090b6:	2a00      	cmp	r2, #0
 80090b8:	d1f0      	bne.n	800909c <quorem+0xea>
 80090ba:	3c01      	subs	r4, #1
 80090bc:	e7eb      	b.n	8009096 <quorem+0xe4>
 80090be:	2000      	movs	r0, #0
 80090c0:	e7ee      	b.n	80090a0 <quorem+0xee>
 80090c2:	0000      	movs	r0, r0
 80090c4:	0000      	movs	r0, r0
	...

080090c8 <_dtoa_r>:
 80090c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090cc:	ed2d 8b04 	vpush	{d8-d9}
 80090d0:	69c5      	ldr	r5, [r0, #28]
 80090d2:	b093      	sub	sp, #76	; 0x4c
 80090d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80090d8:	ec57 6b10 	vmov	r6, r7, d0
 80090dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80090e0:	9107      	str	r1, [sp, #28]
 80090e2:	4604      	mov	r4, r0
 80090e4:	920a      	str	r2, [sp, #40]	; 0x28
 80090e6:	930d      	str	r3, [sp, #52]	; 0x34
 80090e8:	b975      	cbnz	r5, 8009108 <_dtoa_r+0x40>
 80090ea:	2010      	movs	r0, #16
 80090ec:	f000 fe2a 	bl	8009d44 <malloc>
 80090f0:	4602      	mov	r2, r0
 80090f2:	61e0      	str	r0, [r4, #28]
 80090f4:	b920      	cbnz	r0, 8009100 <_dtoa_r+0x38>
 80090f6:	4bae      	ldr	r3, [pc, #696]	; (80093b0 <_dtoa_r+0x2e8>)
 80090f8:	21ef      	movs	r1, #239	; 0xef
 80090fa:	48ae      	ldr	r0, [pc, #696]	; (80093b4 <_dtoa_r+0x2ec>)
 80090fc:	f001 fcd8 	bl	800aab0 <__assert_func>
 8009100:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009104:	6005      	str	r5, [r0, #0]
 8009106:	60c5      	str	r5, [r0, #12]
 8009108:	69e3      	ldr	r3, [r4, #28]
 800910a:	6819      	ldr	r1, [r3, #0]
 800910c:	b151      	cbz	r1, 8009124 <_dtoa_r+0x5c>
 800910e:	685a      	ldr	r2, [r3, #4]
 8009110:	604a      	str	r2, [r1, #4]
 8009112:	2301      	movs	r3, #1
 8009114:	4093      	lsls	r3, r2
 8009116:	608b      	str	r3, [r1, #8]
 8009118:	4620      	mov	r0, r4
 800911a:	f000 ff07 	bl	8009f2c <_Bfree>
 800911e:	69e3      	ldr	r3, [r4, #28]
 8009120:	2200      	movs	r2, #0
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	1e3b      	subs	r3, r7, #0
 8009126:	bfbb      	ittet	lt
 8009128:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800912c:	9303      	strlt	r3, [sp, #12]
 800912e:	2300      	movge	r3, #0
 8009130:	2201      	movlt	r2, #1
 8009132:	bfac      	ite	ge
 8009134:	f8c8 3000 	strge.w	r3, [r8]
 8009138:	f8c8 2000 	strlt.w	r2, [r8]
 800913c:	4b9e      	ldr	r3, [pc, #632]	; (80093b8 <_dtoa_r+0x2f0>)
 800913e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009142:	ea33 0308 	bics.w	r3, r3, r8
 8009146:	d11b      	bne.n	8009180 <_dtoa_r+0xb8>
 8009148:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800914a:	f242 730f 	movw	r3, #9999	; 0x270f
 800914e:	6013      	str	r3, [r2, #0]
 8009150:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009154:	4333      	orrs	r3, r6
 8009156:	f000 8593 	beq.w	8009c80 <_dtoa_r+0xbb8>
 800915a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800915c:	b963      	cbnz	r3, 8009178 <_dtoa_r+0xb0>
 800915e:	4b97      	ldr	r3, [pc, #604]	; (80093bc <_dtoa_r+0x2f4>)
 8009160:	e027      	b.n	80091b2 <_dtoa_r+0xea>
 8009162:	4b97      	ldr	r3, [pc, #604]	; (80093c0 <_dtoa_r+0x2f8>)
 8009164:	9300      	str	r3, [sp, #0]
 8009166:	3308      	adds	r3, #8
 8009168:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800916a:	6013      	str	r3, [r2, #0]
 800916c:	9800      	ldr	r0, [sp, #0]
 800916e:	b013      	add	sp, #76	; 0x4c
 8009170:	ecbd 8b04 	vpop	{d8-d9}
 8009174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009178:	4b90      	ldr	r3, [pc, #576]	; (80093bc <_dtoa_r+0x2f4>)
 800917a:	9300      	str	r3, [sp, #0]
 800917c:	3303      	adds	r3, #3
 800917e:	e7f3      	b.n	8009168 <_dtoa_r+0xa0>
 8009180:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009184:	2200      	movs	r2, #0
 8009186:	ec51 0b17 	vmov	r0, r1, d7
 800918a:	eeb0 8a47 	vmov.f32	s16, s14
 800918e:	eef0 8a67 	vmov.f32	s17, s15
 8009192:	2300      	movs	r3, #0
 8009194:	f7f7 fca8 	bl	8000ae8 <__aeabi_dcmpeq>
 8009198:	4681      	mov	r9, r0
 800919a:	b160      	cbz	r0, 80091b6 <_dtoa_r+0xee>
 800919c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800919e:	2301      	movs	r3, #1
 80091a0:	6013      	str	r3, [r2, #0]
 80091a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f000 8568 	beq.w	8009c7a <_dtoa_r+0xbb2>
 80091aa:	4b86      	ldr	r3, [pc, #536]	; (80093c4 <_dtoa_r+0x2fc>)
 80091ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80091ae:	6013      	str	r3, [r2, #0]
 80091b0:	3b01      	subs	r3, #1
 80091b2:	9300      	str	r3, [sp, #0]
 80091b4:	e7da      	b.n	800916c <_dtoa_r+0xa4>
 80091b6:	aa10      	add	r2, sp, #64	; 0x40
 80091b8:	a911      	add	r1, sp, #68	; 0x44
 80091ba:	4620      	mov	r0, r4
 80091bc:	eeb0 0a48 	vmov.f32	s0, s16
 80091c0:	eef0 0a68 	vmov.f32	s1, s17
 80091c4:	f001 f994 	bl	800a4f0 <__d2b>
 80091c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80091cc:	4682      	mov	sl, r0
 80091ce:	2d00      	cmp	r5, #0
 80091d0:	d07f      	beq.n	80092d2 <_dtoa_r+0x20a>
 80091d2:	ee18 3a90 	vmov	r3, s17
 80091d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80091de:	ec51 0b18 	vmov	r0, r1, d8
 80091e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80091e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80091ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80091ee:	4619      	mov	r1, r3
 80091f0:	2200      	movs	r2, #0
 80091f2:	4b75      	ldr	r3, [pc, #468]	; (80093c8 <_dtoa_r+0x300>)
 80091f4:	f7f7 f858 	bl	80002a8 <__aeabi_dsub>
 80091f8:	a367      	add	r3, pc, #412	; (adr r3, 8009398 <_dtoa_r+0x2d0>)
 80091fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fe:	f7f7 fa0b 	bl	8000618 <__aeabi_dmul>
 8009202:	a367      	add	r3, pc, #412	; (adr r3, 80093a0 <_dtoa_r+0x2d8>)
 8009204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009208:	f7f7 f850 	bl	80002ac <__adddf3>
 800920c:	4606      	mov	r6, r0
 800920e:	4628      	mov	r0, r5
 8009210:	460f      	mov	r7, r1
 8009212:	f7f7 f997 	bl	8000544 <__aeabi_i2d>
 8009216:	a364      	add	r3, pc, #400	; (adr r3, 80093a8 <_dtoa_r+0x2e0>)
 8009218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921c:	f7f7 f9fc 	bl	8000618 <__aeabi_dmul>
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	4630      	mov	r0, r6
 8009226:	4639      	mov	r1, r7
 8009228:	f7f7 f840 	bl	80002ac <__adddf3>
 800922c:	4606      	mov	r6, r0
 800922e:	460f      	mov	r7, r1
 8009230:	f7f7 fca2 	bl	8000b78 <__aeabi_d2iz>
 8009234:	2200      	movs	r2, #0
 8009236:	4683      	mov	fp, r0
 8009238:	2300      	movs	r3, #0
 800923a:	4630      	mov	r0, r6
 800923c:	4639      	mov	r1, r7
 800923e:	f7f7 fc5d 	bl	8000afc <__aeabi_dcmplt>
 8009242:	b148      	cbz	r0, 8009258 <_dtoa_r+0x190>
 8009244:	4658      	mov	r0, fp
 8009246:	f7f7 f97d 	bl	8000544 <__aeabi_i2d>
 800924a:	4632      	mov	r2, r6
 800924c:	463b      	mov	r3, r7
 800924e:	f7f7 fc4b 	bl	8000ae8 <__aeabi_dcmpeq>
 8009252:	b908      	cbnz	r0, 8009258 <_dtoa_r+0x190>
 8009254:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009258:	f1bb 0f16 	cmp.w	fp, #22
 800925c:	d857      	bhi.n	800930e <_dtoa_r+0x246>
 800925e:	4b5b      	ldr	r3, [pc, #364]	; (80093cc <_dtoa_r+0x304>)
 8009260:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009268:	ec51 0b18 	vmov	r0, r1, d8
 800926c:	f7f7 fc46 	bl	8000afc <__aeabi_dcmplt>
 8009270:	2800      	cmp	r0, #0
 8009272:	d04e      	beq.n	8009312 <_dtoa_r+0x24a>
 8009274:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009278:	2300      	movs	r3, #0
 800927a:	930c      	str	r3, [sp, #48]	; 0x30
 800927c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800927e:	1b5b      	subs	r3, r3, r5
 8009280:	1e5a      	subs	r2, r3, #1
 8009282:	bf45      	ittet	mi
 8009284:	f1c3 0301 	rsbmi	r3, r3, #1
 8009288:	9305      	strmi	r3, [sp, #20]
 800928a:	2300      	movpl	r3, #0
 800928c:	2300      	movmi	r3, #0
 800928e:	9206      	str	r2, [sp, #24]
 8009290:	bf54      	ite	pl
 8009292:	9305      	strpl	r3, [sp, #20]
 8009294:	9306      	strmi	r3, [sp, #24]
 8009296:	f1bb 0f00 	cmp.w	fp, #0
 800929a:	db3c      	blt.n	8009316 <_dtoa_r+0x24e>
 800929c:	9b06      	ldr	r3, [sp, #24]
 800929e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80092a2:	445b      	add	r3, fp
 80092a4:	9306      	str	r3, [sp, #24]
 80092a6:	2300      	movs	r3, #0
 80092a8:	9308      	str	r3, [sp, #32]
 80092aa:	9b07      	ldr	r3, [sp, #28]
 80092ac:	2b09      	cmp	r3, #9
 80092ae:	d868      	bhi.n	8009382 <_dtoa_r+0x2ba>
 80092b0:	2b05      	cmp	r3, #5
 80092b2:	bfc4      	itt	gt
 80092b4:	3b04      	subgt	r3, #4
 80092b6:	9307      	strgt	r3, [sp, #28]
 80092b8:	9b07      	ldr	r3, [sp, #28]
 80092ba:	f1a3 0302 	sub.w	r3, r3, #2
 80092be:	bfcc      	ite	gt
 80092c0:	2500      	movgt	r5, #0
 80092c2:	2501      	movle	r5, #1
 80092c4:	2b03      	cmp	r3, #3
 80092c6:	f200 8085 	bhi.w	80093d4 <_dtoa_r+0x30c>
 80092ca:	e8df f003 	tbb	[pc, r3]
 80092ce:	3b2e      	.short	0x3b2e
 80092d0:	5839      	.short	0x5839
 80092d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80092d6:	441d      	add	r5, r3
 80092d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80092dc:	2b20      	cmp	r3, #32
 80092de:	bfc1      	itttt	gt
 80092e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80092e4:	fa08 f803 	lslgt.w	r8, r8, r3
 80092e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80092ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 80092f0:	bfd6      	itet	le
 80092f2:	f1c3 0320 	rsble	r3, r3, #32
 80092f6:	ea48 0003 	orrgt.w	r0, r8, r3
 80092fa:	fa06 f003 	lslle.w	r0, r6, r3
 80092fe:	f7f7 f911 	bl	8000524 <__aeabi_ui2d>
 8009302:	2201      	movs	r2, #1
 8009304:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009308:	3d01      	subs	r5, #1
 800930a:	920e      	str	r2, [sp, #56]	; 0x38
 800930c:	e76f      	b.n	80091ee <_dtoa_r+0x126>
 800930e:	2301      	movs	r3, #1
 8009310:	e7b3      	b.n	800927a <_dtoa_r+0x1b2>
 8009312:	900c      	str	r0, [sp, #48]	; 0x30
 8009314:	e7b2      	b.n	800927c <_dtoa_r+0x1b4>
 8009316:	9b05      	ldr	r3, [sp, #20]
 8009318:	eba3 030b 	sub.w	r3, r3, fp
 800931c:	9305      	str	r3, [sp, #20]
 800931e:	f1cb 0300 	rsb	r3, fp, #0
 8009322:	9308      	str	r3, [sp, #32]
 8009324:	2300      	movs	r3, #0
 8009326:	930b      	str	r3, [sp, #44]	; 0x2c
 8009328:	e7bf      	b.n	80092aa <_dtoa_r+0x1e2>
 800932a:	2300      	movs	r3, #0
 800932c:	9309      	str	r3, [sp, #36]	; 0x24
 800932e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009330:	2b00      	cmp	r3, #0
 8009332:	dc52      	bgt.n	80093da <_dtoa_r+0x312>
 8009334:	2301      	movs	r3, #1
 8009336:	9301      	str	r3, [sp, #4]
 8009338:	9304      	str	r3, [sp, #16]
 800933a:	461a      	mov	r2, r3
 800933c:	920a      	str	r2, [sp, #40]	; 0x28
 800933e:	e00b      	b.n	8009358 <_dtoa_r+0x290>
 8009340:	2301      	movs	r3, #1
 8009342:	e7f3      	b.n	800932c <_dtoa_r+0x264>
 8009344:	2300      	movs	r3, #0
 8009346:	9309      	str	r3, [sp, #36]	; 0x24
 8009348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800934a:	445b      	add	r3, fp
 800934c:	9301      	str	r3, [sp, #4]
 800934e:	3301      	adds	r3, #1
 8009350:	2b01      	cmp	r3, #1
 8009352:	9304      	str	r3, [sp, #16]
 8009354:	bfb8      	it	lt
 8009356:	2301      	movlt	r3, #1
 8009358:	69e0      	ldr	r0, [r4, #28]
 800935a:	2100      	movs	r1, #0
 800935c:	2204      	movs	r2, #4
 800935e:	f102 0614 	add.w	r6, r2, #20
 8009362:	429e      	cmp	r6, r3
 8009364:	d93d      	bls.n	80093e2 <_dtoa_r+0x31a>
 8009366:	6041      	str	r1, [r0, #4]
 8009368:	4620      	mov	r0, r4
 800936a:	f000 fd9f 	bl	8009eac <_Balloc>
 800936e:	9000      	str	r0, [sp, #0]
 8009370:	2800      	cmp	r0, #0
 8009372:	d139      	bne.n	80093e8 <_dtoa_r+0x320>
 8009374:	4b16      	ldr	r3, [pc, #88]	; (80093d0 <_dtoa_r+0x308>)
 8009376:	4602      	mov	r2, r0
 8009378:	f240 11af 	movw	r1, #431	; 0x1af
 800937c:	e6bd      	b.n	80090fa <_dtoa_r+0x32>
 800937e:	2301      	movs	r3, #1
 8009380:	e7e1      	b.n	8009346 <_dtoa_r+0x27e>
 8009382:	2501      	movs	r5, #1
 8009384:	2300      	movs	r3, #0
 8009386:	9307      	str	r3, [sp, #28]
 8009388:	9509      	str	r5, [sp, #36]	; 0x24
 800938a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800938e:	9301      	str	r3, [sp, #4]
 8009390:	9304      	str	r3, [sp, #16]
 8009392:	2200      	movs	r2, #0
 8009394:	2312      	movs	r3, #18
 8009396:	e7d1      	b.n	800933c <_dtoa_r+0x274>
 8009398:	636f4361 	.word	0x636f4361
 800939c:	3fd287a7 	.word	0x3fd287a7
 80093a0:	8b60c8b3 	.word	0x8b60c8b3
 80093a4:	3fc68a28 	.word	0x3fc68a28
 80093a8:	509f79fb 	.word	0x509f79fb
 80093ac:	3fd34413 	.word	0x3fd34413
 80093b0:	0800b0bd 	.word	0x0800b0bd
 80093b4:	0800b0d4 	.word	0x0800b0d4
 80093b8:	7ff00000 	.word	0x7ff00000
 80093bc:	0800b0b9 	.word	0x0800b0b9
 80093c0:	0800b0b0 	.word	0x0800b0b0
 80093c4:	0800b08d 	.word	0x0800b08d
 80093c8:	3ff80000 	.word	0x3ff80000
 80093cc:	0800b1c0 	.word	0x0800b1c0
 80093d0:	0800b12c 	.word	0x0800b12c
 80093d4:	2301      	movs	r3, #1
 80093d6:	9309      	str	r3, [sp, #36]	; 0x24
 80093d8:	e7d7      	b.n	800938a <_dtoa_r+0x2c2>
 80093da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093dc:	9301      	str	r3, [sp, #4]
 80093de:	9304      	str	r3, [sp, #16]
 80093e0:	e7ba      	b.n	8009358 <_dtoa_r+0x290>
 80093e2:	3101      	adds	r1, #1
 80093e4:	0052      	lsls	r2, r2, #1
 80093e6:	e7ba      	b.n	800935e <_dtoa_r+0x296>
 80093e8:	69e3      	ldr	r3, [r4, #28]
 80093ea:	9a00      	ldr	r2, [sp, #0]
 80093ec:	601a      	str	r2, [r3, #0]
 80093ee:	9b04      	ldr	r3, [sp, #16]
 80093f0:	2b0e      	cmp	r3, #14
 80093f2:	f200 80a8 	bhi.w	8009546 <_dtoa_r+0x47e>
 80093f6:	2d00      	cmp	r5, #0
 80093f8:	f000 80a5 	beq.w	8009546 <_dtoa_r+0x47e>
 80093fc:	f1bb 0f00 	cmp.w	fp, #0
 8009400:	dd38      	ble.n	8009474 <_dtoa_r+0x3ac>
 8009402:	4bc0      	ldr	r3, [pc, #768]	; (8009704 <_dtoa_r+0x63c>)
 8009404:	f00b 020f 	and.w	r2, fp, #15
 8009408:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800940c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009410:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009414:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009418:	d019      	beq.n	800944e <_dtoa_r+0x386>
 800941a:	4bbb      	ldr	r3, [pc, #748]	; (8009708 <_dtoa_r+0x640>)
 800941c:	ec51 0b18 	vmov	r0, r1, d8
 8009420:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009424:	f7f7 fa22 	bl	800086c <__aeabi_ddiv>
 8009428:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800942c:	f008 080f 	and.w	r8, r8, #15
 8009430:	2503      	movs	r5, #3
 8009432:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009708 <_dtoa_r+0x640>
 8009436:	f1b8 0f00 	cmp.w	r8, #0
 800943a:	d10a      	bne.n	8009452 <_dtoa_r+0x38a>
 800943c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009440:	4632      	mov	r2, r6
 8009442:	463b      	mov	r3, r7
 8009444:	f7f7 fa12 	bl	800086c <__aeabi_ddiv>
 8009448:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800944c:	e02b      	b.n	80094a6 <_dtoa_r+0x3de>
 800944e:	2502      	movs	r5, #2
 8009450:	e7ef      	b.n	8009432 <_dtoa_r+0x36a>
 8009452:	f018 0f01 	tst.w	r8, #1
 8009456:	d008      	beq.n	800946a <_dtoa_r+0x3a2>
 8009458:	4630      	mov	r0, r6
 800945a:	4639      	mov	r1, r7
 800945c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009460:	f7f7 f8da 	bl	8000618 <__aeabi_dmul>
 8009464:	3501      	adds	r5, #1
 8009466:	4606      	mov	r6, r0
 8009468:	460f      	mov	r7, r1
 800946a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800946e:	f109 0908 	add.w	r9, r9, #8
 8009472:	e7e0      	b.n	8009436 <_dtoa_r+0x36e>
 8009474:	f000 809f 	beq.w	80095b6 <_dtoa_r+0x4ee>
 8009478:	f1cb 0600 	rsb	r6, fp, #0
 800947c:	4ba1      	ldr	r3, [pc, #644]	; (8009704 <_dtoa_r+0x63c>)
 800947e:	4fa2      	ldr	r7, [pc, #648]	; (8009708 <_dtoa_r+0x640>)
 8009480:	f006 020f 	and.w	r2, r6, #15
 8009484:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948c:	ec51 0b18 	vmov	r0, r1, d8
 8009490:	f7f7 f8c2 	bl	8000618 <__aeabi_dmul>
 8009494:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009498:	1136      	asrs	r6, r6, #4
 800949a:	2300      	movs	r3, #0
 800949c:	2502      	movs	r5, #2
 800949e:	2e00      	cmp	r6, #0
 80094a0:	d17e      	bne.n	80095a0 <_dtoa_r+0x4d8>
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1d0      	bne.n	8009448 <_dtoa_r+0x380>
 80094a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f000 8084 	beq.w	80095ba <_dtoa_r+0x4f2>
 80094b2:	4b96      	ldr	r3, [pc, #600]	; (800970c <_dtoa_r+0x644>)
 80094b4:	2200      	movs	r2, #0
 80094b6:	4640      	mov	r0, r8
 80094b8:	4649      	mov	r1, r9
 80094ba:	f7f7 fb1f 	bl	8000afc <__aeabi_dcmplt>
 80094be:	2800      	cmp	r0, #0
 80094c0:	d07b      	beq.n	80095ba <_dtoa_r+0x4f2>
 80094c2:	9b04      	ldr	r3, [sp, #16]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d078      	beq.n	80095ba <_dtoa_r+0x4f2>
 80094c8:	9b01      	ldr	r3, [sp, #4]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	dd39      	ble.n	8009542 <_dtoa_r+0x47a>
 80094ce:	4b90      	ldr	r3, [pc, #576]	; (8009710 <_dtoa_r+0x648>)
 80094d0:	2200      	movs	r2, #0
 80094d2:	4640      	mov	r0, r8
 80094d4:	4649      	mov	r1, r9
 80094d6:	f7f7 f89f 	bl	8000618 <__aeabi_dmul>
 80094da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094de:	9e01      	ldr	r6, [sp, #4]
 80094e0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80094e4:	3501      	adds	r5, #1
 80094e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80094ea:	4628      	mov	r0, r5
 80094ec:	f7f7 f82a 	bl	8000544 <__aeabi_i2d>
 80094f0:	4642      	mov	r2, r8
 80094f2:	464b      	mov	r3, r9
 80094f4:	f7f7 f890 	bl	8000618 <__aeabi_dmul>
 80094f8:	4b86      	ldr	r3, [pc, #536]	; (8009714 <_dtoa_r+0x64c>)
 80094fa:	2200      	movs	r2, #0
 80094fc:	f7f6 fed6 	bl	80002ac <__adddf3>
 8009500:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009508:	9303      	str	r3, [sp, #12]
 800950a:	2e00      	cmp	r6, #0
 800950c:	d158      	bne.n	80095c0 <_dtoa_r+0x4f8>
 800950e:	4b82      	ldr	r3, [pc, #520]	; (8009718 <_dtoa_r+0x650>)
 8009510:	2200      	movs	r2, #0
 8009512:	4640      	mov	r0, r8
 8009514:	4649      	mov	r1, r9
 8009516:	f7f6 fec7 	bl	80002a8 <__aeabi_dsub>
 800951a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800951e:	4680      	mov	r8, r0
 8009520:	4689      	mov	r9, r1
 8009522:	f7f7 fb09 	bl	8000b38 <__aeabi_dcmpgt>
 8009526:	2800      	cmp	r0, #0
 8009528:	f040 8296 	bne.w	8009a58 <_dtoa_r+0x990>
 800952c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009530:	4640      	mov	r0, r8
 8009532:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009536:	4649      	mov	r1, r9
 8009538:	f7f7 fae0 	bl	8000afc <__aeabi_dcmplt>
 800953c:	2800      	cmp	r0, #0
 800953e:	f040 8289 	bne.w	8009a54 <_dtoa_r+0x98c>
 8009542:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009546:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009548:	2b00      	cmp	r3, #0
 800954a:	f2c0 814e 	blt.w	80097ea <_dtoa_r+0x722>
 800954e:	f1bb 0f0e 	cmp.w	fp, #14
 8009552:	f300 814a 	bgt.w	80097ea <_dtoa_r+0x722>
 8009556:	4b6b      	ldr	r3, [pc, #428]	; (8009704 <_dtoa_r+0x63c>)
 8009558:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800955c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009562:	2b00      	cmp	r3, #0
 8009564:	f280 80dc 	bge.w	8009720 <_dtoa_r+0x658>
 8009568:	9b04      	ldr	r3, [sp, #16]
 800956a:	2b00      	cmp	r3, #0
 800956c:	f300 80d8 	bgt.w	8009720 <_dtoa_r+0x658>
 8009570:	f040 826f 	bne.w	8009a52 <_dtoa_r+0x98a>
 8009574:	4b68      	ldr	r3, [pc, #416]	; (8009718 <_dtoa_r+0x650>)
 8009576:	2200      	movs	r2, #0
 8009578:	4640      	mov	r0, r8
 800957a:	4649      	mov	r1, r9
 800957c:	f7f7 f84c 	bl	8000618 <__aeabi_dmul>
 8009580:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009584:	f7f7 face 	bl	8000b24 <__aeabi_dcmpge>
 8009588:	9e04      	ldr	r6, [sp, #16]
 800958a:	4637      	mov	r7, r6
 800958c:	2800      	cmp	r0, #0
 800958e:	f040 8245 	bne.w	8009a1c <_dtoa_r+0x954>
 8009592:	9d00      	ldr	r5, [sp, #0]
 8009594:	2331      	movs	r3, #49	; 0x31
 8009596:	f805 3b01 	strb.w	r3, [r5], #1
 800959a:	f10b 0b01 	add.w	fp, fp, #1
 800959e:	e241      	b.n	8009a24 <_dtoa_r+0x95c>
 80095a0:	07f2      	lsls	r2, r6, #31
 80095a2:	d505      	bpl.n	80095b0 <_dtoa_r+0x4e8>
 80095a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095a8:	f7f7 f836 	bl	8000618 <__aeabi_dmul>
 80095ac:	3501      	adds	r5, #1
 80095ae:	2301      	movs	r3, #1
 80095b0:	1076      	asrs	r6, r6, #1
 80095b2:	3708      	adds	r7, #8
 80095b4:	e773      	b.n	800949e <_dtoa_r+0x3d6>
 80095b6:	2502      	movs	r5, #2
 80095b8:	e775      	b.n	80094a6 <_dtoa_r+0x3de>
 80095ba:	9e04      	ldr	r6, [sp, #16]
 80095bc:	465f      	mov	r7, fp
 80095be:	e792      	b.n	80094e6 <_dtoa_r+0x41e>
 80095c0:	9900      	ldr	r1, [sp, #0]
 80095c2:	4b50      	ldr	r3, [pc, #320]	; (8009704 <_dtoa_r+0x63c>)
 80095c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095c8:	4431      	add	r1, r6
 80095ca:	9102      	str	r1, [sp, #8]
 80095cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80095ce:	eeb0 9a47 	vmov.f32	s18, s14
 80095d2:	eef0 9a67 	vmov.f32	s19, s15
 80095d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80095da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80095de:	2900      	cmp	r1, #0
 80095e0:	d044      	beq.n	800966c <_dtoa_r+0x5a4>
 80095e2:	494e      	ldr	r1, [pc, #312]	; (800971c <_dtoa_r+0x654>)
 80095e4:	2000      	movs	r0, #0
 80095e6:	f7f7 f941 	bl	800086c <__aeabi_ddiv>
 80095ea:	ec53 2b19 	vmov	r2, r3, d9
 80095ee:	f7f6 fe5b 	bl	80002a8 <__aeabi_dsub>
 80095f2:	9d00      	ldr	r5, [sp, #0]
 80095f4:	ec41 0b19 	vmov	d9, r0, r1
 80095f8:	4649      	mov	r1, r9
 80095fa:	4640      	mov	r0, r8
 80095fc:	f7f7 fabc 	bl	8000b78 <__aeabi_d2iz>
 8009600:	4606      	mov	r6, r0
 8009602:	f7f6 ff9f 	bl	8000544 <__aeabi_i2d>
 8009606:	4602      	mov	r2, r0
 8009608:	460b      	mov	r3, r1
 800960a:	4640      	mov	r0, r8
 800960c:	4649      	mov	r1, r9
 800960e:	f7f6 fe4b 	bl	80002a8 <__aeabi_dsub>
 8009612:	3630      	adds	r6, #48	; 0x30
 8009614:	f805 6b01 	strb.w	r6, [r5], #1
 8009618:	ec53 2b19 	vmov	r2, r3, d9
 800961c:	4680      	mov	r8, r0
 800961e:	4689      	mov	r9, r1
 8009620:	f7f7 fa6c 	bl	8000afc <__aeabi_dcmplt>
 8009624:	2800      	cmp	r0, #0
 8009626:	d164      	bne.n	80096f2 <_dtoa_r+0x62a>
 8009628:	4642      	mov	r2, r8
 800962a:	464b      	mov	r3, r9
 800962c:	4937      	ldr	r1, [pc, #220]	; (800970c <_dtoa_r+0x644>)
 800962e:	2000      	movs	r0, #0
 8009630:	f7f6 fe3a 	bl	80002a8 <__aeabi_dsub>
 8009634:	ec53 2b19 	vmov	r2, r3, d9
 8009638:	f7f7 fa60 	bl	8000afc <__aeabi_dcmplt>
 800963c:	2800      	cmp	r0, #0
 800963e:	f040 80b6 	bne.w	80097ae <_dtoa_r+0x6e6>
 8009642:	9b02      	ldr	r3, [sp, #8]
 8009644:	429d      	cmp	r5, r3
 8009646:	f43f af7c 	beq.w	8009542 <_dtoa_r+0x47a>
 800964a:	4b31      	ldr	r3, [pc, #196]	; (8009710 <_dtoa_r+0x648>)
 800964c:	ec51 0b19 	vmov	r0, r1, d9
 8009650:	2200      	movs	r2, #0
 8009652:	f7f6 ffe1 	bl	8000618 <__aeabi_dmul>
 8009656:	4b2e      	ldr	r3, [pc, #184]	; (8009710 <_dtoa_r+0x648>)
 8009658:	ec41 0b19 	vmov	d9, r0, r1
 800965c:	2200      	movs	r2, #0
 800965e:	4640      	mov	r0, r8
 8009660:	4649      	mov	r1, r9
 8009662:	f7f6 ffd9 	bl	8000618 <__aeabi_dmul>
 8009666:	4680      	mov	r8, r0
 8009668:	4689      	mov	r9, r1
 800966a:	e7c5      	b.n	80095f8 <_dtoa_r+0x530>
 800966c:	ec51 0b17 	vmov	r0, r1, d7
 8009670:	f7f6 ffd2 	bl	8000618 <__aeabi_dmul>
 8009674:	9b02      	ldr	r3, [sp, #8]
 8009676:	9d00      	ldr	r5, [sp, #0]
 8009678:	930f      	str	r3, [sp, #60]	; 0x3c
 800967a:	ec41 0b19 	vmov	d9, r0, r1
 800967e:	4649      	mov	r1, r9
 8009680:	4640      	mov	r0, r8
 8009682:	f7f7 fa79 	bl	8000b78 <__aeabi_d2iz>
 8009686:	4606      	mov	r6, r0
 8009688:	f7f6 ff5c 	bl	8000544 <__aeabi_i2d>
 800968c:	3630      	adds	r6, #48	; 0x30
 800968e:	4602      	mov	r2, r0
 8009690:	460b      	mov	r3, r1
 8009692:	4640      	mov	r0, r8
 8009694:	4649      	mov	r1, r9
 8009696:	f7f6 fe07 	bl	80002a8 <__aeabi_dsub>
 800969a:	f805 6b01 	strb.w	r6, [r5], #1
 800969e:	9b02      	ldr	r3, [sp, #8]
 80096a0:	429d      	cmp	r5, r3
 80096a2:	4680      	mov	r8, r0
 80096a4:	4689      	mov	r9, r1
 80096a6:	f04f 0200 	mov.w	r2, #0
 80096aa:	d124      	bne.n	80096f6 <_dtoa_r+0x62e>
 80096ac:	4b1b      	ldr	r3, [pc, #108]	; (800971c <_dtoa_r+0x654>)
 80096ae:	ec51 0b19 	vmov	r0, r1, d9
 80096b2:	f7f6 fdfb 	bl	80002ac <__adddf3>
 80096b6:	4602      	mov	r2, r0
 80096b8:	460b      	mov	r3, r1
 80096ba:	4640      	mov	r0, r8
 80096bc:	4649      	mov	r1, r9
 80096be:	f7f7 fa3b 	bl	8000b38 <__aeabi_dcmpgt>
 80096c2:	2800      	cmp	r0, #0
 80096c4:	d173      	bne.n	80097ae <_dtoa_r+0x6e6>
 80096c6:	ec53 2b19 	vmov	r2, r3, d9
 80096ca:	4914      	ldr	r1, [pc, #80]	; (800971c <_dtoa_r+0x654>)
 80096cc:	2000      	movs	r0, #0
 80096ce:	f7f6 fdeb 	bl	80002a8 <__aeabi_dsub>
 80096d2:	4602      	mov	r2, r0
 80096d4:	460b      	mov	r3, r1
 80096d6:	4640      	mov	r0, r8
 80096d8:	4649      	mov	r1, r9
 80096da:	f7f7 fa0f 	bl	8000afc <__aeabi_dcmplt>
 80096de:	2800      	cmp	r0, #0
 80096e0:	f43f af2f 	beq.w	8009542 <_dtoa_r+0x47a>
 80096e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80096e6:	1e6b      	subs	r3, r5, #1
 80096e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80096ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80096ee:	2b30      	cmp	r3, #48	; 0x30
 80096f0:	d0f8      	beq.n	80096e4 <_dtoa_r+0x61c>
 80096f2:	46bb      	mov	fp, r7
 80096f4:	e04a      	b.n	800978c <_dtoa_r+0x6c4>
 80096f6:	4b06      	ldr	r3, [pc, #24]	; (8009710 <_dtoa_r+0x648>)
 80096f8:	f7f6 ff8e 	bl	8000618 <__aeabi_dmul>
 80096fc:	4680      	mov	r8, r0
 80096fe:	4689      	mov	r9, r1
 8009700:	e7bd      	b.n	800967e <_dtoa_r+0x5b6>
 8009702:	bf00      	nop
 8009704:	0800b1c0 	.word	0x0800b1c0
 8009708:	0800b198 	.word	0x0800b198
 800970c:	3ff00000 	.word	0x3ff00000
 8009710:	40240000 	.word	0x40240000
 8009714:	401c0000 	.word	0x401c0000
 8009718:	40140000 	.word	0x40140000
 800971c:	3fe00000 	.word	0x3fe00000
 8009720:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009724:	9d00      	ldr	r5, [sp, #0]
 8009726:	4642      	mov	r2, r8
 8009728:	464b      	mov	r3, r9
 800972a:	4630      	mov	r0, r6
 800972c:	4639      	mov	r1, r7
 800972e:	f7f7 f89d 	bl	800086c <__aeabi_ddiv>
 8009732:	f7f7 fa21 	bl	8000b78 <__aeabi_d2iz>
 8009736:	9001      	str	r0, [sp, #4]
 8009738:	f7f6 ff04 	bl	8000544 <__aeabi_i2d>
 800973c:	4642      	mov	r2, r8
 800973e:	464b      	mov	r3, r9
 8009740:	f7f6 ff6a 	bl	8000618 <__aeabi_dmul>
 8009744:	4602      	mov	r2, r0
 8009746:	460b      	mov	r3, r1
 8009748:	4630      	mov	r0, r6
 800974a:	4639      	mov	r1, r7
 800974c:	f7f6 fdac 	bl	80002a8 <__aeabi_dsub>
 8009750:	9e01      	ldr	r6, [sp, #4]
 8009752:	9f04      	ldr	r7, [sp, #16]
 8009754:	3630      	adds	r6, #48	; 0x30
 8009756:	f805 6b01 	strb.w	r6, [r5], #1
 800975a:	9e00      	ldr	r6, [sp, #0]
 800975c:	1bae      	subs	r6, r5, r6
 800975e:	42b7      	cmp	r7, r6
 8009760:	4602      	mov	r2, r0
 8009762:	460b      	mov	r3, r1
 8009764:	d134      	bne.n	80097d0 <_dtoa_r+0x708>
 8009766:	f7f6 fda1 	bl	80002ac <__adddf3>
 800976a:	4642      	mov	r2, r8
 800976c:	464b      	mov	r3, r9
 800976e:	4606      	mov	r6, r0
 8009770:	460f      	mov	r7, r1
 8009772:	f7f7 f9e1 	bl	8000b38 <__aeabi_dcmpgt>
 8009776:	b9c8      	cbnz	r0, 80097ac <_dtoa_r+0x6e4>
 8009778:	4642      	mov	r2, r8
 800977a:	464b      	mov	r3, r9
 800977c:	4630      	mov	r0, r6
 800977e:	4639      	mov	r1, r7
 8009780:	f7f7 f9b2 	bl	8000ae8 <__aeabi_dcmpeq>
 8009784:	b110      	cbz	r0, 800978c <_dtoa_r+0x6c4>
 8009786:	9b01      	ldr	r3, [sp, #4]
 8009788:	07db      	lsls	r3, r3, #31
 800978a:	d40f      	bmi.n	80097ac <_dtoa_r+0x6e4>
 800978c:	4651      	mov	r1, sl
 800978e:	4620      	mov	r0, r4
 8009790:	f000 fbcc 	bl	8009f2c <_Bfree>
 8009794:	2300      	movs	r3, #0
 8009796:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009798:	702b      	strb	r3, [r5, #0]
 800979a:	f10b 0301 	add.w	r3, fp, #1
 800979e:	6013      	str	r3, [r2, #0]
 80097a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	f43f ace2 	beq.w	800916c <_dtoa_r+0xa4>
 80097a8:	601d      	str	r5, [r3, #0]
 80097aa:	e4df      	b.n	800916c <_dtoa_r+0xa4>
 80097ac:	465f      	mov	r7, fp
 80097ae:	462b      	mov	r3, r5
 80097b0:	461d      	mov	r5, r3
 80097b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097b6:	2a39      	cmp	r2, #57	; 0x39
 80097b8:	d106      	bne.n	80097c8 <_dtoa_r+0x700>
 80097ba:	9a00      	ldr	r2, [sp, #0]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d1f7      	bne.n	80097b0 <_dtoa_r+0x6e8>
 80097c0:	9900      	ldr	r1, [sp, #0]
 80097c2:	2230      	movs	r2, #48	; 0x30
 80097c4:	3701      	adds	r7, #1
 80097c6:	700a      	strb	r2, [r1, #0]
 80097c8:	781a      	ldrb	r2, [r3, #0]
 80097ca:	3201      	adds	r2, #1
 80097cc:	701a      	strb	r2, [r3, #0]
 80097ce:	e790      	b.n	80096f2 <_dtoa_r+0x62a>
 80097d0:	4ba3      	ldr	r3, [pc, #652]	; (8009a60 <_dtoa_r+0x998>)
 80097d2:	2200      	movs	r2, #0
 80097d4:	f7f6 ff20 	bl	8000618 <__aeabi_dmul>
 80097d8:	2200      	movs	r2, #0
 80097da:	2300      	movs	r3, #0
 80097dc:	4606      	mov	r6, r0
 80097de:	460f      	mov	r7, r1
 80097e0:	f7f7 f982 	bl	8000ae8 <__aeabi_dcmpeq>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	d09e      	beq.n	8009726 <_dtoa_r+0x65e>
 80097e8:	e7d0      	b.n	800978c <_dtoa_r+0x6c4>
 80097ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097ec:	2a00      	cmp	r2, #0
 80097ee:	f000 80ca 	beq.w	8009986 <_dtoa_r+0x8be>
 80097f2:	9a07      	ldr	r2, [sp, #28]
 80097f4:	2a01      	cmp	r2, #1
 80097f6:	f300 80ad 	bgt.w	8009954 <_dtoa_r+0x88c>
 80097fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097fc:	2a00      	cmp	r2, #0
 80097fe:	f000 80a5 	beq.w	800994c <_dtoa_r+0x884>
 8009802:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009806:	9e08      	ldr	r6, [sp, #32]
 8009808:	9d05      	ldr	r5, [sp, #20]
 800980a:	9a05      	ldr	r2, [sp, #20]
 800980c:	441a      	add	r2, r3
 800980e:	9205      	str	r2, [sp, #20]
 8009810:	9a06      	ldr	r2, [sp, #24]
 8009812:	2101      	movs	r1, #1
 8009814:	441a      	add	r2, r3
 8009816:	4620      	mov	r0, r4
 8009818:	9206      	str	r2, [sp, #24]
 800981a:	f000 fc3d 	bl	800a098 <__i2b>
 800981e:	4607      	mov	r7, r0
 8009820:	b165      	cbz	r5, 800983c <_dtoa_r+0x774>
 8009822:	9b06      	ldr	r3, [sp, #24]
 8009824:	2b00      	cmp	r3, #0
 8009826:	dd09      	ble.n	800983c <_dtoa_r+0x774>
 8009828:	42ab      	cmp	r3, r5
 800982a:	9a05      	ldr	r2, [sp, #20]
 800982c:	bfa8      	it	ge
 800982e:	462b      	movge	r3, r5
 8009830:	1ad2      	subs	r2, r2, r3
 8009832:	9205      	str	r2, [sp, #20]
 8009834:	9a06      	ldr	r2, [sp, #24]
 8009836:	1aed      	subs	r5, r5, r3
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	9306      	str	r3, [sp, #24]
 800983c:	9b08      	ldr	r3, [sp, #32]
 800983e:	b1f3      	cbz	r3, 800987e <_dtoa_r+0x7b6>
 8009840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009842:	2b00      	cmp	r3, #0
 8009844:	f000 80a3 	beq.w	800998e <_dtoa_r+0x8c6>
 8009848:	2e00      	cmp	r6, #0
 800984a:	dd10      	ble.n	800986e <_dtoa_r+0x7a6>
 800984c:	4639      	mov	r1, r7
 800984e:	4632      	mov	r2, r6
 8009850:	4620      	mov	r0, r4
 8009852:	f000 fce1 	bl	800a218 <__pow5mult>
 8009856:	4652      	mov	r2, sl
 8009858:	4601      	mov	r1, r0
 800985a:	4607      	mov	r7, r0
 800985c:	4620      	mov	r0, r4
 800985e:	f000 fc31 	bl	800a0c4 <__multiply>
 8009862:	4651      	mov	r1, sl
 8009864:	4680      	mov	r8, r0
 8009866:	4620      	mov	r0, r4
 8009868:	f000 fb60 	bl	8009f2c <_Bfree>
 800986c:	46c2      	mov	sl, r8
 800986e:	9b08      	ldr	r3, [sp, #32]
 8009870:	1b9a      	subs	r2, r3, r6
 8009872:	d004      	beq.n	800987e <_dtoa_r+0x7b6>
 8009874:	4651      	mov	r1, sl
 8009876:	4620      	mov	r0, r4
 8009878:	f000 fcce 	bl	800a218 <__pow5mult>
 800987c:	4682      	mov	sl, r0
 800987e:	2101      	movs	r1, #1
 8009880:	4620      	mov	r0, r4
 8009882:	f000 fc09 	bl	800a098 <__i2b>
 8009886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009888:	2b00      	cmp	r3, #0
 800988a:	4606      	mov	r6, r0
 800988c:	f340 8081 	ble.w	8009992 <_dtoa_r+0x8ca>
 8009890:	461a      	mov	r2, r3
 8009892:	4601      	mov	r1, r0
 8009894:	4620      	mov	r0, r4
 8009896:	f000 fcbf 	bl	800a218 <__pow5mult>
 800989a:	9b07      	ldr	r3, [sp, #28]
 800989c:	2b01      	cmp	r3, #1
 800989e:	4606      	mov	r6, r0
 80098a0:	dd7a      	ble.n	8009998 <_dtoa_r+0x8d0>
 80098a2:	f04f 0800 	mov.w	r8, #0
 80098a6:	6933      	ldr	r3, [r6, #16]
 80098a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80098ac:	6918      	ldr	r0, [r3, #16]
 80098ae:	f000 fba5 	bl	8009ffc <__hi0bits>
 80098b2:	f1c0 0020 	rsb	r0, r0, #32
 80098b6:	9b06      	ldr	r3, [sp, #24]
 80098b8:	4418      	add	r0, r3
 80098ba:	f010 001f 	ands.w	r0, r0, #31
 80098be:	f000 8094 	beq.w	80099ea <_dtoa_r+0x922>
 80098c2:	f1c0 0320 	rsb	r3, r0, #32
 80098c6:	2b04      	cmp	r3, #4
 80098c8:	f340 8085 	ble.w	80099d6 <_dtoa_r+0x90e>
 80098cc:	9b05      	ldr	r3, [sp, #20]
 80098ce:	f1c0 001c 	rsb	r0, r0, #28
 80098d2:	4403      	add	r3, r0
 80098d4:	9305      	str	r3, [sp, #20]
 80098d6:	9b06      	ldr	r3, [sp, #24]
 80098d8:	4403      	add	r3, r0
 80098da:	4405      	add	r5, r0
 80098dc:	9306      	str	r3, [sp, #24]
 80098de:	9b05      	ldr	r3, [sp, #20]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	dd05      	ble.n	80098f0 <_dtoa_r+0x828>
 80098e4:	4651      	mov	r1, sl
 80098e6:	461a      	mov	r2, r3
 80098e8:	4620      	mov	r0, r4
 80098ea:	f000 fcef 	bl	800a2cc <__lshift>
 80098ee:	4682      	mov	sl, r0
 80098f0:	9b06      	ldr	r3, [sp, #24]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	dd05      	ble.n	8009902 <_dtoa_r+0x83a>
 80098f6:	4631      	mov	r1, r6
 80098f8:	461a      	mov	r2, r3
 80098fa:	4620      	mov	r0, r4
 80098fc:	f000 fce6 	bl	800a2cc <__lshift>
 8009900:	4606      	mov	r6, r0
 8009902:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009904:	2b00      	cmp	r3, #0
 8009906:	d072      	beq.n	80099ee <_dtoa_r+0x926>
 8009908:	4631      	mov	r1, r6
 800990a:	4650      	mov	r0, sl
 800990c:	f000 fd4a 	bl	800a3a4 <__mcmp>
 8009910:	2800      	cmp	r0, #0
 8009912:	da6c      	bge.n	80099ee <_dtoa_r+0x926>
 8009914:	2300      	movs	r3, #0
 8009916:	4651      	mov	r1, sl
 8009918:	220a      	movs	r2, #10
 800991a:	4620      	mov	r0, r4
 800991c:	f000 fb28 	bl	8009f70 <__multadd>
 8009920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009922:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009926:	4682      	mov	sl, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	f000 81b0 	beq.w	8009c8e <_dtoa_r+0xbc6>
 800992e:	2300      	movs	r3, #0
 8009930:	4639      	mov	r1, r7
 8009932:	220a      	movs	r2, #10
 8009934:	4620      	mov	r0, r4
 8009936:	f000 fb1b 	bl	8009f70 <__multadd>
 800993a:	9b01      	ldr	r3, [sp, #4]
 800993c:	2b00      	cmp	r3, #0
 800993e:	4607      	mov	r7, r0
 8009940:	f300 8096 	bgt.w	8009a70 <_dtoa_r+0x9a8>
 8009944:	9b07      	ldr	r3, [sp, #28]
 8009946:	2b02      	cmp	r3, #2
 8009948:	dc59      	bgt.n	80099fe <_dtoa_r+0x936>
 800994a:	e091      	b.n	8009a70 <_dtoa_r+0x9a8>
 800994c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800994e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009952:	e758      	b.n	8009806 <_dtoa_r+0x73e>
 8009954:	9b04      	ldr	r3, [sp, #16]
 8009956:	1e5e      	subs	r6, r3, #1
 8009958:	9b08      	ldr	r3, [sp, #32]
 800995a:	42b3      	cmp	r3, r6
 800995c:	bfbf      	itttt	lt
 800995e:	9b08      	ldrlt	r3, [sp, #32]
 8009960:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009962:	9608      	strlt	r6, [sp, #32]
 8009964:	1af3      	sublt	r3, r6, r3
 8009966:	bfb4      	ite	lt
 8009968:	18d2      	addlt	r2, r2, r3
 800996a:	1b9e      	subge	r6, r3, r6
 800996c:	9b04      	ldr	r3, [sp, #16]
 800996e:	bfbc      	itt	lt
 8009970:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009972:	2600      	movlt	r6, #0
 8009974:	2b00      	cmp	r3, #0
 8009976:	bfb7      	itett	lt
 8009978:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800997c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009980:	1a9d      	sublt	r5, r3, r2
 8009982:	2300      	movlt	r3, #0
 8009984:	e741      	b.n	800980a <_dtoa_r+0x742>
 8009986:	9e08      	ldr	r6, [sp, #32]
 8009988:	9d05      	ldr	r5, [sp, #20]
 800998a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800998c:	e748      	b.n	8009820 <_dtoa_r+0x758>
 800998e:	9a08      	ldr	r2, [sp, #32]
 8009990:	e770      	b.n	8009874 <_dtoa_r+0x7ac>
 8009992:	9b07      	ldr	r3, [sp, #28]
 8009994:	2b01      	cmp	r3, #1
 8009996:	dc19      	bgt.n	80099cc <_dtoa_r+0x904>
 8009998:	9b02      	ldr	r3, [sp, #8]
 800999a:	b9bb      	cbnz	r3, 80099cc <_dtoa_r+0x904>
 800999c:	9b03      	ldr	r3, [sp, #12]
 800999e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099a2:	b99b      	cbnz	r3, 80099cc <_dtoa_r+0x904>
 80099a4:	9b03      	ldr	r3, [sp, #12]
 80099a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80099aa:	0d1b      	lsrs	r3, r3, #20
 80099ac:	051b      	lsls	r3, r3, #20
 80099ae:	b183      	cbz	r3, 80099d2 <_dtoa_r+0x90a>
 80099b0:	9b05      	ldr	r3, [sp, #20]
 80099b2:	3301      	adds	r3, #1
 80099b4:	9305      	str	r3, [sp, #20]
 80099b6:	9b06      	ldr	r3, [sp, #24]
 80099b8:	3301      	adds	r3, #1
 80099ba:	9306      	str	r3, [sp, #24]
 80099bc:	f04f 0801 	mov.w	r8, #1
 80099c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f47f af6f 	bne.w	80098a6 <_dtoa_r+0x7de>
 80099c8:	2001      	movs	r0, #1
 80099ca:	e774      	b.n	80098b6 <_dtoa_r+0x7ee>
 80099cc:	f04f 0800 	mov.w	r8, #0
 80099d0:	e7f6      	b.n	80099c0 <_dtoa_r+0x8f8>
 80099d2:	4698      	mov	r8, r3
 80099d4:	e7f4      	b.n	80099c0 <_dtoa_r+0x8f8>
 80099d6:	d082      	beq.n	80098de <_dtoa_r+0x816>
 80099d8:	9a05      	ldr	r2, [sp, #20]
 80099da:	331c      	adds	r3, #28
 80099dc:	441a      	add	r2, r3
 80099de:	9205      	str	r2, [sp, #20]
 80099e0:	9a06      	ldr	r2, [sp, #24]
 80099e2:	441a      	add	r2, r3
 80099e4:	441d      	add	r5, r3
 80099e6:	9206      	str	r2, [sp, #24]
 80099e8:	e779      	b.n	80098de <_dtoa_r+0x816>
 80099ea:	4603      	mov	r3, r0
 80099ec:	e7f4      	b.n	80099d8 <_dtoa_r+0x910>
 80099ee:	9b04      	ldr	r3, [sp, #16]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	dc37      	bgt.n	8009a64 <_dtoa_r+0x99c>
 80099f4:	9b07      	ldr	r3, [sp, #28]
 80099f6:	2b02      	cmp	r3, #2
 80099f8:	dd34      	ble.n	8009a64 <_dtoa_r+0x99c>
 80099fa:	9b04      	ldr	r3, [sp, #16]
 80099fc:	9301      	str	r3, [sp, #4]
 80099fe:	9b01      	ldr	r3, [sp, #4]
 8009a00:	b963      	cbnz	r3, 8009a1c <_dtoa_r+0x954>
 8009a02:	4631      	mov	r1, r6
 8009a04:	2205      	movs	r2, #5
 8009a06:	4620      	mov	r0, r4
 8009a08:	f000 fab2 	bl	8009f70 <__multadd>
 8009a0c:	4601      	mov	r1, r0
 8009a0e:	4606      	mov	r6, r0
 8009a10:	4650      	mov	r0, sl
 8009a12:	f000 fcc7 	bl	800a3a4 <__mcmp>
 8009a16:	2800      	cmp	r0, #0
 8009a18:	f73f adbb 	bgt.w	8009592 <_dtoa_r+0x4ca>
 8009a1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a1e:	9d00      	ldr	r5, [sp, #0]
 8009a20:	ea6f 0b03 	mvn.w	fp, r3
 8009a24:	f04f 0800 	mov.w	r8, #0
 8009a28:	4631      	mov	r1, r6
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	f000 fa7e 	bl	8009f2c <_Bfree>
 8009a30:	2f00      	cmp	r7, #0
 8009a32:	f43f aeab 	beq.w	800978c <_dtoa_r+0x6c4>
 8009a36:	f1b8 0f00 	cmp.w	r8, #0
 8009a3a:	d005      	beq.n	8009a48 <_dtoa_r+0x980>
 8009a3c:	45b8      	cmp	r8, r7
 8009a3e:	d003      	beq.n	8009a48 <_dtoa_r+0x980>
 8009a40:	4641      	mov	r1, r8
 8009a42:	4620      	mov	r0, r4
 8009a44:	f000 fa72 	bl	8009f2c <_Bfree>
 8009a48:	4639      	mov	r1, r7
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f000 fa6e 	bl	8009f2c <_Bfree>
 8009a50:	e69c      	b.n	800978c <_dtoa_r+0x6c4>
 8009a52:	2600      	movs	r6, #0
 8009a54:	4637      	mov	r7, r6
 8009a56:	e7e1      	b.n	8009a1c <_dtoa_r+0x954>
 8009a58:	46bb      	mov	fp, r7
 8009a5a:	4637      	mov	r7, r6
 8009a5c:	e599      	b.n	8009592 <_dtoa_r+0x4ca>
 8009a5e:	bf00      	nop
 8009a60:	40240000 	.word	0x40240000
 8009a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	f000 80c8 	beq.w	8009bfc <_dtoa_r+0xb34>
 8009a6c:	9b04      	ldr	r3, [sp, #16]
 8009a6e:	9301      	str	r3, [sp, #4]
 8009a70:	2d00      	cmp	r5, #0
 8009a72:	dd05      	ble.n	8009a80 <_dtoa_r+0x9b8>
 8009a74:	4639      	mov	r1, r7
 8009a76:	462a      	mov	r2, r5
 8009a78:	4620      	mov	r0, r4
 8009a7a:	f000 fc27 	bl	800a2cc <__lshift>
 8009a7e:	4607      	mov	r7, r0
 8009a80:	f1b8 0f00 	cmp.w	r8, #0
 8009a84:	d05b      	beq.n	8009b3e <_dtoa_r+0xa76>
 8009a86:	6879      	ldr	r1, [r7, #4]
 8009a88:	4620      	mov	r0, r4
 8009a8a:	f000 fa0f 	bl	8009eac <_Balloc>
 8009a8e:	4605      	mov	r5, r0
 8009a90:	b928      	cbnz	r0, 8009a9e <_dtoa_r+0x9d6>
 8009a92:	4b83      	ldr	r3, [pc, #524]	; (8009ca0 <_dtoa_r+0xbd8>)
 8009a94:	4602      	mov	r2, r0
 8009a96:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009a9a:	f7ff bb2e 	b.w	80090fa <_dtoa_r+0x32>
 8009a9e:	693a      	ldr	r2, [r7, #16]
 8009aa0:	3202      	adds	r2, #2
 8009aa2:	0092      	lsls	r2, r2, #2
 8009aa4:	f107 010c 	add.w	r1, r7, #12
 8009aa8:	300c      	adds	r0, #12
 8009aaa:	f7ff fa74 	bl	8008f96 <memcpy>
 8009aae:	2201      	movs	r2, #1
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	f000 fc0a 	bl	800a2cc <__lshift>
 8009ab8:	9b00      	ldr	r3, [sp, #0]
 8009aba:	3301      	adds	r3, #1
 8009abc:	9304      	str	r3, [sp, #16]
 8009abe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ac2:	4413      	add	r3, r2
 8009ac4:	9308      	str	r3, [sp, #32]
 8009ac6:	9b02      	ldr	r3, [sp, #8]
 8009ac8:	f003 0301 	and.w	r3, r3, #1
 8009acc:	46b8      	mov	r8, r7
 8009ace:	9306      	str	r3, [sp, #24]
 8009ad0:	4607      	mov	r7, r0
 8009ad2:	9b04      	ldr	r3, [sp, #16]
 8009ad4:	4631      	mov	r1, r6
 8009ad6:	3b01      	subs	r3, #1
 8009ad8:	4650      	mov	r0, sl
 8009ada:	9301      	str	r3, [sp, #4]
 8009adc:	f7ff fa69 	bl	8008fb2 <quorem>
 8009ae0:	4641      	mov	r1, r8
 8009ae2:	9002      	str	r0, [sp, #8]
 8009ae4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009ae8:	4650      	mov	r0, sl
 8009aea:	f000 fc5b 	bl	800a3a4 <__mcmp>
 8009aee:	463a      	mov	r2, r7
 8009af0:	9005      	str	r0, [sp, #20]
 8009af2:	4631      	mov	r1, r6
 8009af4:	4620      	mov	r0, r4
 8009af6:	f000 fc71 	bl	800a3dc <__mdiff>
 8009afa:	68c2      	ldr	r2, [r0, #12]
 8009afc:	4605      	mov	r5, r0
 8009afe:	bb02      	cbnz	r2, 8009b42 <_dtoa_r+0xa7a>
 8009b00:	4601      	mov	r1, r0
 8009b02:	4650      	mov	r0, sl
 8009b04:	f000 fc4e 	bl	800a3a4 <__mcmp>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	4629      	mov	r1, r5
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	9209      	str	r2, [sp, #36]	; 0x24
 8009b10:	f000 fa0c 	bl	8009f2c <_Bfree>
 8009b14:	9b07      	ldr	r3, [sp, #28]
 8009b16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b18:	9d04      	ldr	r5, [sp, #16]
 8009b1a:	ea43 0102 	orr.w	r1, r3, r2
 8009b1e:	9b06      	ldr	r3, [sp, #24]
 8009b20:	4319      	orrs	r1, r3
 8009b22:	d110      	bne.n	8009b46 <_dtoa_r+0xa7e>
 8009b24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009b28:	d029      	beq.n	8009b7e <_dtoa_r+0xab6>
 8009b2a:	9b05      	ldr	r3, [sp, #20]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	dd02      	ble.n	8009b36 <_dtoa_r+0xa6e>
 8009b30:	9b02      	ldr	r3, [sp, #8]
 8009b32:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009b36:	9b01      	ldr	r3, [sp, #4]
 8009b38:	f883 9000 	strb.w	r9, [r3]
 8009b3c:	e774      	b.n	8009a28 <_dtoa_r+0x960>
 8009b3e:	4638      	mov	r0, r7
 8009b40:	e7ba      	b.n	8009ab8 <_dtoa_r+0x9f0>
 8009b42:	2201      	movs	r2, #1
 8009b44:	e7e1      	b.n	8009b0a <_dtoa_r+0xa42>
 8009b46:	9b05      	ldr	r3, [sp, #20]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	db04      	blt.n	8009b56 <_dtoa_r+0xa8e>
 8009b4c:	9907      	ldr	r1, [sp, #28]
 8009b4e:	430b      	orrs	r3, r1
 8009b50:	9906      	ldr	r1, [sp, #24]
 8009b52:	430b      	orrs	r3, r1
 8009b54:	d120      	bne.n	8009b98 <_dtoa_r+0xad0>
 8009b56:	2a00      	cmp	r2, #0
 8009b58:	dded      	ble.n	8009b36 <_dtoa_r+0xa6e>
 8009b5a:	4651      	mov	r1, sl
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	4620      	mov	r0, r4
 8009b60:	f000 fbb4 	bl	800a2cc <__lshift>
 8009b64:	4631      	mov	r1, r6
 8009b66:	4682      	mov	sl, r0
 8009b68:	f000 fc1c 	bl	800a3a4 <__mcmp>
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	dc03      	bgt.n	8009b78 <_dtoa_r+0xab0>
 8009b70:	d1e1      	bne.n	8009b36 <_dtoa_r+0xa6e>
 8009b72:	f019 0f01 	tst.w	r9, #1
 8009b76:	d0de      	beq.n	8009b36 <_dtoa_r+0xa6e>
 8009b78:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009b7c:	d1d8      	bne.n	8009b30 <_dtoa_r+0xa68>
 8009b7e:	9a01      	ldr	r2, [sp, #4]
 8009b80:	2339      	movs	r3, #57	; 0x39
 8009b82:	7013      	strb	r3, [r2, #0]
 8009b84:	462b      	mov	r3, r5
 8009b86:	461d      	mov	r5, r3
 8009b88:	3b01      	subs	r3, #1
 8009b8a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009b8e:	2a39      	cmp	r2, #57	; 0x39
 8009b90:	d06c      	beq.n	8009c6c <_dtoa_r+0xba4>
 8009b92:	3201      	adds	r2, #1
 8009b94:	701a      	strb	r2, [r3, #0]
 8009b96:	e747      	b.n	8009a28 <_dtoa_r+0x960>
 8009b98:	2a00      	cmp	r2, #0
 8009b9a:	dd07      	ble.n	8009bac <_dtoa_r+0xae4>
 8009b9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009ba0:	d0ed      	beq.n	8009b7e <_dtoa_r+0xab6>
 8009ba2:	9a01      	ldr	r2, [sp, #4]
 8009ba4:	f109 0301 	add.w	r3, r9, #1
 8009ba8:	7013      	strb	r3, [r2, #0]
 8009baa:	e73d      	b.n	8009a28 <_dtoa_r+0x960>
 8009bac:	9b04      	ldr	r3, [sp, #16]
 8009bae:	9a08      	ldr	r2, [sp, #32]
 8009bb0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d043      	beq.n	8009c40 <_dtoa_r+0xb78>
 8009bb8:	4651      	mov	r1, sl
 8009bba:	2300      	movs	r3, #0
 8009bbc:	220a      	movs	r2, #10
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	f000 f9d6 	bl	8009f70 <__multadd>
 8009bc4:	45b8      	cmp	r8, r7
 8009bc6:	4682      	mov	sl, r0
 8009bc8:	f04f 0300 	mov.w	r3, #0
 8009bcc:	f04f 020a 	mov.w	r2, #10
 8009bd0:	4641      	mov	r1, r8
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	d107      	bne.n	8009be6 <_dtoa_r+0xb1e>
 8009bd6:	f000 f9cb 	bl	8009f70 <__multadd>
 8009bda:	4680      	mov	r8, r0
 8009bdc:	4607      	mov	r7, r0
 8009bde:	9b04      	ldr	r3, [sp, #16]
 8009be0:	3301      	adds	r3, #1
 8009be2:	9304      	str	r3, [sp, #16]
 8009be4:	e775      	b.n	8009ad2 <_dtoa_r+0xa0a>
 8009be6:	f000 f9c3 	bl	8009f70 <__multadd>
 8009bea:	4639      	mov	r1, r7
 8009bec:	4680      	mov	r8, r0
 8009bee:	2300      	movs	r3, #0
 8009bf0:	220a      	movs	r2, #10
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	f000 f9bc 	bl	8009f70 <__multadd>
 8009bf8:	4607      	mov	r7, r0
 8009bfa:	e7f0      	b.n	8009bde <_dtoa_r+0xb16>
 8009bfc:	9b04      	ldr	r3, [sp, #16]
 8009bfe:	9301      	str	r3, [sp, #4]
 8009c00:	9d00      	ldr	r5, [sp, #0]
 8009c02:	4631      	mov	r1, r6
 8009c04:	4650      	mov	r0, sl
 8009c06:	f7ff f9d4 	bl	8008fb2 <quorem>
 8009c0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009c0e:	9b00      	ldr	r3, [sp, #0]
 8009c10:	f805 9b01 	strb.w	r9, [r5], #1
 8009c14:	1aea      	subs	r2, r5, r3
 8009c16:	9b01      	ldr	r3, [sp, #4]
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	dd07      	ble.n	8009c2c <_dtoa_r+0xb64>
 8009c1c:	4651      	mov	r1, sl
 8009c1e:	2300      	movs	r3, #0
 8009c20:	220a      	movs	r2, #10
 8009c22:	4620      	mov	r0, r4
 8009c24:	f000 f9a4 	bl	8009f70 <__multadd>
 8009c28:	4682      	mov	sl, r0
 8009c2a:	e7ea      	b.n	8009c02 <_dtoa_r+0xb3a>
 8009c2c:	9b01      	ldr	r3, [sp, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	bfc8      	it	gt
 8009c32:	461d      	movgt	r5, r3
 8009c34:	9b00      	ldr	r3, [sp, #0]
 8009c36:	bfd8      	it	le
 8009c38:	2501      	movle	r5, #1
 8009c3a:	441d      	add	r5, r3
 8009c3c:	f04f 0800 	mov.w	r8, #0
 8009c40:	4651      	mov	r1, sl
 8009c42:	2201      	movs	r2, #1
 8009c44:	4620      	mov	r0, r4
 8009c46:	f000 fb41 	bl	800a2cc <__lshift>
 8009c4a:	4631      	mov	r1, r6
 8009c4c:	4682      	mov	sl, r0
 8009c4e:	f000 fba9 	bl	800a3a4 <__mcmp>
 8009c52:	2800      	cmp	r0, #0
 8009c54:	dc96      	bgt.n	8009b84 <_dtoa_r+0xabc>
 8009c56:	d102      	bne.n	8009c5e <_dtoa_r+0xb96>
 8009c58:	f019 0f01 	tst.w	r9, #1
 8009c5c:	d192      	bne.n	8009b84 <_dtoa_r+0xabc>
 8009c5e:	462b      	mov	r3, r5
 8009c60:	461d      	mov	r5, r3
 8009c62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c66:	2a30      	cmp	r2, #48	; 0x30
 8009c68:	d0fa      	beq.n	8009c60 <_dtoa_r+0xb98>
 8009c6a:	e6dd      	b.n	8009a28 <_dtoa_r+0x960>
 8009c6c:	9a00      	ldr	r2, [sp, #0]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d189      	bne.n	8009b86 <_dtoa_r+0xabe>
 8009c72:	f10b 0b01 	add.w	fp, fp, #1
 8009c76:	2331      	movs	r3, #49	; 0x31
 8009c78:	e796      	b.n	8009ba8 <_dtoa_r+0xae0>
 8009c7a:	4b0a      	ldr	r3, [pc, #40]	; (8009ca4 <_dtoa_r+0xbdc>)
 8009c7c:	f7ff ba99 	b.w	80091b2 <_dtoa_r+0xea>
 8009c80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	f47f aa6d 	bne.w	8009162 <_dtoa_r+0x9a>
 8009c88:	4b07      	ldr	r3, [pc, #28]	; (8009ca8 <_dtoa_r+0xbe0>)
 8009c8a:	f7ff ba92 	b.w	80091b2 <_dtoa_r+0xea>
 8009c8e:	9b01      	ldr	r3, [sp, #4]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	dcb5      	bgt.n	8009c00 <_dtoa_r+0xb38>
 8009c94:	9b07      	ldr	r3, [sp, #28]
 8009c96:	2b02      	cmp	r3, #2
 8009c98:	f73f aeb1 	bgt.w	80099fe <_dtoa_r+0x936>
 8009c9c:	e7b0      	b.n	8009c00 <_dtoa_r+0xb38>
 8009c9e:	bf00      	nop
 8009ca0:	0800b12c 	.word	0x0800b12c
 8009ca4:	0800b08c 	.word	0x0800b08c
 8009ca8:	0800b0b0 	.word	0x0800b0b0

08009cac <_free_r>:
 8009cac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cae:	2900      	cmp	r1, #0
 8009cb0:	d044      	beq.n	8009d3c <_free_r+0x90>
 8009cb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cb6:	9001      	str	r0, [sp, #4]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	f1a1 0404 	sub.w	r4, r1, #4
 8009cbe:	bfb8      	it	lt
 8009cc0:	18e4      	addlt	r4, r4, r3
 8009cc2:	f000 f8e7 	bl	8009e94 <__malloc_lock>
 8009cc6:	4a1e      	ldr	r2, [pc, #120]	; (8009d40 <_free_r+0x94>)
 8009cc8:	9801      	ldr	r0, [sp, #4]
 8009cca:	6813      	ldr	r3, [r2, #0]
 8009ccc:	b933      	cbnz	r3, 8009cdc <_free_r+0x30>
 8009cce:	6063      	str	r3, [r4, #4]
 8009cd0:	6014      	str	r4, [r2, #0]
 8009cd2:	b003      	add	sp, #12
 8009cd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cd8:	f000 b8e2 	b.w	8009ea0 <__malloc_unlock>
 8009cdc:	42a3      	cmp	r3, r4
 8009cde:	d908      	bls.n	8009cf2 <_free_r+0x46>
 8009ce0:	6825      	ldr	r5, [r4, #0]
 8009ce2:	1961      	adds	r1, r4, r5
 8009ce4:	428b      	cmp	r3, r1
 8009ce6:	bf01      	itttt	eq
 8009ce8:	6819      	ldreq	r1, [r3, #0]
 8009cea:	685b      	ldreq	r3, [r3, #4]
 8009cec:	1949      	addeq	r1, r1, r5
 8009cee:	6021      	streq	r1, [r4, #0]
 8009cf0:	e7ed      	b.n	8009cce <_free_r+0x22>
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	b10b      	cbz	r3, 8009cfc <_free_r+0x50>
 8009cf8:	42a3      	cmp	r3, r4
 8009cfa:	d9fa      	bls.n	8009cf2 <_free_r+0x46>
 8009cfc:	6811      	ldr	r1, [r2, #0]
 8009cfe:	1855      	adds	r5, r2, r1
 8009d00:	42a5      	cmp	r5, r4
 8009d02:	d10b      	bne.n	8009d1c <_free_r+0x70>
 8009d04:	6824      	ldr	r4, [r4, #0]
 8009d06:	4421      	add	r1, r4
 8009d08:	1854      	adds	r4, r2, r1
 8009d0a:	42a3      	cmp	r3, r4
 8009d0c:	6011      	str	r1, [r2, #0]
 8009d0e:	d1e0      	bne.n	8009cd2 <_free_r+0x26>
 8009d10:	681c      	ldr	r4, [r3, #0]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	6053      	str	r3, [r2, #4]
 8009d16:	440c      	add	r4, r1
 8009d18:	6014      	str	r4, [r2, #0]
 8009d1a:	e7da      	b.n	8009cd2 <_free_r+0x26>
 8009d1c:	d902      	bls.n	8009d24 <_free_r+0x78>
 8009d1e:	230c      	movs	r3, #12
 8009d20:	6003      	str	r3, [r0, #0]
 8009d22:	e7d6      	b.n	8009cd2 <_free_r+0x26>
 8009d24:	6825      	ldr	r5, [r4, #0]
 8009d26:	1961      	adds	r1, r4, r5
 8009d28:	428b      	cmp	r3, r1
 8009d2a:	bf04      	itt	eq
 8009d2c:	6819      	ldreq	r1, [r3, #0]
 8009d2e:	685b      	ldreq	r3, [r3, #4]
 8009d30:	6063      	str	r3, [r4, #4]
 8009d32:	bf04      	itt	eq
 8009d34:	1949      	addeq	r1, r1, r5
 8009d36:	6021      	streq	r1, [r4, #0]
 8009d38:	6054      	str	r4, [r2, #4]
 8009d3a:	e7ca      	b.n	8009cd2 <_free_r+0x26>
 8009d3c:	b003      	add	sp, #12
 8009d3e:	bd30      	pop	{r4, r5, pc}
 8009d40:	20000534 	.word	0x20000534

08009d44 <malloc>:
 8009d44:	4b02      	ldr	r3, [pc, #8]	; (8009d50 <malloc+0xc>)
 8009d46:	4601      	mov	r1, r0
 8009d48:	6818      	ldr	r0, [r3, #0]
 8009d4a:	f000 b823 	b.w	8009d94 <_malloc_r>
 8009d4e:	bf00      	nop
 8009d50:	20000064 	.word	0x20000064

08009d54 <sbrk_aligned>:
 8009d54:	b570      	push	{r4, r5, r6, lr}
 8009d56:	4e0e      	ldr	r6, [pc, #56]	; (8009d90 <sbrk_aligned+0x3c>)
 8009d58:	460c      	mov	r4, r1
 8009d5a:	6831      	ldr	r1, [r6, #0]
 8009d5c:	4605      	mov	r5, r0
 8009d5e:	b911      	cbnz	r1, 8009d66 <sbrk_aligned+0x12>
 8009d60:	f000 fe96 	bl	800aa90 <_sbrk_r>
 8009d64:	6030      	str	r0, [r6, #0]
 8009d66:	4621      	mov	r1, r4
 8009d68:	4628      	mov	r0, r5
 8009d6a:	f000 fe91 	bl	800aa90 <_sbrk_r>
 8009d6e:	1c43      	adds	r3, r0, #1
 8009d70:	d00a      	beq.n	8009d88 <sbrk_aligned+0x34>
 8009d72:	1cc4      	adds	r4, r0, #3
 8009d74:	f024 0403 	bic.w	r4, r4, #3
 8009d78:	42a0      	cmp	r0, r4
 8009d7a:	d007      	beq.n	8009d8c <sbrk_aligned+0x38>
 8009d7c:	1a21      	subs	r1, r4, r0
 8009d7e:	4628      	mov	r0, r5
 8009d80:	f000 fe86 	bl	800aa90 <_sbrk_r>
 8009d84:	3001      	adds	r0, #1
 8009d86:	d101      	bne.n	8009d8c <sbrk_aligned+0x38>
 8009d88:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	bd70      	pop	{r4, r5, r6, pc}
 8009d90:	20000538 	.word	0x20000538

08009d94 <_malloc_r>:
 8009d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d98:	1ccd      	adds	r5, r1, #3
 8009d9a:	f025 0503 	bic.w	r5, r5, #3
 8009d9e:	3508      	adds	r5, #8
 8009da0:	2d0c      	cmp	r5, #12
 8009da2:	bf38      	it	cc
 8009da4:	250c      	movcc	r5, #12
 8009da6:	2d00      	cmp	r5, #0
 8009da8:	4607      	mov	r7, r0
 8009daa:	db01      	blt.n	8009db0 <_malloc_r+0x1c>
 8009dac:	42a9      	cmp	r1, r5
 8009dae:	d905      	bls.n	8009dbc <_malloc_r+0x28>
 8009db0:	230c      	movs	r3, #12
 8009db2:	603b      	str	r3, [r7, #0]
 8009db4:	2600      	movs	r6, #0
 8009db6:	4630      	mov	r0, r6
 8009db8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dbc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009e90 <_malloc_r+0xfc>
 8009dc0:	f000 f868 	bl	8009e94 <__malloc_lock>
 8009dc4:	f8d8 3000 	ldr.w	r3, [r8]
 8009dc8:	461c      	mov	r4, r3
 8009dca:	bb5c      	cbnz	r4, 8009e24 <_malloc_r+0x90>
 8009dcc:	4629      	mov	r1, r5
 8009dce:	4638      	mov	r0, r7
 8009dd0:	f7ff ffc0 	bl	8009d54 <sbrk_aligned>
 8009dd4:	1c43      	adds	r3, r0, #1
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	d155      	bne.n	8009e86 <_malloc_r+0xf2>
 8009dda:	f8d8 4000 	ldr.w	r4, [r8]
 8009dde:	4626      	mov	r6, r4
 8009de0:	2e00      	cmp	r6, #0
 8009de2:	d145      	bne.n	8009e70 <_malloc_r+0xdc>
 8009de4:	2c00      	cmp	r4, #0
 8009de6:	d048      	beq.n	8009e7a <_malloc_r+0xe6>
 8009de8:	6823      	ldr	r3, [r4, #0]
 8009dea:	4631      	mov	r1, r6
 8009dec:	4638      	mov	r0, r7
 8009dee:	eb04 0903 	add.w	r9, r4, r3
 8009df2:	f000 fe4d 	bl	800aa90 <_sbrk_r>
 8009df6:	4581      	cmp	r9, r0
 8009df8:	d13f      	bne.n	8009e7a <_malloc_r+0xe6>
 8009dfa:	6821      	ldr	r1, [r4, #0]
 8009dfc:	1a6d      	subs	r5, r5, r1
 8009dfe:	4629      	mov	r1, r5
 8009e00:	4638      	mov	r0, r7
 8009e02:	f7ff ffa7 	bl	8009d54 <sbrk_aligned>
 8009e06:	3001      	adds	r0, #1
 8009e08:	d037      	beq.n	8009e7a <_malloc_r+0xe6>
 8009e0a:	6823      	ldr	r3, [r4, #0]
 8009e0c:	442b      	add	r3, r5
 8009e0e:	6023      	str	r3, [r4, #0]
 8009e10:	f8d8 3000 	ldr.w	r3, [r8]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d038      	beq.n	8009e8a <_malloc_r+0xf6>
 8009e18:	685a      	ldr	r2, [r3, #4]
 8009e1a:	42a2      	cmp	r2, r4
 8009e1c:	d12b      	bne.n	8009e76 <_malloc_r+0xe2>
 8009e1e:	2200      	movs	r2, #0
 8009e20:	605a      	str	r2, [r3, #4]
 8009e22:	e00f      	b.n	8009e44 <_malloc_r+0xb0>
 8009e24:	6822      	ldr	r2, [r4, #0]
 8009e26:	1b52      	subs	r2, r2, r5
 8009e28:	d41f      	bmi.n	8009e6a <_malloc_r+0xd6>
 8009e2a:	2a0b      	cmp	r2, #11
 8009e2c:	d917      	bls.n	8009e5e <_malloc_r+0xca>
 8009e2e:	1961      	adds	r1, r4, r5
 8009e30:	42a3      	cmp	r3, r4
 8009e32:	6025      	str	r5, [r4, #0]
 8009e34:	bf18      	it	ne
 8009e36:	6059      	strne	r1, [r3, #4]
 8009e38:	6863      	ldr	r3, [r4, #4]
 8009e3a:	bf08      	it	eq
 8009e3c:	f8c8 1000 	streq.w	r1, [r8]
 8009e40:	5162      	str	r2, [r4, r5]
 8009e42:	604b      	str	r3, [r1, #4]
 8009e44:	4638      	mov	r0, r7
 8009e46:	f104 060b 	add.w	r6, r4, #11
 8009e4a:	f000 f829 	bl	8009ea0 <__malloc_unlock>
 8009e4e:	f026 0607 	bic.w	r6, r6, #7
 8009e52:	1d23      	adds	r3, r4, #4
 8009e54:	1af2      	subs	r2, r6, r3
 8009e56:	d0ae      	beq.n	8009db6 <_malloc_r+0x22>
 8009e58:	1b9b      	subs	r3, r3, r6
 8009e5a:	50a3      	str	r3, [r4, r2]
 8009e5c:	e7ab      	b.n	8009db6 <_malloc_r+0x22>
 8009e5e:	42a3      	cmp	r3, r4
 8009e60:	6862      	ldr	r2, [r4, #4]
 8009e62:	d1dd      	bne.n	8009e20 <_malloc_r+0x8c>
 8009e64:	f8c8 2000 	str.w	r2, [r8]
 8009e68:	e7ec      	b.n	8009e44 <_malloc_r+0xb0>
 8009e6a:	4623      	mov	r3, r4
 8009e6c:	6864      	ldr	r4, [r4, #4]
 8009e6e:	e7ac      	b.n	8009dca <_malloc_r+0x36>
 8009e70:	4634      	mov	r4, r6
 8009e72:	6876      	ldr	r6, [r6, #4]
 8009e74:	e7b4      	b.n	8009de0 <_malloc_r+0x4c>
 8009e76:	4613      	mov	r3, r2
 8009e78:	e7cc      	b.n	8009e14 <_malloc_r+0x80>
 8009e7a:	230c      	movs	r3, #12
 8009e7c:	603b      	str	r3, [r7, #0]
 8009e7e:	4638      	mov	r0, r7
 8009e80:	f000 f80e 	bl	8009ea0 <__malloc_unlock>
 8009e84:	e797      	b.n	8009db6 <_malloc_r+0x22>
 8009e86:	6025      	str	r5, [r4, #0]
 8009e88:	e7dc      	b.n	8009e44 <_malloc_r+0xb0>
 8009e8a:	605b      	str	r3, [r3, #4]
 8009e8c:	deff      	udf	#255	; 0xff
 8009e8e:	bf00      	nop
 8009e90:	20000534 	.word	0x20000534

08009e94 <__malloc_lock>:
 8009e94:	4801      	ldr	r0, [pc, #4]	; (8009e9c <__malloc_lock+0x8>)
 8009e96:	f7ff b87c 	b.w	8008f92 <__retarget_lock_acquire_recursive>
 8009e9a:	bf00      	nop
 8009e9c:	20000530 	.word	0x20000530

08009ea0 <__malloc_unlock>:
 8009ea0:	4801      	ldr	r0, [pc, #4]	; (8009ea8 <__malloc_unlock+0x8>)
 8009ea2:	f7ff b877 	b.w	8008f94 <__retarget_lock_release_recursive>
 8009ea6:	bf00      	nop
 8009ea8:	20000530 	.word	0x20000530

08009eac <_Balloc>:
 8009eac:	b570      	push	{r4, r5, r6, lr}
 8009eae:	69c6      	ldr	r6, [r0, #28]
 8009eb0:	4604      	mov	r4, r0
 8009eb2:	460d      	mov	r5, r1
 8009eb4:	b976      	cbnz	r6, 8009ed4 <_Balloc+0x28>
 8009eb6:	2010      	movs	r0, #16
 8009eb8:	f7ff ff44 	bl	8009d44 <malloc>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	61e0      	str	r0, [r4, #28]
 8009ec0:	b920      	cbnz	r0, 8009ecc <_Balloc+0x20>
 8009ec2:	4b18      	ldr	r3, [pc, #96]	; (8009f24 <_Balloc+0x78>)
 8009ec4:	4818      	ldr	r0, [pc, #96]	; (8009f28 <_Balloc+0x7c>)
 8009ec6:	216b      	movs	r1, #107	; 0x6b
 8009ec8:	f000 fdf2 	bl	800aab0 <__assert_func>
 8009ecc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ed0:	6006      	str	r6, [r0, #0]
 8009ed2:	60c6      	str	r6, [r0, #12]
 8009ed4:	69e6      	ldr	r6, [r4, #28]
 8009ed6:	68f3      	ldr	r3, [r6, #12]
 8009ed8:	b183      	cbz	r3, 8009efc <_Balloc+0x50>
 8009eda:	69e3      	ldr	r3, [r4, #28]
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ee2:	b9b8      	cbnz	r0, 8009f14 <_Balloc+0x68>
 8009ee4:	2101      	movs	r1, #1
 8009ee6:	fa01 f605 	lsl.w	r6, r1, r5
 8009eea:	1d72      	adds	r2, r6, #5
 8009eec:	0092      	lsls	r2, r2, #2
 8009eee:	4620      	mov	r0, r4
 8009ef0:	f000 fdfc 	bl	800aaec <_calloc_r>
 8009ef4:	b160      	cbz	r0, 8009f10 <_Balloc+0x64>
 8009ef6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009efa:	e00e      	b.n	8009f1a <_Balloc+0x6e>
 8009efc:	2221      	movs	r2, #33	; 0x21
 8009efe:	2104      	movs	r1, #4
 8009f00:	4620      	mov	r0, r4
 8009f02:	f000 fdf3 	bl	800aaec <_calloc_r>
 8009f06:	69e3      	ldr	r3, [r4, #28]
 8009f08:	60f0      	str	r0, [r6, #12]
 8009f0a:	68db      	ldr	r3, [r3, #12]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d1e4      	bne.n	8009eda <_Balloc+0x2e>
 8009f10:	2000      	movs	r0, #0
 8009f12:	bd70      	pop	{r4, r5, r6, pc}
 8009f14:	6802      	ldr	r2, [r0, #0]
 8009f16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f20:	e7f7      	b.n	8009f12 <_Balloc+0x66>
 8009f22:	bf00      	nop
 8009f24:	0800b0bd 	.word	0x0800b0bd
 8009f28:	0800b13d 	.word	0x0800b13d

08009f2c <_Bfree>:
 8009f2c:	b570      	push	{r4, r5, r6, lr}
 8009f2e:	69c6      	ldr	r6, [r0, #28]
 8009f30:	4605      	mov	r5, r0
 8009f32:	460c      	mov	r4, r1
 8009f34:	b976      	cbnz	r6, 8009f54 <_Bfree+0x28>
 8009f36:	2010      	movs	r0, #16
 8009f38:	f7ff ff04 	bl	8009d44 <malloc>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	61e8      	str	r0, [r5, #28]
 8009f40:	b920      	cbnz	r0, 8009f4c <_Bfree+0x20>
 8009f42:	4b09      	ldr	r3, [pc, #36]	; (8009f68 <_Bfree+0x3c>)
 8009f44:	4809      	ldr	r0, [pc, #36]	; (8009f6c <_Bfree+0x40>)
 8009f46:	218f      	movs	r1, #143	; 0x8f
 8009f48:	f000 fdb2 	bl	800aab0 <__assert_func>
 8009f4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f50:	6006      	str	r6, [r0, #0]
 8009f52:	60c6      	str	r6, [r0, #12]
 8009f54:	b13c      	cbz	r4, 8009f66 <_Bfree+0x3a>
 8009f56:	69eb      	ldr	r3, [r5, #28]
 8009f58:	6862      	ldr	r2, [r4, #4]
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f60:	6021      	str	r1, [r4, #0]
 8009f62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f66:	bd70      	pop	{r4, r5, r6, pc}
 8009f68:	0800b0bd 	.word	0x0800b0bd
 8009f6c:	0800b13d 	.word	0x0800b13d

08009f70 <__multadd>:
 8009f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f74:	690d      	ldr	r5, [r1, #16]
 8009f76:	4607      	mov	r7, r0
 8009f78:	460c      	mov	r4, r1
 8009f7a:	461e      	mov	r6, r3
 8009f7c:	f101 0c14 	add.w	ip, r1, #20
 8009f80:	2000      	movs	r0, #0
 8009f82:	f8dc 3000 	ldr.w	r3, [ip]
 8009f86:	b299      	uxth	r1, r3
 8009f88:	fb02 6101 	mla	r1, r2, r1, r6
 8009f8c:	0c1e      	lsrs	r6, r3, #16
 8009f8e:	0c0b      	lsrs	r3, r1, #16
 8009f90:	fb02 3306 	mla	r3, r2, r6, r3
 8009f94:	b289      	uxth	r1, r1
 8009f96:	3001      	adds	r0, #1
 8009f98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f9c:	4285      	cmp	r5, r0
 8009f9e:	f84c 1b04 	str.w	r1, [ip], #4
 8009fa2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009fa6:	dcec      	bgt.n	8009f82 <__multadd+0x12>
 8009fa8:	b30e      	cbz	r6, 8009fee <__multadd+0x7e>
 8009faa:	68a3      	ldr	r3, [r4, #8]
 8009fac:	42ab      	cmp	r3, r5
 8009fae:	dc19      	bgt.n	8009fe4 <__multadd+0x74>
 8009fb0:	6861      	ldr	r1, [r4, #4]
 8009fb2:	4638      	mov	r0, r7
 8009fb4:	3101      	adds	r1, #1
 8009fb6:	f7ff ff79 	bl	8009eac <_Balloc>
 8009fba:	4680      	mov	r8, r0
 8009fbc:	b928      	cbnz	r0, 8009fca <__multadd+0x5a>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	4b0c      	ldr	r3, [pc, #48]	; (8009ff4 <__multadd+0x84>)
 8009fc2:	480d      	ldr	r0, [pc, #52]	; (8009ff8 <__multadd+0x88>)
 8009fc4:	21ba      	movs	r1, #186	; 0xba
 8009fc6:	f000 fd73 	bl	800aab0 <__assert_func>
 8009fca:	6922      	ldr	r2, [r4, #16]
 8009fcc:	3202      	adds	r2, #2
 8009fce:	f104 010c 	add.w	r1, r4, #12
 8009fd2:	0092      	lsls	r2, r2, #2
 8009fd4:	300c      	adds	r0, #12
 8009fd6:	f7fe ffde 	bl	8008f96 <memcpy>
 8009fda:	4621      	mov	r1, r4
 8009fdc:	4638      	mov	r0, r7
 8009fde:	f7ff ffa5 	bl	8009f2c <_Bfree>
 8009fe2:	4644      	mov	r4, r8
 8009fe4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009fe8:	3501      	adds	r5, #1
 8009fea:	615e      	str	r6, [r3, #20]
 8009fec:	6125      	str	r5, [r4, #16]
 8009fee:	4620      	mov	r0, r4
 8009ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ff4:	0800b12c 	.word	0x0800b12c
 8009ff8:	0800b13d 	.word	0x0800b13d

08009ffc <__hi0bits>:
 8009ffc:	0c03      	lsrs	r3, r0, #16
 8009ffe:	041b      	lsls	r3, r3, #16
 800a000:	b9d3      	cbnz	r3, 800a038 <__hi0bits+0x3c>
 800a002:	0400      	lsls	r0, r0, #16
 800a004:	2310      	movs	r3, #16
 800a006:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a00a:	bf04      	itt	eq
 800a00c:	0200      	lsleq	r0, r0, #8
 800a00e:	3308      	addeq	r3, #8
 800a010:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a014:	bf04      	itt	eq
 800a016:	0100      	lsleq	r0, r0, #4
 800a018:	3304      	addeq	r3, #4
 800a01a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a01e:	bf04      	itt	eq
 800a020:	0080      	lsleq	r0, r0, #2
 800a022:	3302      	addeq	r3, #2
 800a024:	2800      	cmp	r0, #0
 800a026:	db05      	blt.n	800a034 <__hi0bits+0x38>
 800a028:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a02c:	f103 0301 	add.w	r3, r3, #1
 800a030:	bf08      	it	eq
 800a032:	2320      	moveq	r3, #32
 800a034:	4618      	mov	r0, r3
 800a036:	4770      	bx	lr
 800a038:	2300      	movs	r3, #0
 800a03a:	e7e4      	b.n	800a006 <__hi0bits+0xa>

0800a03c <__lo0bits>:
 800a03c:	6803      	ldr	r3, [r0, #0]
 800a03e:	f013 0207 	ands.w	r2, r3, #7
 800a042:	d00c      	beq.n	800a05e <__lo0bits+0x22>
 800a044:	07d9      	lsls	r1, r3, #31
 800a046:	d422      	bmi.n	800a08e <__lo0bits+0x52>
 800a048:	079a      	lsls	r2, r3, #30
 800a04a:	bf49      	itett	mi
 800a04c:	085b      	lsrmi	r3, r3, #1
 800a04e:	089b      	lsrpl	r3, r3, #2
 800a050:	6003      	strmi	r3, [r0, #0]
 800a052:	2201      	movmi	r2, #1
 800a054:	bf5c      	itt	pl
 800a056:	6003      	strpl	r3, [r0, #0]
 800a058:	2202      	movpl	r2, #2
 800a05a:	4610      	mov	r0, r2
 800a05c:	4770      	bx	lr
 800a05e:	b299      	uxth	r1, r3
 800a060:	b909      	cbnz	r1, 800a066 <__lo0bits+0x2a>
 800a062:	0c1b      	lsrs	r3, r3, #16
 800a064:	2210      	movs	r2, #16
 800a066:	b2d9      	uxtb	r1, r3
 800a068:	b909      	cbnz	r1, 800a06e <__lo0bits+0x32>
 800a06a:	3208      	adds	r2, #8
 800a06c:	0a1b      	lsrs	r3, r3, #8
 800a06e:	0719      	lsls	r1, r3, #28
 800a070:	bf04      	itt	eq
 800a072:	091b      	lsreq	r3, r3, #4
 800a074:	3204      	addeq	r2, #4
 800a076:	0799      	lsls	r1, r3, #30
 800a078:	bf04      	itt	eq
 800a07a:	089b      	lsreq	r3, r3, #2
 800a07c:	3202      	addeq	r2, #2
 800a07e:	07d9      	lsls	r1, r3, #31
 800a080:	d403      	bmi.n	800a08a <__lo0bits+0x4e>
 800a082:	085b      	lsrs	r3, r3, #1
 800a084:	f102 0201 	add.w	r2, r2, #1
 800a088:	d003      	beq.n	800a092 <__lo0bits+0x56>
 800a08a:	6003      	str	r3, [r0, #0]
 800a08c:	e7e5      	b.n	800a05a <__lo0bits+0x1e>
 800a08e:	2200      	movs	r2, #0
 800a090:	e7e3      	b.n	800a05a <__lo0bits+0x1e>
 800a092:	2220      	movs	r2, #32
 800a094:	e7e1      	b.n	800a05a <__lo0bits+0x1e>
	...

0800a098 <__i2b>:
 800a098:	b510      	push	{r4, lr}
 800a09a:	460c      	mov	r4, r1
 800a09c:	2101      	movs	r1, #1
 800a09e:	f7ff ff05 	bl	8009eac <_Balloc>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	b928      	cbnz	r0, 800a0b2 <__i2b+0x1a>
 800a0a6:	4b05      	ldr	r3, [pc, #20]	; (800a0bc <__i2b+0x24>)
 800a0a8:	4805      	ldr	r0, [pc, #20]	; (800a0c0 <__i2b+0x28>)
 800a0aa:	f240 1145 	movw	r1, #325	; 0x145
 800a0ae:	f000 fcff 	bl	800aab0 <__assert_func>
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	6144      	str	r4, [r0, #20]
 800a0b6:	6103      	str	r3, [r0, #16]
 800a0b8:	bd10      	pop	{r4, pc}
 800a0ba:	bf00      	nop
 800a0bc:	0800b12c 	.word	0x0800b12c
 800a0c0:	0800b13d 	.word	0x0800b13d

0800a0c4 <__multiply>:
 800a0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c8:	4691      	mov	r9, r2
 800a0ca:	690a      	ldr	r2, [r1, #16]
 800a0cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	bfb8      	it	lt
 800a0d4:	460b      	movlt	r3, r1
 800a0d6:	460c      	mov	r4, r1
 800a0d8:	bfbc      	itt	lt
 800a0da:	464c      	movlt	r4, r9
 800a0dc:	4699      	movlt	r9, r3
 800a0de:	6927      	ldr	r7, [r4, #16]
 800a0e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a0e4:	68a3      	ldr	r3, [r4, #8]
 800a0e6:	6861      	ldr	r1, [r4, #4]
 800a0e8:	eb07 060a 	add.w	r6, r7, sl
 800a0ec:	42b3      	cmp	r3, r6
 800a0ee:	b085      	sub	sp, #20
 800a0f0:	bfb8      	it	lt
 800a0f2:	3101      	addlt	r1, #1
 800a0f4:	f7ff feda 	bl	8009eac <_Balloc>
 800a0f8:	b930      	cbnz	r0, 800a108 <__multiply+0x44>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	4b44      	ldr	r3, [pc, #272]	; (800a210 <__multiply+0x14c>)
 800a0fe:	4845      	ldr	r0, [pc, #276]	; (800a214 <__multiply+0x150>)
 800a100:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a104:	f000 fcd4 	bl	800aab0 <__assert_func>
 800a108:	f100 0514 	add.w	r5, r0, #20
 800a10c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a110:	462b      	mov	r3, r5
 800a112:	2200      	movs	r2, #0
 800a114:	4543      	cmp	r3, r8
 800a116:	d321      	bcc.n	800a15c <__multiply+0x98>
 800a118:	f104 0314 	add.w	r3, r4, #20
 800a11c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a120:	f109 0314 	add.w	r3, r9, #20
 800a124:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a128:	9202      	str	r2, [sp, #8]
 800a12a:	1b3a      	subs	r2, r7, r4
 800a12c:	3a15      	subs	r2, #21
 800a12e:	f022 0203 	bic.w	r2, r2, #3
 800a132:	3204      	adds	r2, #4
 800a134:	f104 0115 	add.w	r1, r4, #21
 800a138:	428f      	cmp	r7, r1
 800a13a:	bf38      	it	cc
 800a13c:	2204      	movcc	r2, #4
 800a13e:	9201      	str	r2, [sp, #4]
 800a140:	9a02      	ldr	r2, [sp, #8]
 800a142:	9303      	str	r3, [sp, #12]
 800a144:	429a      	cmp	r2, r3
 800a146:	d80c      	bhi.n	800a162 <__multiply+0x9e>
 800a148:	2e00      	cmp	r6, #0
 800a14a:	dd03      	ble.n	800a154 <__multiply+0x90>
 800a14c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a150:	2b00      	cmp	r3, #0
 800a152:	d05b      	beq.n	800a20c <__multiply+0x148>
 800a154:	6106      	str	r6, [r0, #16]
 800a156:	b005      	add	sp, #20
 800a158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a15c:	f843 2b04 	str.w	r2, [r3], #4
 800a160:	e7d8      	b.n	800a114 <__multiply+0x50>
 800a162:	f8b3 a000 	ldrh.w	sl, [r3]
 800a166:	f1ba 0f00 	cmp.w	sl, #0
 800a16a:	d024      	beq.n	800a1b6 <__multiply+0xf2>
 800a16c:	f104 0e14 	add.w	lr, r4, #20
 800a170:	46a9      	mov	r9, r5
 800a172:	f04f 0c00 	mov.w	ip, #0
 800a176:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a17a:	f8d9 1000 	ldr.w	r1, [r9]
 800a17e:	fa1f fb82 	uxth.w	fp, r2
 800a182:	b289      	uxth	r1, r1
 800a184:	fb0a 110b 	mla	r1, sl, fp, r1
 800a188:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a18c:	f8d9 2000 	ldr.w	r2, [r9]
 800a190:	4461      	add	r1, ip
 800a192:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a196:	fb0a c20b 	mla	r2, sl, fp, ip
 800a19a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a19e:	b289      	uxth	r1, r1
 800a1a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a1a4:	4577      	cmp	r7, lr
 800a1a6:	f849 1b04 	str.w	r1, [r9], #4
 800a1aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1ae:	d8e2      	bhi.n	800a176 <__multiply+0xb2>
 800a1b0:	9a01      	ldr	r2, [sp, #4]
 800a1b2:	f845 c002 	str.w	ip, [r5, r2]
 800a1b6:	9a03      	ldr	r2, [sp, #12]
 800a1b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a1bc:	3304      	adds	r3, #4
 800a1be:	f1b9 0f00 	cmp.w	r9, #0
 800a1c2:	d021      	beq.n	800a208 <__multiply+0x144>
 800a1c4:	6829      	ldr	r1, [r5, #0]
 800a1c6:	f104 0c14 	add.w	ip, r4, #20
 800a1ca:	46ae      	mov	lr, r5
 800a1cc:	f04f 0a00 	mov.w	sl, #0
 800a1d0:	f8bc b000 	ldrh.w	fp, [ip]
 800a1d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a1d8:	fb09 220b 	mla	r2, r9, fp, r2
 800a1dc:	4452      	add	r2, sl
 800a1de:	b289      	uxth	r1, r1
 800a1e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a1e4:	f84e 1b04 	str.w	r1, [lr], #4
 800a1e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a1ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a1f0:	f8be 1000 	ldrh.w	r1, [lr]
 800a1f4:	fb09 110a 	mla	r1, r9, sl, r1
 800a1f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a1fc:	4567      	cmp	r7, ip
 800a1fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a202:	d8e5      	bhi.n	800a1d0 <__multiply+0x10c>
 800a204:	9a01      	ldr	r2, [sp, #4]
 800a206:	50a9      	str	r1, [r5, r2]
 800a208:	3504      	adds	r5, #4
 800a20a:	e799      	b.n	800a140 <__multiply+0x7c>
 800a20c:	3e01      	subs	r6, #1
 800a20e:	e79b      	b.n	800a148 <__multiply+0x84>
 800a210:	0800b12c 	.word	0x0800b12c
 800a214:	0800b13d 	.word	0x0800b13d

0800a218 <__pow5mult>:
 800a218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a21c:	4615      	mov	r5, r2
 800a21e:	f012 0203 	ands.w	r2, r2, #3
 800a222:	4606      	mov	r6, r0
 800a224:	460f      	mov	r7, r1
 800a226:	d007      	beq.n	800a238 <__pow5mult+0x20>
 800a228:	4c25      	ldr	r4, [pc, #148]	; (800a2c0 <__pow5mult+0xa8>)
 800a22a:	3a01      	subs	r2, #1
 800a22c:	2300      	movs	r3, #0
 800a22e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a232:	f7ff fe9d 	bl	8009f70 <__multadd>
 800a236:	4607      	mov	r7, r0
 800a238:	10ad      	asrs	r5, r5, #2
 800a23a:	d03d      	beq.n	800a2b8 <__pow5mult+0xa0>
 800a23c:	69f4      	ldr	r4, [r6, #28]
 800a23e:	b97c      	cbnz	r4, 800a260 <__pow5mult+0x48>
 800a240:	2010      	movs	r0, #16
 800a242:	f7ff fd7f 	bl	8009d44 <malloc>
 800a246:	4602      	mov	r2, r0
 800a248:	61f0      	str	r0, [r6, #28]
 800a24a:	b928      	cbnz	r0, 800a258 <__pow5mult+0x40>
 800a24c:	4b1d      	ldr	r3, [pc, #116]	; (800a2c4 <__pow5mult+0xac>)
 800a24e:	481e      	ldr	r0, [pc, #120]	; (800a2c8 <__pow5mult+0xb0>)
 800a250:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a254:	f000 fc2c 	bl	800aab0 <__assert_func>
 800a258:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a25c:	6004      	str	r4, [r0, #0]
 800a25e:	60c4      	str	r4, [r0, #12]
 800a260:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a264:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a268:	b94c      	cbnz	r4, 800a27e <__pow5mult+0x66>
 800a26a:	f240 2171 	movw	r1, #625	; 0x271
 800a26e:	4630      	mov	r0, r6
 800a270:	f7ff ff12 	bl	800a098 <__i2b>
 800a274:	2300      	movs	r3, #0
 800a276:	f8c8 0008 	str.w	r0, [r8, #8]
 800a27a:	4604      	mov	r4, r0
 800a27c:	6003      	str	r3, [r0, #0]
 800a27e:	f04f 0900 	mov.w	r9, #0
 800a282:	07eb      	lsls	r3, r5, #31
 800a284:	d50a      	bpl.n	800a29c <__pow5mult+0x84>
 800a286:	4639      	mov	r1, r7
 800a288:	4622      	mov	r2, r4
 800a28a:	4630      	mov	r0, r6
 800a28c:	f7ff ff1a 	bl	800a0c4 <__multiply>
 800a290:	4639      	mov	r1, r7
 800a292:	4680      	mov	r8, r0
 800a294:	4630      	mov	r0, r6
 800a296:	f7ff fe49 	bl	8009f2c <_Bfree>
 800a29a:	4647      	mov	r7, r8
 800a29c:	106d      	asrs	r5, r5, #1
 800a29e:	d00b      	beq.n	800a2b8 <__pow5mult+0xa0>
 800a2a0:	6820      	ldr	r0, [r4, #0]
 800a2a2:	b938      	cbnz	r0, 800a2b4 <__pow5mult+0x9c>
 800a2a4:	4622      	mov	r2, r4
 800a2a6:	4621      	mov	r1, r4
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	f7ff ff0b 	bl	800a0c4 <__multiply>
 800a2ae:	6020      	str	r0, [r4, #0]
 800a2b0:	f8c0 9000 	str.w	r9, [r0]
 800a2b4:	4604      	mov	r4, r0
 800a2b6:	e7e4      	b.n	800a282 <__pow5mult+0x6a>
 800a2b8:	4638      	mov	r0, r7
 800a2ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2be:	bf00      	nop
 800a2c0:	0800b288 	.word	0x0800b288
 800a2c4:	0800b0bd 	.word	0x0800b0bd
 800a2c8:	0800b13d 	.word	0x0800b13d

0800a2cc <__lshift>:
 800a2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2d0:	460c      	mov	r4, r1
 800a2d2:	6849      	ldr	r1, [r1, #4]
 800a2d4:	6923      	ldr	r3, [r4, #16]
 800a2d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a2da:	68a3      	ldr	r3, [r4, #8]
 800a2dc:	4607      	mov	r7, r0
 800a2de:	4691      	mov	r9, r2
 800a2e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a2e4:	f108 0601 	add.w	r6, r8, #1
 800a2e8:	42b3      	cmp	r3, r6
 800a2ea:	db0b      	blt.n	800a304 <__lshift+0x38>
 800a2ec:	4638      	mov	r0, r7
 800a2ee:	f7ff fddd 	bl	8009eac <_Balloc>
 800a2f2:	4605      	mov	r5, r0
 800a2f4:	b948      	cbnz	r0, 800a30a <__lshift+0x3e>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	4b28      	ldr	r3, [pc, #160]	; (800a39c <__lshift+0xd0>)
 800a2fa:	4829      	ldr	r0, [pc, #164]	; (800a3a0 <__lshift+0xd4>)
 800a2fc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a300:	f000 fbd6 	bl	800aab0 <__assert_func>
 800a304:	3101      	adds	r1, #1
 800a306:	005b      	lsls	r3, r3, #1
 800a308:	e7ee      	b.n	800a2e8 <__lshift+0x1c>
 800a30a:	2300      	movs	r3, #0
 800a30c:	f100 0114 	add.w	r1, r0, #20
 800a310:	f100 0210 	add.w	r2, r0, #16
 800a314:	4618      	mov	r0, r3
 800a316:	4553      	cmp	r3, sl
 800a318:	db33      	blt.n	800a382 <__lshift+0xb6>
 800a31a:	6920      	ldr	r0, [r4, #16]
 800a31c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a320:	f104 0314 	add.w	r3, r4, #20
 800a324:	f019 091f 	ands.w	r9, r9, #31
 800a328:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a32c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a330:	d02b      	beq.n	800a38a <__lshift+0xbe>
 800a332:	f1c9 0e20 	rsb	lr, r9, #32
 800a336:	468a      	mov	sl, r1
 800a338:	2200      	movs	r2, #0
 800a33a:	6818      	ldr	r0, [r3, #0]
 800a33c:	fa00 f009 	lsl.w	r0, r0, r9
 800a340:	4310      	orrs	r0, r2
 800a342:	f84a 0b04 	str.w	r0, [sl], #4
 800a346:	f853 2b04 	ldr.w	r2, [r3], #4
 800a34a:	459c      	cmp	ip, r3
 800a34c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a350:	d8f3      	bhi.n	800a33a <__lshift+0x6e>
 800a352:	ebac 0304 	sub.w	r3, ip, r4
 800a356:	3b15      	subs	r3, #21
 800a358:	f023 0303 	bic.w	r3, r3, #3
 800a35c:	3304      	adds	r3, #4
 800a35e:	f104 0015 	add.w	r0, r4, #21
 800a362:	4584      	cmp	ip, r0
 800a364:	bf38      	it	cc
 800a366:	2304      	movcc	r3, #4
 800a368:	50ca      	str	r2, [r1, r3]
 800a36a:	b10a      	cbz	r2, 800a370 <__lshift+0xa4>
 800a36c:	f108 0602 	add.w	r6, r8, #2
 800a370:	3e01      	subs	r6, #1
 800a372:	4638      	mov	r0, r7
 800a374:	612e      	str	r6, [r5, #16]
 800a376:	4621      	mov	r1, r4
 800a378:	f7ff fdd8 	bl	8009f2c <_Bfree>
 800a37c:	4628      	mov	r0, r5
 800a37e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a382:	f842 0f04 	str.w	r0, [r2, #4]!
 800a386:	3301      	adds	r3, #1
 800a388:	e7c5      	b.n	800a316 <__lshift+0x4a>
 800a38a:	3904      	subs	r1, #4
 800a38c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a390:	f841 2f04 	str.w	r2, [r1, #4]!
 800a394:	459c      	cmp	ip, r3
 800a396:	d8f9      	bhi.n	800a38c <__lshift+0xc0>
 800a398:	e7ea      	b.n	800a370 <__lshift+0xa4>
 800a39a:	bf00      	nop
 800a39c:	0800b12c 	.word	0x0800b12c
 800a3a0:	0800b13d 	.word	0x0800b13d

0800a3a4 <__mcmp>:
 800a3a4:	b530      	push	{r4, r5, lr}
 800a3a6:	6902      	ldr	r2, [r0, #16]
 800a3a8:	690c      	ldr	r4, [r1, #16]
 800a3aa:	1b12      	subs	r2, r2, r4
 800a3ac:	d10e      	bne.n	800a3cc <__mcmp+0x28>
 800a3ae:	f100 0314 	add.w	r3, r0, #20
 800a3b2:	3114      	adds	r1, #20
 800a3b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a3b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a3bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a3c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a3c4:	42a5      	cmp	r5, r4
 800a3c6:	d003      	beq.n	800a3d0 <__mcmp+0x2c>
 800a3c8:	d305      	bcc.n	800a3d6 <__mcmp+0x32>
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	4610      	mov	r0, r2
 800a3ce:	bd30      	pop	{r4, r5, pc}
 800a3d0:	4283      	cmp	r3, r0
 800a3d2:	d3f3      	bcc.n	800a3bc <__mcmp+0x18>
 800a3d4:	e7fa      	b.n	800a3cc <__mcmp+0x28>
 800a3d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3da:	e7f7      	b.n	800a3cc <__mcmp+0x28>

0800a3dc <__mdiff>:
 800a3dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e0:	460c      	mov	r4, r1
 800a3e2:	4606      	mov	r6, r0
 800a3e4:	4611      	mov	r1, r2
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	4690      	mov	r8, r2
 800a3ea:	f7ff ffdb 	bl	800a3a4 <__mcmp>
 800a3ee:	1e05      	subs	r5, r0, #0
 800a3f0:	d110      	bne.n	800a414 <__mdiff+0x38>
 800a3f2:	4629      	mov	r1, r5
 800a3f4:	4630      	mov	r0, r6
 800a3f6:	f7ff fd59 	bl	8009eac <_Balloc>
 800a3fa:	b930      	cbnz	r0, 800a40a <__mdiff+0x2e>
 800a3fc:	4b3a      	ldr	r3, [pc, #232]	; (800a4e8 <__mdiff+0x10c>)
 800a3fe:	4602      	mov	r2, r0
 800a400:	f240 2137 	movw	r1, #567	; 0x237
 800a404:	4839      	ldr	r0, [pc, #228]	; (800a4ec <__mdiff+0x110>)
 800a406:	f000 fb53 	bl	800aab0 <__assert_func>
 800a40a:	2301      	movs	r3, #1
 800a40c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a410:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a414:	bfa4      	itt	ge
 800a416:	4643      	movge	r3, r8
 800a418:	46a0      	movge	r8, r4
 800a41a:	4630      	mov	r0, r6
 800a41c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a420:	bfa6      	itte	ge
 800a422:	461c      	movge	r4, r3
 800a424:	2500      	movge	r5, #0
 800a426:	2501      	movlt	r5, #1
 800a428:	f7ff fd40 	bl	8009eac <_Balloc>
 800a42c:	b920      	cbnz	r0, 800a438 <__mdiff+0x5c>
 800a42e:	4b2e      	ldr	r3, [pc, #184]	; (800a4e8 <__mdiff+0x10c>)
 800a430:	4602      	mov	r2, r0
 800a432:	f240 2145 	movw	r1, #581	; 0x245
 800a436:	e7e5      	b.n	800a404 <__mdiff+0x28>
 800a438:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a43c:	6926      	ldr	r6, [r4, #16]
 800a43e:	60c5      	str	r5, [r0, #12]
 800a440:	f104 0914 	add.w	r9, r4, #20
 800a444:	f108 0514 	add.w	r5, r8, #20
 800a448:	f100 0e14 	add.w	lr, r0, #20
 800a44c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a450:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a454:	f108 0210 	add.w	r2, r8, #16
 800a458:	46f2      	mov	sl, lr
 800a45a:	2100      	movs	r1, #0
 800a45c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a460:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a464:	fa11 f88b 	uxtah	r8, r1, fp
 800a468:	b299      	uxth	r1, r3
 800a46a:	0c1b      	lsrs	r3, r3, #16
 800a46c:	eba8 0801 	sub.w	r8, r8, r1
 800a470:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a474:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a478:	fa1f f888 	uxth.w	r8, r8
 800a47c:	1419      	asrs	r1, r3, #16
 800a47e:	454e      	cmp	r6, r9
 800a480:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a484:	f84a 3b04 	str.w	r3, [sl], #4
 800a488:	d8e8      	bhi.n	800a45c <__mdiff+0x80>
 800a48a:	1b33      	subs	r3, r6, r4
 800a48c:	3b15      	subs	r3, #21
 800a48e:	f023 0303 	bic.w	r3, r3, #3
 800a492:	3304      	adds	r3, #4
 800a494:	3415      	adds	r4, #21
 800a496:	42a6      	cmp	r6, r4
 800a498:	bf38      	it	cc
 800a49a:	2304      	movcc	r3, #4
 800a49c:	441d      	add	r5, r3
 800a49e:	4473      	add	r3, lr
 800a4a0:	469e      	mov	lr, r3
 800a4a2:	462e      	mov	r6, r5
 800a4a4:	4566      	cmp	r6, ip
 800a4a6:	d30e      	bcc.n	800a4c6 <__mdiff+0xea>
 800a4a8:	f10c 0203 	add.w	r2, ip, #3
 800a4ac:	1b52      	subs	r2, r2, r5
 800a4ae:	f022 0203 	bic.w	r2, r2, #3
 800a4b2:	3d03      	subs	r5, #3
 800a4b4:	45ac      	cmp	ip, r5
 800a4b6:	bf38      	it	cc
 800a4b8:	2200      	movcc	r2, #0
 800a4ba:	4413      	add	r3, r2
 800a4bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a4c0:	b17a      	cbz	r2, 800a4e2 <__mdiff+0x106>
 800a4c2:	6107      	str	r7, [r0, #16]
 800a4c4:	e7a4      	b.n	800a410 <__mdiff+0x34>
 800a4c6:	f856 8b04 	ldr.w	r8, [r6], #4
 800a4ca:	fa11 f288 	uxtah	r2, r1, r8
 800a4ce:	1414      	asrs	r4, r2, #16
 800a4d0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a4d4:	b292      	uxth	r2, r2
 800a4d6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a4da:	f84e 2b04 	str.w	r2, [lr], #4
 800a4de:	1421      	asrs	r1, r4, #16
 800a4e0:	e7e0      	b.n	800a4a4 <__mdiff+0xc8>
 800a4e2:	3f01      	subs	r7, #1
 800a4e4:	e7ea      	b.n	800a4bc <__mdiff+0xe0>
 800a4e6:	bf00      	nop
 800a4e8:	0800b12c 	.word	0x0800b12c
 800a4ec:	0800b13d 	.word	0x0800b13d

0800a4f0 <__d2b>:
 800a4f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a4f4:	460f      	mov	r7, r1
 800a4f6:	2101      	movs	r1, #1
 800a4f8:	ec59 8b10 	vmov	r8, r9, d0
 800a4fc:	4616      	mov	r6, r2
 800a4fe:	f7ff fcd5 	bl	8009eac <_Balloc>
 800a502:	4604      	mov	r4, r0
 800a504:	b930      	cbnz	r0, 800a514 <__d2b+0x24>
 800a506:	4602      	mov	r2, r0
 800a508:	4b24      	ldr	r3, [pc, #144]	; (800a59c <__d2b+0xac>)
 800a50a:	4825      	ldr	r0, [pc, #148]	; (800a5a0 <__d2b+0xb0>)
 800a50c:	f240 310f 	movw	r1, #783	; 0x30f
 800a510:	f000 face 	bl	800aab0 <__assert_func>
 800a514:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a518:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a51c:	bb2d      	cbnz	r5, 800a56a <__d2b+0x7a>
 800a51e:	9301      	str	r3, [sp, #4]
 800a520:	f1b8 0300 	subs.w	r3, r8, #0
 800a524:	d026      	beq.n	800a574 <__d2b+0x84>
 800a526:	4668      	mov	r0, sp
 800a528:	9300      	str	r3, [sp, #0]
 800a52a:	f7ff fd87 	bl	800a03c <__lo0bits>
 800a52e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a532:	b1e8      	cbz	r0, 800a570 <__d2b+0x80>
 800a534:	f1c0 0320 	rsb	r3, r0, #32
 800a538:	fa02 f303 	lsl.w	r3, r2, r3
 800a53c:	430b      	orrs	r3, r1
 800a53e:	40c2      	lsrs	r2, r0
 800a540:	6163      	str	r3, [r4, #20]
 800a542:	9201      	str	r2, [sp, #4]
 800a544:	9b01      	ldr	r3, [sp, #4]
 800a546:	61a3      	str	r3, [r4, #24]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	bf14      	ite	ne
 800a54c:	2202      	movne	r2, #2
 800a54e:	2201      	moveq	r2, #1
 800a550:	6122      	str	r2, [r4, #16]
 800a552:	b1bd      	cbz	r5, 800a584 <__d2b+0x94>
 800a554:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a558:	4405      	add	r5, r0
 800a55a:	603d      	str	r5, [r7, #0]
 800a55c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a560:	6030      	str	r0, [r6, #0]
 800a562:	4620      	mov	r0, r4
 800a564:	b003      	add	sp, #12
 800a566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a56a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a56e:	e7d6      	b.n	800a51e <__d2b+0x2e>
 800a570:	6161      	str	r1, [r4, #20]
 800a572:	e7e7      	b.n	800a544 <__d2b+0x54>
 800a574:	a801      	add	r0, sp, #4
 800a576:	f7ff fd61 	bl	800a03c <__lo0bits>
 800a57a:	9b01      	ldr	r3, [sp, #4]
 800a57c:	6163      	str	r3, [r4, #20]
 800a57e:	3020      	adds	r0, #32
 800a580:	2201      	movs	r2, #1
 800a582:	e7e5      	b.n	800a550 <__d2b+0x60>
 800a584:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a588:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a58c:	6038      	str	r0, [r7, #0]
 800a58e:	6918      	ldr	r0, [r3, #16]
 800a590:	f7ff fd34 	bl	8009ffc <__hi0bits>
 800a594:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a598:	e7e2      	b.n	800a560 <__d2b+0x70>
 800a59a:	bf00      	nop
 800a59c:	0800b12c 	.word	0x0800b12c
 800a5a0:	0800b13d 	.word	0x0800b13d

0800a5a4 <__sfputc_r>:
 800a5a4:	6893      	ldr	r3, [r2, #8]
 800a5a6:	3b01      	subs	r3, #1
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	b410      	push	{r4}
 800a5ac:	6093      	str	r3, [r2, #8]
 800a5ae:	da08      	bge.n	800a5c2 <__sfputc_r+0x1e>
 800a5b0:	6994      	ldr	r4, [r2, #24]
 800a5b2:	42a3      	cmp	r3, r4
 800a5b4:	db01      	blt.n	800a5ba <__sfputc_r+0x16>
 800a5b6:	290a      	cmp	r1, #10
 800a5b8:	d103      	bne.n	800a5c2 <__sfputc_r+0x1e>
 800a5ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5be:	f7fe bbd6 	b.w	8008d6e <__swbuf_r>
 800a5c2:	6813      	ldr	r3, [r2, #0]
 800a5c4:	1c58      	adds	r0, r3, #1
 800a5c6:	6010      	str	r0, [r2, #0]
 800a5c8:	7019      	strb	r1, [r3, #0]
 800a5ca:	4608      	mov	r0, r1
 800a5cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5d0:	4770      	bx	lr

0800a5d2 <__sfputs_r>:
 800a5d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d4:	4606      	mov	r6, r0
 800a5d6:	460f      	mov	r7, r1
 800a5d8:	4614      	mov	r4, r2
 800a5da:	18d5      	adds	r5, r2, r3
 800a5dc:	42ac      	cmp	r4, r5
 800a5de:	d101      	bne.n	800a5e4 <__sfputs_r+0x12>
 800a5e0:	2000      	movs	r0, #0
 800a5e2:	e007      	b.n	800a5f4 <__sfputs_r+0x22>
 800a5e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5e8:	463a      	mov	r2, r7
 800a5ea:	4630      	mov	r0, r6
 800a5ec:	f7ff ffda 	bl	800a5a4 <__sfputc_r>
 800a5f0:	1c43      	adds	r3, r0, #1
 800a5f2:	d1f3      	bne.n	800a5dc <__sfputs_r+0xa>
 800a5f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a5f8 <_vfiprintf_r>:
 800a5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5fc:	460d      	mov	r5, r1
 800a5fe:	b09d      	sub	sp, #116	; 0x74
 800a600:	4614      	mov	r4, r2
 800a602:	4698      	mov	r8, r3
 800a604:	4606      	mov	r6, r0
 800a606:	b118      	cbz	r0, 800a610 <_vfiprintf_r+0x18>
 800a608:	6a03      	ldr	r3, [r0, #32]
 800a60a:	b90b      	cbnz	r3, 800a610 <_vfiprintf_r+0x18>
 800a60c:	f7fe fa1a 	bl	8008a44 <__sinit>
 800a610:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a612:	07d9      	lsls	r1, r3, #31
 800a614:	d405      	bmi.n	800a622 <_vfiprintf_r+0x2a>
 800a616:	89ab      	ldrh	r3, [r5, #12]
 800a618:	059a      	lsls	r2, r3, #22
 800a61a:	d402      	bmi.n	800a622 <_vfiprintf_r+0x2a>
 800a61c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a61e:	f7fe fcb8 	bl	8008f92 <__retarget_lock_acquire_recursive>
 800a622:	89ab      	ldrh	r3, [r5, #12]
 800a624:	071b      	lsls	r3, r3, #28
 800a626:	d501      	bpl.n	800a62c <_vfiprintf_r+0x34>
 800a628:	692b      	ldr	r3, [r5, #16]
 800a62a:	b99b      	cbnz	r3, 800a654 <_vfiprintf_r+0x5c>
 800a62c:	4629      	mov	r1, r5
 800a62e:	4630      	mov	r0, r6
 800a630:	f7fe fbda 	bl	8008de8 <__swsetup_r>
 800a634:	b170      	cbz	r0, 800a654 <_vfiprintf_r+0x5c>
 800a636:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a638:	07dc      	lsls	r4, r3, #31
 800a63a:	d504      	bpl.n	800a646 <_vfiprintf_r+0x4e>
 800a63c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a640:	b01d      	add	sp, #116	; 0x74
 800a642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a646:	89ab      	ldrh	r3, [r5, #12]
 800a648:	0598      	lsls	r0, r3, #22
 800a64a:	d4f7      	bmi.n	800a63c <_vfiprintf_r+0x44>
 800a64c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a64e:	f7fe fca1 	bl	8008f94 <__retarget_lock_release_recursive>
 800a652:	e7f3      	b.n	800a63c <_vfiprintf_r+0x44>
 800a654:	2300      	movs	r3, #0
 800a656:	9309      	str	r3, [sp, #36]	; 0x24
 800a658:	2320      	movs	r3, #32
 800a65a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a65e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a662:	2330      	movs	r3, #48	; 0x30
 800a664:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a818 <_vfiprintf_r+0x220>
 800a668:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a66c:	f04f 0901 	mov.w	r9, #1
 800a670:	4623      	mov	r3, r4
 800a672:	469a      	mov	sl, r3
 800a674:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a678:	b10a      	cbz	r2, 800a67e <_vfiprintf_r+0x86>
 800a67a:	2a25      	cmp	r2, #37	; 0x25
 800a67c:	d1f9      	bne.n	800a672 <_vfiprintf_r+0x7a>
 800a67e:	ebba 0b04 	subs.w	fp, sl, r4
 800a682:	d00b      	beq.n	800a69c <_vfiprintf_r+0xa4>
 800a684:	465b      	mov	r3, fp
 800a686:	4622      	mov	r2, r4
 800a688:	4629      	mov	r1, r5
 800a68a:	4630      	mov	r0, r6
 800a68c:	f7ff ffa1 	bl	800a5d2 <__sfputs_r>
 800a690:	3001      	adds	r0, #1
 800a692:	f000 80a9 	beq.w	800a7e8 <_vfiprintf_r+0x1f0>
 800a696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a698:	445a      	add	r2, fp
 800a69a:	9209      	str	r2, [sp, #36]	; 0x24
 800a69c:	f89a 3000 	ldrb.w	r3, [sl]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	f000 80a1 	beq.w	800a7e8 <_vfiprintf_r+0x1f0>
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6b0:	f10a 0a01 	add.w	sl, sl, #1
 800a6b4:	9304      	str	r3, [sp, #16]
 800a6b6:	9307      	str	r3, [sp, #28]
 800a6b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6bc:	931a      	str	r3, [sp, #104]	; 0x68
 800a6be:	4654      	mov	r4, sl
 800a6c0:	2205      	movs	r2, #5
 800a6c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6c6:	4854      	ldr	r0, [pc, #336]	; (800a818 <_vfiprintf_r+0x220>)
 800a6c8:	f7f5 fd92 	bl	80001f0 <memchr>
 800a6cc:	9a04      	ldr	r2, [sp, #16]
 800a6ce:	b9d8      	cbnz	r0, 800a708 <_vfiprintf_r+0x110>
 800a6d0:	06d1      	lsls	r1, r2, #27
 800a6d2:	bf44      	itt	mi
 800a6d4:	2320      	movmi	r3, #32
 800a6d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6da:	0713      	lsls	r3, r2, #28
 800a6dc:	bf44      	itt	mi
 800a6de:	232b      	movmi	r3, #43	; 0x2b
 800a6e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a6e8:	2b2a      	cmp	r3, #42	; 0x2a
 800a6ea:	d015      	beq.n	800a718 <_vfiprintf_r+0x120>
 800a6ec:	9a07      	ldr	r2, [sp, #28]
 800a6ee:	4654      	mov	r4, sl
 800a6f0:	2000      	movs	r0, #0
 800a6f2:	f04f 0c0a 	mov.w	ip, #10
 800a6f6:	4621      	mov	r1, r4
 800a6f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6fc:	3b30      	subs	r3, #48	; 0x30
 800a6fe:	2b09      	cmp	r3, #9
 800a700:	d94d      	bls.n	800a79e <_vfiprintf_r+0x1a6>
 800a702:	b1b0      	cbz	r0, 800a732 <_vfiprintf_r+0x13a>
 800a704:	9207      	str	r2, [sp, #28]
 800a706:	e014      	b.n	800a732 <_vfiprintf_r+0x13a>
 800a708:	eba0 0308 	sub.w	r3, r0, r8
 800a70c:	fa09 f303 	lsl.w	r3, r9, r3
 800a710:	4313      	orrs	r3, r2
 800a712:	9304      	str	r3, [sp, #16]
 800a714:	46a2      	mov	sl, r4
 800a716:	e7d2      	b.n	800a6be <_vfiprintf_r+0xc6>
 800a718:	9b03      	ldr	r3, [sp, #12]
 800a71a:	1d19      	adds	r1, r3, #4
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	9103      	str	r1, [sp, #12]
 800a720:	2b00      	cmp	r3, #0
 800a722:	bfbb      	ittet	lt
 800a724:	425b      	neglt	r3, r3
 800a726:	f042 0202 	orrlt.w	r2, r2, #2
 800a72a:	9307      	strge	r3, [sp, #28]
 800a72c:	9307      	strlt	r3, [sp, #28]
 800a72e:	bfb8      	it	lt
 800a730:	9204      	strlt	r2, [sp, #16]
 800a732:	7823      	ldrb	r3, [r4, #0]
 800a734:	2b2e      	cmp	r3, #46	; 0x2e
 800a736:	d10c      	bne.n	800a752 <_vfiprintf_r+0x15a>
 800a738:	7863      	ldrb	r3, [r4, #1]
 800a73a:	2b2a      	cmp	r3, #42	; 0x2a
 800a73c:	d134      	bne.n	800a7a8 <_vfiprintf_r+0x1b0>
 800a73e:	9b03      	ldr	r3, [sp, #12]
 800a740:	1d1a      	adds	r2, r3, #4
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	9203      	str	r2, [sp, #12]
 800a746:	2b00      	cmp	r3, #0
 800a748:	bfb8      	it	lt
 800a74a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a74e:	3402      	adds	r4, #2
 800a750:	9305      	str	r3, [sp, #20]
 800a752:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a828 <_vfiprintf_r+0x230>
 800a756:	7821      	ldrb	r1, [r4, #0]
 800a758:	2203      	movs	r2, #3
 800a75a:	4650      	mov	r0, sl
 800a75c:	f7f5 fd48 	bl	80001f0 <memchr>
 800a760:	b138      	cbz	r0, 800a772 <_vfiprintf_r+0x17a>
 800a762:	9b04      	ldr	r3, [sp, #16]
 800a764:	eba0 000a 	sub.w	r0, r0, sl
 800a768:	2240      	movs	r2, #64	; 0x40
 800a76a:	4082      	lsls	r2, r0
 800a76c:	4313      	orrs	r3, r2
 800a76e:	3401      	adds	r4, #1
 800a770:	9304      	str	r3, [sp, #16]
 800a772:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a776:	4829      	ldr	r0, [pc, #164]	; (800a81c <_vfiprintf_r+0x224>)
 800a778:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a77c:	2206      	movs	r2, #6
 800a77e:	f7f5 fd37 	bl	80001f0 <memchr>
 800a782:	2800      	cmp	r0, #0
 800a784:	d03f      	beq.n	800a806 <_vfiprintf_r+0x20e>
 800a786:	4b26      	ldr	r3, [pc, #152]	; (800a820 <_vfiprintf_r+0x228>)
 800a788:	bb1b      	cbnz	r3, 800a7d2 <_vfiprintf_r+0x1da>
 800a78a:	9b03      	ldr	r3, [sp, #12]
 800a78c:	3307      	adds	r3, #7
 800a78e:	f023 0307 	bic.w	r3, r3, #7
 800a792:	3308      	adds	r3, #8
 800a794:	9303      	str	r3, [sp, #12]
 800a796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a798:	443b      	add	r3, r7
 800a79a:	9309      	str	r3, [sp, #36]	; 0x24
 800a79c:	e768      	b.n	800a670 <_vfiprintf_r+0x78>
 800a79e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7a2:	460c      	mov	r4, r1
 800a7a4:	2001      	movs	r0, #1
 800a7a6:	e7a6      	b.n	800a6f6 <_vfiprintf_r+0xfe>
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	3401      	adds	r4, #1
 800a7ac:	9305      	str	r3, [sp, #20]
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	f04f 0c0a 	mov.w	ip, #10
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7ba:	3a30      	subs	r2, #48	; 0x30
 800a7bc:	2a09      	cmp	r2, #9
 800a7be:	d903      	bls.n	800a7c8 <_vfiprintf_r+0x1d0>
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d0c6      	beq.n	800a752 <_vfiprintf_r+0x15a>
 800a7c4:	9105      	str	r1, [sp, #20]
 800a7c6:	e7c4      	b.n	800a752 <_vfiprintf_r+0x15a>
 800a7c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7cc:	4604      	mov	r4, r0
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e7f0      	b.n	800a7b4 <_vfiprintf_r+0x1bc>
 800a7d2:	ab03      	add	r3, sp, #12
 800a7d4:	9300      	str	r3, [sp, #0]
 800a7d6:	462a      	mov	r2, r5
 800a7d8:	4b12      	ldr	r3, [pc, #72]	; (800a824 <_vfiprintf_r+0x22c>)
 800a7da:	a904      	add	r1, sp, #16
 800a7dc:	4630      	mov	r0, r6
 800a7de:	f7fd fcdf 	bl	80081a0 <_printf_float>
 800a7e2:	4607      	mov	r7, r0
 800a7e4:	1c78      	adds	r0, r7, #1
 800a7e6:	d1d6      	bne.n	800a796 <_vfiprintf_r+0x19e>
 800a7e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7ea:	07d9      	lsls	r1, r3, #31
 800a7ec:	d405      	bmi.n	800a7fa <_vfiprintf_r+0x202>
 800a7ee:	89ab      	ldrh	r3, [r5, #12]
 800a7f0:	059a      	lsls	r2, r3, #22
 800a7f2:	d402      	bmi.n	800a7fa <_vfiprintf_r+0x202>
 800a7f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7f6:	f7fe fbcd 	bl	8008f94 <__retarget_lock_release_recursive>
 800a7fa:	89ab      	ldrh	r3, [r5, #12]
 800a7fc:	065b      	lsls	r3, r3, #25
 800a7fe:	f53f af1d 	bmi.w	800a63c <_vfiprintf_r+0x44>
 800a802:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a804:	e71c      	b.n	800a640 <_vfiprintf_r+0x48>
 800a806:	ab03      	add	r3, sp, #12
 800a808:	9300      	str	r3, [sp, #0]
 800a80a:	462a      	mov	r2, r5
 800a80c:	4b05      	ldr	r3, [pc, #20]	; (800a824 <_vfiprintf_r+0x22c>)
 800a80e:	a904      	add	r1, sp, #16
 800a810:	4630      	mov	r0, r6
 800a812:	f7fd ff69 	bl	80086e8 <_printf_i>
 800a816:	e7e4      	b.n	800a7e2 <_vfiprintf_r+0x1ea>
 800a818:	0800b294 	.word	0x0800b294
 800a81c:	0800b29e 	.word	0x0800b29e
 800a820:	080081a1 	.word	0x080081a1
 800a824:	0800a5d3 	.word	0x0800a5d3
 800a828:	0800b29a 	.word	0x0800b29a

0800a82c <__sflush_r>:
 800a82c:	898a      	ldrh	r2, [r1, #12]
 800a82e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a832:	4605      	mov	r5, r0
 800a834:	0710      	lsls	r0, r2, #28
 800a836:	460c      	mov	r4, r1
 800a838:	d458      	bmi.n	800a8ec <__sflush_r+0xc0>
 800a83a:	684b      	ldr	r3, [r1, #4]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	dc05      	bgt.n	800a84c <__sflush_r+0x20>
 800a840:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a842:	2b00      	cmp	r3, #0
 800a844:	dc02      	bgt.n	800a84c <__sflush_r+0x20>
 800a846:	2000      	movs	r0, #0
 800a848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a84c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a84e:	2e00      	cmp	r6, #0
 800a850:	d0f9      	beq.n	800a846 <__sflush_r+0x1a>
 800a852:	2300      	movs	r3, #0
 800a854:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a858:	682f      	ldr	r7, [r5, #0]
 800a85a:	6a21      	ldr	r1, [r4, #32]
 800a85c:	602b      	str	r3, [r5, #0]
 800a85e:	d032      	beq.n	800a8c6 <__sflush_r+0x9a>
 800a860:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a862:	89a3      	ldrh	r3, [r4, #12]
 800a864:	075a      	lsls	r2, r3, #29
 800a866:	d505      	bpl.n	800a874 <__sflush_r+0x48>
 800a868:	6863      	ldr	r3, [r4, #4]
 800a86a:	1ac0      	subs	r0, r0, r3
 800a86c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a86e:	b10b      	cbz	r3, 800a874 <__sflush_r+0x48>
 800a870:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a872:	1ac0      	subs	r0, r0, r3
 800a874:	2300      	movs	r3, #0
 800a876:	4602      	mov	r2, r0
 800a878:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a87a:	6a21      	ldr	r1, [r4, #32]
 800a87c:	4628      	mov	r0, r5
 800a87e:	47b0      	blx	r6
 800a880:	1c43      	adds	r3, r0, #1
 800a882:	89a3      	ldrh	r3, [r4, #12]
 800a884:	d106      	bne.n	800a894 <__sflush_r+0x68>
 800a886:	6829      	ldr	r1, [r5, #0]
 800a888:	291d      	cmp	r1, #29
 800a88a:	d82b      	bhi.n	800a8e4 <__sflush_r+0xb8>
 800a88c:	4a29      	ldr	r2, [pc, #164]	; (800a934 <__sflush_r+0x108>)
 800a88e:	410a      	asrs	r2, r1
 800a890:	07d6      	lsls	r6, r2, #31
 800a892:	d427      	bmi.n	800a8e4 <__sflush_r+0xb8>
 800a894:	2200      	movs	r2, #0
 800a896:	6062      	str	r2, [r4, #4]
 800a898:	04d9      	lsls	r1, r3, #19
 800a89a:	6922      	ldr	r2, [r4, #16]
 800a89c:	6022      	str	r2, [r4, #0]
 800a89e:	d504      	bpl.n	800a8aa <__sflush_r+0x7e>
 800a8a0:	1c42      	adds	r2, r0, #1
 800a8a2:	d101      	bne.n	800a8a8 <__sflush_r+0x7c>
 800a8a4:	682b      	ldr	r3, [r5, #0]
 800a8a6:	b903      	cbnz	r3, 800a8aa <__sflush_r+0x7e>
 800a8a8:	6560      	str	r0, [r4, #84]	; 0x54
 800a8aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8ac:	602f      	str	r7, [r5, #0]
 800a8ae:	2900      	cmp	r1, #0
 800a8b0:	d0c9      	beq.n	800a846 <__sflush_r+0x1a>
 800a8b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8b6:	4299      	cmp	r1, r3
 800a8b8:	d002      	beq.n	800a8c0 <__sflush_r+0x94>
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	f7ff f9f6 	bl	8009cac <_free_r>
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	6360      	str	r0, [r4, #52]	; 0x34
 800a8c4:	e7c0      	b.n	800a848 <__sflush_r+0x1c>
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	47b0      	blx	r6
 800a8cc:	1c41      	adds	r1, r0, #1
 800a8ce:	d1c8      	bne.n	800a862 <__sflush_r+0x36>
 800a8d0:	682b      	ldr	r3, [r5, #0]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d0c5      	beq.n	800a862 <__sflush_r+0x36>
 800a8d6:	2b1d      	cmp	r3, #29
 800a8d8:	d001      	beq.n	800a8de <__sflush_r+0xb2>
 800a8da:	2b16      	cmp	r3, #22
 800a8dc:	d101      	bne.n	800a8e2 <__sflush_r+0xb6>
 800a8de:	602f      	str	r7, [r5, #0]
 800a8e0:	e7b1      	b.n	800a846 <__sflush_r+0x1a>
 800a8e2:	89a3      	ldrh	r3, [r4, #12]
 800a8e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8e8:	81a3      	strh	r3, [r4, #12]
 800a8ea:	e7ad      	b.n	800a848 <__sflush_r+0x1c>
 800a8ec:	690f      	ldr	r7, [r1, #16]
 800a8ee:	2f00      	cmp	r7, #0
 800a8f0:	d0a9      	beq.n	800a846 <__sflush_r+0x1a>
 800a8f2:	0793      	lsls	r3, r2, #30
 800a8f4:	680e      	ldr	r6, [r1, #0]
 800a8f6:	bf08      	it	eq
 800a8f8:	694b      	ldreq	r3, [r1, #20]
 800a8fa:	600f      	str	r7, [r1, #0]
 800a8fc:	bf18      	it	ne
 800a8fe:	2300      	movne	r3, #0
 800a900:	eba6 0807 	sub.w	r8, r6, r7
 800a904:	608b      	str	r3, [r1, #8]
 800a906:	f1b8 0f00 	cmp.w	r8, #0
 800a90a:	dd9c      	ble.n	800a846 <__sflush_r+0x1a>
 800a90c:	6a21      	ldr	r1, [r4, #32]
 800a90e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a910:	4643      	mov	r3, r8
 800a912:	463a      	mov	r2, r7
 800a914:	4628      	mov	r0, r5
 800a916:	47b0      	blx	r6
 800a918:	2800      	cmp	r0, #0
 800a91a:	dc06      	bgt.n	800a92a <__sflush_r+0xfe>
 800a91c:	89a3      	ldrh	r3, [r4, #12]
 800a91e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a922:	81a3      	strh	r3, [r4, #12]
 800a924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a928:	e78e      	b.n	800a848 <__sflush_r+0x1c>
 800a92a:	4407      	add	r7, r0
 800a92c:	eba8 0800 	sub.w	r8, r8, r0
 800a930:	e7e9      	b.n	800a906 <__sflush_r+0xda>
 800a932:	bf00      	nop
 800a934:	dfbffffe 	.word	0xdfbffffe

0800a938 <_fflush_r>:
 800a938:	b538      	push	{r3, r4, r5, lr}
 800a93a:	690b      	ldr	r3, [r1, #16]
 800a93c:	4605      	mov	r5, r0
 800a93e:	460c      	mov	r4, r1
 800a940:	b913      	cbnz	r3, 800a948 <_fflush_r+0x10>
 800a942:	2500      	movs	r5, #0
 800a944:	4628      	mov	r0, r5
 800a946:	bd38      	pop	{r3, r4, r5, pc}
 800a948:	b118      	cbz	r0, 800a952 <_fflush_r+0x1a>
 800a94a:	6a03      	ldr	r3, [r0, #32]
 800a94c:	b90b      	cbnz	r3, 800a952 <_fflush_r+0x1a>
 800a94e:	f7fe f879 	bl	8008a44 <__sinit>
 800a952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d0f3      	beq.n	800a942 <_fflush_r+0xa>
 800a95a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a95c:	07d0      	lsls	r0, r2, #31
 800a95e:	d404      	bmi.n	800a96a <_fflush_r+0x32>
 800a960:	0599      	lsls	r1, r3, #22
 800a962:	d402      	bmi.n	800a96a <_fflush_r+0x32>
 800a964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a966:	f7fe fb14 	bl	8008f92 <__retarget_lock_acquire_recursive>
 800a96a:	4628      	mov	r0, r5
 800a96c:	4621      	mov	r1, r4
 800a96e:	f7ff ff5d 	bl	800a82c <__sflush_r>
 800a972:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a974:	07da      	lsls	r2, r3, #31
 800a976:	4605      	mov	r5, r0
 800a978:	d4e4      	bmi.n	800a944 <_fflush_r+0xc>
 800a97a:	89a3      	ldrh	r3, [r4, #12]
 800a97c:	059b      	lsls	r3, r3, #22
 800a97e:	d4e1      	bmi.n	800a944 <_fflush_r+0xc>
 800a980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a982:	f7fe fb07 	bl	8008f94 <__retarget_lock_release_recursive>
 800a986:	e7dd      	b.n	800a944 <_fflush_r+0xc>

0800a988 <__swhatbuf_r>:
 800a988:	b570      	push	{r4, r5, r6, lr}
 800a98a:	460c      	mov	r4, r1
 800a98c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a990:	2900      	cmp	r1, #0
 800a992:	b096      	sub	sp, #88	; 0x58
 800a994:	4615      	mov	r5, r2
 800a996:	461e      	mov	r6, r3
 800a998:	da0d      	bge.n	800a9b6 <__swhatbuf_r+0x2e>
 800a99a:	89a3      	ldrh	r3, [r4, #12]
 800a99c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a9a0:	f04f 0100 	mov.w	r1, #0
 800a9a4:	bf0c      	ite	eq
 800a9a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a9aa:	2340      	movne	r3, #64	; 0x40
 800a9ac:	2000      	movs	r0, #0
 800a9ae:	6031      	str	r1, [r6, #0]
 800a9b0:	602b      	str	r3, [r5, #0]
 800a9b2:	b016      	add	sp, #88	; 0x58
 800a9b4:	bd70      	pop	{r4, r5, r6, pc}
 800a9b6:	466a      	mov	r2, sp
 800a9b8:	f000 f848 	bl	800aa4c <_fstat_r>
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	dbec      	blt.n	800a99a <__swhatbuf_r+0x12>
 800a9c0:	9901      	ldr	r1, [sp, #4]
 800a9c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a9c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a9ca:	4259      	negs	r1, r3
 800a9cc:	4159      	adcs	r1, r3
 800a9ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9d2:	e7eb      	b.n	800a9ac <__swhatbuf_r+0x24>

0800a9d4 <__smakebuf_r>:
 800a9d4:	898b      	ldrh	r3, [r1, #12]
 800a9d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a9d8:	079d      	lsls	r5, r3, #30
 800a9da:	4606      	mov	r6, r0
 800a9dc:	460c      	mov	r4, r1
 800a9de:	d507      	bpl.n	800a9f0 <__smakebuf_r+0x1c>
 800a9e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a9e4:	6023      	str	r3, [r4, #0]
 800a9e6:	6123      	str	r3, [r4, #16]
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	6163      	str	r3, [r4, #20]
 800a9ec:	b002      	add	sp, #8
 800a9ee:	bd70      	pop	{r4, r5, r6, pc}
 800a9f0:	ab01      	add	r3, sp, #4
 800a9f2:	466a      	mov	r2, sp
 800a9f4:	f7ff ffc8 	bl	800a988 <__swhatbuf_r>
 800a9f8:	9900      	ldr	r1, [sp, #0]
 800a9fa:	4605      	mov	r5, r0
 800a9fc:	4630      	mov	r0, r6
 800a9fe:	f7ff f9c9 	bl	8009d94 <_malloc_r>
 800aa02:	b948      	cbnz	r0, 800aa18 <__smakebuf_r+0x44>
 800aa04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa08:	059a      	lsls	r2, r3, #22
 800aa0a:	d4ef      	bmi.n	800a9ec <__smakebuf_r+0x18>
 800aa0c:	f023 0303 	bic.w	r3, r3, #3
 800aa10:	f043 0302 	orr.w	r3, r3, #2
 800aa14:	81a3      	strh	r3, [r4, #12]
 800aa16:	e7e3      	b.n	800a9e0 <__smakebuf_r+0xc>
 800aa18:	89a3      	ldrh	r3, [r4, #12]
 800aa1a:	6020      	str	r0, [r4, #0]
 800aa1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa20:	81a3      	strh	r3, [r4, #12]
 800aa22:	9b00      	ldr	r3, [sp, #0]
 800aa24:	6163      	str	r3, [r4, #20]
 800aa26:	9b01      	ldr	r3, [sp, #4]
 800aa28:	6120      	str	r0, [r4, #16]
 800aa2a:	b15b      	cbz	r3, 800aa44 <__smakebuf_r+0x70>
 800aa2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa30:	4630      	mov	r0, r6
 800aa32:	f000 f81d 	bl	800aa70 <_isatty_r>
 800aa36:	b128      	cbz	r0, 800aa44 <__smakebuf_r+0x70>
 800aa38:	89a3      	ldrh	r3, [r4, #12]
 800aa3a:	f023 0303 	bic.w	r3, r3, #3
 800aa3e:	f043 0301 	orr.w	r3, r3, #1
 800aa42:	81a3      	strh	r3, [r4, #12]
 800aa44:	89a3      	ldrh	r3, [r4, #12]
 800aa46:	431d      	orrs	r5, r3
 800aa48:	81a5      	strh	r5, [r4, #12]
 800aa4a:	e7cf      	b.n	800a9ec <__smakebuf_r+0x18>

0800aa4c <_fstat_r>:
 800aa4c:	b538      	push	{r3, r4, r5, lr}
 800aa4e:	4d07      	ldr	r5, [pc, #28]	; (800aa6c <_fstat_r+0x20>)
 800aa50:	2300      	movs	r3, #0
 800aa52:	4604      	mov	r4, r0
 800aa54:	4608      	mov	r0, r1
 800aa56:	4611      	mov	r1, r2
 800aa58:	602b      	str	r3, [r5, #0]
 800aa5a:	f7f6 ff0b 	bl	8001874 <_fstat>
 800aa5e:	1c43      	adds	r3, r0, #1
 800aa60:	d102      	bne.n	800aa68 <_fstat_r+0x1c>
 800aa62:	682b      	ldr	r3, [r5, #0]
 800aa64:	b103      	cbz	r3, 800aa68 <_fstat_r+0x1c>
 800aa66:	6023      	str	r3, [r4, #0]
 800aa68:	bd38      	pop	{r3, r4, r5, pc}
 800aa6a:	bf00      	nop
 800aa6c:	2000052c 	.word	0x2000052c

0800aa70 <_isatty_r>:
 800aa70:	b538      	push	{r3, r4, r5, lr}
 800aa72:	4d06      	ldr	r5, [pc, #24]	; (800aa8c <_isatty_r+0x1c>)
 800aa74:	2300      	movs	r3, #0
 800aa76:	4604      	mov	r4, r0
 800aa78:	4608      	mov	r0, r1
 800aa7a:	602b      	str	r3, [r5, #0]
 800aa7c:	f7f6 fe68 	bl	8001750 <_isatty>
 800aa80:	1c43      	adds	r3, r0, #1
 800aa82:	d102      	bne.n	800aa8a <_isatty_r+0x1a>
 800aa84:	682b      	ldr	r3, [r5, #0]
 800aa86:	b103      	cbz	r3, 800aa8a <_isatty_r+0x1a>
 800aa88:	6023      	str	r3, [r4, #0]
 800aa8a:	bd38      	pop	{r3, r4, r5, pc}
 800aa8c:	2000052c 	.word	0x2000052c

0800aa90 <_sbrk_r>:
 800aa90:	b538      	push	{r3, r4, r5, lr}
 800aa92:	4d06      	ldr	r5, [pc, #24]	; (800aaac <_sbrk_r+0x1c>)
 800aa94:	2300      	movs	r3, #0
 800aa96:	4604      	mov	r4, r0
 800aa98:	4608      	mov	r0, r1
 800aa9a:	602b      	str	r3, [r5, #0]
 800aa9c:	f7f8 f8e2 	bl	8002c64 <_sbrk>
 800aaa0:	1c43      	adds	r3, r0, #1
 800aaa2:	d102      	bne.n	800aaaa <_sbrk_r+0x1a>
 800aaa4:	682b      	ldr	r3, [r5, #0]
 800aaa6:	b103      	cbz	r3, 800aaaa <_sbrk_r+0x1a>
 800aaa8:	6023      	str	r3, [r4, #0]
 800aaaa:	bd38      	pop	{r3, r4, r5, pc}
 800aaac:	2000052c 	.word	0x2000052c

0800aab0 <__assert_func>:
 800aab0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aab2:	4614      	mov	r4, r2
 800aab4:	461a      	mov	r2, r3
 800aab6:	4b09      	ldr	r3, [pc, #36]	; (800aadc <__assert_func+0x2c>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4605      	mov	r5, r0
 800aabc:	68d8      	ldr	r0, [r3, #12]
 800aabe:	b14c      	cbz	r4, 800aad4 <__assert_func+0x24>
 800aac0:	4b07      	ldr	r3, [pc, #28]	; (800aae0 <__assert_func+0x30>)
 800aac2:	9100      	str	r1, [sp, #0]
 800aac4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aac8:	4906      	ldr	r1, [pc, #24]	; (800aae4 <__assert_func+0x34>)
 800aaca:	462b      	mov	r3, r5
 800aacc:	f000 f844 	bl	800ab58 <fiprintf>
 800aad0:	f000 f854 	bl	800ab7c <abort>
 800aad4:	4b04      	ldr	r3, [pc, #16]	; (800aae8 <__assert_func+0x38>)
 800aad6:	461c      	mov	r4, r3
 800aad8:	e7f3      	b.n	800aac2 <__assert_func+0x12>
 800aada:	bf00      	nop
 800aadc:	20000064 	.word	0x20000064
 800aae0:	0800b2af 	.word	0x0800b2af
 800aae4:	0800b2bc 	.word	0x0800b2bc
 800aae8:	0800b2ea 	.word	0x0800b2ea

0800aaec <_calloc_r>:
 800aaec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aaee:	fba1 2402 	umull	r2, r4, r1, r2
 800aaf2:	b94c      	cbnz	r4, 800ab08 <_calloc_r+0x1c>
 800aaf4:	4611      	mov	r1, r2
 800aaf6:	9201      	str	r2, [sp, #4]
 800aaf8:	f7ff f94c 	bl	8009d94 <_malloc_r>
 800aafc:	9a01      	ldr	r2, [sp, #4]
 800aafe:	4605      	mov	r5, r0
 800ab00:	b930      	cbnz	r0, 800ab10 <_calloc_r+0x24>
 800ab02:	4628      	mov	r0, r5
 800ab04:	b003      	add	sp, #12
 800ab06:	bd30      	pop	{r4, r5, pc}
 800ab08:	220c      	movs	r2, #12
 800ab0a:	6002      	str	r2, [r0, #0]
 800ab0c:	2500      	movs	r5, #0
 800ab0e:	e7f8      	b.n	800ab02 <_calloc_r+0x16>
 800ab10:	4621      	mov	r1, r4
 800ab12:	f7fe f9c1 	bl	8008e98 <memset>
 800ab16:	e7f4      	b.n	800ab02 <_calloc_r+0x16>

0800ab18 <__ascii_mbtowc>:
 800ab18:	b082      	sub	sp, #8
 800ab1a:	b901      	cbnz	r1, 800ab1e <__ascii_mbtowc+0x6>
 800ab1c:	a901      	add	r1, sp, #4
 800ab1e:	b142      	cbz	r2, 800ab32 <__ascii_mbtowc+0x1a>
 800ab20:	b14b      	cbz	r3, 800ab36 <__ascii_mbtowc+0x1e>
 800ab22:	7813      	ldrb	r3, [r2, #0]
 800ab24:	600b      	str	r3, [r1, #0]
 800ab26:	7812      	ldrb	r2, [r2, #0]
 800ab28:	1e10      	subs	r0, r2, #0
 800ab2a:	bf18      	it	ne
 800ab2c:	2001      	movne	r0, #1
 800ab2e:	b002      	add	sp, #8
 800ab30:	4770      	bx	lr
 800ab32:	4610      	mov	r0, r2
 800ab34:	e7fb      	b.n	800ab2e <__ascii_mbtowc+0x16>
 800ab36:	f06f 0001 	mvn.w	r0, #1
 800ab3a:	e7f8      	b.n	800ab2e <__ascii_mbtowc+0x16>

0800ab3c <__ascii_wctomb>:
 800ab3c:	b149      	cbz	r1, 800ab52 <__ascii_wctomb+0x16>
 800ab3e:	2aff      	cmp	r2, #255	; 0xff
 800ab40:	bf85      	ittet	hi
 800ab42:	238a      	movhi	r3, #138	; 0x8a
 800ab44:	6003      	strhi	r3, [r0, #0]
 800ab46:	700a      	strbls	r2, [r1, #0]
 800ab48:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ab4c:	bf98      	it	ls
 800ab4e:	2001      	movls	r0, #1
 800ab50:	4770      	bx	lr
 800ab52:	4608      	mov	r0, r1
 800ab54:	4770      	bx	lr
	...

0800ab58 <fiprintf>:
 800ab58:	b40e      	push	{r1, r2, r3}
 800ab5a:	b503      	push	{r0, r1, lr}
 800ab5c:	4601      	mov	r1, r0
 800ab5e:	ab03      	add	r3, sp, #12
 800ab60:	4805      	ldr	r0, [pc, #20]	; (800ab78 <fiprintf+0x20>)
 800ab62:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab66:	6800      	ldr	r0, [r0, #0]
 800ab68:	9301      	str	r3, [sp, #4]
 800ab6a:	f7ff fd45 	bl	800a5f8 <_vfiprintf_r>
 800ab6e:	b002      	add	sp, #8
 800ab70:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab74:	b003      	add	sp, #12
 800ab76:	4770      	bx	lr
 800ab78:	20000064 	.word	0x20000064

0800ab7c <abort>:
 800ab7c:	b508      	push	{r3, lr}
 800ab7e:	2006      	movs	r0, #6
 800ab80:	f000 f82c 	bl	800abdc <raise>
 800ab84:	2001      	movs	r0, #1
 800ab86:	f000 f855 	bl	800ac34 <_exit>

0800ab8a <_raise_r>:
 800ab8a:	291f      	cmp	r1, #31
 800ab8c:	b538      	push	{r3, r4, r5, lr}
 800ab8e:	4604      	mov	r4, r0
 800ab90:	460d      	mov	r5, r1
 800ab92:	d904      	bls.n	800ab9e <_raise_r+0x14>
 800ab94:	2316      	movs	r3, #22
 800ab96:	6003      	str	r3, [r0, #0]
 800ab98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab9c:	bd38      	pop	{r3, r4, r5, pc}
 800ab9e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800aba0:	b112      	cbz	r2, 800aba8 <_raise_r+0x1e>
 800aba2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aba6:	b94b      	cbnz	r3, 800abbc <_raise_r+0x32>
 800aba8:	4620      	mov	r0, r4
 800abaa:	f000 f831 	bl	800ac10 <_getpid_r>
 800abae:	462a      	mov	r2, r5
 800abb0:	4601      	mov	r1, r0
 800abb2:	4620      	mov	r0, r4
 800abb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abb8:	f000 b818 	b.w	800abec <_kill_r>
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d00a      	beq.n	800abd6 <_raise_r+0x4c>
 800abc0:	1c59      	adds	r1, r3, #1
 800abc2:	d103      	bne.n	800abcc <_raise_r+0x42>
 800abc4:	2316      	movs	r3, #22
 800abc6:	6003      	str	r3, [r0, #0]
 800abc8:	2001      	movs	r0, #1
 800abca:	e7e7      	b.n	800ab9c <_raise_r+0x12>
 800abcc:	2400      	movs	r4, #0
 800abce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800abd2:	4628      	mov	r0, r5
 800abd4:	4798      	blx	r3
 800abd6:	2000      	movs	r0, #0
 800abd8:	e7e0      	b.n	800ab9c <_raise_r+0x12>
	...

0800abdc <raise>:
 800abdc:	4b02      	ldr	r3, [pc, #8]	; (800abe8 <raise+0xc>)
 800abde:	4601      	mov	r1, r0
 800abe0:	6818      	ldr	r0, [r3, #0]
 800abe2:	f7ff bfd2 	b.w	800ab8a <_raise_r>
 800abe6:	bf00      	nop
 800abe8:	20000064 	.word	0x20000064

0800abec <_kill_r>:
 800abec:	b538      	push	{r3, r4, r5, lr}
 800abee:	4d07      	ldr	r5, [pc, #28]	; (800ac0c <_kill_r+0x20>)
 800abf0:	2300      	movs	r3, #0
 800abf2:	4604      	mov	r4, r0
 800abf4:	4608      	mov	r0, r1
 800abf6:	4611      	mov	r1, r2
 800abf8:	602b      	str	r3, [r5, #0]
 800abfa:	f000 f813 	bl	800ac24 <_kill>
 800abfe:	1c43      	adds	r3, r0, #1
 800ac00:	d102      	bne.n	800ac08 <_kill_r+0x1c>
 800ac02:	682b      	ldr	r3, [r5, #0]
 800ac04:	b103      	cbz	r3, 800ac08 <_kill_r+0x1c>
 800ac06:	6023      	str	r3, [r4, #0]
 800ac08:	bd38      	pop	{r3, r4, r5, pc}
 800ac0a:	bf00      	nop
 800ac0c:	2000052c 	.word	0x2000052c

0800ac10 <_getpid_r>:
 800ac10:	f000 b800 	b.w	800ac14 <_getpid>

0800ac14 <_getpid>:
 800ac14:	4b02      	ldr	r3, [pc, #8]	; (800ac20 <_getpid+0xc>)
 800ac16:	2258      	movs	r2, #88	; 0x58
 800ac18:	601a      	str	r2, [r3, #0]
 800ac1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac1e:	4770      	bx	lr
 800ac20:	2000052c 	.word	0x2000052c

0800ac24 <_kill>:
 800ac24:	4b02      	ldr	r3, [pc, #8]	; (800ac30 <_kill+0xc>)
 800ac26:	2258      	movs	r2, #88	; 0x58
 800ac28:	601a      	str	r2, [r3, #0]
 800ac2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac2e:	4770      	bx	lr
 800ac30:	2000052c 	.word	0x2000052c

0800ac34 <_exit>:
 800ac34:	e7fe      	b.n	800ac34 <_exit>
	...

0800ac38 <_init>:
 800ac38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac3a:	bf00      	nop
 800ac3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac3e:	bc08      	pop	{r3}
 800ac40:	469e      	mov	lr, r3
 800ac42:	4770      	bx	lr

0800ac44 <_fini>:
 800ac44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac46:	bf00      	nop
 800ac48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac4a:	bc08      	pop	{r3}
 800ac4c:	469e      	mov	lr, r3
 800ac4e:	4770      	bx	lr
