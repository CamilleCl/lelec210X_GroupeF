
GoldenProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8d8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001266c  0800da88  0800da88  0001da88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080200f4  080200f4  00043168  2**0
                  CONTENTS
  4 .ARM          00000008  080200f4  080200f4  000300f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080200fc  080200fc  00043168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080200fc  080200fc  000300fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020100  08020100  00030100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00003168  20000000  08020104  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c94  20003168  0802326c  00043168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004dfc  0802326c  00044dfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00043168  2**0
                  CONTENTS, READONLY
 12 .comment      000000bc  00000000  00000000  00043198  2**0
                  CONTENTS, READONLY
 13 .debug_info   00030716  00000000  00000000  00043254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006453  00000000  00000000  0007396a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019f0  00000000  00000000  00079dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000128c  00000000  00000000  0007b7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030402  00000000  00000000  0007ca3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025e0d  00000000  00000000  000ace3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012176c  00000000  00000000  000d2c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007920  00000000  00000000  001f43b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  001fbcd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00009652  00000000  00000000  001fbd59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00001220  00000000  00000000  002053ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20003168 	.word	0x20003168
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800da70 	.word	0x0800da70

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000316c 	.word	0x2000316c
 80001ec:	0800da70 	.word	0x0800da70

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
 8000ee4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ee6:	4b31      	ldr	r3, [pc, #196]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000ee8:	4a31      	ldr	r2, [pc, #196]	; (8000fb0 <MX_ADC1_Init+0xec>)
 8000eea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000eec:	4b2f      	ldr	r3, [pc, #188]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000eee:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
 8000ef2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef4:	4b2d      	ldr	r3, [pc, #180]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000efa:	4b2c      	ldr	r3, [pc, #176]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f00:	4b2a      	ldr	r3, [pc, #168]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f06:	4b29      	ldr	r3, [pc, #164]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000f08:	2204      	movs	r2, #4
 8000f0a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f0c:	4b27      	ldr	r3, [pc, #156]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f12:	4b26      	ldr	r3, [pc, #152]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f18:	4b24      	ldr	r3, [pc, #144]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f1e:	4b23      	ldr	r3, [pc, #140]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000f26:	4b21      	ldr	r3, [pc, #132]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000f28:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000f2c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000f30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f34:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f36:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f44:	4b19      	ldr	r3, [pc, #100]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f4c:	4817      	ldr	r0, [pc, #92]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000f4e:	f003 fbb5 	bl	80046bc <HAL_ADC_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f58:	f001 fa8e 	bl	8002478 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	4619      	mov	r1, r3
 8000f66:	4811      	ldr	r0, [pc, #68]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000f68:	f004 fd18 	bl	800599c <HAL_ADCEx_MultiModeConfigChannel>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f72:	f001 fa81 	bl	8002478 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_ADC1_Init+0xf0>)
 8000f78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f7a:	2306      	movs	r3, #6
 8000f7c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f82:	237f      	movs	r3, #127	; 0x7f
 8000f84:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f86:	2304      	movs	r3, #4
 8000f88:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	4619      	mov	r1, r3
 8000f92:	4806      	ldr	r0, [pc, #24]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000f94:	f003 fe0e 	bl	8004bb4 <HAL_ADC_ConfigChannel>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000f9e:	f001 fa6b 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	3728      	adds	r7, #40	; 0x28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20003184 	.word	0x20003184
 8000fb0:	50040000 	.word	0x50040000
 8000fb4:	14f00020 	.word	0x14f00020

08000fb8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b0ac      	sub	sp, #176	; 0xb0
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd0:	f107 0310 	add.w	r3, r7, #16
 8000fd4:	228c      	movs	r2, #140	; 0x8c
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f00a fe79 	bl	800bcd0 <memset>
  if(adcHandle->Instance==ADC1)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a35      	ldr	r2, [pc, #212]	; (80010b8 <HAL_ADC_MspInit+0x100>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d163      	bne.n	80010b0 <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fe8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000fee:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000ff2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff6:	f107 0310 	add.w	r3, r7, #16
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f006 f93a 	bl	8007274 <HAL_RCCEx_PeriphCLKConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001006:	f001 fa37 	bl	8002478 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800100a:	4b2c      	ldr	r3, [pc, #176]	; (80010bc <HAL_ADC_MspInit+0x104>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a2b      	ldr	r2, [pc, #172]	; (80010bc <HAL_ADC_MspInit+0x104>)
 8001010:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b29      	ldr	r3, [pc, #164]	; (80010bc <HAL_ADC_MspInit+0x104>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	4b26      	ldr	r3, [pc, #152]	; (80010bc <HAL_ADC_MspInit+0x104>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	4a25      	ldr	r2, [pc, #148]	; (80010bc <HAL_ADC_MspInit+0x104>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102e:	4b23      	ldr	r3, [pc, #140]	; (80010bc <HAL_ADC_MspInit+0x104>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800103a:	2301      	movs	r3, #1
 800103c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001040:	2303      	movs	r3, #3
 8001042:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001050:	4619      	mov	r1, r3
 8001052:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001056:	f005 f899 	bl	800618c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800105a:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <HAL_ADC_MspInit+0x108>)
 800105c:	4a19      	ldr	r2, [pc, #100]	; (80010c4 <HAL_ADC_MspInit+0x10c>)
 800105e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001060:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <HAL_ADC_MspInit+0x108>)
 8001062:	2200      	movs	r2, #0
 8001064:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001066:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <HAL_ADC_MspInit+0x108>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <HAL_ADC_MspInit+0x108>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <HAL_ADC_MspInit+0x108>)
 8001074:	2280      	movs	r2, #128	; 0x80
 8001076:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <HAL_ADC_MspInit+0x108>)
 800107a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800107e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <HAL_ADC_MspInit+0x108>)
 8001082:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001086:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <HAL_ADC_MspInit+0x108>)
 800108a:	2220      	movs	r2, #32
 800108c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <HAL_ADC_MspInit+0x108>)
 8001090:	2200      	movs	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001094:	480a      	ldr	r0, [pc, #40]	; (80010c0 <HAL_ADC_MspInit+0x108>)
 8001096:	f004 fe43 	bl	8005d20 <HAL_DMA_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <HAL_ADC_MspInit+0xec>
    {
      Error_Handler();
 80010a0:	f001 f9ea 	bl	8002478 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <HAL_ADC_MspInit+0x108>)
 80010a8:	651a      	str	r2, [r3, #80]	; 0x50
 80010aa:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <HAL_ADC_MspInit+0x108>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010b0:	bf00      	nop
 80010b2:	37b0      	adds	r7, #176	; 0xb0
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	50040000 	.word	0x50040000
 80010bc:	40021000 	.word	0x40021000
 80010c0:	200031ec 	.word	0x200031ec
 80010c4:	40020008 	.word	0x40020008

080010c8 <q15_to_float>:
#define INC_SPECTROGRAM_H_

#include "arm_math.h"

static inline float q15_to_float(q15_t x)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	80fb      	strh	r3, [r7, #6]
	float y;
	arm_q15_to_float(&x, &y, 1);
 80010d2:	f107 010c 	add.w	r1, r7, #12
 80010d6:	1dbb      	adds	r3, r7, #6
 80010d8:	2201      	movs	r2, #1
 80010da:	4618      	mov	r0, r3
 80010dc:	f008 fcc6 	bl	8009a6c <arm_q15_to_float>
	return y;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	ee07 3a90 	vmov	s15, r3
}
 80010e6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <StartADCAcq>:

static uint32_t packet_cnt = 0;

static volatile int32_t rem_n_bufs = 0;

int StartADCAcq(int32_t n_bufs) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	rem_n_bufs = n_bufs;
 80010f8:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <StartADCAcq+0x38>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6013      	str	r3, [r2, #0]
	cur_melvec = 0;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <StartADCAcq+0x3c>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
	// start_cycle_count();
	if (rem_n_bufs != 0) {
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <StartADCAcq+0x38>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d007      	beq.n	800111c <StartADCAcq+0x2c>
		return HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADCDoubleBuf, 2*ADC_BUF_SIZE);
 800110c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <StartADCAcq+0x40>)
 8001112:	4808      	ldr	r0, [pc, #32]	; (8001134 <StartADCAcq+0x44>)
 8001114:	f003 fc26 	bl	8004964 <HAL_ADC_Start_DMA>
 8001118:	4603      	mov	r3, r0
 800111a:	e000      	b.n	800111e <StartADCAcq+0x2e>
	} else {
		return HAL_OK;
 800111c:	2300      	movs	r3, #0
	}
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20003d5c 	.word	0x20003d5c
 800112c:	20003a36 	.word	0x20003a36
 8001130:	20003234 	.word	0x20003234
 8001134:	20003184 	.word	0x20003184

08001138 <IsADCFinished>:

int IsADCFinished(void) {
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
	return (rem_n_bufs == 0);
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <IsADCFinished+0x1c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	bf0c      	ite	eq
 8001144:	2301      	moveq	r3, #1
 8001146:	2300      	movne	r3, #0
 8001148:	b2db      	uxtb	r3, r3
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	20003d5c 	.word	0x20003d5c

08001158 <StopADCAcq>:

static void StopADCAcq() {
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <StopADCAcq+0x10>)
 800115e:	f003 fcbd 	bl	8004adc <HAL_ADC_Stop_DMA>
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20003184 	.word	0x20003184

0800116c <print_spectrogram>:

static void print_spectrogram(void) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
#if (DEBUGP == 1)
	start_cycle_count();
 8001172:	f002 ff81 	bl	8004078 <start_cycle_count>
	DEBUG_PRINT("Acquisition complete, sending the following FVs\r\n");
 8001176:	481e      	ldr	r0, [pc, #120]	; (80011f0 <print_spectrogram+0x84>)
 8001178:	f00a fc1c 	bl	800b9b4 <puts>
	for(unsigned int j=0; j < N_MELVECS; j++) {
 800117c:	2300      	movs	r3, #0
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	e02b      	b.n	80011da <print_spectrogram+0x6e>
		DEBUG_PRINT("FV #%u:\t", j+1);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3301      	adds	r3, #1
 8001186:	4619      	mov	r1, r3
 8001188:	481a      	ldr	r0, [pc, #104]	; (80011f4 <print_spectrogram+0x88>)
 800118a:	f00a fbad 	bl	800b8e8 <iprintf>
		for(unsigned int i=0; i < MELVEC_LENGTH; i++) {
 800118e:	2300      	movs	r3, #0
 8001190:	603b      	str	r3, [r7, #0]
 8001192:	e019      	b.n	80011c8 <print_spectrogram+0x5c>
			DEBUG_PRINT("%.2f, ", q15_to_float(mel_vectors[j][i]));
 8001194:	4918      	ldr	r1, [pc, #96]	; (80011f8 <print_spectrogram+0x8c>)
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	4613      	mov	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff8d 	bl	80010c8 <q15_to_float>
 80011ae:	ee10 3a10 	vmov	r3, s0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f9d8 	bl	8000568 <__aeabi_f2d>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	480f      	ldr	r0, [pc, #60]	; (80011fc <print_spectrogram+0x90>)
 80011be:	f00a fb93 	bl	800b8e8 <iprintf>
		for(unsigned int i=0; i < MELVEC_LENGTH; i++) {
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	2b13      	cmp	r3, #19
 80011cc:	d9e2      	bls.n	8001194 <print_spectrogram+0x28>
		}
		DEBUG_PRINT("\r\n");
 80011ce:	480c      	ldr	r0, [pc, #48]	; (8001200 <print_spectrogram+0x94>)
 80011d0:	f00a fbf0 	bl	800b9b4 <puts>
	for(unsigned int j=0; j < N_MELVECS; j++) {
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3301      	adds	r3, #1
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b13      	cmp	r3, #19
 80011de:	d9d0      	bls.n	8001182 <print_spectrogram+0x16>
	}
	stop_cycle_count("Print FV");
 80011e0:	4808      	ldr	r0, [pc, #32]	; (8001204 <print_spectrogram+0x98>)
 80011e2:	f002 ff50 	bl	8004086 <stop_cycle_count>
#endif
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	0800da88 	.word	0x0800da88
 80011f4:	0800dabc 	.word	0x0800dabc
 80011f8:	20003a38 	.word	0x20003a38
 80011fc:	0800dac8 	.word	0x0800dac8
 8001200:	0800dad0 	.word	0x0800dad0
 8001204:	0800dad4 	.word	0x0800dad4

08001208 <print_encoded_packet>:

static void print_encoded_packet(uint8_t *packet) {
 8001208:	b580      	push	{r7, lr}
 800120a:	f5ad 6dd0 	sub.w	sp, sp, #1664	; 0x680
 800120e:	af00      	add	r7, sp, #0
 8001210:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8001214:	f2a3 637c 	subw	r3, r3, #1660	; 0x67c
 8001218:	6018      	str	r0, [r3, #0]
#if (DEBUGP == 1)
	char hex_encoded_packet[2*PACKET_LENGTH+1];
	hex_encode(hex_encoded_packet, packet, PACKET_LENGTH);
 800121a:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800121e:	f2a3 637c 	subw	r3, r3, #1660	; 0x67c
 8001222:	f107 000c 	add.w	r0, r7, #12
 8001226:	f44f 724e 	mov.w	r2, #824	; 0x338
 800122a:	6819      	ldr	r1, [r3, #0]
 800122c:	f002 ff36 	bl	800409c <hex_encode>
	DEBUG_PRINT("DF:HEX:%s\r\n", hex_encoded_packet);
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	4619      	mov	r1, r3
 8001236:	4804      	ldr	r0, [pc, #16]	; (8001248 <print_encoded_packet+0x40>)
 8001238:	f00a fb56 	bl	800b8e8 <iprintf>
#endif
}
 800123c:	bf00      	nop
 800123e:	f507 67d0 	add.w	r7, r7, #1664	; 0x680
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	0800dae0 	.word	0x0800dae0

0800124c <encode_packet>:

static void encode_packet(uint8_t *packet, uint32_t* packet_cnt) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
	// BE encoding of each mel coef
	for (size_t i=0; i<N_MELVECS; i++) {
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	e03d      	b.n	80012d8 <encode_packet+0x8c>
		for (size_t j=0; j<MELVEC_LENGTH; j++) {
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	e034      	b.n	80012cc <encode_packet+0x80>
			(packet+PACKET_HEADER_LENGTH)[(i*MELVEC_LENGTH+j)*2]   = mel_vectors[i][j] >> 8;
 8001262:	492c      	ldr	r1, [pc, #176]	; (8001314 <encode_packet+0xc8>)
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	4413      	add	r3, r2
 8001272:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001276:	121b      	asrs	r3, r3, #8
 8001278:	b219      	sxth	r1, r3
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	461a      	mov	r2, r3
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	4413      	add	r3, r2
 800128a:	3304      	adds	r3, #4
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	b2ca      	uxtb	r2, r1
 8001294:	701a      	strb	r2, [r3, #0]
			(packet+PACKET_HEADER_LENGTH)[(i*MELVEC_LENGTH+j)*2+1] = mel_vectors[i][j] & 0xFF;
 8001296:	491f      	ldr	r1, [pc, #124]	; (8001314 <encode_packet+0xc8>)
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	4413      	add	r3, r2
 80012a6:	f931 1013 	ldrsh.w	r1, [r1, r3, lsl #1]
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	4613      	mov	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	461a      	mov	r2, r3
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	4413      	add	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	3309      	adds	r3, #9
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	b2ca      	uxtb	r2, r1
 80012c4:	701a      	strb	r2, [r3, #0]
		for (size_t j=0; j<MELVEC_LENGTH; j++) {
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	3301      	adds	r3, #1
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	2b13      	cmp	r3, #19
 80012d0:	d9c7      	bls.n	8001262 <encode_packet+0x16>
	for (size_t i=0; i<N_MELVECS; i++) {
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	3301      	adds	r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2b13      	cmp	r3, #19
 80012dc:	d9be      	bls.n	800125c <encode_packet+0x10>
		}
	}
	// Write header and tag into the packet.
	make_packet(packet, PAYLOAD_LENGTH, 0, *packet_cnt);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f44f 7148 	mov.w	r1, #800	; 0x320
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f001 f9c1 	bl	8002670 <make_packet>
	*packet_cnt += 1;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	601a      	str	r2, [r3, #0]
	if (*packet_cnt == 0) {
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d104      	bne.n	800130a <encode_packet+0xbe>
		// Should not happen as packet_cnt is 32-bit and we send at most 1 packet per second.
		DEBUG_PRINT("Packet counter overflow.\r\n");
 8001300:	4805      	ldr	r0, [pc, #20]	; (8001318 <encode_packet+0xcc>)
 8001302:	f00a fb57 	bl	800b9b4 <puts>
		Error_Handler();
 8001306:	f001 f8b7 	bl	8002478 <Error_Handler>
	}
}
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20003a38 	.word	0x20003a38
 8001318:	0800daec 	.word	0x0800daec

0800131c <send_spectrogram>:

static void send_spectrogram() {
 800131c:	b580      	push	{r7, lr}
 800131e:	f5ad 7d4e 	sub.w	sp, sp, #824	; 0x338
 8001322:	af00      	add	r7, sp, #0
	uint8_t packet[PACKET_LENGTH];

	start_cycle_count();
 8001324:	f002 fea8 	bl	8004078 <start_cycle_count>
	encode_packet(packet, &packet_cnt);
 8001328:	463b      	mov	r3, r7
 800132a:	490d      	ldr	r1, [pc, #52]	; (8001360 <send_spectrogram+0x44>)
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff8d 	bl	800124c <encode_packet>
	stop_cycle_count("Encode packet");
 8001332:	480c      	ldr	r0, [pc, #48]	; (8001364 <send_spectrogram+0x48>)
 8001334:	f002 fea7 	bl	8004086 <stop_cycle_count>

	start_cycle_count();
 8001338:	f002 fe9e 	bl	8004078 <start_cycle_count>
	S2LP_Send(packet, PACKET_LENGTH);
 800133c:	463b      	mov	r3, r7
 800133e:	f44f 714e 	mov.w	r1, #824	; 0x338
 8001342:	4618      	mov	r0, r3
 8001344:	f001 fb8c 	bl	8002a60 <S2LP_Send>
	stop_cycle_count("Send packet");
 8001348:	4807      	ldr	r0, [pc, #28]	; (8001368 <send_spectrogram+0x4c>)
 800134a:	f002 fe9c 	bl	8004086 <stop_cycle_count>

	print_encoded_packet(packet);
 800134e:	463b      	mov	r3, r7
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff59 	bl	8001208 <print_encoded_packet>
}
 8001356:	bf00      	nop
 8001358:	f507 774e 	add.w	r7, r7, #824	; 0x338
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20003d58 	.word	0x20003d58
 8001364:	0800db08 	.word	0x0800db08
 8001368:	0800db18 	.word	0x0800db18

0800136c <ADC_Callback>:

static void ADC_Callback(int buf_cplt) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	if (rem_n_bufs != -1) {
 8001374:	4b2c      	ldr	r3, [pc, #176]	; (8001428 <ADC_Callback+0xbc>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800137c:	d004      	beq.n	8001388 <ADC_Callback+0x1c>
		rem_n_bufs--;
 800137e:	4b2a      	ldr	r3, [pc, #168]	; (8001428 <ADC_Callback+0xbc>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	3b01      	subs	r3, #1
 8001384:	4a28      	ldr	r2, [pc, #160]	; (8001428 <ADC_Callback+0xbc>)
 8001386:	6013      	str	r3, [r2, #0]
	}
	if (rem_n_bufs == 0) {
 8001388:	4b27      	ldr	r3, [pc, #156]	; (8001428 <ADC_Callback+0xbc>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d102      	bne.n	8001396 <ADC_Callback+0x2a>
		// stop_cycle_count("Acquisition");
		StopADCAcq();
 8001390:	f7ff fee2 	bl	8001158 <StopADCAcq>
 8001394:	e00c      	b.n	80013b0 <ADC_Callback+0x44>
	} else if (ADCDataRdy[1-buf_cplt]) {
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f1c3 0301 	rsb	r3, r3, #1
 800139c:	4a23      	ldr	r2, [pc, #140]	; (800142c <ADC_Callback+0xc0>)
 800139e:	5cd3      	ldrb	r3, [r2, r3]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d004      	beq.n	80013b0 <ADC_Callback+0x44>
		DEBUG_PRINT("Error: ADC Data buffer full\r\n");
 80013a6:	4822      	ldr	r0, [pc, #136]	; (8001430 <ADC_Callback+0xc4>)
 80013a8:	f00a fb04 	bl	800b9b4 <puts>
		Error_Handler();
 80013ac:	f001 f864 	bl	8002478 <Error_Handler>
	}

	ADCDataRdy[buf_cplt] = 1;
 80013b0:	4a1e      	ldr	r2, [pc, #120]	; (800142c <ADC_Callback+0xc0>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
	start_cycle_count();
 80013ba:	f002 fe5d 	bl	8004078 <start_cycle_count>
	Spectrogram_Format((q15_t *)ADCData[buf_cplt]);
 80013be:	4a1d      	ldr	r2, [pc, #116]	; (8001434 <ADC_Callback+0xc8>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f002 fb26 	bl	8003a18 <Spectrogram_Format>
	Spectrogram_Compute((q15_t *)ADCData[buf_cplt], mel_vectors[cur_melvec]);
 80013cc:	4a19      	ldr	r2, [pc, #100]	; (8001434 <ADC_Callback+0xc8>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013d4:	4b18      	ldr	r3, [pc, #96]	; (8001438 <ADC_Callback+0xcc>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	4619      	mov	r1, r3
 80013dc:	460b      	mov	r3, r1
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	4915      	ldr	r1, [pc, #84]	; (800143c <ADC_Callback+0xd0>)
 80013e6:	440b      	add	r3, r1
 80013e8:	4619      	mov	r1, r3
 80013ea:	4610      	mov	r0, r2
 80013ec:	f002 fb3e 	bl	8003a6c <Spectrogram_Compute>
	cur_melvec++;
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <ADC_Callback+0xcc>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	3301      	adds	r3, #1
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <ADC_Callback+0xcc>)
 80013fc:	701a      	strb	r2, [r3, #0]

	ADCDataRdy[buf_cplt] = 0;
 80013fe:	4a0b      	ldr	r2, [pc, #44]	; (800142c <ADC_Callback+0xc0>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4413      	add	r3, r2
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
	stop_cycle_count("spectrogramgloe");
 8001408:	480d      	ldr	r0, [pc, #52]	; (8001440 <ADC_Callback+0xd4>)
 800140a:	f002 fe3c 	bl	8004086 <stop_cycle_count>

	if (rem_n_bufs == 0) {
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <ADC_Callback+0xbc>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d103      	bne.n	800141e <ADC_Callback+0xb2>
		print_spectrogram();
 8001416:	f7ff fea9 	bl	800116c <print_spectrogram>
		send_spectrogram();
 800141a:	f7ff ff7f 	bl	800131c <send_spectrogram>
	}
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20003d5c 	.word	0x20003d5c
 800142c:	20003a34 	.word	0x20003a34
 8001430:	0800db24 	.word	0x0800db24
 8001434:	20000000 	.word	0x20000000
 8001438:	20003a36 	.word	0x20003a36
 800143c:	20003a38 	.word	0x20003a38
 8001440:	0800db44 	.word	0x0800db44

08001444 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	ADC_Callback(1);
 800144c:	2001      	movs	r0, #1
 800144e:	f7ff ff8d 	bl	800136c <ADC_Callback>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
	ADC_Callback(0);
 8001462:	2000      	movs	r0, #0
 8001464:	f7ff ff82 	bl	800136c <ADC_Callback>
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <mul>:
};
static const int BC = 4;
static const int KC = 4;
static const int ROUNDS = 10;

word8 mul(word8 a, word8 b) {
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	460a      	mov	r2, r1
 800147a:	71fb      	strb	r3, [r7, #7]
 800147c:	4613      	mov	r3, r2
 800147e:	71bb      	strb	r3, [r7, #6]
  /* multiply two elements of GF(256)
   * required for MixColumns and InvMixColumns
   */
  if (a && b)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d018      	beq.n	80014b8 <mul+0x48>
 8001486:	79bb      	ldrb	r3, [r7, #6]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d015      	beq.n	80014b8 <mul+0x48>
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	4a0e      	ldr	r2, [pc, #56]	; (80014c8 <mul+0x58>)
 8001490:	5cd3      	ldrb	r3, [r2, r3]
 8001492:	4619      	mov	r1, r3
 8001494:	79bb      	ldrb	r3, [r7, #6]
 8001496:	4a0c      	ldr	r2, [pc, #48]	; (80014c8 <mul+0x58>)
 8001498:	5cd3      	ldrb	r3, [r2, r3]
 800149a:	18ca      	adds	r2, r1, r3
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <mul+0x5c>)
 800149e:	fb83 1302 	smull	r1, r3, r3, r2
 80014a2:	4413      	add	r3, r2
 80014a4:	11d9      	asrs	r1, r3, #7
 80014a6:	17d3      	asrs	r3, r2, #31
 80014a8:	1ac9      	subs	r1, r1, r3
 80014aa:	460b      	mov	r3, r1
 80014ac:	021b      	lsls	r3, r3, #8
 80014ae:	1a5b      	subs	r3, r3, r1
 80014b0:	1ad1      	subs	r1, r2, r3
 80014b2:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <mul+0x60>)
 80014b4:	5c5b      	ldrb	r3, [r3, r1]
 80014b6:	e000      	b.n	80014ba <mul+0x4a>
  else
    return 0;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000008 	.word	0x20000008
 80014cc:	80808081 	.word	0x80808081
 80014d0:	20000108 	.word	0x20000108

080014d4 <AddRoundKey>:
void AddRoundKey(word8 a[4][MAXBC], word8 rk[4][MAXBC]) {
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  /* XOR corresponding text input and round key input bytes
   */
  int i, j;
  for (i = 0; i < 4; i++)
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	e024      	b.n	800152e <AddRoundKey+0x5a>
    for (j = 0; j < BC; j++)
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	e01a      	b.n	8001520 <AddRoundKey+0x4c>
      a[i][j] ^= rk[i][j];
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	441a      	add	r2, r3
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	4413      	add	r3, r2
 80014f6:	7819      	ldrb	r1, [r3, #0]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	441a      	add	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	4413      	add	r3, r2
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	00d2      	lsls	r2, r2, #3
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	4402      	add	r2, r0
 800150e:	404b      	eors	r3, r1
 8001510:	b2d9      	uxtb	r1, r3
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	4413      	add	r3, r2
 8001516:	460a      	mov	r2, r1
 8001518:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < BC; j++)
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	3301      	adds	r3, #1
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	2204      	movs	r2, #4
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	4293      	cmp	r3, r2
 8001526:	dbe0      	blt.n	80014ea <AddRoundKey+0x16>
  for (i = 0; i < 4; i++)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	3301      	adds	r3, #1
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2b03      	cmp	r3, #3
 8001532:	ddd7      	ble.n	80014e4 <AddRoundKey+0x10>
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <SubBytes>:
void SubBytes(word8 a[4][MAXBC], word8 box[256]) {
 8001542:	b480      	push	{r7}
 8001544:	b085      	sub	sp, #20
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	6039      	str	r1, [r7, #0]
  /* Replace every byte of the input by the byte at that place
   * in the non-linear S-box
   */
  int i, j;
  for (i = 0; i < 4; i++)
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	e01f      	b.n	8001592 <SubBytes+0x50>
    for (j = 0; j < BC; j++)
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	e015      	b.n	8001584 <SubBytes+0x42>
      a[i][j] = box[a[i][j]];
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	441a      	add	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	4413      	add	r3, r2
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	4413      	add	r3, r2
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	00d2      	lsls	r2, r2, #3
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	440a      	add	r2, r1
 8001574:	7819      	ldrb	r1, [r3, #0]
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	4413      	add	r3, r2
 800157a:	460a      	mov	r2, r1
 800157c:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < BC; j++)
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	3301      	adds	r3, #1
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	2204      	movs	r2, #4
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	4293      	cmp	r3, r2
 800158a:	dbe5      	blt.n	8001558 <SubBytes+0x16>
  for (i = 0; i < 4; i++)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3301      	adds	r3, #1
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2b03      	cmp	r3, #3
 8001596:	dddc      	ble.n	8001552 <SubBytes+0x10>
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <ShiftRows>:

void ShiftRows(word8 a[4][MAXBC], word8 d) {
 80015a8:	b480      	push	{r7}
 80015aa:	b087      	sub	sp, #28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	70fb      	strb	r3, [r7, #3]
  /* Row 0 remains unchanged
   * The other three rows are shifted a variable amount
   */
  word8 tmp[MAXBC];
  int i, j;
  if (d == 0) {
 80015b4:	78fb      	ldrb	r3, [r7, #3]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d146      	bne.n	8001648 <ShiftRows+0xa0>
    for (i = 1; i < 4; i++) {
 80015ba:	2301      	movs	r3, #1
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	e03f      	b.n	8001640 <ShiftRows+0x98>
      for (j = 0; j < BC; j++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	e01e      	b.n	8001604 <ShiftRows+0x5c>
        tmp[j] = a[i][(j + shifts[BC - 4][i]) % BC];
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	18d1      	adds	r1, r2, r3
 80015ce:	2304      	movs	r3, #4
 80015d0:	3b04      	subs	r3, #4
 80015d2:	4a44      	ldr	r2, [pc, #272]	; (80016e4 <ShiftRows+0x13c>)
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	441a      	add	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	4413      	add	r3, r2
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	4413      	add	r3, r2
 80015e4:	2204      	movs	r2, #4
 80015e6:	fb93 f0f2 	sdiv	r0, r3, r2
 80015ea:	fb00 f202 	mul.w	r2, r0, r2
 80015ee:	1a9b      	subs	r3, r3, r2
 80015f0:	5cc9      	ldrb	r1, [r1, r3]
 80015f2:	f107 0208 	add.w	r2, r7, #8
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4413      	add	r3, r2
 80015fa:	460a      	mov	r2, r1
 80015fc:	701a      	strb	r2, [r3, #0]
      for (j = 0; j < BC; j++)
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	3301      	adds	r3, #1
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	2204      	movs	r2, #4
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	4293      	cmp	r3, r2
 800160a:	dbdc      	blt.n	80015c6 <ShiftRows+0x1e>
      for (j = 0; j < BC; j++)
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	e00f      	b.n	8001632 <ShiftRows+0x8a>
        a[i][j] = tmp[j];
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	441a      	add	r2, r3
 800161a:	f107 0108 	add.w	r1, r7, #8
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	440b      	add	r3, r1
 8001622:	7819      	ldrb	r1, [r3, #0]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4413      	add	r3, r2
 8001628:	460a      	mov	r2, r1
 800162a:	701a      	strb	r2, [r3, #0]
      for (j = 0; j < BC; j++)
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	3301      	adds	r3, #1
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	2204      	movs	r2, #4
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4293      	cmp	r3, r2
 8001638:	dbeb      	blt.n	8001612 <ShiftRows+0x6a>
    for (i = 1; i < 4; i++) {
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	3301      	adds	r3, #1
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	2b03      	cmp	r3, #3
 8001644:	ddbc      	ble.n	80015c0 <ShiftRows+0x18>
        tmp[j] = a[i][(BC + j - shifts[BC - 4][i]) % BC];
      for (j = 0; j < BC; j++)
        a[i][j] = tmp[j];
    }
  }
}
 8001646:	e046      	b.n	80016d6 <ShiftRows+0x12e>
    for (i = 1; i < 4; i++) {
 8001648:	2301      	movs	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	e040      	b.n	80016d0 <ShiftRows+0x128>
      for (j = 0; j < BC; j++)
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	e01f      	b.n	8001694 <ShiftRows+0xec>
        tmp[j] = a[i][(BC + j - shifts[BC - 4][i]) % BC];
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	18d1      	adds	r1, r2, r3
 800165c:	2204      	movs	r2, #4
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4413      	add	r3, r2
 8001662:	2204      	movs	r2, #4
 8001664:	3a04      	subs	r2, #4
 8001666:	481f      	ldr	r0, [pc, #124]	; (80016e4 <ShiftRows+0x13c>)
 8001668:	0092      	lsls	r2, r2, #2
 800166a:	4410      	add	r0, r2
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	4402      	add	r2, r0
 8001670:	7812      	ldrb	r2, [r2, #0]
 8001672:	1a9b      	subs	r3, r3, r2
 8001674:	2204      	movs	r2, #4
 8001676:	fb93 f0f2 	sdiv	r0, r3, r2
 800167a:	fb00 f202 	mul.w	r2, r0, r2
 800167e:	1a9b      	subs	r3, r3, r2
 8001680:	5cc9      	ldrb	r1, [r1, r3]
 8001682:	f107 0208 	add.w	r2, r7, #8
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	4413      	add	r3, r2
 800168a:	460a      	mov	r2, r1
 800168c:	701a      	strb	r2, [r3, #0]
      for (j = 0; j < BC; j++)
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	3301      	adds	r3, #1
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	2204      	movs	r2, #4
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	4293      	cmp	r3, r2
 800169a:	dbdb      	blt.n	8001654 <ShiftRows+0xac>
      for (j = 0; j < BC; j++)
 800169c:	2300      	movs	r3, #0
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	e00f      	b.n	80016c2 <ShiftRows+0x11a>
        a[i][j] = tmp[j];
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	441a      	add	r2, r3
 80016aa:	f107 0108 	add.w	r1, r7, #8
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	440b      	add	r3, r1
 80016b2:	7819      	ldrb	r1, [r3, #0]
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	4413      	add	r3, r2
 80016b8:	460a      	mov	r2, r1
 80016ba:	701a      	strb	r2, [r3, #0]
      for (j = 0; j < BC; j++)
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	3301      	adds	r3, #1
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	2204      	movs	r2, #4
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	4293      	cmp	r3, r2
 80016c8:	dbeb      	blt.n	80016a2 <ShiftRows+0xfa>
    for (i = 1; i < 4; i++) {
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3301      	adds	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	ddbb      	ble.n	800164e <ShiftRows+0xa6>
}
 80016d6:	bf00      	nop
 80016d8:	371c      	adds	r7, #28
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000380 	.word	0x20000380

080016e8 <MixColumns>:
void MixColumns(word8 a[4][MAXBC]) {
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b08d      	sub	sp, #52	; 0x34
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Mix the four bytes of every column in a linear way
   */
  word8 b[4][MAXBC];
  int i, j;
  for (j = 0; j < BC; j++)
 80016f0:	2300      	movs	r3, #0
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80016f4:	e059      	b.n	80017aa <MixColumns+0xc2>
    for (i = 0; i < 4; i++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016fa:	e050      	b.n	800179e <MixColumns+0xb6>
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 80016fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	441a      	add	r2, r3
 8001704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001706:	4413      	add	r3, r2
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	4619      	mov	r1, r3
 800170c:	2002      	movs	r0, #2
 800170e:	f7ff feaf 	bl	8001470 <mul>
 8001712:	4603      	mov	r3, r0
 8001714:	461c      	mov	r4, r3
 8001716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001718:	3301      	adds	r3, #1
 800171a:	425a      	negs	r2, r3
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	f002 0203 	and.w	r2, r2, #3
 8001724:	bf58      	it	pl
 8001726:	4253      	negpl	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	441a      	add	r2, r3
 800172e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001730:	4413      	add	r3, r2
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	2003      	movs	r0, #3
 8001738:	f7ff fe9a 	bl	8001470 <mul>
 800173c:	4603      	mov	r3, r0
 800173e:	4063      	eors	r3, r4
 8001740:	b2da      	uxtb	r2, r3
                a[(i + 2) % 4][j] ^ a[(i + 3) % 4][j];
 8001742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001744:	3302      	adds	r3, #2
 8001746:	4259      	negs	r1, r3
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	f001 0103 	and.w	r1, r1, #3
 8001750:	bf58      	it	pl
 8001752:	424b      	negpl	r3, r1
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	4419      	add	r1, r3
 800175a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175c:	440b      	add	r3, r1
 800175e:	781b      	ldrb	r3, [r3, #0]
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 8001760:	4053      	eors	r3, r2
 8001762:	b2da      	uxtb	r2, r3
                a[(i + 2) % 4][j] ^ a[(i + 3) % 4][j];
 8001764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001766:	3303      	adds	r3, #3
 8001768:	4259      	negs	r1, r3
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	f001 0103 	and.w	r1, r1, #3
 8001772:	bf58      	it	pl
 8001774:	424b      	negpl	r3, r1
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	4419      	add	r1, r3
 800177c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800177e:	440b      	add	r3, r1
 8001780:	781b      	ldrb	r3, [r3, #0]
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 8001782:	4053      	eors	r3, r2
 8001784:	b2d9      	uxtb	r1, r3
 8001786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	3330      	adds	r3, #48	; 0x30
 800178c:	19da      	adds	r2, r3, r7
 800178e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001790:	4413      	add	r3, r2
 8001792:	3b28      	subs	r3, #40	; 0x28
 8001794:	460a      	mov	r2, r1
 8001796:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 4; i++)
 8001798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179a:	3301      	adds	r3, #1
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800179e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	ddab      	ble.n	80016fc <MixColumns+0x14>
  for (j = 0; j < BC; j++)
 80017a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a6:	3301      	adds	r3, #1
 80017a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80017aa:	2204      	movs	r2, #4
 80017ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ae:	4293      	cmp	r3, r2
 80017b0:	dba1      	blt.n	80016f6 <MixColumns+0xe>
  for (i = 0; i < 4; i++)
 80017b2:	2300      	movs	r3, #0
 80017b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b6:	e01c      	b.n	80017f2 <MixColumns+0x10a>
    for (j = 0; j < BC; j++)
 80017b8:	2300      	movs	r3, #0
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80017bc:	e012      	b.n	80017e4 <MixColumns+0xfc>
      a[i][j] = b[i][j];
 80017be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	441a      	add	r2, r3
 80017c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	3330      	adds	r3, #48	; 0x30
 80017cc:	19d9      	adds	r1, r3, r7
 80017ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d0:	440b      	add	r3, r1
 80017d2:	3b28      	subs	r3, #40	; 0x28
 80017d4:	7819      	ldrb	r1, [r3, #0]
 80017d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d8:	4413      	add	r3, r2
 80017da:	460a      	mov	r2, r1
 80017dc:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < BC; j++)
 80017de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e0:	3301      	adds	r3, #1
 80017e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80017e4:	2204      	movs	r2, #4
 80017e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e8:	4293      	cmp	r3, r2
 80017ea:	dbe8      	blt.n	80017be <MixColumns+0xd6>
  for (i = 0; i < 4; i++)
 80017ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ee:	3301      	adds	r3, #1
 80017f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f4:	2b03      	cmp	r3, #3
 80017f6:	dddf      	ble.n	80017b8 <MixColumns+0xd0>
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	3734      	adds	r7, #52	; 0x34
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd90      	pop	{r4, r7, pc}
	...

08001804 <KeyExpansion>:
                mul(0xd, a[(i + 2) % 4][j]) ^ mul(0x9, a[(i + 3) % 4][j]);
  for (i = 0; i < 4; i++)
    for (j = 0; j < BC; j++)
      a[i][j] = b[i][j];
}
int KeyExpansion(word8 k[4][MAXKC], word8 W[MAXROUNDS + 1][4][MAXBC]) {
 8001804:	b480      	push	{r7}
 8001806:	b08f      	sub	sp, #60	; 0x3c
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  /* Calculate the required round keys
   */
  int i, j, t, RCpointer = 1;
 800180e:	2301      	movs	r3, #1
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
  word8 tk[4][MAXKC];
  for (j = 0; j < KC; j++)
 8001812:	2300      	movs	r3, #0
 8001814:	633b      	str	r3, [r7, #48]	; 0x30
 8001816:	e01b      	b.n	8001850 <KeyExpansion+0x4c>
    for (i = 0; i < 4; i++)
 8001818:	2300      	movs	r3, #0
 800181a:	637b      	str	r3, [r7, #52]	; 0x34
 800181c:	e012      	b.n	8001844 <KeyExpansion+0x40>
      tk[i][j] = k[i][j];
 800181e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	441a      	add	r2, r3
 8001826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001828:	4413      	add	r3, r2
 800182a:	7819      	ldrb	r1, [r3, #0]
 800182c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	3338      	adds	r3, #56	; 0x38
 8001832:	19da      	adds	r2, r3, r7
 8001834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001836:	4413      	add	r3, r2
 8001838:	3b30      	subs	r3, #48	; 0x30
 800183a:	460a      	mov	r2, r1
 800183c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 4; i++)
 800183e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001840:	3301      	adds	r3, #1
 8001842:	637b      	str	r3, [r7, #52]	; 0x34
 8001844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001846:	2b03      	cmp	r3, #3
 8001848:	dde9      	ble.n	800181e <KeyExpansion+0x1a>
  for (j = 0; j < KC; j++)
 800184a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800184c:	3301      	adds	r3, #1
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
 8001850:	2204      	movs	r2, #4
 8001852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001854:	4293      	cmp	r3, r2
 8001856:	dbdf      	blt.n	8001818 <KeyExpansion+0x14>
  t = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* copy values into round key array */
  for (j = 0; (j < KC) && (t < (ROUNDS + 1) * BC); j++, t++)
 800185c:	2300      	movs	r3, #0
 800185e:	633b      	str	r3, [r7, #48]	; 0x30
 8001860:	e02a      	b.n	80018b8 <KeyExpansion+0xb4>
    for (i = 0; i < 4; i++)
 8001862:	2300      	movs	r3, #0
 8001864:	637b      	str	r3, [r7, #52]	; 0x34
 8001866:	e01e      	b.n	80018a6 <KeyExpansion+0xa2>
      W[t / BC][i][t % BC] = tk[i][j];
 8001868:	2204      	movs	r2, #4
 800186a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800186c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001870:	015b      	lsls	r3, r3, #5
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	18d1      	adds	r1, r2, r3
 8001876:	2204      	movs	r2, #4
 8001878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187a:	fb93 f0f2 	sdiv	r0, r3, r2
 800187e:	fb00 f202 	mul.w	r2, r0, r2
 8001882:	1a9b      	subs	r3, r3, r2
 8001884:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001886:	00d2      	lsls	r2, r2, #3
 8001888:	3238      	adds	r2, #56	; 0x38
 800188a:	19d0      	adds	r0, r2, r7
 800188c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800188e:	4402      	add	r2, r0
 8001890:	3a30      	subs	r2, #48	; 0x30
 8001892:	7810      	ldrb	r0, [r2, #0]
 8001894:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001896:	00d2      	lsls	r2, r2, #3
 8001898:	440a      	add	r2, r1
 800189a:	4413      	add	r3, r2
 800189c:	4602      	mov	r2, r0
 800189e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 4; i++)
 80018a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a2:	3301      	adds	r3, #1
 80018a4:	637b      	str	r3, [r7, #52]	; 0x34
 80018a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	dddd      	ble.n	8001868 <KeyExpansion+0x64>
  for (j = 0; (j < KC) && (t < (ROUNDS + 1) * BC); j++, t++)
 80018ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ae:	3301      	adds	r3, #1
 80018b0:	633b      	str	r3, [r7, #48]	; 0x30
 80018b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b4:	3301      	adds	r3, #1
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018b8:	2204      	movs	r2, #4
 80018ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018bc:	4293      	cmp	r3, r2
 80018be:	f280 8129 	bge.w	8001b14 <KeyExpansion+0x310>
 80018c2:	230a      	movs	r3, #10
 80018c4:	3301      	adds	r3, #1
 80018c6:	2204      	movs	r2, #4
 80018c8:	fb02 f303 	mul.w	r3, r2, r3
 80018cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ce:	429a      	cmp	r2, r3
 80018d0:	dbc7      	blt.n	8001862 <KeyExpansion+0x5e>
  while (t < (ROUNDS + 1) * BC) {
 80018d2:	e11f      	b.n	8001b14 <KeyExpansion+0x310>
    /* while not enough round key material calculated,
     * calculate new values
     */
    for (i = 0; i < 4; i++)
 80018d4:	2300      	movs	r3, #0
 80018d6:	637b      	str	r3, [r7, #52]	; 0x34
 80018d8:	e024      	b.n	8001924 <KeyExpansion+0x120>
      tk[i][0] ^= S[tk[(i + 1) % 4][KC - 1]];
 80018da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	3338      	adds	r3, #56	; 0x38
 80018e0:	443b      	add	r3, r7
 80018e2:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 80018e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e8:	3301      	adds	r3, #1
 80018ea:	4259      	negs	r1, r3
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	f001 0103 	and.w	r1, r1, #3
 80018f4:	bf58      	it	pl
 80018f6:	424b      	negpl	r3, r1
 80018f8:	2104      	movs	r1, #4
 80018fa:	3901      	subs	r1, #1
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	3338      	adds	r3, #56	; 0x38
 8001900:	443b      	add	r3, r7
 8001902:	440b      	add	r3, r1
 8001904:	3b30      	subs	r3, #48	; 0x30
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	4619      	mov	r1, r3
 800190a:	4b8a      	ldr	r3, [pc, #552]	; (8001b34 <KeyExpansion+0x330>)
 800190c:	5c5b      	ldrb	r3, [r3, r1]
 800190e:	4053      	eors	r3, r2
 8001910:	b2da      	uxtb	r2, r3
 8001912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	3338      	adds	r3, #56	; 0x38
 8001918:	443b      	add	r3, r7
 800191a:	f803 2c30 	strb.w	r2, [r3, #-48]
    for (i = 0; i < 4; i++)
 800191e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001920:	3301      	adds	r3, #1
 8001922:	637b      	str	r3, [r7, #52]	; 0x34
 8001924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001926:	2b03      	cmp	r3, #3
 8001928:	ddd7      	ble.n	80018da <KeyExpansion+0xd6>
    tk[0][0] ^= RC[RCpointer++];
 800192a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001930:	4a81      	ldr	r2, [pc, #516]	; (8001b38 <KeyExpansion+0x334>)
 8001932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001936:	7a3a      	ldrb	r2, [r7, #8]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	4053      	eors	r3, r2
 800193c:	b2db      	uxtb	r3, r3
 800193e:	723b      	strb	r3, [r7, #8]

    if (KC <= 6)
 8001940:	2304      	movs	r3, #4
 8001942:	2b06      	cmp	r3, #6
 8001944:	dc2f      	bgt.n	80019a6 <KeyExpansion+0x1a2>
      for (j = 1; j < KC; j++)
 8001946:	2301      	movs	r3, #1
 8001948:	633b      	str	r3, [r7, #48]	; 0x30
 800194a:	e027      	b.n	800199c <KeyExpansion+0x198>
        for (i = 0; i < 4; i++)
 800194c:	2300      	movs	r3, #0
 800194e:	637b      	str	r3, [r7, #52]	; 0x34
 8001950:	e01e      	b.n	8001990 <KeyExpansion+0x18c>
          tk[i][j] ^= tk[i][j - 1];
 8001952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	3338      	adds	r3, #56	; 0x38
 8001958:	19da      	adds	r2, r3, r7
 800195a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800195c:	4413      	add	r3, r2
 800195e:	3b30      	subs	r3, #48	; 0x30
 8001960:	781a      	ldrb	r2, [r3, #0]
 8001962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001964:	3b01      	subs	r3, #1
 8001966:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001968:	00c9      	lsls	r1, r1, #3
 800196a:	3138      	adds	r1, #56	; 0x38
 800196c:	4439      	add	r1, r7
 800196e:	440b      	add	r3, r1
 8001970:	3b30      	subs	r3, #48	; 0x30
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	4053      	eors	r3, r2
 8001976:	b2d9      	uxtb	r1, r3
 8001978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	3338      	adds	r3, #56	; 0x38
 800197e:	19da      	adds	r2, r3, r7
 8001980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001982:	4413      	add	r3, r2
 8001984:	3b30      	subs	r3, #48	; 0x30
 8001986:	460a      	mov	r2, r1
 8001988:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < 4; i++)
 800198a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198c:	3301      	adds	r3, #1
 800198e:	637b      	str	r3, [r7, #52]	; 0x34
 8001990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001992:	2b03      	cmp	r3, #3
 8001994:	dddd      	ble.n	8001952 <KeyExpansion+0x14e>
      for (j = 1; j < KC; j++)
 8001996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001998:	3301      	adds	r3, #1
 800199a:	633b      	str	r3, [r7, #48]	; 0x30
 800199c:	2204      	movs	r2, #4
 800199e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a0:	4293      	cmp	r3, r2
 80019a2:	dbd3      	blt.n	800194c <KeyExpansion+0x148>
 80019a4:	e07c      	b.n	8001aa0 <KeyExpansion+0x29c>
    else {
      for (j = 1; j < 4; j++)
 80019a6:	2301      	movs	r3, #1
 80019a8:	633b      	str	r3, [r7, #48]	; 0x30
 80019aa:	e027      	b.n	80019fc <KeyExpansion+0x1f8>
        for (i = 0; i < 4; i++)
 80019ac:	2300      	movs	r3, #0
 80019ae:	637b      	str	r3, [r7, #52]	; 0x34
 80019b0:	e01e      	b.n	80019f0 <KeyExpansion+0x1ec>
          tk[i][j] ^= tk[i][j - 1];
 80019b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	3338      	adds	r3, #56	; 0x38
 80019b8:	19da      	adds	r2, r3, r7
 80019ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019bc:	4413      	add	r3, r2
 80019be:	3b30      	subs	r3, #48	; 0x30
 80019c0:	781a      	ldrb	r2, [r3, #0]
 80019c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c4:	3b01      	subs	r3, #1
 80019c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80019c8:	00c9      	lsls	r1, r1, #3
 80019ca:	3138      	adds	r1, #56	; 0x38
 80019cc:	4439      	add	r1, r7
 80019ce:	440b      	add	r3, r1
 80019d0:	3b30      	subs	r3, #48	; 0x30
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	4053      	eors	r3, r2
 80019d6:	b2d9      	uxtb	r1, r3
 80019d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	3338      	adds	r3, #56	; 0x38
 80019de:	19da      	adds	r2, r3, r7
 80019e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e2:	4413      	add	r3, r2
 80019e4:	3b30      	subs	r3, #48	; 0x30
 80019e6:	460a      	mov	r2, r1
 80019e8:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < 4; i++)
 80019ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ec:	3301      	adds	r3, #1
 80019ee:	637b      	str	r3, [r7, #52]	; 0x34
 80019f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	dddd      	ble.n	80019b2 <KeyExpansion+0x1ae>
      for (j = 1; j < 4; j++)
 80019f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f8:	3301      	adds	r3, #1
 80019fa:	633b      	str	r3, [r7, #48]	; 0x30
 80019fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	ddd4      	ble.n	80019ac <KeyExpansion+0x1a8>
      for (i = 0; i < 4; i++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	637b      	str	r3, [r7, #52]	; 0x34
 8001a06:	e019      	b.n	8001a3c <KeyExpansion+0x238>
        tk[i][4] ^= S[tk[i][3]];
 8001a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	3338      	adds	r3, #56	; 0x38
 8001a0e:	443b      	add	r3, r7
 8001a10:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 8001a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	3338      	adds	r3, #56	; 0x38
 8001a1a:	443b      	add	r3, r7
 8001a1c:	f813 3c2d 	ldrb.w	r3, [r3, #-45]
 8001a20:	4619      	mov	r1, r3
 8001a22:	4b44      	ldr	r3, [pc, #272]	; (8001b34 <KeyExpansion+0x330>)
 8001a24:	5c5b      	ldrb	r3, [r3, r1]
 8001a26:	4053      	eors	r3, r2
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	3338      	adds	r3, #56	; 0x38
 8001a30:	443b      	add	r3, r7
 8001a32:	f803 2c2c 	strb.w	r2, [r3, #-44]
      for (i = 0; i < 4; i++)
 8001a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a38:	3301      	adds	r3, #1
 8001a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	dde2      	ble.n	8001a08 <KeyExpansion+0x204>
      for (j = 5; j < KC; j++)
 8001a42:	2305      	movs	r3, #5
 8001a44:	633b      	str	r3, [r7, #48]	; 0x30
 8001a46:	e027      	b.n	8001a98 <KeyExpansion+0x294>
        for (i = 0; i < 4; i++)
 8001a48:	2300      	movs	r3, #0
 8001a4a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a4c:	e01e      	b.n	8001a8c <KeyExpansion+0x288>
          tk[i][j] ^= tk[i][j - 1];
 8001a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	3338      	adds	r3, #56	; 0x38
 8001a54:	19da      	adds	r2, r3, r7
 8001a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a58:	4413      	add	r3, r2
 8001a5a:	3b30      	subs	r3, #48	; 0x30
 8001a5c:	781a      	ldrb	r2, [r3, #0]
 8001a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a60:	3b01      	subs	r3, #1
 8001a62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a64:	00c9      	lsls	r1, r1, #3
 8001a66:	3138      	adds	r1, #56	; 0x38
 8001a68:	4439      	add	r1, r7
 8001a6a:	440b      	add	r3, r1
 8001a6c:	3b30      	subs	r3, #48	; 0x30
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	4053      	eors	r3, r2
 8001a72:	b2d9      	uxtb	r1, r3
 8001a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	3338      	adds	r3, #56	; 0x38
 8001a7a:	19da      	adds	r2, r3, r7
 8001a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a7e:	4413      	add	r3, r2
 8001a80:	3b30      	subs	r3, #48	; 0x30
 8001a82:	460a      	mov	r2, r1
 8001a84:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < 4; i++)
 8001a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a88:	3301      	adds	r3, #1
 8001a8a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	dddd      	ble.n	8001a4e <KeyExpansion+0x24a>
      for (j = 5; j < KC; j++)
 8001a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a94:	3301      	adds	r3, #1
 8001a96:	633b      	str	r3, [r7, #48]	; 0x30
 8001a98:	2204      	movs	r2, #4
 8001a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	dbd3      	blt.n	8001a48 <KeyExpansion+0x244>
    }
    /* copy values into round key array */
    for (j = 0; (j < KC) && (t < (ROUNDS + 1) * BC); j++, t++)
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	633b      	str	r3, [r7, #48]	; 0x30
 8001aa4:	e02a      	b.n	8001afc <KeyExpansion+0x2f8>
      for (i = 0; i < 4; i++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8001aaa:	e01e      	b.n	8001aea <KeyExpansion+0x2e6>
        W[t / BC][i][t % BC] = tk[i][j];
 8001aac:	2204      	movs	r2, #4
 8001aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab0:	fb93 f3f2 	sdiv	r3, r3, r2
 8001ab4:	015b      	lsls	r3, r3, #5
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	18d1      	adds	r1, r2, r3
 8001aba:	2204      	movs	r2, #4
 8001abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001abe:	fb93 f0f2 	sdiv	r0, r3, r2
 8001ac2:	fb00 f202 	mul.w	r2, r0, r2
 8001ac6:	1a9b      	subs	r3, r3, r2
 8001ac8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001aca:	00d2      	lsls	r2, r2, #3
 8001acc:	3238      	adds	r2, #56	; 0x38
 8001ace:	19d0      	adds	r0, r2, r7
 8001ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ad2:	4402      	add	r2, r0
 8001ad4:	3a30      	subs	r2, #48	; 0x30
 8001ad6:	7810      	ldrb	r0, [r2, #0]
 8001ad8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ada:	00d2      	lsls	r2, r2, #3
 8001adc:	440a      	add	r2, r1
 8001ade:	4413      	add	r3, r2
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < 4; i++)
 8001ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	637b      	str	r3, [r7, #52]	; 0x34
 8001aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aec:	2b03      	cmp	r3, #3
 8001aee:	dddd      	ble.n	8001aac <KeyExpansion+0x2a8>
    for (j = 0; (j < KC) && (t < (ROUNDS + 1) * BC); j++, t++)
 8001af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af2:	3301      	adds	r3, #1
 8001af4:	633b      	str	r3, [r7, #48]	; 0x30
 8001af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af8:	3301      	adds	r3, #1
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001afc:	2204      	movs	r2, #4
 8001afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b00:	4293      	cmp	r3, r2
 8001b02:	da07      	bge.n	8001b14 <KeyExpansion+0x310>
 8001b04:	230a      	movs	r3, #10
 8001b06:	3301      	adds	r3, #1
 8001b08:	2204      	movs	r2, #4
 8001b0a:	fb02 f303 	mul.w	r3, r2, r3
 8001b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b10:	429a      	cmp	r2, r3
 8001b12:	dbc8      	blt.n	8001aa6 <KeyExpansion+0x2a2>
  while (t < (ROUNDS + 1) * BC) {
 8001b14:	230a      	movs	r3, #10
 8001b16:	3301      	adds	r3, #1
 8001b18:	2204      	movs	r2, #4
 8001b1a:	fb02 f303 	mul.w	r3, r2, r3
 8001b1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b20:	429a      	cmp	r2, r3
 8001b22:	f6ff aed7 	blt.w	80018d4 <KeyExpansion+0xd0>
  }
  return 0;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	373c      	adds	r7, #60	; 0x3c
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	20000208 	.word	0x20000208
 8001b38:	20000308 	.word	0x20000308

08001b3c <Encrypt>:
int Encrypt(word8 a[4][MAXBC], word8 rk[MAXROUNDS + 1][4][MAXBC]) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  /* Encryption of one block.
   */
  int r;
  /* begin with a key addition
   * */
  AddRoundKey(a, rk[0]);
 8001b46:	6839      	ldr	r1, [r7, #0]
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff fcc3 	bl	80014d4 <AddRoundKey>
  /* ROUNDS-1 ordinary rounds
   */
  for (r = 1; r < ROUNDS; r++) {
 8001b4e:	2301      	movs	r3, #1
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	e015      	b.n	8001b80 <Encrypt+0x44>
    SubBytes(a, S);
 8001b54:	4917      	ldr	r1, [pc, #92]	; (8001bb4 <Encrypt+0x78>)
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff fcf3 	bl	8001542 <SubBytes>
    ShiftRows(a, 0);
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff fd22 	bl	80015a8 <ShiftRows>
    MixColumns(a);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff fdbf 	bl	80016e8 <MixColumns>
    AddRoundKey(a, rk[r]);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	015b      	lsls	r3, r3, #5
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	4413      	add	r3, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff fcad 	bl	80014d4 <AddRoundKey>
  for (r = 1; r < ROUNDS; r++) {
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	220a      	movs	r2, #10
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4293      	cmp	r3, r2
 8001b86:	dbe5      	blt.n	8001b54 <Encrypt+0x18>
  }
  /* Last round is special: there is no MixColumns
   */
  SubBytes(a, S);
 8001b88:	490a      	ldr	r1, [pc, #40]	; (8001bb4 <Encrypt+0x78>)
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff fcd9 	bl	8001542 <SubBytes>
  ShiftRows(a, 0);
 8001b90:	2100      	movs	r1, #0
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff fd08 	bl	80015a8 <ShiftRows>
  AddRoundKey(a, rk[ROUNDS]);
 8001b98:	230a      	movs	r3, #10
 8001b9a:	015b      	lsls	r3, r3, #5
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff fc96 	bl	80014d4 <AddRoundKey>
  return 0;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000208 	.word	0x20000208

08001bb8 <AES128_encrypt>:
   */
  AddRoundKey(a, rk[0]);
  return 0;
}

void AES128_encrypt(word8* block, const word8* key) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001bc4:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8001bc8:	6018      	str	r0, [r3, #0]
 8001bca:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001bce:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8001bd2:	6019      	str	r1, [r3, #0]
  word8 a[4][MAXBC], rk[MAXROUNDS + 1][4][MAXBC], sk[4][MAXKC];
  for (int j=0; j<4; j++) {
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8001bda:	e046      	b.n	8001c6a <AES128_encrypt+0xb2>
      for (int i=0; i<4; i++) {
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8001be2:	e039      	b.n	8001c58 <AES128_encrypt+0xa0>
          a[i][j] = block[4*j+i];
 8001be4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001be8:	009a      	lsls	r2, r3, #2
 8001bea:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001bee:	4413      	add	r3, r2
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001bf6:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	7819      	ldrb	r1, [r3, #0]
 8001c00:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8001c0a:	19da      	adds	r2, r3, r7
 8001c0c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001c10:	4413      	add	r3, r2
 8001c12:	3b30      	subs	r3, #48	; 0x30
 8001c14:	460a      	mov	r2, r1
 8001c16:	701a      	strb	r2, [r3, #0]
          sk[i][j] = key[4*j+i];
 8001c18:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001c1c:	009a      	lsls	r2, r3, #2
 8001c1e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001c22:	4413      	add	r3, r2
 8001c24:	461a      	mov	r2, r3
 8001c26:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001c2a:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4413      	add	r3, r2
 8001c32:	7819      	ldrb	r1, [r3, #0]
 8001c34:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001c38:	f5a3 720c 	sub.w	r2, r3, #560	; 0x230
 8001c3c:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	441a      	add	r2, r3
 8001c44:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001c48:	4413      	add	r3, r2
 8001c4a:	460a      	mov	r2, r1
 8001c4c:	701a      	strb	r2, [r3, #0]
      for (int i=0; i<4; i++) {
 8001c4e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001c52:	3301      	adds	r3, #1
 8001c54:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8001c58:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	ddc1      	ble.n	8001be4 <AES128_encrypt+0x2c>
  for (int j=0; j<4; j++) {
 8001c60:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001c64:	3301      	adds	r3, #1
 8001c66:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8001c6a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	ddb4      	ble.n	8001bdc <AES128_encrypt+0x24>
      }
  }
  KeyExpansion(sk, rk);
 8001c72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c76:	f107 0308 	add.w	r3, r7, #8
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fdc1 	bl	8001804 <KeyExpansion>
  Encrypt(a, rk);
 8001c82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ff55 	bl	8001b3c <Encrypt>
  for (int j=0; j<4; j++) {
 8001c92:	2300      	movs	r3, #0
 8001c94:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8001c98:	e02a      	b.n	8001cf0 <AES128_encrypt+0x138>
      for (int i=0; i<4; i++) {
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001ca0:	e01d      	b.n	8001cde <AES128_encrypt+0x126>
          block[4*j+i] = a[i][j];
 8001ca2:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001ca6:	009a      	lsls	r2, r3, #2
 8001ca8:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001cac:	4413      	add	r3, r2
 8001cae:	461a      	mov	r2, r3
 8001cb0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001cb4:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4413      	add	r3, r2
 8001cbc:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8001cc0:	00d2      	lsls	r2, r2, #3
 8001cc2:	f502 720e 	add.w	r2, r2, #568	; 0x238
 8001cc6:	19d1      	adds	r1, r2, r7
 8001cc8:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8001ccc:	440a      	add	r2, r1
 8001cce:	3a30      	subs	r2, #48	; 0x30
 8001cd0:	7812      	ldrb	r2, [r2, #0]
 8001cd2:	701a      	strb	r2, [r3, #0]
      for (int i=0; i<4; i++) {
 8001cd4:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001cd8:	3301      	adds	r3, #1
 8001cda:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001cde:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	dddd      	ble.n	8001ca2 <AES128_encrypt+0xea>
  for (int j=0; j<4; j++) {
 8001ce6:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001cea:	3301      	adds	r3, #1
 8001cec:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8001cf0:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	ddd0      	ble.n	8001c9a <AES128_encrypt+0xe2>
      }
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	f507 770e 	add.w	r7, r7, #568	; 0x238
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <arm_absmax_q15>:
void arm_absmax_q15(
  const q15_t * pSrc,
        uint32_t blockSize,
        q15_t * pResult,
        uint32_t * pIndex)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b09d      	sub	sp, #116	; 0x74
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	603b      	str	r3, [r7, #0]
        q15_t cur_absmax, out;                     /* Temporary variables to store the output value. */\
        uint32_t blkCnt, outIndex;                     /* Loop counter */                                   \
        uint32_t index;                                /* index of maximum value */                         \
                                                                                                            \
  /* Initialize index value to zero. */                                                                     \
  outIndex = 0U;                                                                                            \
 8001d12:	2300      	movs	r3, #0
 8001d14:	667b      	str	r3, [r7, #100]	; 0x64
  /* Load first input value that act as reference value for comparision */                                  \
  out = *pSrc++;                                                                                            \
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	1c9a      	adds	r2, r3, #2
 8001d1a:	60fa      	str	r2, [r7, #12]
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  out = (out > 0) ? out : (q15_t)__QSUB16(0, out);                                                                           \
 8001d22:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	dc0c      	bgt.n	8001d44 <arm_absmax_q15+0x40>
 8001d2a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8001d2e:	2200      	movs	r2, #0
 8001d30:	65ba      	str	r2, [r7, #88]	; 0x58
 8001d32:	657b      	str	r3, [r7, #84]	; 0x54

__STATIC_FORCEINLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001d34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d38:	fad3 f312 	qsub16	r3, r3, r2
 8001d3c:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
 8001d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	e001      	b.n	8001d48 <arm_absmax_q15+0x44>
 8001d44:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8001d48:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  /* Initialize index of extrema value. */                                                                  \
  index = 0U;                                                                                               \
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	663b      	str	r3, [r7, #96]	; 0x60
                                                                                                            \
  /* Loop unrolling: Compute 4 outputs at a time */                                                         \
  blkCnt = (blockSize - 1U) >> 2U;                                                                          \
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	089b      	lsrs	r3, r3, #2
 8001d56:	66bb      	str	r3, [r7, #104]	; 0x68
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 8001d58:	e0a5      	b.n	8001ea6 <arm_absmax_q15+0x1a2>
  {                                                                                                         \
    /* Initialize cur_absmax to next consecutive values one by one */                                         \
    cur_absmax = *pSrc++;                                                                                     \
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1c9a      	adds	r2, r3, #2
 8001d5e:	60fa      	str	r2, [r7, #12]
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8001d66:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	dc0c      	bgt.n	8001d88 <arm_absmax_q15+0x84>
 8001d6e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8001d72:	2200      	movs	r2, #0
 8001d74:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001d76:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d7c:	fad3 f312 	qsub16	r3, r3, r2
 8001d80:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8001d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d84:	b21b      	sxth	r3, r3
 8001d86:	e001      	b.n	8001d8c <arm_absmax_q15+0x88>
 8001d88:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8001d8c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    /* compare for the extrema value */                                                                     \
    if (cur_absmax > out)                                                                         \
 8001d90:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 8001d94:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	dd06      	ble.n	8001daa <arm_absmax_q15+0xa6>
    {                                                                                                       \
      /* Update the extrema value and it's index */                                                         \
      out = cur_absmax;                                                                                       \
 8001d9c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001da0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
      outIndex = index + 1U;                                                                                \
 8001da4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001da6:	3301      	adds	r3, #1
 8001da8:	667b      	str	r3, [r7, #100]	; 0x64
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1c9a      	adds	r2, r3, #2
 8001dae:	60fa      	str	r2, [r7, #12]
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8001db6:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	dc0c      	bgt.n	8001dd8 <arm_absmax_q15+0xd4>
 8001dbe:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	643a      	str	r2, [r7, #64]	; 0x40
 8001dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dcc:	fad3 f312 	qsub16	r3, r3, r2
 8001dd0:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8001dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dd4:	b21b      	sxth	r3, r3
 8001dd6:	e001      	b.n	8001ddc <arm_absmax_q15+0xd8>
 8001dd8:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8001ddc:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    if (cur_absmax > out)                                                                         \
 8001de0:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 8001de4:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8001de8:	429a      	cmp	r2, r3
 8001dea:	dd06      	ble.n	8001dfa <arm_absmax_q15+0xf6>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8001dec:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001df0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
      outIndex = index + 2U;                                                                                \
 8001df4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001df6:	3302      	adds	r3, #2
 8001df8:	667b      	str	r3, [r7, #100]	; 0x64
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1c9a      	adds	r2, r3, #2
 8001dfe:	60fa      	str	r2, [r7, #12]
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8001e06:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	dc0c      	bgt.n	8001e28 <arm_absmax_q15+0x124>
 8001e0e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8001e12:	2200      	movs	r2, #0
 8001e14:	637a      	str	r2, [r7, #52]	; 0x34
 8001e16:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e1c:	fad3 f312 	qsub16	r3, r3, r2
 8001e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e24:	b21b      	sxth	r3, r3
 8001e26:	e001      	b.n	8001e2c <arm_absmax_q15+0x128>
 8001e28:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8001e2c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    if (cur_absmax > out)                                                                          \
 8001e30:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 8001e34:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	dd06      	ble.n	8001e4a <arm_absmax_q15+0x146>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8001e3c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001e40:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
      outIndex = index + 3U;                                                                                \
 8001e44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e46:	3303      	adds	r3, #3
 8001e48:	667b      	str	r3, [r7, #100]	; 0x64
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	1c9a      	adds	r2, r3, #2
 8001e4e:	60fa      	str	r2, [r7, #12]
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8001e56:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	dc0c      	bgt.n	8001e78 <arm_absmax_q15+0x174>
 8001e5e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8001e62:	2200      	movs	r2, #0
 8001e64:	62ba      	str	r2, [r7, #40]	; 0x28
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e6c:	fad3 f312 	qsub16	r3, r3, r2
 8001e70:	623b      	str	r3, [r7, #32]
  return(result);
 8001e72:	6a3b      	ldr	r3, [r7, #32]
 8001e74:	b21b      	sxth	r3, r3
 8001e76:	e001      	b.n	8001e7c <arm_absmax_q15+0x178>
 8001e78:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8001e7c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    if (cur_absmax > out)                                                                          \
 8001e80:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 8001e84:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	dd06      	ble.n	8001e9a <arm_absmax_q15+0x196>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8001e8c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001e90:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
      outIndex = index + 4U;                                                                                \
 8001e94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e96:	3304      	adds	r3, #4
 8001e98:	667b      	str	r3, [r7, #100]	; 0x64
    }                                                                                                       \
                                                                                                            \
    index += 4U;                                                                                            \
 8001e9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	663b      	str	r3, [r7, #96]	; 0x60
                                                                                                            \
    /* Decrement loop counter */                                                                            \
    blkCnt--;                                                                                               \
 8001ea0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	66bb      	str	r3, [r7, #104]	; 0x68
  while (blkCnt > 0U)                                                                                       \
 8001ea6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f47f af56 	bne.w	8001d5a <arm_absmax_q15+0x56>
  }                                                                                                         \
                                                                                                            \
  /* Loop unrolling: Compute remaining outputs */                                                           \
  blkCnt = (blockSize - 1U) % 4U;                                                                           \
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	66bb      	str	r3, [r7, #104]	; 0x68
                                                                                                            \
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 8001eb8:	e02b      	b.n	8001f12 <arm_absmax_q15+0x20e>
  {                                                                                                         \
    cur_absmax = *pSrc++;                                                                                     \
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	1c9a      	adds	r2, r3, #2
 8001ebe:	60fa      	str	r2, [r7, #12]
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8001ec6:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	dc0c      	bgt.n	8001ee8 <arm_absmax_q15+0x1e4>
 8001ece:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	61fa      	str	r2, [r7, #28]
 8001ed6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	fad3 f312 	qsub16	r3, r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]
  return(result);
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	e001      	b.n	8001eec <arm_absmax_q15+0x1e8>
 8001ee8:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8001eec:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    if (cur_absmax > out)                                                                         \
 8001ef0:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 8001ef4:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	dd07      	ble.n	8001f0c <arm_absmax_q15+0x208>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8001efc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001f00:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
      outIndex = blockSize - blkCnt;                                                                        \
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	667b      	str	r3, [r7, #100]	; 0x64
    }                                                                                                       \
                                                                                                            \
    /* Decrement loop counter */                                                                            \
    blkCnt--;                                                                                               \
 8001f0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	66bb      	str	r3, [r7, #104]	; 0x68
  while (blkCnt > 0U)                                                                                       \
 8001f12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1d0      	bne.n	8001eba <arm_absmax_q15+0x1b6>
  }                                                                                                         \
                                                                                                            \
  /* Store the extrema value and it's index into destination pointers */                                    \
  *pResult = out;                                                                                           \
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001f1e:	801a      	strh	r2, [r3, #0]
  *pIndex = outIndex;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001f24:	601a      	str	r2, [r3, #0]
}
 8001f26:	bf00      	nop
 8001f28:	3774      	adds	r7, #116	; 0x74
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <MX_DMA_Init+0x38>)
 8001f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f3e:	4a0b      	ldr	r2, [pc, #44]	; (8001f6c <MX_DMA_Init+0x38>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	6493      	str	r3, [r2, #72]	; 0x48
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <MX_DMA_Init+0x38>)
 8001f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	607b      	str	r3, [r7, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2101      	movs	r1, #1
 8001f56:	200b      	movs	r0, #11
 8001f58:	f003 feab 	bl	8005cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f5c:	200b      	movs	r0, #11
 8001f5e:	f003 fec4 	bl	8005cea <HAL_NVIC_EnableIRQ>

}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000

08001f70 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08e      	sub	sp, #56	; 0x38
 8001f74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
 8001f84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f86:	4bb8      	ldr	r3, [pc, #736]	; (8002268 <MX_GPIO_Init+0x2f8>)
 8001f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8a:	4ab7      	ldr	r2, [pc, #732]	; (8002268 <MX_GPIO_Init+0x2f8>)
 8001f8c:	f043 0310 	orr.w	r3, r3, #16
 8001f90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f92:	4bb5      	ldr	r3, [pc, #724]	; (8002268 <MX_GPIO_Init+0x2f8>)
 8001f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f96:	f003 0310 	and.w	r3, r3, #16
 8001f9a:	623b      	str	r3, [r7, #32]
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9e:	4bb2      	ldr	r3, [pc, #712]	; (8002268 <MX_GPIO_Init+0x2f8>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	4ab1      	ldr	r2, [pc, #708]	; (8002268 <MX_GPIO_Init+0x2f8>)
 8001fa4:	f043 0304 	orr.w	r3, r3, #4
 8001fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001faa:	4baf      	ldr	r3, [pc, #700]	; (8002268 <MX_GPIO_Init+0x2f8>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	61fb      	str	r3, [r7, #28]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fb6:	4bac      	ldr	r3, [pc, #688]	; (8002268 <MX_GPIO_Init+0x2f8>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fba:	4aab      	ldr	r2, [pc, #684]	; (8002268 <MX_GPIO_Init+0x2f8>)
 8001fbc:	f043 0320 	orr.w	r3, r3, #32
 8001fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc2:	4ba9      	ldr	r3, [pc, #676]	; (8002268 <MX_GPIO_Init+0x2f8>)
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc6:	f003 0320 	and.w	r3, r3, #32
 8001fca:	61bb      	str	r3, [r7, #24]
 8001fcc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fce:	4ba6      	ldr	r3, [pc, #664]	; (8002268 <MX_GPIO_Init+0x2f8>)
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd2:	4aa5      	ldr	r2, [pc, #660]	; (8002268 <MX_GPIO_Init+0x2f8>)
 8001fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fda:	4ba3      	ldr	r3, [pc, #652]	; (8002268 <MX_GPIO_Init+0x2f8>)
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe6:	4ba0      	ldr	r3, [pc, #640]	; (8002268 <MX_GPIO_Init+0x2f8>)
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fea:	4a9f      	ldr	r2, [pc, #636]	; (8002268 <MX_GPIO_Init+0x2f8>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ff2:	4b9d      	ldr	r3, [pc, #628]	; (8002268 <MX_GPIO_Init+0x2f8>)
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffe:	4b9a      	ldr	r3, [pc, #616]	; (8002268 <MX_GPIO_Init+0x2f8>)
 8002000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002002:	4a99      	ldr	r2, [pc, #612]	; (8002268 <MX_GPIO_Init+0x2f8>)
 8002004:	f043 0302 	orr.w	r3, r3, #2
 8002008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800200a:	4b97      	ldr	r3, [pc, #604]	; (8002268 <MX_GPIO_Init+0x2f8>)
 800200c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002016:	4b94      	ldr	r3, [pc, #592]	; (8002268 <MX_GPIO_Init+0x2f8>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201a:	4a93      	ldr	r2, [pc, #588]	; (8002268 <MX_GPIO_Init+0x2f8>)
 800201c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002020:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002022:	4b91      	ldr	r3, [pc, #580]	; (8002268 <MX_GPIO_Init+0x2f8>)
 8002024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800202e:	4b8e      	ldr	r3, [pc, #568]	; (8002268 <MX_GPIO_Init+0x2f8>)
 8002030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002032:	4a8d      	ldr	r2, [pc, #564]	; (8002268 <MX_GPIO_Init+0x2f8>)
 8002034:	f043 0308 	orr.w	r3, r3, #8
 8002038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800203a:	4b8b      	ldr	r3, [pc, #556]	; (8002268 <MX_GPIO_Init+0x2f8>)
 800203c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8002046:	f004 fac7 	bl	80065d8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 800204a:	2201      	movs	r2, #1
 800204c:	2101      	movs	r1, #1
 800204e:	4887      	ldr	r0, [pc, #540]	; (800226c <MX_GPIO_Init+0x2fc>)
 8002050:	f004 fa2e 	bl	80064b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_SET);
 8002054:	2201      	movs	r2, #1
 8002056:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800205a:	4885      	ldr	r0, [pc, #532]	; (8002270 <MX_GPIO_Init+0x300>)
 800205c:	f004 fa28 	bl	80064b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_EEPROM_CSN_GPIO_Port, RADIO_EEPROM_CSN_Pin, GPIO_PIN_SET);
 8002060:	2201      	movs	r2, #1
 8002062:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002066:	4883      	ldr	r0, [pc, #524]	; (8002274 <MX_GPIO_Init+0x304>)
 8002068:	f004 fa22 	bl	80064b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800206c:	2200      	movs	r2, #0
 800206e:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8002072:	4881      	ldr	r0, [pc, #516]	; (8002278 <MX_GPIO_Init+0x308>)
 8002074:	f004 fa1c 	bl	80064b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002078:	2200      	movs	r2, #0
 800207a:	2140      	movs	r1, #64	; 0x40
 800207c:	487f      	ldr	r0, [pc, #508]	; (800227c <MX_GPIO_Init+0x30c>)
 800207e:	f004 fa17 	bl	80064b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE12 PE14 PE15
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002082:	f24d 73ff 	movw	r3, #55295	; 0xd7ff
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002088:	2303      	movs	r3, #3
 800208a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002094:	4619      	mov	r1, r3
 8002096:	4877      	ldr	r0, [pc, #476]	; (8002274 <MX_GPIO_Init+0x304>)
 8002098:	f004 f878 	bl	800618c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800209c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80020a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b0:	4619      	mov	r1, r3
 80020b2:	486e      	ldr	r0, [pc, #440]	; (800226c <MX_GPIO_Init+0x2fc>)
 80020b4:	f004 f86a 	bl	800618c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF11
                           PF12 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80020b8:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020be:	2303      	movs	r3, #3
 80020c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ca:	4619      	mov	r1, r3
 80020cc:	4868      	ldr	r0, [pc, #416]	; (8002270 <MX_GPIO_Init+0x300>)
 80020ce:	f004 f85d 	bl	800618c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80020d2:	2309      	movs	r3, #9
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020d6:	2303      	movs	r3, #3
 80020d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80020de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e2:	4619      	mov	r1, r3
 80020e4:	4866      	ldr	r0, [pc, #408]	; (8002280 <MX_GPIO_Init+0x310>)
 80020e6:	f004 f851 	bl	800618c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_S2LP_CSN_Pin;
 80020ea:	2301      	movs	r3, #1
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ee:	2301      	movs	r3, #1
 80020f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f6:	2303      	movs	r3, #3
 80020f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RADIO_S2LP_CSN_GPIO_Port, &GPIO_InitStruct);
 80020fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020fe:	4619      	mov	r1, r3
 8002100:	485a      	ldr	r0, [pc, #360]	; (800226c <MX_GPIO_Init+0x2fc>)
 8002102:	f004 f843 	bl	800618c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8002106:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800210c:	2303      	movs	r3, #3
 800210e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002118:	4619      	mov	r1, r3
 800211a:	4854      	ldr	r0, [pc, #336]	; (800226c <MX_GPIO_Init+0x2fc>)
 800211c:	f004 f836 	bl	800618c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA4 PA5
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 8002120:	f248 0336 	movw	r3, #32822	; 0x8036
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002126:	2303      	movs	r3, #3
 8002128:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002132:	4619      	mov	r1, r3
 8002134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002138:	f004 f828 	bl	800618c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
 800213c:	2308      	movs	r3, #8
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002140:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 800214a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214e:	4619      	mov	r1, r3
 8002150:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002154:	f004 f81a 	bl	800618c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB15
                           PB4 PB5 PB6 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8002158:	f64b 7377 	movw	r3, #49015	; 0xbf77
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800215e:	2303      	movs	r3, #3
 8002160:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	2300      	movs	r3, #0
 8002164:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800216a:	4619      	mov	r1, r3
 800216c:	4842      	ldr	r0, [pc, #264]	; (8002278 <MX_GPIO_Init+0x308>)
 800216e:	f004 f80d 	bl	800618c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_SDN_Pin;
 8002172:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002178:	2301      	movs	r3, #1
 800217a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	2300      	movs	r3, #0
 8002182:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RADIO_SDN_GPIO_Port, &GPIO_InitStruct);
 8002184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002188:	4619      	mov	r1, r3
 800218a:	4839      	ldr	r0, [pc, #228]	; (8002270 <MX_GPIO_Init+0x300>)
 800218c:	f003 fffe 	bl	800618c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002190:	f64f 631f 	movw	r3, #65055	; 0xfe1f
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002196:	2303      	movs	r3, #3
 8002198:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800219e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a2:	4619      	mov	r1, r3
 80021a4:	4835      	ldr	r0, [pc, #212]	; (800227c <MX_GPIO_Init+0x30c>)
 80021a6:	f003 fff1 	bl	800618c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_EEPROM_CSN_Pin;
 80021aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b0:	2301      	movs	r3, #1
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b8:	2300      	movs	r3, #0
 80021ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RADIO_EEPROM_CSN_GPIO_Port, &GPIO_InitStruct);
 80021bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c0:	4619      	mov	r1, r3
 80021c2:	482c      	ldr	r0, [pc, #176]	; (8002274 <MX_GPIO_Init+0x304>)
 80021c4:	f003 ffe2 	bl	800618c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80021c8:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ce:	2301      	movs	r3, #1
 80021d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d6:	2300      	movs	r3, #0
 80021d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021de:	4619      	mov	r1, r3
 80021e0:	4825      	ldr	r0, [pc, #148]	; (8002278 <MX_GPIO_Init+0x308>)
 80021e2:	f003 ffd3 	bl	800618c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80021e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ec:	2303      	movs	r3, #3
 80021ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f8:	4619      	mov	r1, r3
 80021fa:	4822      	ldr	r0, [pc, #136]	; (8002284 <MX_GPIO_Init+0x314>)
 80021fc:	f003 ffc6 	bl	800618c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002200:	2320      	movs	r3, #32
 8002202:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002204:	2300      	movs	r3, #0
 8002206:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800220c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002210:	4619      	mov	r1, r3
 8002212:	481a      	ldr	r0, [pc, #104]	; (800227c <MX_GPIO_Init+0x30c>)
 8002214:	f003 ffba 	bl	800618c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002218:	2340      	movs	r3, #64	; 0x40
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221c:	2301      	movs	r3, #1
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002224:	2300      	movs	r3, #0
 8002226:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800222c:	4619      	mov	r1, r3
 800222e:	4813      	ldr	r0, [pc, #76]	; (800227c <MX_GPIO_Init+0x30c>)
 8002230:	f003 ffac 	bl	800618c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002234:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	2302      	movs	r3, #2
 800223c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002242:	2303      	movs	r3, #3
 8002244:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002246:	230a      	movs	r3, #10
 8002248:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224e:	4619      	mov	r1, r3
 8002250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002254:	f003 ff9a 	bl	800618c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002258:	2200      	movs	r2, #0
 800225a:	2100      	movs	r1, #0
 800225c:	2009      	movs	r0, #9
 800225e:	f003 fd28 	bl	8005cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002262:	2009      	movs	r0, #9
 8002264:	e010      	b.n	8002288 <MX_GPIO_Init+0x318>
 8002266:	bf00      	nop
 8002268:	40021000 	.word	0x40021000
 800226c:	48000800 	.word	0x48000800
 8002270:	48001400 	.word	0x48001400
 8002274:	48001000 	.word	0x48001000
 8002278:	48000400 	.word	0x48000400
 800227c:	48001800 	.word	0x48001800
 8002280:	48001c00 	.word	0x48001c00
 8002284:	48000c00 	.word	0x48000c00
 8002288:	f003 fd2f 	bl	8005cea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800228c:	2200      	movs	r2, #0
 800228e:	2100      	movs	r1, #0
 8002290:	2028      	movs	r0, #40	; 0x28
 8002292:	f003 fd0e 	bl	8005cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002296:	2028      	movs	r0, #40	; 0x28
 8002298:	f003 fd27 	bl	8005cea <HAL_NVIC_EnableIRQ>

}
 800229c:	bf00      	nop
 800229e:	3738      	adds	r7, #56	; 0x38
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022b4:	d103      	bne.n	80022be <HAL_GPIO_EXTI_Callback+0x1a>
		btn_press = 1;
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_GPIO_EXTI_Callback+0x2c>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	701a      	strb	r2, [r3, #0]
	}
	else if (GPIO_Pin == RADIO_INT_Pin)
		S2LP_IRQ_Handler();
}
 80022bc:	e004      	b.n	80022c8 <HAL_GPIO_EXTI_Callback+0x24>
	else if (GPIO_Pin == RADIO_INT_Pin)
 80022be:	88fb      	ldrh	r3, [r7, #6]
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d101      	bne.n	80022c8 <HAL_GPIO_EXTI_Callback+0x24>
		S2LP_IRQ_Handler();
 80022c4:	f001 fb76 	bl	80039b4 <S2LP_IRQ_Handler>
}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20003d60 	.word	0x20003d60

080022d4 <acquire_and_send_packet>:

static void acquire_and_send_packet() {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
	if (StartADCAcq(N_MELVECS) != HAL_OK) {
 80022d8:	2014      	movs	r0, #20
 80022da:	f7fe ff09 	bl	80010f0 <StartADCAcq>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d004      	beq.n	80022ee <acquire_and_send_packet+0x1a>
		DEBUG_PRINT("Error while enabling the DMA\r\n");
 80022e4:	4806      	ldr	r0, [pc, #24]	; (8002300 <acquire_and_send_packet+0x2c>)
 80022e6:	f009 fb65 	bl	800b9b4 <puts>
	}
	while (!IsADCFinished()) {
 80022ea:	e000      	b.n	80022ee <acquire_and_send_packet+0x1a>
		__WFI();
 80022ec:	bf30      	wfi
	while (!IsADCFinished()) {
 80022ee:	f7fe ff23 	bl	8001138 <IsADCFinished>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0f9      	beq.n	80022ec <acquire_and_send_packet+0x18>
	}
}
 80022f8:	bf00      	nop
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	0800db54 	.word	0x0800db54

08002304 <run>:

void run(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
	btn_press = 0;
 8002308:	4b09      	ldr	r3, [pc, #36]	; (8002330 <run+0x2c>)
 800230a:	2200      	movs	r2, #0
 800230c:	701a      	strb	r2, [r3, #0]

	while (1)
	{
	  while (!btn_press) {
 800230e:	bf00      	nop
 8002310:	4b07      	ldr	r3, [pc, #28]	; (8002330 <run+0x2c>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0fa      	beq.n	8002310 <run+0xc>
	  while (!btn_press) {
		  acquire_and_send_packet();
	  }
	  btn_press = 0;
#elif (CONTINUOUS_ACQ == 0)
	  if (btn_press) {
 800231a:	4b05      	ldr	r3, [pc, #20]	; (8002330 <run+0x2c>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f4      	beq.n	800230e <run+0xa>
		  acquire_and_send_packet();
 8002324:	f7ff ffd6 	bl	80022d4 <acquire_and_send_packet>
		  btn_press = 0;
 8002328:	4b01      	ldr	r3, [pc, #4]	; (8002330 <run+0x2c>)
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
	  while (!btn_press) {
 800232e:	e7ee      	b.n	800230e <run+0xa>
 8002330:	20003d60 	.word	0x20003d60

08002334 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800233a:	f001 ff14 	bl	8004166 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800233e:	f000 f855 	bl	80023ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002342:	f7ff fe15 	bl	8001f70 <MX_GPIO_Init>
  MX_DMA_Init();
 8002346:	f7ff fdf5 	bl	8001f34 <MX_DMA_Init>
  MX_SPI1_Init();
 800234a:	f001 fc19 	bl	8003b80 <MX_SPI1_Init>
  MX_TIM3_Init();
 800234e:	f001 fd91 	bl	8003e74 <MX_TIM3_Init>
  MX_ADC1_Init();
 8002352:	f7fe fdb7 	bl	8000ec4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  if (ENABLE_UART) {
	  MX_LPUART1_UART_Init();
 8002356:	f001 fe01 	bl	8003f5c <MX_LPUART1_UART_Init>
  }

  RetargetInit(&hlpuart1);
 800235a:	481b      	ldr	r0, [pc, #108]	; (80023c8 <main+0x94>)
 800235c:	f000 f9cc 	bl	80026f8 <RetargetInit>
  DEBUG_PRINT("Hello world\r\n");
 8002360:	481a      	ldr	r0, [pc, #104]	; (80023cc <main+0x98>)
 8002362:	f009 fb27 	bl	800b9b4 <puts>

#if ENABLE_RADIO
  // Enable S2LP Radio
  HAL_StatusTypeDef err = S2LP_Init(&hspi1);
 8002366:	481a      	ldr	r0, [pc, #104]	; (80023d0 <main+0x9c>)
 8002368:	f001 fa82 	bl	8003870 <S2LP_Init>
 800236c:	4603      	mov	r3, r0
 800236e:	71fb      	strb	r3, [r7, #7]
  if (err)  {
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d007      	beq.n	8002386 <main+0x52>
	  DEBUG_PRINT("[S2LP] Error while initializing: %u\r\n", err);
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	4619      	mov	r1, r3
 800237a:	4816      	ldr	r0, [pc, #88]	; (80023d4 <main+0xa0>)
 800237c:	f009 fab4 	bl	800b8e8 <iprintf>
	  Error_Handler();
 8002380:	f000 f87a 	bl	8002478 <Error_Handler>
 8002384:	e002      	b.n	800238c <main+0x58>
  } else {
	  DEBUG_PRINT("[S2LP] Init OK\r\n");
 8002386:	4814      	ldr	r0, [pc, #80]	; (80023d8 <main+0xa4>)
 8002388:	f009 fb14 	bl	800b9b4 <puts>
  }
#endif

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) {
 800238c:	217f      	movs	r1, #127	; 0x7f
 800238e:	4813      	ldr	r0, [pc, #76]	; (80023dc <main+0xa8>)
 8002390:	f003 faa4 	bl	80058dc <HAL_ADCEx_Calibration_Start>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d004      	beq.n	80023a4 <main+0x70>
	  DEBUG_PRINT("Error while calibrating the ADC\r\n");
 800239a:	4811      	ldr	r0, [pc, #68]	; (80023e0 <main+0xac>)
 800239c:	f009 fb0a 	bl	800b9b4 <puts>
	  Error_Handler();
 80023a0:	f000 f86a 	bl	8002478 <Error_Handler>
  }
  if (HAL_TIM_Base_Start(&htim3) != HAL_OK) {
 80023a4:	480f      	ldr	r0, [pc, #60]	; (80023e4 <main+0xb0>)
 80023a6:	f006 f8b1 	bl	800850c <HAL_TIM_Base_Start>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d004      	beq.n	80023ba <main+0x86>
	  DEBUG_PRINT("Error while enabling timer TIM3\r\n");
 80023b0:	480d      	ldr	r0, [pc, #52]	; (80023e8 <main+0xb4>)
 80023b2:	f009 faff 	bl	800b9b4 <puts>
	  Error_Handler();
 80023b6:	f000 f85f 	bl	8002478 <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#if (RUN_CONFIG == MAIN_APP)
  run();
 80023ba:	f7ff ffa3 	bl	8002304 <run>
 80023be:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20004c24 	.word	0x20004c24
 80023cc:	0800db74 	.word	0x0800db74
 80023d0:	20004b70 	.word	0x20004b70
 80023d4:	0800db84 	.word	0x0800db84
 80023d8:	0800dbac 	.word	0x0800dbac
 80023dc:	20003184 	.word	0x20003184
 80023e0:	0800dbbc 	.word	0x0800dbbc
 80023e4:	20004bd8 	.word	0x20004bd8
 80023e8:	0800dbe0 	.word	0x0800dbe0

080023ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b096      	sub	sp, #88	; 0x58
 80023f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023f2:	f107 0314 	add.w	r3, r7, #20
 80023f6:	2244      	movs	r2, #68	; 0x44
 80023f8:	2100      	movs	r1, #0
 80023fa:	4618      	mov	r0, r3
 80023fc:	f009 fc68 	bl	800bcd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002400:	463b      	mov	r3, r7
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]
 8002408:	609a      	str	r2, [r3, #8]
 800240a:	60da      	str	r2, [r3, #12]
 800240c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800240e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002412:	f004 f88b 	bl	800652c <HAL_PWREx_ControlVoltageScaling>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800241c:	f000 f82c 	bl	8002478 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002420:	2310      	movs	r3, #16
 8002422:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002424:	2301      	movs	r3, #1
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800242c:	23b0      	movs	r3, #176	; 0xb0
 800242e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002430:	2300      	movs	r3, #0
 8002432:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002434:	f107 0314 	add.w	r3, r7, #20
 8002438:	4618      	mov	r0, r3
 800243a:	f004 f8dd 	bl	80065f8 <HAL_RCC_OscConfig>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8002444:	f000 f818 	bl	8002478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002448:	230f      	movs	r3, #15
 800244a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800244c:	2300      	movs	r3, #0
 800244e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002450:	2300      	movs	r3, #0
 8002452:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002458:	2300      	movs	r3, #0
 800245a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800245c:	463b      	mov	r3, r7
 800245e:	2102      	movs	r1, #2
 8002460:	4618      	mov	r0, r3
 8002462:	f004 fce3 	bl	8006e2c <HAL_RCC_ClockConfig>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800246c:	f000 f804 	bl	8002478 <Error_Handler>
  }
}
 8002470:	bf00      	nop
 8002472:	3758      	adds	r7, #88	; 0x58
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800247e:	b672      	cpsid	i
}
 8002480:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  DEBUG_PRINT("Entering error Handler\r\n");
 8002482:	4817      	ldr	r0, [pc, #92]	; (80024e0 <Error_Handler+0x68>)
 8002484:	f009 fa96 	bl	800b9b4 <puts>
  while (1)
  {
	  // Blink LED3 (red)
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8002488:	2201      	movs	r2, #1
 800248a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800248e:	4815      	ldr	r0, [pc, #84]	; (80024e4 <Error_Handler+0x6c>)
 8002490:	f004 f80e 	bl	80064b0 <HAL_GPIO_WritePin>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8002494:	2300      	movs	r3, #0
 8002496:	607b      	str	r3, [r7, #4]
 8002498:	e002      	b.n	80024a0 <Error_Handler+0x28>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3301      	adds	r3, #1
 800249e:	607b      	str	r3, [r7, #4]
 80024a0:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <Error_Handler+0x70>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a11      	ldr	r2, [pc, #68]	; (80024ec <Error_Handler+0x74>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	099b      	lsrs	r3, r3, #6
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d8f3      	bhi.n	800249a <Error_Handler+0x22>
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80024b2:	2200      	movs	r2, #0
 80024b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024b8:	480a      	ldr	r0, [pc, #40]	; (80024e4 <Error_Handler+0x6c>)
 80024ba:	f003 fff9 	bl	80064b0 <HAL_GPIO_WritePin>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 80024be:	2300      	movs	r3, #0
 80024c0:	603b      	str	r3, [r7, #0]
 80024c2:	e002      	b.n	80024ca <Error_Handler+0x52>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	3301      	adds	r3, #1
 80024c8:	603b      	str	r3, [r7, #0]
 80024ca:	4b07      	ldr	r3, [pc, #28]	; (80024e8 <Error_Handler+0x70>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a07      	ldr	r2, [pc, #28]	; (80024ec <Error_Handler+0x74>)
 80024d0:	fba2 2303 	umull	r2, r3, r2, r3
 80024d4:	099b      	lsrs	r3, r3, #6
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	4293      	cmp	r3, r2
 80024da:	d8f3      	bhi.n	80024c4 <Error_Handler+0x4c>
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80024dc:	e7d4      	b.n	8002488 <Error_Handler+0x10>
 80024de:	bf00      	nop
 80024e0:	0800dc04 	.word	0x0800dc04
 80024e4:	48000400 	.word	0x48000400
 80024e8:	20002f94 	.word	0x20002f94
 80024ec:	51eb851f 	.word	0x51eb851f

080024f0 <tag_cbc_mac>:
                            0x34,0xFC,0xE5,0xA5,
							0x86,0x5A,0x98,0x25,
							0xB8,0x30,0x2F,0x0B,
							0x6E,0x06,0x90,0x2D};

void tag_cbc_mac(uint8_t *tag, const uint8_t *msg, size_t msg_len) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b094      	sub	sp, #80	; 0x50
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
	// Allocate a buffer of the key size to store the input and result of AES
	// uint32_t[4] is 4*(32/8)= 16 bytes long
	uint32_t statew[4] = {0};
 80024fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	60da      	str	r2, [r3, #12]
	// state is a pointer to the start of the buffer
	uint8_t *state = (uint8_t*) statew;
 800250a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800250e:	63bb      	str	r3, [r7, #56]	; 0x38
    size_t i;

    uint8_t block[16] = {0};
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	f107 0318 	add.w	r3, r7, #24
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
    // TO DO : Complete the CBC-MAC_AES
    for (i = 0; i < ((int) (msg_len/16)); i++){
 8002520:	2300      	movs	r3, #0
 8002522:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002524:	e036      	b.n	8002594 <tag_cbc_mac+0xa4>
		for(int j = 0; j < 16; j++) {
 8002526:	2300      	movs	r3, #0
 8002528:	64bb      	str	r3, [r7, #72]	; 0x48
 800252a:	e015      	b.n	8002558 <tag_cbc_mac+0x68>
			block[j] = state[j] ^ msg[i*16+j];
 800252c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800252e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002530:	4413      	add	r3, r2
 8002532:	781a      	ldrb	r2, [r3, #0]
 8002534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002536:	0119      	lsls	r1, r3, #4
 8002538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800253a:	440b      	add	r3, r1
 800253c:	68b9      	ldr	r1, [r7, #8]
 800253e:	440b      	add	r3, r1
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	4053      	eors	r3, r2
 8002544:	b2d9      	uxtb	r1, r3
 8002546:	f107 0214 	add.w	r2, r7, #20
 800254a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800254c:	4413      	add	r3, r2
 800254e:	460a      	mov	r2, r1
 8002550:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 16; j++) {
 8002552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002554:	3301      	adds	r3, #1
 8002556:	64bb      	str	r3, [r7, #72]	; 0x48
 8002558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800255a:	2b0f      	cmp	r3, #15
 800255c:	dde6      	ble.n	800252c <tag_cbc_mac+0x3c>
		}

    	AES128_encrypt(block, AES_Key);
 800255e:	f107 0314 	add.w	r3, r7, #20
 8002562:	4942      	ldr	r1, [pc, #264]	; (800266c <tag_cbc_mac+0x17c>)
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fb27 	bl	8001bb8 <AES128_encrypt>

		for(int j = 0; j < 16; j++) {
 800256a:	2300      	movs	r3, #0
 800256c:	647b      	str	r3, [r7, #68]	; 0x44
 800256e:	e00b      	b.n	8002588 <tag_cbc_mac+0x98>
			state[j] = block[j];
 8002570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002572:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002574:	4413      	add	r3, r2
 8002576:	f107 0114 	add.w	r1, r7, #20
 800257a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800257c:	440a      	add	r2, r1
 800257e:	7812      	ldrb	r2, [r2, #0]
 8002580:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 16; j++) {
 8002582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002584:	3301      	adds	r3, #1
 8002586:	647b      	str	r3, [r7, #68]	; 0x44
 8002588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800258a:	2b0f      	cmp	r3, #15
 800258c:	ddf0      	ble.n	8002570 <tag_cbc_mac+0x80>
    for (i = 0; i < ((int) (msg_len/16)); i++){
 800258e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002590:	3301      	adds	r3, #1
 8002592:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	091b      	lsrs	r3, r3, #4
 8002598:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800259a:	429a      	cmp	r2, r3
 800259c:	d3c3      	bcc.n	8002526 <tag_cbc_mac+0x36>
		}
    }

    int rest = msg_len % 16;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f003 030f 	and.w	r3, r3, #15
 80025a4:	637b      	str	r3, [r7, #52]	; 0x34

    if(rest) {
 80025a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d049      	beq.n	8002640 <tag_cbc_mac+0x150>
    	for(i = 0; i < rest; i++) {
 80025ac:	2300      	movs	r3, #0
 80025ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025b0:	e017      	b.n	80025e2 <tag_cbc_mac+0xf2>
    		block[i] = state[i] ^ msg[(int) (msg_len/16) * 16 + i];
 80025b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025b6:	4413      	add	r3, r2
 80025b8:	781a      	ldrb	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	4619      	mov	r1, r3
 80025c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025c4:	440b      	add	r3, r1
 80025c6:	68b9      	ldr	r1, [r7, #8]
 80025c8:	440b      	add	r3, r1
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	4053      	eors	r3, r2
 80025ce:	b2d9      	uxtb	r1, r3
 80025d0:	f107 0214 	add.w	r2, r7, #20
 80025d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025d6:	4413      	add	r3, r2
 80025d8:	460a      	mov	r2, r1
 80025da:	701a      	strb	r2, [r3, #0]
    	for(i = 0; i < rest; i++) {
 80025dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025de:	3301      	adds	r3, #1
 80025e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d3e3      	bcc.n	80025b2 <tag_cbc_mac+0xc2>
    	}

		for(i = rest; i < 16; i++) {
 80025ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025ee:	e00c      	b.n	800260a <tag_cbc_mac+0x11a>
			block[i] = state[i];
 80025f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025f4:	4413      	add	r3, r2
 80025f6:	7819      	ldrb	r1, [r3, #0]
 80025f8:	f107 0214 	add.w	r2, r7, #20
 80025fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025fe:	4413      	add	r3, r2
 8002600:	460a      	mov	r2, r1
 8002602:	701a      	strb	r2, [r3, #0]
		for(i = rest; i < 16; i++) {
 8002604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002606:	3301      	adds	r3, #1
 8002608:	64fb      	str	r3, [r7, #76]	; 0x4c
 800260a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800260c:	2b0f      	cmp	r3, #15
 800260e:	d9ef      	bls.n	80025f0 <tag_cbc_mac+0x100>
		}

    	AES128_encrypt(block, AES_Key);
 8002610:	f107 0314 	add.w	r3, r7, #20
 8002614:	4915      	ldr	r1, [pc, #84]	; (800266c <tag_cbc_mac+0x17c>)
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff face 	bl	8001bb8 <AES128_encrypt>

		for(int j = 0; j < 16; j++) {
 800261c:	2300      	movs	r3, #0
 800261e:	643b      	str	r3, [r7, #64]	; 0x40
 8002620:	e00b      	b.n	800263a <tag_cbc_mac+0x14a>
			state[j] = block[j];
 8002622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002624:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002626:	4413      	add	r3, r2
 8002628:	f107 0114 	add.w	r1, r7, #20
 800262c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800262e:	440a      	add	r2, r1
 8002630:	7812      	ldrb	r2, [r2, #0]
 8002632:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 16; j++) {
 8002634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002636:	3301      	adds	r3, #1
 8002638:	643b      	str	r3, [r7, #64]	; 0x40
 800263a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800263c:	2b0f      	cmp	r3, #15
 800263e:	ddf0      	ble.n	8002622 <tag_cbc_mac+0x132>
		}
    }

    // Copy the result of CBC-MAC-AES to the tag.
    for (int j=0; j<16; j++) {
 8002640:	2300      	movs	r3, #0
 8002642:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002644:	e00a      	b.n	800265c <tag_cbc_mac+0x16c>
        tag[j] = state[j];
 8002646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800264a:	441a      	add	r2, r3
 800264c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800264e:	68f9      	ldr	r1, [r7, #12]
 8002650:	440b      	add	r3, r1
 8002652:	7812      	ldrb	r2, [r2, #0]
 8002654:	701a      	strb	r2, [r3, #0]
    for (int j=0; j<16; j++) {
 8002656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002658:	3301      	adds	r3, #1
 800265a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800265c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800265e:	2b0f      	cmp	r3, #15
 8002660:	ddf1      	ble.n	8002646 <tag_cbc_mac+0x156>
    }
}
 8002662:	bf00      	nop
 8002664:	bf00      	nop
 8002666:	3750      	adds	r7, #80	; 0x50
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	0800ded4 	.word	0x0800ded4

08002670 <make_packet>:

// Assumes payload is already in place in the packet
int make_packet(uint8_t *packet, size_t payload_len, uint8_t sender_id, uint32_t serial) {
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	4613      	mov	r3, r2
 800267e:	71fb      	strb	r3, [r7, #7]
    size_t packet_len = payload_len + PACKET_HEADER_LENGTH + PACKET_TAG_LENGTH;
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	3318      	adds	r3, #24
 8002684:	617b      	str	r3, [r7, #20]
//    // Initially, the whole packet header is set to 0s
//    memset(packet, 0, PACKET_HEADER_LENGTH);
//    // So is the tag
//	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);

    packet[0] = 0x00;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
    packet[1] = sender_id;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	3301      	adds	r3, #1
 8002690:	79fa      	ldrb	r2, [r7, #7]
 8002692:	701a      	strb	r2, [r3, #0]
    packet[2] = (uint8_t) ((payload_len >> 8) & 0xFF);
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	0a1a      	lsrs	r2, r3, #8
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	3302      	adds	r3, #2
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	701a      	strb	r2, [r3, #0]
    packet[3] = (uint8_t) (payload_len & 0xFF);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	3303      	adds	r3, #3
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	701a      	strb	r2, [r3, #0]
    packet[4] = (uint8_t) ((serial >> 24) & 0xFF);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	0e1a      	lsrs	r2, r3, #24
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	3304      	adds	r3, #4
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]
    packet[5] = (uint8_t) ((serial >> 16) & 0xFF);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	0c1a      	lsrs	r2, r3, #16
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	3305      	adds	r3, #5
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	701a      	strb	r2, [r3, #0]
    packet[6] = (uint8_t) ((serial >> 8) & 0xFF);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	0a1a      	lsrs	r2, r3, #8
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	3306      	adds	r3, #6
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	701a      	strb	r2, [r3, #0]
    packet[7] = (uint8_t) (serial & 0xFF);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	3307      	adds	r3, #7
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	701a      	strb	r2, [r3, #0]
	 *		 	This will be helpful when setting fields that are on multiple bytes.
	*/

	// For the tag field, you have to calculate the tag. The function call below is correct but
	// tag_cbc_mac function, calculating the tag, is not implemented.
    tag_cbc_mac(packet + payload_len + PACKET_HEADER_LENGTH, packet, payload_len + PACKET_HEADER_LENGTH);
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	3308      	adds	r3, #8
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	18d0      	adds	r0, r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	3308      	adds	r3, #8
 80026e4:	461a      	mov	r2, r3
 80026e6:	68f9      	ldr	r1, [r7, #12]
 80026e8:	f7ff ff02 	bl	80024f0 <tag_cbc_mac>

    return packet_len;
 80026ec:	697b      	ldr	r3, [r7, #20]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002700:	4a07      	ldr	r2, [pc, #28]	; (8002720 <RetargetInit+0x28>)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002706:	4b07      	ldr	r3, [pc, #28]	; (8002724 <RetargetInit+0x2c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6898      	ldr	r0, [r3, #8]
 800270c:	2300      	movs	r3, #0
 800270e:	2202      	movs	r2, #2
 8002710:	2100      	movs	r1, #0
 8002712:	f009 f957 	bl	800b9c4 <setvbuf>
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20003d64 	.word	0x20003d64
 8002724:	20002ff8 	.word	0x20002ff8

08002728 <_isatty>:

int _isatty(int fd) {
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	db04      	blt.n	8002740 <_isatty+0x18>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b02      	cmp	r3, #2
 800273a:	dc01      	bgt.n	8002740 <_isatty+0x18>
    return 1;
 800273c:	2301      	movs	r3, #1
 800273e:	e005      	b.n	800274c <_isatty+0x24>

  errno = EBADF;
 8002740:	f009 fb18 	bl	800bd74 <__errno>
 8002744:	4603      	mov	r3, r0
 8002746:	2209      	movs	r2, #9
 8002748:	601a      	str	r2, [r3, #0]
  return 0;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <_write>:

int _write(int fd, char* ptr, int len) {
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d002      	beq.n	800276c <_write+0x18>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2b02      	cmp	r3, #2
 800276a:	d111      	bne.n	8002790 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800276c:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <_write+0x54>)
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	b29a      	uxth	r2, r3
 8002774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	f006 fb55 	bl	8008e28 <HAL_UART_Transmit>
 800277e:	4603      	mov	r3, r0
 8002780:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002782:	7dfb      	ldrb	r3, [r7, #23]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <_write+0x38>
      return len;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	e008      	b.n	800279e <_write+0x4a>
    else
      return EIO;
 800278c:	2305      	movs	r3, #5
 800278e:	e006      	b.n	800279e <_write+0x4a>
  }
  errno = EBADF;
 8002790:	f009 faf0 	bl	800bd74 <__errno>
 8002794:	4603      	mov	r3, r0
 8002796:	2209      	movs	r2, #9
 8002798:	601a      	str	r2, [r3, #0]
  return -1;
 800279a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20003d64 	.word	0x20003d64

080027ac <_close>:

int _close(int fd) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	db04      	blt.n	80027c4 <_close+0x18>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b02      	cmp	r3, #2
 80027be:	dc01      	bgt.n	80027c4 <_close+0x18>
    return 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	e006      	b.n	80027d2 <_close+0x26>

  errno = EBADF;
 80027c4:	f009 fad6 	bl	800bd74 <__errno>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2209      	movs	r2, #9
 80027cc:	601a      	str	r2, [r3, #0]
  return -1;
 80027ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80027da:	b580      	push	{r7, lr}
 80027dc:	b084      	sub	sp, #16
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80027e6:	f009 fac5 	bl	800bd74 <__errno>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2209      	movs	r2, #9
 80027ee:	601a      	str	r2, [r3, #0]
  return -1;
 80027f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <_read>:

int _read(int fd, char* ptr, int len) {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d110      	bne.n	8002830 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800280e:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <_read+0x4c>)
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002816:	2201      	movs	r2, #1
 8002818:	68b9      	ldr	r1, [r7, #8]
 800281a:	f006 fb8f 	bl	8008f3c <HAL_UART_Receive>
 800281e:	4603      	mov	r3, r0
 8002820:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002822:	7dfb      	ldrb	r3, [r7, #23]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <_read+0x30>
      return 1;
 8002828:	2301      	movs	r3, #1
 800282a:	e008      	b.n	800283e <_read+0x42>
    else
      return EIO;
 800282c:	2305      	movs	r3, #5
 800282e:	e006      	b.n	800283e <_read+0x42>
  }
  errno = EBADF;
 8002830:	f009 faa0 	bl	800bd74 <__errno>
 8002834:	4603      	mov	r3, r0
 8002836:	2209      	movs	r2, #9
 8002838:	601a      	str	r2, [r3, #0]
  return -1;
 800283a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20003d64 	.word	0x20003d64

0800284c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	db08      	blt.n	800286e <_fstat+0x22>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b02      	cmp	r3, #2
 8002860:	dc05      	bgt.n	800286e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002868:	605a      	str	r2, [r3, #4]
    return 0;
 800286a:	2300      	movs	r3, #0
 800286c:	e005      	b.n	800287a <_fstat+0x2e>
  }

  errno = EBADF;
 800286e:	f009 fa81 	bl	800bd74 <__errno>
 8002872:	4603      	mov	r3, r0
 8002874:	2209      	movs	r2, #9
 8002876:	601a      	str	r2, [r3, #0]
  return 0;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <S2LP_Command>:
volatile uint8_t underflow = 0;

volatile uint16_t n_chunks_tx = 0;

HAL_StatusTypeDef S2LP_Command(uint8_t cmd, S2LPStatus *status)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af02      	add	r7, sp, #8
 800288a:	4603      	mov	r3, r0
 800288c:	6039      	str	r1, [r7, #0]
 800288e:	71fb      	strb	r3, [r7, #7]
	uint8_t TxBuf[2] = {0x80, cmd};
 8002890:	2380      	movs	r3, #128	; 0x80
 8002892:	733b      	strb	r3, [r7, #12]
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	737b      	strb	r3, [r7, #13]
  __ASM volatile ("cpsid i" : : : "memory");
 8002898:	b672      	cpsid	i
}
 800289a:	bf00      	nop
	uint8_t RxBuf[2];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 800289c:	2200      	movs	r2, #0
 800289e:	2101      	movs	r1, #1
 80028a0:	480f      	ldr	r0, [pc, #60]	; (80028e0 <S2LP_Command+0x5c>)
 80028a2:	f003 fe05 	bl	80064b0 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 2, HAL_MAX_DELAY);
 80028a6:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <S2LP_Command+0x60>)
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	f107 0208 	add.w	r2, r7, #8
 80028ae:	f107 010c 	add.w	r1, r7, #12
 80028b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	2302      	movs	r3, #2
 80028ba:	f005 fa48 	bl	8007d4e <HAL_SPI_TransmitReceive>
 80028be:	4603      	mov	r3, r0
 80028c0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 80028c2:	2201      	movs	r2, #1
 80028c4:	2101      	movs	r1, #1
 80028c6:	4806      	ldr	r0, [pc, #24]	; (80028e0 <S2LP_Command+0x5c>)
 80028c8:	f003 fdf2 	bl	80064b0 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 80028cc:	b662      	cpsie	i
}
 80028ce:	bf00      	nop
 80028d0:	893a      	ldrh	r2, [r7, #8]
	__enable_irq();

	memcpy(status, &RxBuf[0], 2);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	801a      	strh	r2, [r3, #0]
	return err;
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	48000800 	.word	0x48000800
 80028e4:	20003d68 	.word	0x20003d68

080028e8 <S2LP_ReadReg>:

HAL_StatusTypeDef S2LP_ReadReg(uint8_t addr, uint8_t *retval, S2LPStatus *status)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b088      	sub	sp, #32
 80028ec:	af02      	add	r7, sp, #8
 80028ee:	4603      	mov	r3, r0
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	73fb      	strb	r3, [r7, #15]
	uint8_t TxBuf[] = {0x01, addr, 0x0};
 80028f6:	2301      	movs	r3, #1
 80028f8:	753b      	strb	r3, [r7, #20]
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
 80028fc:	757b      	strb	r3, [r7, #21]
 80028fe:	2300      	movs	r3, #0
 8002900:	75bb      	strb	r3, [r7, #22]
  __ASM volatile ("cpsid i" : : : "memory");
 8002902:	b672      	cpsid	i
}
 8002904:	bf00      	nop
	uint8_t RxBuf[3];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8002906:	2200      	movs	r2, #0
 8002908:	2101      	movs	r1, #1
 800290a:	4814      	ldr	r0, [pc, #80]	; (800295c <S2LP_ReadReg+0x74>)
 800290c:	f003 fdd0 	bl	80064b0 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 3, HAL_MAX_DELAY);
 8002910:	4b13      	ldr	r3, [pc, #76]	; (8002960 <S2LP_ReadReg+0x78>)
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	f107 0210 	add.w	r2, r7, #16
 8002918:	f107 0114 	add.w	r1, r7, #20
 800291c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	2303      	movs	r3, #3
 8002924:	f005 fa13 	bl	8007d4e <HAL_SPI_TransmitReceive>
 8002928:	4603      	mov	r3, r0
 800292a:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 800292c:	2201      	movs	r2, #1
 800292e:	2101      	movs	r1, #1
 8002930:	480a      	ldr	r0, [pc, #40]	; (800295c <S2LP_ReadReg+0x74>)
 8002932:	f003 fdbd 	bl	80064b0 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8002936:	b662      	cpsie	i
}
 8002938:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <S2LP_ReadReg+0x5e>
 8002940:	8a3a      	ldrh	r2, [r7, #16]
		memcpy(status, &RxBuf[0], 2);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	801a      	strh	r2, [r3, #0]
	if (retval != NULL)
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <S2LP_ReadReg+0x6a>
		*retval = RxBuf[2];
 800294c:	7cba      	ldrb	r2, [r7, #18]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	701a      	strb	r2, [r3, #0]
	return err;
 8002952:	7dfb      	ldrb	r3, [r7, #23]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	48000800 	.word	0x48000800
 8002960:	20003d68 	.word	0x20003d68

08002964 <S2LP_WriteReg>:

HAL_StatusTypeDef S2LP_WriteReg(uint8_t addr, uint8_t val, S2LPStatus *status)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af02      	add	r7, sp, #8
 800296a:	4603      	mov	r3, r0
 800296c:	603a      	str	r2, [r7, #0]
 800296e:	71fb      	strb	r3, [r7, #7]
 8002970:	460b      	mov	r3, r1
 8002972:	71bb      	strb	r3, [r7, #6]
	uint8_t TxBuf[] = {0x00, addr, val};
 8002974:	2300      	movs	r3, #0
 8002976:	733b      	strb	r3, [r7, #12]
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	737b      	strb	r3, [r7, #13]
 800297c:	79bb      	ldrb	r3, [r7, #6]
 800297e:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8002980:	b672      	cpsid	i
}
 8002982:	bf00      	nop
	uint8_t RxBuf[3];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8002984:	2200      	movs	r2, #0
 8002986:	2101      	movs	r1, #1
 8002988:	4811      	ldr	r0, [pc, #68]	; (80029d0 <S2LP_WriteReg+0x6c>)
 800298a:	f003 fd91 	bl	80064b0 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 3, HAL_MAX_DELAY);
 800298e:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <S2LP_WriteReg+0x70>)
 8002990:	6818      	ldr	r0, [r3, #0]
 8002992:	f107 0208 	add.w	r2, r7, #8
 8002996:	f107 010c 	add.w	r1, r7, #12
 800299a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	2303      	movs	r3, #3
 80029a2:	f005 f9d4 	bl	8007d4e <HAL_SPI_TransmitReceive>
 80029a6:	4603      	mov	r3, r0
 80029a8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 80029aa:	2201      	movs	r2, #1
 80029ac:	2101      	movs	r1, #1
 80029ae:	4808      	ldr	r0, [pc, #32]	; (80029d0 <S2LP_WriteReg+0x6c>)
 80029b0:	f003 fd7e 	bl	80064b0 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 80029b4:	b662      	cpsie	i
}
 80029b6:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <S2LP_WriteReg+0x60>
 80029be:	893a      	ldrh	r2, [r7, #8]
		memcpy(status, &RxBuf[0], 2);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	801a      	strh	r2, [r3, #0]
	return err;
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	48000800 	.word	0x48000800
 80029d4:	20003d68 	.word	0x20003d68

080029d8 <S2LP_WriteTxFIFO>:

HAL_StatusTypeDef S2LP_WriteTxFIFO(uint8_t *chunk, uint8_t chunk_len, S2LPStatus *status)
{
 80029d8:	b590      	push	{r4, r7, lr}
 80029da:	b08d      	sub	sp, #52	; 0x34
 80029dc:	af02      	add	r7, sp, #8
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	460b      	mov	r3, r1
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	72fb      	strb	r3, [r7, #11]
	uint8_t TxBuf[FIFO_CHUNK_SIZE+2];
	uint8_t RxBuf[FIFO_CHUNK_SIZE+2];
	TxBuf[0] = 0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	773b      	strb	r3, [r7, #28]
	TxBuf[1] = 0xFF;
 80029ea:	23ff      	movs	r3, #255	; 0xff
 80029ec:	777b      	strb	r3, [r7, #29]
	memcpy((void *)&TxBuf[2], (void *)chunk, chunk_len);
 80029ee:	7afa      	ldrb	r2, [r7, #11]
 80029f0:	f107 031c 	add.w	r3, r7, #28
 80029f4:	3302      	adds	r3, #2
 80029f6:	68f9      	ldr	r1, [r7, #12]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f009 f9e8 	bl	800bdce <memcpy>
  __ASM volatile ("cpsid i" : : : "memory");
 80029fe:	b672      	cpsid	i
}
 8002a00:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8002a02:	2200      	movs	r2, #0
 8002a04:	2101      	movs	r1, #1
 8002a06:	4814      	ldr	r0, [pc, #80]	; (8002a58 <S2LP_WriteTxFIFO+0x80>)
 8002a08:	f003 fd52 	bl	80064b0 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, chunk_len+2, HAL_MAX_DELAY);
 8002a0c:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <S2LP_WriteTxFIFO+0x84>)
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	7afb      	ldrb	r3, [r7, #11]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	3302      	adds	r3, #2
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	f107 0210 	add.w	r2, r7, #16
 8002a1c:	f107 011c 	add.w	r1, r7, #28
 8002a20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002a24:	9400      	str	r4, [sp, #0]
 8002a26:	f005 f992 	bl	8007d4e <HAL_SPI_TransmitReceive>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8002a30:	2201      	movs	r2, #1
 8002a32:	2101      	movs	r1, #1
 8002a34:	4808      	ldr	r0, [pc, #32]	; (8002a58 <S2LP_WriteTxFIFO+0x80>)
 8002a36:	f003 fd3b 	bl	80064b0 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8002a3a:	b662      	cpsie	i
}
 8002a3c:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <S2LP_WriteTxFIFO+0x72>
 8002a44:	8a3a      	ldrh	r2, [r7, #16]
		memcpy(status, &RxBuf[0], 2);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	801a      	strh	r2, [r3, #0]
	return err;
 8002a4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	372c      	adds	r7, #44	; 0x2c
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd90      	pop	{r4, r7, pc}
 8002a56:	bf00      	nop
 8002a58:	48000800 	.word	0x48000800
 8002a5c:	20003d68 	.word	0x20003d68

08002a60 <S2LP_Send>:

HAL_StatusTypeDef S2LP_Send(uint8_t *payload, uint16_t pay_len)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	807b      	strh	r3, [r7, #2]
	S2LPStatus radio_status;
	HAL_StatusTypeDef err;

	// Flush the Tx FIFO
	S2LP_Command(CMD_FLUSHTXFIFO, &radio_status);
 8002a6c:	f107 030c 	add.w	r3, r7, #12
 8002a70:	4619      	mov	r1, r3
 8002a72:	2072      	movs	r0, #114	; 0x72
 8002a74:	f7ff ff06 	bl	8002884 <S2LP_Command>
	if (radio_status.MC_STATE != MC_STATE_READY) {
 8002a78:	7b7b      	ldrb	r3, [r7, #13]
 8002a7a:	f023 0301 	bic.w	r3, r3, #1
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d004      	beq.n	8002a8e <S2LP_Send+0x2e>
		DEBUG_PRINT("[S2LP] Error: radio is not ready\r\n");
 8002a84:	4865      	ldr	r0, [pc, #404]	; (8002c1c <S2LP_Send+0x1bc>)
 8002a86:	f008 ff95 	bl	800b9b4 <puts>
		return HAL_BUSY;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e0c1      	b.n	8002c12 <S2LP_Send+0x1b2>
	}
	// Reset global interrupt variables
	packet_sent = 0;
 8002a8e:	4b64      	ldr	r3, [pc, #400]	; (8002c20 <S2LP_Send+0x1c0>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]
	underflow = 0;
 8002a94:	4b63      	ldr	r3, [pc, #396]	; (8002c24 <S2LP_Send+0x1c4>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	701a      	strb	r2, [r3, #0]
	fifo_almost_empty = 0;
 8002a9a:	4b63      	ldr	r3, [pc, #396]	; (8002c28 <S2LP_Send+0x1c8>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	701a      	strb	r2, [r3, #0]

	// Set the packet length
	S2LP_WriteReg(PCKTLEN1_ADDR, (uint8_t) (pay_len >> 8), NULL);
 8002aa0:	887b      	ldrh	r3, [r7, #2]
 8002aa2:	0a1b      	lsrs	r3, r3, #8
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	4619      	mov	r1, r3
 8002aac:	2031      	movs	r0, #49	; 0x31
 8002aae:	f7ff ff59 	bl	8002964 <S2LP_WriteReg>
	S2LP_WriteReg(PCKTLEN0_ADDR, (uint8_t) (pay_len & 0xFF), NULL);
 8002ab2:	887b      	ldrh	r3, [r7, #2]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	4619      	mov	r1, r3
 8002aba:	2032      	movs	r0, #50	; 0x32
 8002abc:	f7ff ff52 	bl	8002964 <S2LP_WriteReg>

	// Switch to lock Tx state
	while (radio_status.MC_STATE != MC_STATE_LOCKON) {
 8002ac0:	e00f      	b.n	8002ae2 <S2LP_Send+0x82>
		err = S2LP_Command(CMD_LOCKTX, &radio_status);
 8002ac2:	f107 030c 	add.w	r3, r7, #12
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	2066      	movs	r0, #102	; 0x66
 8002aca:	f7ff fedb 	bl	8002884 <S2LP_Command>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	73bb      	strb	r3, [r7, #14]
		if (err) {
 8002ad2:	7bbb      	ldrb	r3, [r7, #14]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d004      	beq.n	8002ae2 <S2LP_Send+0x82>
			DEBUG_PRINT("[S2LP] Error: cannot lock on Tx\r\n");
 8002ad8:	4854      	ldr	r0, [pc, #336]	; (8002c2c <S2LP_Send+0x1cc>)
 8002ada:	f008 ff6b 	bl	800b9b4 <puts>
			return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e097      	b.n	8002c12 <S2LP_Send+0x1b2>
	while (radio_status.MC_STATE != MC_STATE_LOCKON) {
 8002ae2:	7b7b      	ldrb	r3, [r7, #13]
 8002ae4:	f023 0301 	bic.w	r3, r3, #1
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b18      	cmp	r3, #24
 8002aec:	d1e9      	bne.n	8002ac2 <S2LP_Send+0x62>
		}
	}

	// Fill Tx FIFO with payload chunks
	uint8_t sending = 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	75fb      	strb	r3, [r7, #23]
	uint16_t n_chunks = (pay_len / FIFO_CHUNK_SIZE) + (pay_len % FIFO_CHUNK_SIZE != 0);
 8002af2:	887b      	ldrh	r3, [r7, #2]
 8002af4:	08db      	lsrs	r3, r3, #3
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	887b      	ldrh	r3, [r7, #2]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bf14      	ite	ne
 8002b04:	2301      	movne	r3, #1
 8002b06:	2300      	moveq	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	823b      	strh	r3, [r7, #16]

	uint16_t free_chunks = FIFO_SIZE / FIFO_CHUNK_SIZE;
 8002b10:	2310      	movs	r3, #16
 8002b12:	82bb      	strh	r3, [r7, #20]

	for(uint16_t i=0; i < n_chunks; i++) {
 8002b14:	2300      	movs	r3, #0
 8002b16:	827b      	strh	r3, [r7, #18]
 8002b18:	e063      	b.n	8002be2 <S2LP_Send+0x182>
		if (underflow) {
 8002b1a:	4b42      	ldr	r3, [pc, #264]	; (8002c24 <S2LP_Send+0x1c4>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d02f      	beq.n	8002b84 <S2LP_Send+0x124>
			DEBUG_PRINT("[S2LP] Error: Tx FIFO overflow or underflow!\r\n");
 8002b24:	4842      	ldr	r0, [pc, #264]	; (8002c30 <S2LP_Send+0x1d0>)
 8002b26:	f008 ff45 	bl	800b9b4 <puts>
			err = S2LP_ReadReg(0, NULL, &radio_status); // fetch radio state
 8002b2a:	f107 030c 	add.w	r3, r7, #12
 8002b2e:	461a      	mov	r2, r3
 8002b30:	2100      	movs	r1, #0
 8002b32:	2000      	movs	r0, #0
 8002b34:	f7ff fed8 	bl	80028e8 <S2LP_ReadReg>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	73bb      	strb	r3, [r7, #14]
			if (!err) {
 8002b3c:	7bbb      	ldrb	r3, [r7, #14]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d105      	bne.n	8002b4e <S2LP_Send+0xee>
				S2LP_PrintStatus(&radio_status);
 8002b42:	f107 030c 	add.w	r3, r7, #12
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 f87a 	bl	8002c40 <S2LP_PrintStatus>
 8002b4c:	e002      	b.n	8002b54 <S2LP_Send+0xf4>
			} else {
				DEBUG_PRINT("[S2LP] Error: unable to fetch radio status!\r\n");
 8002b4e:	4839      	ldr	r0, [pc, #228]	; (8002c34 <S2LP_Send+0x1d4>)
 8002b50:	f008 ff30 	bl	800b9b4 <puts>
			}
			return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e05c      	b.n	8002c12 <S2LP_Send+0x1b2>
		}

		while (free_chunks == 0) {
			if (!sending) {// if FIFO is full and we are not sending yet ...
 8002b58:	7dfb      	ldrb	r3, [r7, #23]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d107      	bne.n	8002b6e <S2LP_Send+0x10e>
				S2LP_Command(CMD_TX, &radio_status); // start the transmission
 8002b5e:	f107 030c 	add.w	r3, r7, #12
 8002b62:	4619      	mov	r1, r3
 8002b64:	2060      	movs	r0, #96	; 0x60
 8002b66:	f7ff fe8d 	bl	8002884 <S2LP_Command>
				sending = 1;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	75fb      	strb	r3, [r7, #23]
			}

			__WFI();
 8002b6e:	bf30      	wfi
			if (fifo_almost_empty) {
 8002b70:	4b2d      	ldr	r3, [pc, #180]	; (8002c28 <S2LP_Send+0x1c8>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d004      	beq.n	8002b84 <S2LP_Send+0x124>
				free_chunks = FIFO_SIZE/FIFO_CHUNK_SIZE - FIFO_EMPTY_THRESH;
 8002b7a:	230c      	movs	r3, #12
 8002b7c:	82bb      	strh	r3, [r7, #20]
				fifo_almost_empty = 0;
 8002b7e:	4b2a      	ldr	r3, [pc, #168]	; (8002c28 <S2LP_Send+0x1c8>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]
		while (free_chunks == 0) {
 8002b84:	8abb      	ldrh	r3, [r7, #20]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0e6      	beq.n	8002b58 <S2LP_Send+0xf8>
			}
		}

		uint8_t chunk_len = (i == n_chunks-1) ? pay_len-(n_chunks-1)*FIFO_CHUNK_SIZE : FIFO_CHUNK_SIZE;
 8002b8a:	8a7a      	ldrh	r2, [r7, #18]
 8002b8c:	8a3b      	ldrh	r3, [r7, #16]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d109      	bne.n	8002ba8 <S2LP_Send+0x148>
 8002b94:	887b      	ldrh	r3, [r7, #2]
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	8a3b      	ldrh	r3, [r7, #16]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	e000      	b.n	8002baa <S2LP_Send+0x14a>
 8002ba8:	2308      	movs	r3, #8
 8002baa:	73fb      	strb	r3, [r7, #15]
		err = S2LP_WriteTxFIFO(&payload[i*FIFO_CHUNK_SIZE], chunk_len, &radio_status);
 8002bac:	8a7b      	ldrh	r3, [r7, #18]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f107 020c 	add.w	r2, r7, #12
 8002bba:	7bf9      	ldrb	r1, [r7, #15]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff ff0b 	bl	80029d8 <S2LP_WriteTxFIFO>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	73bb      	strb	r3, [r7, #14]
		if (err) {
 8002bc6:	7bbb      	ldrb	r3, [r7, #14]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d004      	beq.n	8002bd6 <S2LP_Send+0x176>
			DEBUG_PRINT("[S2LP] Error: cannot fill Tx FIFO\r\n");
 8002bcc:	481a      	ldr	r0, [pc, #104]	; (8002c38 <S2LP_Send+0x1d8>)
 8002bce:	f008 fef1 	bl	800b9b4 <puts>
			return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e01d      	b.n	8002c12 <S2LP_Send+0x1b2>
		}
		free_chunks--;
 8002bd6:	8abb      	ldrh	r3, [r7, #20]
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i < n_chunks; i++) {
 8002bdc:	8a7b      	ldrh	r3, [r7, #18]
 8002bde:	3301      	adds	r3, #1
 8002be0:	827b      	strh	r3, [r7, #18]
 8002be2:	8a7a      	ldrh	r2, [r7, #18]
 8002be4:	8a3b      	ldrh	r3, [r7, #16]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d397      	bcc.n	8002b1a <S2LP_Send+0xba>
	}

	// Start transmission (for short payloads)
	if (!sending) {
 8002bea:	7dfb      	ldrb	r3, [r7, #23]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d107      	bne.n	8002c00 <S2LP_Send+0x1a0>
		S2LP_Command(CMD_TX, &radio_status);
 8002bf0:	f107 030c 	add.w	r3, r7, #12
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	2060      	movs	r0, #96	; 0x60
 8002bf8:	f7ff fe44 	bl	8002884 <S2LP_Command>
	}

	while (!packet_sent) {
 8002bfc:	e000      	b.n	8002c00 <S2LP_Send+0x1a0>
		__WFI(); // wait until packet has been fully transmitted
 8002bfe:	bf30      	wfi
	while (!packet_sent) {
 8002c00:	4b07      	ldr	r3, [pc, #28]	; (8002c20 <S2LP_Send+0x1c0>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f9      	beq.n	8002bfe <S2LP_Send+0x19e>
	}

	DEBUG_PRINT("[S2LP] Packet transmitted!\r\n");
 8002c0a:	480c      	ldr	r0, [pc, #48]	; (8002c3c <S2LP_Send+0x1dc>)
 8002c0c:	f008 fed2 	bl	800b9b4 <puts>
	return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	0800dc1c 	.word	0x0800dc1c
 8002c20:	20003d6c 	.word	0x20003d6c
 8002c24:	20003d6e 	.word	0x20003d6e
 8002c28:	20003d6d 	.word	0x20003d6d
 8002c2c:	0800dc40 	.word	0x0800dc40
 8002c30:	0800dc64 	.word	0x0800dc64
 8002c34:	0800dc94 	.word	0x0800dc94
 8002c38:	0800dcc4 	.word	0x0800dcc4
 8002c3c:	0800dce8 	.word	0x0800dce8

08002c40 <S2LP_PrintStatus>:

void S2LP_PrintStatus(S2LPStatus *status)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af02      	add	r7, sp, #8
 8002c46:	6078      	str	r0, [r7, #4]
	DEBUG_PRINT("=== S2LP Status ===\r\n");
 8002c48:	486f      	ldr	r0, [pc, #444]	; (8002e08 <S2LP_PrintStatus+0x1c8>)
 8002c4a:	f008 feb3 	bl	800b9b4 <puts>
	DEBUG_PRINT("  MC_STATE: ");
 8002c4e:	486f      	ldr	r0, [pc, #444]	; (8002e0c <S2LP_PrintStatus+0x1cc>)
 8002c50:	f008 fe4a 	bl	800b8e8 <iprintf>
	switch (status->MC_STATE) {
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	785b      	ldrb	r3, [r3, #1]
 8002c58:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b5c      	cmp	r3, #92	; 0x5c
 8002c60:	f000 808f 	beq.w	8002d82 <S2LP_PrintStatus+0x142>
 8002c64:	2b5c      	cmp	r3, #92	; 0x5c
 8002c66:	f300 8094 	bgt.w	8002d92 <S2LP_PrintStatus+0x152>
 8002c6a:	2b30      	cmp	r3, #48	; 0x30
 8002c6c:	dc6a      	bgt.n	8002d44 <S2LP_PrintStatus+0x104>
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f2c0 808f 	blt.w	8002d92 <S2LP_PrintStatus+0x152>
 8002c74:	2b30      	cmp	r3, #48	; 0x30
 8002c76:	f200 808c 	bhi.w	8002d92 <S2LP_PrintStatus+0x152>
 8002c7a:	a201      	add	r2, pc, #4	; (adr r2, 8002c80 <S2LP_PrintStatus+0x40>)
 8002c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c80:	08002d4b 	.word	0x08002d4b
 8002c84:	08002d63 	.word	0x08002d63
 8002c88:	08002d53 	.word	0x08002d53
 8002c8c:	08002d5b 	.word	0x08002d5b
 8002c90:	08002d93 	.word	0x08002d93
 8002c94:	08002d93 	.word	0x08002d93
 8002c98:	08002d93 	.word	0x08002d93
 8002c9c:	08002d93 	.word	0x08002d93
 8002ca0:	08002d93 	.word	0x08002d93
 8002ca4:	08002d93 	.word	0x08002d93
 8002ca8:	08002d93 	.word	0x08002d93
 8002cac:	08002d93 	.word	0x08002d93
 8002cb0:	08002d6b 	.word	0x08002d6b
 8002cb4:	08002d93 	.word	0x08002d93
 8002cb8:	08002d93 	.word	0x08002d93
 8002cbc:	08002d93 	.word	0x08002d93
 8002cc0:	08002d93 	.word	0x08002d93
 8002cc4:	08002d93 	.word	0x08002d93
 8002cc8:	08002d93 	.word	0x08002d93
 8002ccc:	08002d93 	.word	0x08002d93
 8002cd0:	08002d7b 	.word	0x08002d7b
 8002cd4:	08002d93 	.word	0x08002d93
 8002cd8:	08002d93 	.word	0x08002d93
 8002cdc:	08002d93 	.word	0x08002d93
 8002ce0:	08002d93 	.word	0x08002d93
 8002ce4:	08002d93 	.word	0x08002d93
 8002ce8:	08002d93 	.word	0x08002d93
 8002cec:	08002d93 	.word	0x08002d93
 8002cf0:	08002d93 	.word	0x08002d93
 8002cf4:	08002d93 	.word	0x08002d93
 8002cf8:	08002d93 	.word	0x08002d93
 8002cfc:	08002d93 	.word	0x08002d93
 8002d00:	08002d93 	.word	0x08002d93
 8002d04:	08002d93 	.word	0x08002d93
 8002d08:	08002d93 	.word	0x08002d93
 8002d0c:	08002d93 	.word	0x08002d93
 8002d10:	08002d93 	.word	0x08002d93
 8002d14:	08002d93 	.word	0x08002d93
 8002d18:	08002d93 	.word	0x08002d93
 8002d1c:	08002d93 	.word	0x08002d93
 8002d20:	08002d93 	.word	0x08002d93
 8002d24:	08002d93 	.word	0x08002d93
 8002d28:	08002d93 	.word	0x08002d93
 8002d2c:	08002d93 	.word	0x08002d93
 8002d30:	08002d93 	.word	0x08002d93
 8002d34:	08002d93 	.word	0x08002d93
 8002d38:	08002d93 	.word	0x08002d93
 8002d3c:	08002d93 	.word	0x08002d93
 8002d40:	08002d73 	.word	0x08002d73
 8002d44:	2b50      	cmp	r3, #80	; 0x50
 8002d46:	d020      	beq.n	8002d8a <S2LP_PrintStatus+0x14a>
 8002d48:	e023      	b.n	8002d92 <S2LP_PrintStatus+0x152>
		case (MC_STATE_READY):
			DEBUG_PRINT("READY");
 8002d4a:	4831      	ldr	r0, [pc, #196]	; (8002e10 <S2LP_PrintStatus+0x1d0>)
 8002d4c:	f008 fdcc 	bl	800b8e8 <iprintf>
			break;
 8002d50:	e023      	b.n	8002d9a <S2LP_PrintStatus+0x15a>
		case (MC_STATE_STANDBY):
			DEBUG_PRINT("STANDBY");
 8002d52:	4830      	ldr	r0, [pc, #192]	; (8002e14 <S2LP_PrintStatus+0x1d4>)
 8002d54:	f008 fdc8 	bl	800b8e8 <iprintf>
			break;
 8002d58:	e01f      	b.n	8002d9a <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SLEEP):
			DEBUG_PRINT("SLEEP");
 8002d5a:	482f      	ldr	r0, [pc, #188]	; (8002e18 <S2LP_PrintStatus+0x1d8>)
 8002d5c:	f008 fdc4 	bl	800b8e8 <iprintf>
			break;
 8002d60:	e01b      	b.n	8002d9a <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SLEEP_NOFIFO):
			DEBUG_PRINT("SLEEP");
 8002d62:	482d      	ldr	r0, [pc, #180]	; (8002e18 <S2LP_PrintStatus+0x1d8>)
 8002d64:	f008 fdc0 	bl	800b8e8 <iprintf>
			break;
 8002d68:	e017      	b.n	8002d9a <S2LP_PrintStatus+0x15a>
		case (MC_STATE_LOCKON):
			DEBUG_PRINT("LOCKON");
 8002d6a:	482c      	ldr	r0, [pc, #176]	; (8002e1c <S2LP_PrintStatus+0x1dc>)
 8002d6c:	f008 fdbc 	bl	800b8e8 <iprintf>
			break;
 8002d70:	e013      	b.n	8002d9a <S2LP_PrintStatus+0x15a>
		case (MC_STATE_RX):
			DEBUG_PRINT("RX");
 8002d72:	482b      	ldr	r0, [pc, #172]	; (8002e20 <S2LP_PrintStatus+0x1e0>)
 8002d74:	f008 fdb8 	bl	800b8e8 <iprintf>
			break;
 8002d78:	e00f      	b.n	8002d9a <S2LP_PrintStatus+0x15a>
		case (MC_STATE_LOCK_ST):
			DEBUG_PRINT("LOCK_ST");
 8002d7a:	482a      	ldr	r0, [pc, #168]	; (8002e24 <S2LP_PrintStatus+0x1e4>)
 8002d7c:	f008 fdb4 	bl	800b8e8 <iprintf>
			break;
 8002d80:	e00b      	b.n	8002d9a <S2LP_PrintStatus+0x15a>
		case (MC_STATE_TX):
			DEBUG_PRINT("TX");
 8002d82:	4829      	ldr	r0, [pc, #164]	; (8002e28 <S2LP_PrintStatus+0x1e8>)
 8002d84:	f008 fdb0 	bl	800b8e8 <iprintf>
			break;
 8002d88:	e007      	b.n	8002d9a <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SYNTH_SETUP):
			DEBUG_PRINT("SYNTH_SETUP");
 8002d8a:	4828      	ldr	r0, [pc, #160]	; (8002e2c <S2LP_PrintStatus+0x1ec>)
 8002d8c:	f008 fdac 	bl	800b8e8 <iprintf>
			break;
 8002d90:	e003      	b.n	8002d9a <S2LP_PrintStatus+0x15a>
		default:
			DEBUG_PRINT("UNKNOWN");
 8002d92:	4827      	ldr	r0, [pc, #156]	; (8002e30 <S2LP_PrintStatus+0x1f0>)
 8002d94:	f008 fda8 	bl	800b8e8 <iprintf>
			break;
 8002d98:	bf00      	nop
	}
	DEBUG_PRINT("\r\n");
 8002d9a:	4826      	ldr	r0, [pc, #152]	; (8002e34 <S2LP_PrintStatus+0x1f4>)
 8002d9c:	f008 fe0a 	bl	800b9b4 <puts>
	DEBUG_PRINT("  XO_ON=%u, ERROR_LOCK=%u, RX_fifo_empty=%u, TX_FIFO_FULL=%u\r\n",
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	785b      	ldrb	r3, [r3, #1]
 8002da4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	4619      	mov	r1, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	461a      	mov	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	4819      	ldr	r0, [pc, #100]	; (8002e38 <S2LP_PrintStatus+0x1f8>)
 8002dd4:	f008 fd88 	bl	800b8e8 <iprintf>
			status->XO_ON, status->ERROR_LOCK, status->RX_FIFO_EMPTY, status->TX_FIFO_FULL);
	DEBUG_PRINT("  ANT_SELECT=%u, RCCAL_OK=%u, RES=%u\r\n", status->ANT_SELECT, status->RCCAL_OK, status->RESERVED);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	4619      	mov	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	461a      	mov	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	4810      	ldr	r0, [pc, #64]	; (8002e3c <S2LP_PrintStatus+0x1fc>)
 8002dfc:	f008 fd74 	bl	800b8e8 <iprintf>
}
 8002e00:	bf00      	nop
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	0800dd04 	.word	0x0800dd04
 8002e0c:	0800dd1c 	.word	0x0800dd1c
 8002e10:	0800dd2c 	.word	0x0800dd2c
 8002e14:	0800dd34 	.word	0x0800dd34
 8002e18:	0800dd3c 	.word	0x0800dd3c
 8002e1c:	0800dd44 	.word	0x0800dd44
 8002e20:	0800dd4c 	.word	0x0800dd4c
 8002e24:	0800dd50 	.word	0x0800dd50
 8002e28:	0800dd58 	.word	0x0800dd58
 8002e2c:	0800dd5c 	.word	0x0800dd5c
 8002e30:	0800dd68 	.word	0x0800dd68
 8002e34:	0800dd70 	.word	0x0800dd70
 8002e38:	0800dd74 	.word	0x0800dd74
 8002e3c:	0800ddb4 	.word	0x0800ddb4

08002e40 <S2LP_PLLConf>:
* @param  pfd_split pointer to the pfd register value.
* @param  lFc channel center frequency expressed in Hz (from 779 MHz to 915 MHz)
* @retval uint8_t Charge pump word.
*/
void S2LP_PLLConf(int32_t lFc)
{
 8002e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e44:	b09e      	sub	sp, #120	; 0x78
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	63f8      	str	r0, [r7, #60]	; 0x3c
  uint32_t vcofreq, lFRef;
  uint8_t BFactor = 4; // 779-915 MHz range
 8002e4a:	2304      	movs	r3, #4
 8002e4c:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
  uint8_t refdiv = 1; // REFDIV=0 (XO_RCO_CONF0) by default
 8002e50:	2301      	movs	r3, #1
 8002e52:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

  /* Calculates the syntheziser band select */
  uint64_t tgt1,tgt2,tgt;
  uint32_t synth;

  tgt = (((uint64_t)lFc)<<19)*(BFactor*refdiv);
 8002e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e58:	17da      	asrs	r2, r3, #31
 8002e5a:	469a      	mov	sl, r3
 8002e5c:	4693      	mov	fp, r2
 8002e5e:	ea4f 396a 	mov.w	r9, sl, asr #13
 8002e62:	ea4f 48ca 	mov.w	r8, sl, lsl #19
 8002e66:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8002e6a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8002e6e:	fb02 f303 	mul.w	r3, r2, r3
 8002e72:	17da      	asrs	r2, r3, #31
 8002e74:	623b      	str	r3, [r7, #32]
 8002e76:	627a      	str	r2, [r7, #36]	; 0x24
 8002e78:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	fb03 f209 	mul.w	r2, r3, r9
 8002e82:	460b      	mov	r3, r1
 8002e84:	fb08 f303 	mul.w	r3, r8, r3
 8002e88:	4413      	add	r3, r2
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	fba8 4502 	umull	r4, r5, r8, r2
 8002e90:	442b      	add	r3, r5
 8002e92:	461d      	mov	r5, r3
 8002e94:	e9c7 451a 	strd	r4, r5, [r7, #104]	; 0x68
 8002e98:	e9c7 451a 	strd	r4, r5, [r7, #104]	; 0x68
  synth=(uint32_t)(tgt/XTAL_FREQ);
 8002e9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002ea0:	a374      	add	r3, pc, #464	; (adr r3, 8003074 <S2LP_PLLConf+0x234>)
 8002ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea6:	f7fd fe8f 	bl	8000bc8 <__aeabi_uldivmod>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4613      	mov	r3, r2
 8002eb0:	667b      	str	r3, [r7, #100]	; 0x64
  tgt1 = (uint64_t)XTAL_FREQ*(synth);
 8002eb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	61bb      	str	r3, [r7, #24]
 8002eb8:	61fa      	str	r2, [r7, #28]
 8002eba:	4b6b      	ldr	r3, [pc, #428]	; (8003068 <S2LP_PLLConf+0x228>)
 8002ebc:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002ec0:	462a      	mov	r2, r5
 8002ec2:	fb03 f202 	mul.w	r2, r3, r2
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	4621      	mov	r1, r4
 8002eca:	fb01 f303 	mul.w	r3, r1, r3
 8002ece:	4413      	add	r3, r2
 8002ed0:	4a65      	ldr	r2, [pc, #404]	; (8003068 <S2LP_PLLConf+0x228>)
 8002ed2:	4621      	mov	r1, r4
 8002ed4:	fba1 1202 	umull	r1, r2, r1, r2
 8002ed8:	637a      	str	r2, [r7, #52]	; 0x34
 8002eda:	460a      	mov	r2, r1
 8002edc:	633a      	str	r2, [r7, #48]	; 0x30
 8002ede:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ee0:	4413      	add	r3, r2
 8002ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ee4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002ee8:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
 8002eec:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
  tgt2 = (uint64_t)XTAL_FREQ*(synth+1);
 8002ef0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	613b      	str	r3, [r7, #16]
 8002ef8:	617a      	str	r2, [r7, #20]
 8002efa:	4b5b      	ldr	r3, [pc, #364]	; (8003068 <S2LP_PLLConf+0x228>)
 8002efc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002f00:	462a      	mov	r2, r5
 8002f02:	fb03 f202 	mul.w	r2, r3, r2
 8002f06:	2300      	movs	r3, #0
 8002f08:	4621      	mov	r1, r4
 8002f0a:	fb01 f303 	mul.w	r3, r1, r3
 8002f0e:	4413      	add	r3, r2
 8002f10:	4a55      	ldr	r2, [pc, #340]	; (8003068 <S2LP_PLLConf+0x228>)
 8002f12:	4621      	mov	r1, r4
 8002f14:	fba1 1202 	umull	r1, r2, r1, r2
 8002f18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f1a:	460a      	mov	r2, r1
 8002f1c:	62ba      	str	r2, [r7, #40]	; 0x28
 8002f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f20:	4413      	add	r3, r2
 8002f22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f24:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8002f28:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8002f2c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

  synth=((tgt2-tgt)<(tgt-tgt1))?(synth+1):(synth);
 8002f30:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002f34:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002f38:	1a84      	subs	r4, r0, r2
 8002f3a:	60bc      	str	r4, [r7, #8]
 8002f3c:	eb61 0303 	sbc.w	r3, r1, r3
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f4a:	1a84      	subs	r4, r0, r2
 8002f4c:	603c      	str	r4, [r7, #0]
 8002f4e:	eb61 0303 	sbc.w	r3, r1, r3
 8002f52:	607b      	str	r3, [r7, #4]
 8002f54:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f58:	4623      	mov	r3, r4
 8002f5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f5e:	4602      	mov	r2, r0
 8002f60:	4293      	cmp	r3, r2
 8002f62:	462b      	mov	r3, r5
 8002f64:	460a      	mov	r2, r1
 8002f66:	4193      	sbcs	r3, r2
 8002f68:	d202      	bcs.n	8002f70 <S2LP_PLLConf+0x130>
 8002f6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	e000      	b.n	8002f72 <S2LP_PLLConf+0x132>
 8002f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f72:	667b      	str	r3, [r7, #100]	; 0x64

  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc*BFactor;
 8002f74:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8002f78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f7a:	fb02 f303 	mul.w	r3, r2, r3
 8002f7e:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Calculates the reference frequency clock */
  lFRef = XTAL_FREQ/refdiv;
 8002f80:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8002f84:	4a38      	ldr	r2, [pc, #224]	; (8003068 <S2LP_PLLConf+0x228>)
 8002f86:	fb92 f3f3 	sdiv	r3, r2, r3
 8002f8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Set the correct charge pump word */
  if (vcofreq >= VCO_CENTER_FREQ) {
 8002f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f8e:	4a37      	ldr	r2, [pc, #220]	; (800306c <S2LP_PLLConf+0x22c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d911      	bls.n	8002fb8 <S2LP_PLLConf+0x178>
    if (lFRef > S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8002f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f96:	4a36      	ldr	r2, [pc, #216]	; (8003070 <S2LP_PLLConf+0x230>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d906      	bls.n	8002faa <S2LP_PLLConf+0x16a>
      cp_isel = 0x02;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
      pfd_split = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8002fa8:	e017      	b.n	8002fda <S2LP_PLLConf+0x19a>
    }
    else {
      cp_isel = 0x01;
 8002faa:	2301      	movs	r3, #1
 8002fac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
      pfd_split = 1;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8002fb6:	e010      	b.n	8002fda <S2LP_PLLConf+0x19a>
    }
  }
  else {
    if (lFRef > S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8002fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fba:	4a2d      	ldr	r2, [pc, #180]	; (8003070 <S2LP_PLLConf+0x230>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d906      	bls.n	8002fce <S2LP_PLLConf+0x18e>
      cp_isel = 0x03;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
      pfd_split = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8002fcc:	e005      	b.n	8002fda <S2LP_PLLConf+0x19a>
    }
    else {
      cp_isel = 0x02;
 8002fce:	2302      	movs	r3, #2
 8002fd0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
      pfd_split = 1;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
    }
  }

  //DEBUG_PRINT("SYNT: %lu, cp_ise=%u, pfd_split=%u\r\n", synth, cp_isel, pfd_split);

  uint8_t SYNT3 = (uint8_t) ((cp_isel << 5) | (synth >> 24));
 8002fda:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002fde:	015b      	lsls	r3, r3, #5
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fe4:	0e1b      	lsrs	r3, r3, #24
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint8_t SYNT2 = (uint8_t) ((synth >> 16) & 0xFF);
 8002fee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ff0:	0c1b      	lsrs	r3, r3, #16
 8002ff2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  uint8_t SYNT1 = (uint8_t) ((synth >> 8) & 0xFF);
 8002ff6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ff8:	0a1b      	lsrs	r3, r3, #8
 8002ffa:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  uint8_t SYNT0 = (uint8_t) ((synth >> 0) & 0xFF);
 8002ffe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003000:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

  uint8_t SYNTH_CONFIG2 = 0xD0 + (pfd_split << 2);
 8003004:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	b2db      	uxtb	r3, r3
 800300c:	3b30      	subs	r3, #48	; 0x30
 800300e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  S2LP_WriteReg(SYNT3_ADDR, SYNT3, NULL);
 8003012:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003016:	2200      	movs	r2, #0
 8003018:	4619      	mov	r1, r3
 800301a:	2005      	movs	r0, #5
 800301c:	f7ff fca2 	bl	8002964 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT2_ADDR, SYNT2, NULL);
 8003020:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003024:	2200      	movs	r2, #0
 8003026:	4619      	mov	r1, r3
 8003028:	2006      	movs	r0, #6
 800302a:	f7ff fc9b 	bl	8002964 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT1_ADDR, SYNT1, NULL);
 800302e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003032:	2200      	movs	r2, #0
 8003034:	4619      	mov	r1, r3
 8003036:	2007      	movs	r0, #7
 8003038:	f7ff fc94 	bl	8002964 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT0_ADDR, SYNT0, NULL);
 800303c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003040:	2200      	movs	r2, #0
 8003042:	4619      	mov	r1, r3
 8003044:	2008      	movs	r0, #8
 8003046:	f7ff fc8d 	bl	8002964 <S2LP_WriteReg>
  S2LP_WriteReg(SYNTH_CONFIG2_ADDR, SYNTH_CONFIG2, NULL);
 800304a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800304e:	2200      	movs	r2, #0
 8003050:	4619      	mov	r1, r3
 8003052:	2065      	movs	r0, #101	; 0x65
 8003054:	f7ff fc86 	bl	8002964 <S2LP_WriteReg>
}
 8003058:	bf00      	nop
 800305a:	3778      	adds	r7, #120	; 0x78
 800305c:	46bd      	mov	sp, r7
 800305e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003062:	bf00      	nop
 8003064:	f3af 8000 	nop.w
 8003068:	02faf080 	.word	0x02faf080
 800306c:	d693a3ff 	.word	0xd693a3ff
 8003070:	01c9c380 	.word	0x01c9c380
 8003074:	02faf080 	.word	0x02faf080
 8003078:	00000000 	.word	0x00000000

0800307c <ComputeDatarate>:

uint32_t ComputeDatarate(uint16_t cM, uint8_t cE)
{
 800307c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003080:	b091      	sub	sp, #68	; 0x44
 8003082:	af00      	add	r7, sp, #0
 8003084:	4603      	mov	r3, r0
 8003086:	460a      	mov	r2, r1
 8003088:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800308a:	4613      	mov	r3, r2
 800308c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint32_t f_dig=XTAL_FREQ;
 8003090:	4b3f      	ldr	r3, [pc, #252]	; (8003190 <ComputeDatarate+0x114>)
 8003092:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint64_t dr;

  if(f_dig>S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8003094:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003096:	4b3f      	ldr	r3, [pc, #252]	; (8003194 <ComputeDatarate+0x118>)
 8003098:	429a      	cmp	r2, r3
 800309a:	d902      	bls.n	80030a2 <ComputeDatarate+0x26>
    f_dig >>= 1;
 800309c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800309e:	085b      	lsrs	r3, r3, #1
 80030a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if(cE==0) {
 80030a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d128      	bne.n	80030fc <ComputeDatarate+0x80>
    dr=((uint64_t)f_dig*cM);
 80030aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ac:	2200      	movs	r2, #0
 80030ae:	61bb      	str	r3, [r7, #24]
 80030b0:	61fa      	str	r2, [r7, #28]
 80030b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80030b4:	2200      	movs	r2, #0
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	617a      	str	r2, [r7, #20]
 80030ba:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80030be:	462b      	mov	r3, r5
 80030c0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80030c4:	4642      	mov	r2, r8
 80030c6:	fb02 f203 	mul.w	r2, r2, r3
 80030ca:	464b      	mov	r3, r9
 80030cc:	4621      	mov	r1, r4
 80030ce:	fb01 f303 	mul.w	r3, r1, r3
 80030d2:	4413      	add	r3, r2
 80030d4:	4622      	mov	r2, r4
 80030d6:	4641      	mov	r1, r8
 80030d8:	fba2 ab01 	umull	sl, fp, r2, r1
 80030dc:	445b      	add	r3, fp
 80030de:	469b      	mov	fp, r3
 80030e0:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
 80030e4:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    return (uint32_t)(dr>>32);
 80030e8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	000a      	movs	r2, r1
 80030f6:	2300      	movs	r3, #0
 80030f8:	4613      	mov	r3, r2
 80030fa:	e043      	b.n	8003184 <ComputeDatarate+0x108>
  }

  dr=((uint64_t)f_dig)*((uint64_t)cM+65536);
 80030fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030fe:	2200      	movs	r2, #0
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	60fa      	str	r2, [r7, #12]
 8003104:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003106:	2200      	movs	r2, #0
 8003108:	603b      	str	r3, [r7, #0]
 800310a:	607a      	str	r2, [r7, #4]
 800310c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003110:	460b      	mov	r3, r1
 8003112:	f513 3380 	adds.w	r3, r3, #65536	; 0x10000
 8003116:	623b      	str	r3, [r7, #32]
 8003118:	4613      	mov	r3, r2
 800311a:	f143 0300 	adc.w	r3, r3, #0
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
 8003120:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003124:	460b      	mov	r3, r1
 8003126:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 800312a:	4652      	mov	r2, sl
 800312c:	fb02 f203 	mul.w	r2, r2, r3
 8003130:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 8003134:	465b      	mov	r3, fp
 8003136:	4682      	mov	sl, r0
 8003138:	468b      	mov	fp, r1
 800313a:	4651      	mov	r1, sl
 800313c:	fb01 f303 	mul.w	r3, r1, r3
 8003140:	4413      	add	r3, r2
 8003142:	4652      	mov	r2, sl
 8003144:	6a39      	ldr	r1, [r7, #32]
 8003146:	fba2 4501 	umull	r4, r5, r2, r1
 800314a:	442b      	add	r3, r5
 800314c:	461d      	mov	r5, r3
 800314e:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
 8003152:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30

  return (uint32_t)(dr>>(33-cE));
 8003156:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800315a:	f1c3 0121 	rsb	r1, r3, #33	; 0x21
 800315e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003162:	f1c1 0420 	rsb	r4, r1, #32
 8003166:	f1a1 0020 	sub.w	r0, r1, #32
 800316a:	fa22 f801 	lsr.w	r8, r2, r1
 800316e:	fa03 f404 	lsl.w	r4, r3, r4
 8003172:	ea48 0804 	orr.w	r8, r8, r4
 8003176:	fa23 f000 	lsr.w	r0, r3, r0
 800317a:	ea48 0800 	orr.w	r8, r8, r0
 800317e:	fa23 f901 	lsr.w	r9, r3, r1
 8003182:	4643      	mov	r3, r8
}
 8003184:	4618      	mov	r0, r3
 8003186:	3744      	adds	r7, #68	; 0x44
 8003188:	46bd      	mov	sp, r7
 800318a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800318e:	4770      	bx	lr
 8003190:	02faf080 	.word	0x02faf080
 8003194:	01c9c380 	.word	0x01c9c380

08003198 <SearchDatarateME>:

void SearchDatarateME(uint32_t lDatarate, uint16_t* pcM, uint8_t* pcE)
{
 8003198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800319c:	b0ae      	sub	sp, #184	; 0xb8
 800319e:	af00      	add	r7, sp, #0
 80031a0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 80031a4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80031a8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
  uint32_t lDatarateTmp, f_dig=XTAL_FREQ;
 80031ac:	4ba5      	ldr	r3, [pc, #660]	; (8003444 <SearchDatarateME+0x2ac>)
 80031ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint8_t uDrE;
  uint64_t tgt1,tgt2,tgt;

  if(f_dig>S2LP_DIG_DOMAIN_XTAL_THRESH) {
 80031b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80031b6:	4ba4      	ldr	r3, [pc, #656]	; (8003448 <SearchDatarateME+0x2b0>)
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d904      	bls.n	80031c6 <SearchDatarateME+0x2e>
    f_dig >>= 1;
 80031bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031c0:	085b      	lsrs	r3, r3, #1
 80031c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  }

  /* Search the exponent value */
  for(uDrE = 0; uDrE != 12; uDrE++) {
 80031c6:	2300      	movs	r3, #0
 80031c8:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 80031cc:	e013      	b.n	80031f6 <SearchDatarateME+0x5e>
    lDatarateTmp = ComputeDatarate(0xFFFF, uDrE);
 80031ce:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80031d2:	4619      	mov	r1, r3
 80031d4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80031d8:	f7ff ff50 	bl	800307c <ComputeDatarate>
 80031dc:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
    if(lDatarate<=lDatarateTmp)
 80031e0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80031e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d909      	bls.n	8003200 <SearchDatarateME+0x68>
  for(uDrE = 0; uDrE != 12; uDrE++) {
 80031ec:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80031f0:	3301      	adds	r3, #1
 80031f2:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 80031f6:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80031fa:	2b0c      	cmp	r3, #12
 80031fc:	d1e7      	bne.n	80031ce <SearchDatarateME+0x36>
 80031fe:	e000      	b.n	8003202 <SearchDatarateME+0x6a>
      break;
 8003200:	bf00      	nop
  }
  (*pcE) = (uint8_t)uDrE;
 8003202:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003206:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800320a:	7013      	strb	r3, [r2, #0]

  if(uDrE==0) {
 800320c:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d16b      	bne.n	80032ec <SearchDatarateME+0x154>
    tgt=((uint64_t)lDatarate)<<32;
 8003214:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003218:	2200      	movs	r2, #0
 800321a:	663b      	str	r3, [r7, #96]	; 0x60
 800321c:	667a      	str	r2, [r7, #100]	; 0x64
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003228:	000b      	movs	r3, r1
 800322a:	2200      	movs	r2, #0
 800322c:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
    (*pcM) = (uint16_t)(tgt/f_dig);
 8003230:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003234:	2200      	movs	r2, #0
 8003236:	65bb      	str	r3, [r7, #88]	; 0x58
 8003238:	65fa      	str	r2, [r7, #92]	; 0x5c
 800323a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800323e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003242:	f7fd fcc1 	bl	8000bc8 <__aeabi_uldivmod>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	b293      	uxth	r3, r2
 800324c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003250:	8013      	strh	r3, [r2, #0]
    tgt1=(uint64_t)f_dig*(*pcM);
 8003252:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003256:	2200      	movs	r2, #0
 8003258:	653b      	str	r3, [r7, #80]	; 0x50
 800325a:	657a      	str	r2, [r7, #84]	; 0x54
 800325c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	b29b      	uxth	r3, r3
 8003264:	2200      	movs	r2, #0
 8003266:	64bb      	str	r3, [r7, #72]	; 0x48
 8003268:	64fa      	str	r2, [r7, #76]	; 0x4c
 800326a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800326e:	462b      	mov	r3, r5
 8003270:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8003274:	4642      	mov	r2, r8
 8003276:	fb02 f203 	mul.w	r2, r2, r3
 800327a:	464b      	mov	r3, r9
 800327c:	4621      	mov	r1, r4
 800327e:	fb01 f303 	mul.w	r3, r1, r3
 8003282:	4413      	add	r3, r2
 8003284:	4622      	mov	r2, r4
 8003286:	4641      	mov	r1, r8
 8003288:	fba2 1201 	umull	r1, r2, r2, r1
 800328c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800328e:	460a      	mov	r2, r1
 8003290:	67ba      	str	r2, [r7, #120]	; 0x78
 8003292:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003294:	4413      	add	r3, r2
 8003296:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003298:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800329c:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 80032a0:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
    tgt2=(uint64_t)f_dig*((*pcM)+1);
 80032a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032a8:	2200      	movs	r2, #0
 80032aa:	643b      	str	r3, [r7, #64]	; 0x40
 80032ac:	647a      	str	r2, [r7, #68]	; 0x44
 80032ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	3301      	adds	r3, #1
 80032b6:	17da      	asrs	r2, r3, #31
 80032b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80032ba:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032bc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80032c0:	462b      	mov	r3, r5
 80032c2:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80032c6:	4642      	mov	r2, r8
 80032c8:	fb02 f203 	mul.w	r2, r2, r3
 80032cc:	464b      	mov	r3, r9
 80032ce:	4621      	mov	r1, r4
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	4413      	add	r3, r2
 80032d6:	4622      	mov	r2, r4
 80032d8:	4641      	mov	r1, r8
 80032da:	fba2 ab01 	umull	sl, fp, r2, r1
 80032de:	445b      	add	r3, fp
 80032e0:	469b      	mov	fp, r3
 80032e2:	e9c7 ab28 	strd	sl, fp, [r7, #160]	; 0xa0
 80032e6:	e9c7 ab28 	strd	sl, fp, [r7, #160]	; 0xa0
 80032ea:	e07d      	b.n	80033e8 <SearchDatarateME+0x250>
  }
  else {
    tgt=((uint64_t)lDatarate)<<(33-uDrE);
 80032ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032f0:	2200      	movs	r2, #0
 80032f2:	4698      	mov	r8, r3
 80032f4:	4691      	mov	r9, r2
 80032f6:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80032fa:	f1c3 0121 	rsb	r1, r3, #33	; 0x21
 80032fe:	f1a1 0320 	sub.w	r3, r1, #32
 8003302:	f1c1 0220 	rsb	r2, r1, #32
 8003306:	fa09 f501 	lsl.w	r5, r9, r1
 800330a:	fa08 f303 	lsl.w	r3, r8, r3
 800330e:	431d      	orrs	r5, r3
 8003310:	fa28 f202 	lsr.w	r2, r8, r2
 8003314:	4315      	orrs	r5, r2
 8003316:	fa08 f401 	lsl.w	r4, r8, r1
 800331a:	e9c7 4526 	strd	r4, r5, [r7, #152]	; 0x98
    (*pcM) = (uint16_t)((tgt/f_dig)-65536);
 800331e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003322:	2200      	movs	r2, #0
 8003324:	633b      	str	r3, [r7, #48]	; 0x30
 8003326:	637a      	str	r2, [r7, #52]	; 0x34
 8003328:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800332c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003330:	f7fd fc4a 	bl	8000bc8 <__aeabi_uldivmod>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	b293      	uxth	r3, r2
 800333a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800333e:	8013      	strh	r3, [r2, #0]
    tgt1=(uint64_t)f_dig*((*pcM)+65536);
 8003340:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003344:	2200      	movs	r2, #0
 8003346:	62bb      	str	r3, [r7, #40]	; 0x28
 8003348:	62fa      	str	r2, [r7, #44]	; 0x2c
 800334a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800334e:	881b      	ldrh	r3, [r3, #0]
 8003350:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003354:	17da      	asrs	r2, r3, #31
 8003356:	623b      	str	r3, [r7, #32]
 8003358:	627a      	str	r2, [r7, #36]	; 0x24
 800335a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800335e:	462b      	mov	r3, r5
 8003360:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003364:	4642      	mov	r2, r8
 8003366:	fb02 f203 	mul.w	r2, r2, r3
 800336a:	464b      	mov	r3, r9
 800336c:	4621      	mov	r1, r4
 800336e:	fb01 f303 	mul.w	r3, r1, r3
 8003372:	4413      	add	r3, r2
 8003374:	4622      	mov	r2, r4
 8003376:	4641      	mov	r1, r8
 8003378:	fba2 1201 	umull	r1, r2, r2, r1
 800337c:	677a      	str	r2, [r7, #116]	; 0x74
 800337e:	460a      	mov	r2, r1
 8003380:	673a      	str	r2, [r7, #112]	; 0x70
 8003382:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003384:	4413      	add	r3, r2
 8003386:	677b      	str	r3, [r7, #116]	; 0x74
 8003388:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800338c:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 8003390:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
    tgt2=(uint64_t)f_dig*((*pcM)+1+65536);
 8003394:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003398:	2200      	movs	r2, #0
 800339a:	61bb      	str	r3, [r7, #24]
 800339c:	61fa      	str	r2, [r7, #28]
 800339e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80033a8:	17da      	asrs	r2, r3, #31
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	617a      	str	r2, [r7, #20]
 80033ae:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80033b2:	462b      	mov	r3, r5
 80033b4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80033b8:	4642      	mov	r2, r8
 80033ba:	fb02 f203 	mul.w	r2, r2, r3
 80033be:	464b      	mov	r3, r9
 80033c0:	4621      	mov	r1, r4
 80033c2:	fb01 f303 	mul.w	r3, r1, r3
 80033c6:	4413      	add	r3, r2
 80033c8:	4622      	mov	r2, r4
 80033ca:	4641      	mov	r1, r8
 80033cc:	fba2 1201 	umull	r1, r2, r2, r1
 80033d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033d2:	460a      	mov	r2, r1
 80033d4:	66ba      	str	r2, [r7, #104]	; 0x68
 80033d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033d8:	4413      	add	r3, r2
 80033da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033dc:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80033e0:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80033e4:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
  }


  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 80033e8:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80033ec:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80033f0:	1a84      	subs	r4, r0, r2
 80033f2:	60bc      	str	r4, [r7, #8]
 80033f4:	eb61 0303 	sbc.w	r3, r1, r3
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80033fe:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8003402:	1a84      	subs	r4, r0, r2
 8003404:	603c      	str	r4, [r7, #0]
 8003406:	eb61 0303 	sbc.w	r3, r1, r3
 800340a:	607b      	str	r3, [r7, #4]
 800340c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003410:	4623      	mov	r3, r4
 8003412:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003416:	4602      	mov	r2, r0
 8003418:	4293      	cmp	r3, r2
 800341a:	462b      	mov	r3, r5
 800341c:	460a      	mov	r2, r1
 800341e:	4193      	sbcs	r3, r2
 8003420:	d205      	bcs.n	800342e <SearchDatarateME+0x296>
 8003422:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	3301      	adds	r3, #1
 800342a:	b29b      	uxth	r3, r3
 800342c:	e002      	b.n	8003434 <SearchDatarateME+0x29c>
 800342e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003432:	881b      	ldrh	r3, [r3, #0]
 8003434:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003438:	8013      	strh	r3, [r2, #0]

}
 800343a:	bf00      	nop
 800343c:	37b8      	adds	r7, #184	; 0xb8
 800343e:	46bd      	mov	sp, r7
 8003440:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003444:	02faf080 	.word	0x02faf080
 8003448:	01c9c380 	.word	0x01c9c380

0800344c <ComputeFreqDeviation>:

uint32_t ComputeFreqDeviation(uint8_t cM, uint8_t cE, uint8_t bs, uint8_t refdiv)
{
 800344c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003450:	b08c      	sub	sp, #48	; 0x30
 8003452:	af00      	add	r7, sp, #0
 8003454:	461e      	mov	r6, r3
 8003456:	4603      	mov	r3, r0
 8003458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800345c:	460b      	mov	r3, r1
 800345e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003462:	4613      	mov	r3, r2
 8003464:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003468:	4633      	mov	r3, r6
 800346a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint32_t f_xo=XTAL_FREQ;
 800346e:	4b35      	ldr	r3, [pc, #212]	; (8003544 <ComputeFreqDeviation+0xf8>)
 8003470:	62fb      	str	r3, [r7, #44]	; 0x2c

  if(cE==0) {
 8003472:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003476:	2b00      	cmp	r3, #0
 8003478:	d127      	bne.n	80034ca <ComputeFreqDeviation+0x7e>
    return (uint32_t)(((uint64_t)f_xo*cM)>>22);
 800347a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347c:	2200      	movs	r2, #0
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	617a      	str	r2, [r7, #20]
 8003482:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003486:	2200      	movs	r2, #0
 8003488:	60bb      	str	r3, [r7, #8]
 800348a:	60fa      	str	r2, [r7, #12]
 800348c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003490:	462b      	mov	r3, r5
 8003492:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8003496:	4642      	mov	r2, r8
 8003498:	fb02 f203 	mul.w	r2, r2, r3
 800349c:	464b      	mov	r3, r9
 800349e:	4621      	mov	r1, r4
 80034a0:	fb01 f303 	mul.w	r3, r1, r3
 80034a4:	4413      	add	r3, r2
 80034a6:	4622      	mov	r2, r4
 80034a8:	4641      	mov	r1, r8
 80034aa:	fba2 ab01 	umull	sl, fp, r2, r1
 80034ae:	445b      	add	r3, fp
 80034b0:	469b      	mov	fp, r3
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	ea4f 529a 	mov.w	r2, sl, lsr #22
 80034be:	ea42 228b 	orr.w	r2, r2, fp, lsl #10
 80034c2:	ea4f 539b 	mov.w	r3, fp, lsr #22
 80034c6:	4613      	mov	r3, r2
 80034c8:	e036      	b.n	8003538 <ComputeFreqDeviation+0xec>
  }

  return (uint32_t)(((uint64_t)f_xo*(256+cM))>>(23-cE));
 80034ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034cc:	2200      	movs	r2, #0
 80034ce:	603b      	str	r3, [r7, #0]
 80034d0:	607a      	str	r2, [r7, #4]
 80034d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034d6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80034da:	17da      	asrs	r2, r3, #31
 80034dc:	61bb      	str	r3, [r7, #24]
 80034de:	61fa      	str	r2, [r7, #28]
 80034e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034e4:	460b      	mov	r3, r1
 80034e6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80034ea:	4652      	mov	r2, sl
 80034ec:	fb02 f203 	mul.w	r2, r2, r3
 80034f0:	e9c7 ab06 	strd	sl, fp, [r7, #24]
 80034f4:	465b      	mov	r3, fp
 80034f6:	4682      	mov	sl, r0
 80034f8:	468b      	mov	fp, r1
 80034fa:	4651      	mov	r1, sl
 80034fc:	fb01 f303 	mul.w	r3, r1, r3
 8003500:	4413      	add	r3, r2
 8003502:	4652      	mov	r2, sl
 8003504:	69b9      	ldr	r1, [r7, #24]
 8003506:	fba2 4501 	umull	r4, r5, r2, r1
 800350a:	442b      	add	r3, r5
 800350c:	461d      	mov	r5, r3
 800350e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003512:	f1c3 0317 	rsb	r3, r3, #23
 8003516:	f1c3 0120 	rsb	r1, r3, #32
 800351a:	f1a3 0220 	sub.w	r2, r3, #32
 800351e:	fa24 f803 	lsr.w	r8, r4, r3
 8003522:	fa05 f101 	lsl.w	r1, r5, r1
 8003526:	ea48 0801 	orr.w	r8, r8, r1
 800352a:	fa25 f202 	lsr.w	r2, r5, r2
 800352e:	ea48 0802 	orr.w	r8, r8, r2
 8003532:	fa25 f903 	lsr.w	r9, r5, r3
 8003536:	4643      	mov	r3, r8
}
 8003538:	4618      	mov	r0, r3
 800353a:	3730      	adds	r7, #48	; 0x30
 800353c:	46bd      	mov	sp, r7
 800353e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003542:	4770      	bx	lr
 8003544:	02faf080 	.word	0x02faf080

08003548 <SearchFreqDevME>:

void SearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8003548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800354c:	b0a2      	sub	sp, #136	; 0x88
 800354e:	af00      	add	r7, sp, #0
 8003550:	65f8      	str	r0, [r7, #92]	; 0x5c
 8003552:	65b9      	str	r1, [r7, #88]	; 0x58
 8003554:	657a      	str	r2, [r7, #84]	; 0x54
  uint8_t uFDevE, bs = 4, refdiv = 1;
 8003556:	2304      	movs	r3, #4
 8003558:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800355c:	2301      	movs	r3, #1
 800355e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  uint32_t lFDevTmp;
  uint64_t tgt1,tgt2,tgt;

  /* Search the exponent of the frequency deviation value */
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 8003562:	2300      	movs	r3, #0
 8003564:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8003568:	e012      	b.n	8003590 <SearchFreqDevME+0x48>
    lFDevTmp = ComputeFreqDeviation(255, uFDevE, bs, refdiv);
 800356a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800356e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8003572:	f897 1087 	ldrb.w	r1, [r7, #135]	; 0x87
 8003576:	20ff      	movs	r0, #255	; 0xff
 8003578:	f7ff ff68 	bl	800344c <ComputeFreqDeviation>
 800357c:	6638      	str	r0, [r7, #96]	; 0x60
    if(lFDev<lFDevTmp)
 800357e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003580:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003582:	429a      	cmp	r2, r3
 8003584:	d309      	bcc.n	800359a <SearchFreqDevME+0x52>
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 8003586:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800358a:	3301      	adds	r3, #1
 800358c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8003590:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003594:	2b0c      	cmp	r3, #12
 8003596:	d1e8      	bne.n	800356a <SearchFreqDevME+0x22>
 8003598:	e000      	b.n	800359c <SearchFreqDevME+0x54>
      break;
 800359a:	bf00      	nop
  }
  (*pcE) = (uint8_t)uFDevE;
 800359c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800359e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80035a2:	7013      	strb	r3, [r2, #0]

  if(uFDevE==0)
 80035a4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d155      	bne.n	8003658 <SearchFreqDevME+0x110>
  {
    tgt=((uint64_t)lFDev)<<22;
 80035ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035ae:	2200      	movs	r2, #0
 80035b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80035b2:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	f04f 0300 	mov.w	r3, #0
 80035bc:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80035c0:	4629      	mov	r1, r5
 80035c2:	058b      	lsls	r3, r1, #22
 80035c4:	4621      	mov	r1, r4
 80035c6:	ea43 2391 	orr.w	r3, r3, r1, lsr #10
 80035ca:	4621      	mov	r1, r4
 80035cc:	058a      	lsls	r2, r1, #22
 80035ce:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    (*pcM)=(uint32_t)(tgt/XTAL_FREQ);
 80035d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80035d6:	a36e      	add	r3, pc, #440	; (adr r3, 8003790 <SearchFreqDevME+0x248>)
 80035d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035dc:	f7fd faf4 	bl	8000bc8 <__aeabi_uldivmod>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	b2d3      	uxtb	r3, r2
 80035e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035e8:	7013      	strb	r3, [r2, #0]
    tgt1=(uint64_t)XTAL_FREQ*(*pcM);
 80035ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2200      	movs	r2, #0
 80035f2:	633b      	str	r3, [r7, #48]	; 0x30
 80035f4:	637a      	str	r2, [r7, #52]	; 0x34
 80035f6:	4b68      	ldr	r3, [pc, #416]	; (8003798 <SearchFreqDevME+0x250>)
 80035f8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035fc:	462a      	mov	r2, r5
 80035fe:	fb03 f202 	mul.w	r2, r3, r2
 8003602:	2300      	movs	r3, #0
 8003604:	4621      	mov	r1, r4
 8003606:	fb01 f303 	mul.w	r3, r1, r3
 800360a:	4413      	add	r3, r2
 800360c:	4a62      	ldr	r2, [pc, #392]	; (8003798 <SearchFreqDevME+0x250>)
 800360e:	4621      	mov	r1, r4
 8003610:	fba1 ab02 	umull	sl, fp, r1, r2
 8003614:	445b      	add	r3, fp
 8003616:	469b      	mov	fp, r3
 8003618:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	; 0x78
 800361c:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	; 0x78
    tgt2=(uint64_t)XTAL_FREQ*((*pcM)+1);
 8003620:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	3301      	adds	r3, #1
 8003626:	17da      	asrs	r2, r3, #31
 8003628:	62bb      	str	r3, [r7, #40]	; 0x28
 800362a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800362c:	4b5a      	ldr	r3, [pc, #360]	; (8003798 <SearchFreqDevME+0x250>)
 800362e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8003632:	462a      	mov	r2, r5
 8003634:	fb03 f202 	mul.w	r2, r3, r2
 8003638:	2300      	movs	r3, #0
 800363a:	4621      	mov	r1, r4
 800363c:	fb01 f303 	mul.w	r3, r1, r3
 8003640:	4413      	add	r3, r2
 8003642:	4a55      	ldr	r2, [pc, #340]	; (8003798 <SearchFreqDevME+0x250>)
 8003644:	4621      	mov	r1, r4
 8003646:	fba1 8902 	umull	r8, r9, r1, r2
 800364a:	444b      	add	r3, r9
 800364c:	4699      	mov	r9, r3
 800364e:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
 8003652:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
 8003656:	e06d      	b.n	8003734 <SearchFreqDevME+0x1ec>
  }
  else
  {
    tgt=((uint64_t)lFDev)<<(23-uFDevE);
 8003658:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800365a:	2200      	movs	r2, #0
 800365c:	623b      	str	r3, [r7, #32]
 800365e:	627a      	str	r2, [r7, #36]	; 0x24
 8003660:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003664:	f1c3 0117 	rsb	r1, r3, #23
 8003668:	f1a1 0320 	sub.w	r3, r1, #32
 800366c:	f1c1 0220 	rsb	r2, r1, #32
 8003670:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003674:	4648      	mov	r0, r9
 8003676:	fa00 f501 	lsl.w	r5, r0, r1
 800367a:	4640      	mov	r0, r8
 800367c:	fa00 f303 	lsl.w	r3, r0, r3
 8003680:	431d      	orrs	r5, r3
 8003682:	4643      	mov	r3, r8
 8003684:	fa23 f202 	lsr.w	r2, r3, r2
 8003688:	4315      	orrs	r5, r2
 800368a:	4643      	mov	r3, r8
 800368c:	408b      	lsls	r3, r1
 800368e:	461c      	mov	r4, r3
 8003690:	e9c7 451a 	strd	r4, r5, [r7, #104]	; 0x68
    (*pcM)=(uint32_t)(tgt/XTAL_FREQ)-256;
 8003694:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003698:	a33d      	add	r3, pc, #244	; (adr r3, 8003790 <SearchFreqDevME+0x248>)
 800369a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369e:	f7fd fa93 	bl	8000bc8 <__aeabi_uldivmod>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	b2d3      	uxtb	r3, r2
 80036a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036aa:	7013      	strb	r3, [r2, #0]
    tgt1=(uint64_t)XTAL_FREQ*((*pcM)+256);
 80036ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80036b4:	17da      	asrs	r2, r3, #31
 80036b6:	61bb      	str	r3, [r7, #24]
 80036b8:	61fa      	str	r2, [r7, #28]
 80036ba:	4b37      	ldr	r3, [pc, #220]	; (8003798 <SearchFreqDevME+0x250>)
 80036bc:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80036c0:	462a      	mov	r2, r5
 80036c2:	fb03 f202 	mul.w	r2, r3, r2
 80036c6:	2300      	movs	r3, #0
 80036c8:	4621      	mov	r1, r4
 80036ca:	fb01 f303 	mul.w	r3, r1, r3
 80036ce:	4413      	add	r3, r2
 80036d0:	4a31      	ldr	r2, [pc, #196]	; (8003798 <SearchFreqDevME+0x250>)
 80036d2:	4621      	mov	r1, r4
 80036d4:	fba1 1202 	umull	r1, r2, r1, r2
 80036d8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80036da:	460a      	mov	r2, r1
 80036dc:	64ba      	str	r2, [r7, #72]	; 0x48
 80036de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036e0:	4413      	add	r3, r2
 80036e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036e4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80036e8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 80036ec:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    tgt2=(uint64_t)XTAL_FREQ*((*pcM)+1+256);
 80036f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	f203 1301 	addw	r3, r3, #257	; 0x101
 80036f8:	17da      	asrs	r2, r3, #31
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	617a      	str	r2, [r7, #20]
 80036fe:	4b26      	ldr	r3, [pc, #152]	; (8003798 <SearchFreqDevME+0x250>)
 8003700:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003704:	462a      	mov	r2, r5
 8003706:	fb03 f202 	mul.w	r2, r3, r2
 800370a:	2300      	movs	r3, #0
 800370c:	4621      	mov	r1, r4
 800370e:	fb01 f303 	mul.w	r3, r1, r3
 8003712:	4413      	add	r3, r2
 8003714:	4a20      	ldr	r2, [pc, #128]	; (8003798 <SearchFreqDevME+0x250>)
 8003716:	4621      	mov	r1, r4
 8003718:	fba1 1202 	umull	r1, r2, r1, r2
 800371c:	647a      	str	r2, [r7, #68]	; 0x44
 800371e:	460a      	mov	r2, r1
 8003720:	643a      	str	r2, [r7, #64]	; 0x40
 8003722:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003724:	4413      	add	r3, r2
 8003726:	647b      	str	r3, [r7, #68]	; 0x44
 8003728:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800372c:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 8003730:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
  }

  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 8003734:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003738:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800373c:	1a84      	subs	r4, r0, r2
 800373e:	60bc      	str	r4, [r7, #8]
 8003740:	eb61 0303 	sbc.w	r3, r1, r3
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800374a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800374e:	1a84      	subs	r4, r0, r2
 8003750:	603c      	str	r4, [r7, #0]
 8003752:	eb61 0303 	sbc.w	r3, r1, r3
 8003756:	607b      	str	r3, [r7, #4]
 8003758:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800375c:	4623      	mov	r3, r4
 800375e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003762:	4602      	mov	r2, r0
 8003764:	4293      	cmp	r3, r2
 8003766:	462b      	mov	r3, r5
 8003768:	460a      	mov	r2, r1
 800376a:	4193      	sbcs	r3, r2
 800376c:	d204      	bcs.n	8003778 <SearchFreqDevME+0x230>
 800376e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	3301      	adds	r3, #1
 8003774:	b2db      	uxtb	r3, r3
 8003776:	e001      	b.n	800377c <SearchFreqDevME+0x234>
 8003778:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800377e:	7013      	strb	r3, [r2, #0]
}
 8003780:	bf00      	nop
 8003782:	3788      	adds	r7, #136	; 0x88
 8003784:	46bd      	mov	sp, r7
 8003786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800378a:	bf00      	nop
 800378c:	f3af 8000 	nop.w
 8003790:	02faf080 	.word	0x02faf080
 8003794:	00000000 	.word	0x00000000
 8003798:	02faf080 	.word	0x02faf080

0800379c <S2LP_SetModulation>:
*         [100 500000].
*         Frequency deviation expressed in Hz.
* @retval None.
*/
void S2LP_SetModulation(uint8_t mod_type, uint32_t datarate, uint32_t fdev)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	4603      	mov	r3, r0
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
 80037a8:	73fb      	strb	r3, [r7, #15]
  uint8_t dr_e;
  uint16_t dr_m;
  uint8_t uFDevM, uFDevE;

  /* Calculates the datarate mantissa and exponent */
  SearchDatarateME(datarate, &dr_m, &dr_e);
 80037aa:	f107 0217 	add.w	r2, r7, #23
 80037ae:	f107 0314 	add.w	r3, r7, #20
 80037b2:	4619      	mov	r1, r3
 80037b4:	68b8      	ldr	r0, [r7, #8]
 80037b6:	f7ff fcef 	bl	8003198 <SearchDatarateME>
  /* Calculates the frequency deviation mantissa and exponent */
  SearchFreqDevME(fdev, &uFDevM, &uFDevE);
 80037ba:	f107 0212 	add.w	r2, r7, #18
 80037be:	f107 0313 	add.w	r3, r7, #19
 80037c2:	4619      	mov	r1, r3
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7ff febf 	bl	8003548 <SearchFreqDevME>

  S2LP_WriteReg(MOD4_ADDR, (uint8_t)(dr_m >> 8), NULL);
 80037ca:	8abb      	ldrh	r3, [r7, #20]
 80037cc:	0a1b      	lsrs	r3, r3, #8
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2200      	movs	r2, #0
 80037d4:	4619      	mov	r1, r3
 80037d6:	200e      	movs	r0, #14
 80037d8:	f7ff f8c4 	bl	8002964 <S2LP_WriteReg>
  S2LP_WriteReg(MOD3_ADDR, (uint8_t)dr_m, NULL);
 80037dc:	8abb      	ldrh	r3, [r7, #20]
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2200      	movs	r2, #0
 80037e2:	4619      	mov	r1, r3
 80037e4:	200f      	movs	r0, #15
 80037e6:	f7ff f8bd 	bl	8002964 <S2LP_WriteReg>
  S2LP_WriteReg(MOD2_ADDR, mod_type | dr_e, NULL);
 80037ea:	7dfa      	ldrb	r2, [r7, #23]
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2200      	movs	r2, #0
 80037f4:	4619      	mov	r1, r3
 80037f6:	2010      	movs	r0, #16
 80037f8:	f7ff f8b4 	bl	8002964 <S2LP_WriteReg>

  S2LP_WriteReg(MOD0_ADDR, uFDevM, NULL);
 80037fc:	7cfb      	ldrb	r3, [r7, #19]
 80037fe:	2200      	movs	r2, #0
 8003800:	4619      	mov	r1, r3
 8003802:	2012      	movs	r0, #18
 8003804:	f7ff f8ae 	bl	8002964 <S2LP_WriteReg>
  S2LP_WriteReg(MOD1_ADDR, uFDevE, NULL);
 8003808:	7cbb      	ldrb	r3, [r7, #18]
 800380a:	2200      	movs	r2, #0
 800380c:	4619      	mov	r1, r3
 800380e:	2011      	movs	r0, #17
 8003810:	f7ff f8a8 	bl	8002964 <S2LP_WriteReg>
}
 8003814:	bf00      	nop
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <S2LP_SetPALeveldBm>:

void S2LP_SetPALeveldBm(int32_t lPowerdBm)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint8_t paLevelValue;
  if(lPowerdBm> 14)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b0e      	cmp	r3, #14
 8003828:	dd02      	ble.n	8003830 <S2LP_SetPALeveldBm+0x14>
  {
    paLevelValue = 1;
 800382a:	2301      	movs	r3, #1
 800382c:	73fb      	strb	r3, [r7, #15]
 800382e:	e006      	b.n	800383e <S2LP_SetPALeveldBm+0x22>
  }
  else {
    paLevelValue = (uint8_t)((int32_t)29-2*lPowerdBm);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	b2db      	uxtb	r3, r3
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	b2db      	uxtb	r3, r3
 8003838:	f1c3 031d 	rsb	r3, r3, #29
 800383c:	73fb      	strb	r3, [r7, #15]
  }

  S2LP_WriteReg(PA_POWER0_ADDR, 0, NULL);
 800383e:	2200      	movs	r2, #0
 8003840:	2100      	movs	r1, #0
 8003842:	2062      	movs	r0, #98	; 0x62
 8003844:	f7ff f88e 	bl	8002964 <S2LP_WriteReg>
  S2LP_WriteReg(PA_CONFIG1_ADDR+1, 0, NULL); // disable degeneration mode
 8003848:	2200      	movs	r2, #0
 800384a:	2100      	movs	r1, #0
 800384c:	2064      	movs	r0, #100	; 0x64
 800384e:	f7ff f889 	bl	8002964 <S2LP_WriteReg>
  S2LP_WriteReg(PA_CONFIG1_ADDR, 0, NULL); // disable Tx Bessel FIR
 8003852:	2200      	movs	r2, #0
 8003854:	2100      	movs	r1, #0
 8003856:	2063      	movs	r0, #99	; 0x63
 8003858:	f7ff f884 	bl	8002964 <S2LP_WriteReg>
  S2LP_WriteReg(PA_POWER1_ADDR, paLevelValue, NULL);
 800385c:	7bfb      	ldrb	r3, [r7, #15]
 800385e:	2200      	movs	r2, #0
 8003860:	4619      	mov	r1, r3
 8003862:	2061      	movs	r0, #97	; 0x61
 8003864:	f7ff f87e 	bl	8002964 <S2LP_WriteReg>
}
 8003868:	bf00      	nop
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <S2LP_Init>:

	return HAL_OK;
}

HAL_StatusTypeDef S2LP_Init(SPI_HandleTypeDef *spi_handle)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
	gSPI = spi_handle;
 8003878:	4a48      	ldr	r2, [pc, #288]	; (800399c <S2LP_Init+0x12c>)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6013      	str	r3, [r2, #0]
	uint32_t ncycles_start = HAL_RCC_GetHCLKFreq()/9600;
 800387e:	f003 fc61 	bl	8007144 <HAL_RCC_GetHCLKFreq>
 8003882:	4603      	mov	r3, r0
 8003884:	4a46      	ldr	r2, [pc, #280]	; (80039a0 <S2LP_Init+0x130>)
 8003886:	fba2 2303 	umull	r2, r3, r2, r3
 800388a:	0a9b      	lsrs	r3, r3, #10
 800388c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800388e:	b672      	cpsid	i
}
 8003890:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_RESET); // Power up S2LP
 8003892:	2200      	movs	r2, #0
 8003894:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003898:	4842      	ldr	r0, [pc, #264]	; (80039a4 <S2LP_Init+0x134>)
 800389a:	f002 fe09 	bl	80064b0 <HAL_GPIO_WritePin>
	for(uint32_t i=0; i < ncycles_start; i++) // Wait for S2LP to start
 800389e:	2300      	movs	r3, #0
 80038a0:	617b      	str	r3, [r7, #20]
 80038a2:	e003      	b.n	80038ac <S2LP_Init+0x3c>
		asm volatile("nop");
 80038a4:	bf00      	nop
	for(uint32_t i=0; i < ncycles_start; i++) // Wait for S2LP to start
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	3301      	adds	r3, #1
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d3f7      	bcc.n	80038a4 <S2LP_Init+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
 80038b4:	b662      	cpsie	i
}
 80038b6:	bf00      	nop
	__enable_irq();

	S2LP_WriteReg(GPIO0_CONF_ADDR, 3, NULL); // Set GPIO as interrupt line
 80038b8:	2200      	movs	r2, #0
 80038ba:	2103      	movs	r1, #3
 80038bc:	2000      	movs	r0, #0
 80038be:	f7ff f851 	bl	8002964 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK0_ADDR, 0x80 | 0x20 | 0x04, NULL); // Enable "Tx Data sent" and "TX FIFO almost full" interrupts
 80038c2:	2200      	movs	r2, #0
 80038c4:	21a4      	movs	r1, #164	; 0xa4
 80038c6:	2053      	movs	r0, #83	; 0x53
 80038c8:	f7ff f84c 	bl	8002964 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK1_ADDR, 0x01, NULL); // Enable "TX FIFO almost empty" interrupt
 80038cc:	2200      	movs	r2, #0
 80038ce:	2101      	movs	r1, #1
 80038d0:	2052      	movs	r0, #82	; 0x52
 80038d2:	f7ff f847 	bl	8002964 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK2_ADDR, 0x00, NULL);
 80038d6:	2200      	movs	r2, #0
 80038d8:	2100      	movs	r1, #0
 80038da:	2051      	movs	r0, #81	; 0x51
 80038dc:	f7ff f842 	bl	8002964 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK3_ADDR, 0x00, NULL);
 80038e0:	2200      	movs	r2, #0
 80038e2:	2100      	movs	r1, #0
 80038e4:	2050      	movs	r0, #80	; 0x50
 80038e6:	f7ff f83d 	bl	8002964 <S2LP_WriteReg>
	S2LP_WriteReg(FIFO_CONFIG0_ADDR, FIFO_EMPTY_THRESH * FIFO_CHUNK_SIZE, NULL);
 80038ea:	2200      	movs	r2, #0
 80038ec:	2120      	movs	r1, #32
 80038ee:	203f      	movs	r0, #63	; 0x3f
 80038f0:	f7ff f838 	bl	8002964 <S2LP_WriteReg>

	// Change sync word bytes
	S2LP_WriteReg(SYNC3_ADDR, 0xB7, NULL);
 80038f4:	2200      	movs	r2, #0
 80038f6:	21b7      	movs	r1, #183	; 0xb7
 80038f8:	2033      	movs	r0, #51	; 0x33
 80038fa:	f7ff f833 	bl	8002964 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC2_ADDR, 0x54, NULL);
 80038fe:	2200      	movs	r2, #0
 8003900:	2154      	movs	r1, #84	; 0x54
 8003902:	2034      	movs	r0, #52	; 0x34
 8003904:	f7ff f82e 	bl	8002964 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC1_ADDR, 0x2A, NULL);
 8003908:	2200      	movs	r2, #0
 800390a:	212a      	movs	r1, #42	; 0x2a
 800390c:	2035      	movs	r0, #53	; 0x35
 800390e:	f7ff f829 	bl	8002964 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC0_ADDR, 0x3E, NULL);
 8003912:	2200      	movs	r2, #0
 8003914:	213e      	movs	r1, #62	; 0x3e
 8003916:	2036      	movs	r0, #54	; 0x36
 8003918:	f7ff f824 	bl	8002964 <S2LP_WriteReg>

	// PLL and PA configuration
	S2LP_PLLConf(BASE_FREQ);
 800391c:	4822      	ldr	r0, [pc, #136]	; (80039a8 <S2LP_Init+0x138>)
 800391e:	f7ff fa8f 	bl	8002e40 <S2LP_PLLConf>
	S2LP_SetPALeveldBm(PA_LEVEL);
 8003922:	2005      	movs	r0, #5
 8003924:	f7ff ff7a 	bl	800381c <S2LP_SetPALeveldBm>

	// Modulation and packet configuration
	S2LP_SetModulation(MOD_2FSK, DATARATE, FREQDEV);
 8003928:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800392c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8003930:	2000      	movs	r0, #0
 8003932:	f7ff ff33 	bl	800379c <S2LP_SetModulation>
	S2LP_WriteReg(PCKTCTRL1_ADDR, 0x20, NULL); // No whitening, CRC with poly 0x07
 8003936:	2200      	movs	r2, #0
 8003938:	2120      	movs	r1, #32
 800393a:	2030      	movs	r0, #48	; 0x30
 800393c:	f7ff f812 	bl	8002964 <S2LP_WriteReg>
	S2LP_WriteReg(PCKTCTRL3_ADDR, 0x00, NULL); // Enable basic packet structure
 8003940:	2200      	movs	r2, #0
 8003942:	2100      	movs	r1, #0
 8003944:	202e      	movs	r0, #46	; 0x2e
 8003946:	f7ff f80d 	bl	8002964 <S2LP_WriteReg>

	S2LPStatus radio_status;
	uint8_t rco_conf;
	HAL_StatusTypeDef err = S2LP_ReadReg(XO_RCO_CONF1_ADDR, &rco_conf, &radio_status); // fetch radio state
 800394a:	f107 020c 	add.w	r2, r7, #12
 800394e:	f107 030b 	add.w	r3, r7, #11
 8003952:	4619      	mov	r1, r3
 8003954:	206c      	movs	r0, #108	; 0x6c
 8003956:	f7fe ffc7 	bl	80028e8 <S2LP_ReadReg>
 800395a:	4603      	mov	r3, r0
 800395c:	73fb      	strb	r3, [r7, #15]
	if (err) {
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <S2LP_Init+0xf8>
		return err;
 8003964:	7bfb      	ldrb	r3, [r7, #15]
 8003966:	e015      	b.n	8003994 <S2LP_Init+0x124>
	} else if (rco_conf != 0x45) {
 8003968:	7afb      	ldrb	r3, [r7, #11]
 800396a:	2b45      	cmp	r3, #69	; 0x45
 800396c:	d006      	beq.n	800397c <S2LP_Init+0x10c>
		DEBUG_PRINT("[S2LP] Error: XO_RCO_CONF1 register is invalid (0x%X instead of 0x45), faulty SPI bus?\r\n", rco_conf);
 800396e:	7afb      	ldrb	r3, [r7, #11]
 8003970:	4619      	mov	r1, r3
 8003972:	480e      	ldr	r0, [pc, #56]	; (80039ac <S2LP_Init+0x13c>)
 8003974:	f007 ffb8 	bl	800b8e8 <iprintf>
		return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e00b      	b.n	8003994 <S2LP_Init+0x124>
	}

	if (radio_status.MC_STATE != MC_STATE_READY) {
 800397c:	7b7b      	ldrb	r3, [r7, #13]
 800397e:	f023 0301 	bic.w	r3, r3, #1
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	d004      	beq.n	8003992 <S2LP_Init+0x122>
		DEBUG_PRINT("[S2LP] Error: radio is not ready after initialization\r\n");
 8003988:	4809      	ldr	r0, [pc, #36]	; (80039b0 <S2LP_Init+0x140>)
 800398a:	f008 f813 	bl	800b9b4 <puts>
		return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e000      	b.n	8003994 <S2LP_Init+0x124>
	}

	return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	20003d68 	.word	0x20003d68
 80039a0:	1b4e81b5 	.word	0x1b4e81b5
 80039a4:	48001400 	.word	0x48001400
 80039a8:	33db0640 	.word	0x33db0640
 80039ac:	0800de2c 	.word	0x0800de2c
 80039b0:	0800de88 	.word	0x0800de88

080039b4 <S2LP_IRQ_Handler>:

void S2LP_IRQ_Handler(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
	uint8_t irq_status1, irq_status0;
	S2LP_ReadReg(IRQ_STATUS1_ADDR, &irq_status1, NULL);
 80039ba:	1dfb      	adds	r3, r7, #7
 80039bc:	2200      	movs	r2, #0
 80039be:	4619      	mov	r1, r3
 80039c0:	20fc      	movs	r0, #252	; 0xfc
 80039c2:	f7fe ff91 	bl	80028e8 <S2LP_ReadReg>
	S2LP_ReadReg(IRQ_STATUS0_ADDR, &irq_status0, NULL);
 80039c6:	1dbb      	adds	r3, r7, #6
 80039c8:	2200      	movs	r2, #0
 80039ca:	4619      	mov	r1, r3
 80039cc:	20fd      	movs	r0, #253	; 0xfd
 80039ce:	f7fe ff8b 	bl	80028e8 <S2LP_ReadReg>

	if (irq_status1 & 0x01) // TX FIFO almost empty
 80039d2:	79fb      	ldrb	r3, [r7, #7]
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <S2LP_IRQ_Handler+0x2e>
		fifo_almost_empty = 1;
 80039dc:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <S2LP_IRQ_Handler+0x58>)
 80039de:	2201      	movs	r2, #1
 80039e0:	701a      	strb	r2, [r3, #0]

	if (irq_status0 & 0x20) // TX/RX FIFO underflow or overflow
 80039e2:	79bb      	ldrb	r3, [r7, #6]
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <S2LP_IRQ_Handler+0x3e>
		underflow = 1;
 80039ec:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <S2LP_IRQ_Handler+0x5c>)
 80039ee:	2201      	movs	r2, #1
 80039f0:	701a      	strb	r2, [r3, #0]

	if (irq_status0 & 0x04) // Packet transmitted
 80039f2:	79bb      	ldrb	r3, [r7, #6]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <S2LP_IRQ_Handler+0x4e>
		packet_sent = 1;
 80039fc:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <S2LP_IRQ_Handler+0x60>)
 80039fe:	2201      	movs	r2, #1
 8003a00:	701a      	strb	r2, [r3, #0]
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20003d6d 	.word	0x20003d6d
 8003a10:	20003d6e 	.word	0x20003d6e
 8003a14:	20003d6c 	.word	0x20003d6c

08003a18 <Spectrogram_Format>:
q15_t buf_fft[2*SAMPLES_PER_MELVEC  ]; // Double size (real|imag) buffer needed for arm_rfft_q15
q15_t buf_tmp[  SAMPLES_PER_MELVEC/2]; // Intermediate buffer for arm_mat_mult_fast_q15

// Convert 12-bit DC ADC samples to Q1.15 fixed point signal and remove DC component
void Spectrogram_Format(q15_t *buf)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
	// That way, the value of buf[i] is in [0 , 2**15 - 1]

	// /!\ When multiplying/dividing by a power 2, always prefer shifting left/right instead, ARM instructions to do so are more efficient.
	// Here we should shift left by 3.

	arm_shift_q15(buf, 3, buf, SAMPLES_PER_MELVEC);
 8003a20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	2103      	movs	r1, #3
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f006 fcb5 	bl	800a398 <arm_shift_q15>
	//            Number of cycles: <TODO>

	// Since we use a signed representation, we should now center the value around zero, we can do this by substracting 2**14.
	// Now the value of buf[i] is in [-2**14 , 2**14 - 1]

	for(uint16_t i=0; i < SAMPLES_PER_MELVEC; i++) { // Remove DC component
 8003a2e:	2300      	movs	r3, #0
 8003a30:	81fb      	strh	r3, [r7, #14]
 8003a32:	e012      	b.n	8003a5a <Spectrogram_Format+0x42>
		buf[i] -= (1 << 14);
 8003a34:	89fb      	ldrh	r3, [r7, #14]
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8003a46:	b299      	uxth	r1, r3
 8003a48:	89fb      	ldrh	r3, [r7, #14]
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	4413      	add	r3, r2
 8003a50:	b20a      	sxth	r2, r1
 8003a52:	801a      	strh	r2, [r3, #0]
	for(uint16_t i=0; i < SAMPLES_PER_MELVEC; i++) { // Remove DC component
 8003a54:	89fb      	ldrh	r3, [r7, #14]
 8003a56:	3301      	adds	r3, #1
 8003a58:	81fb      	strh	r3, [r7, #14]
 8003a5a:	89fb      	ldrh	r3, [r7, #14]
 8003a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a60:	d3e8      	bcc.n	8003a34 <Spectrogram_Format+0x1c>
	}
}
 8003a62:	bf00      	nop
 8003a64:	bf00      	nop
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <Spectrogram_Compute>:

// Compute spectrogram of samples and transform into MEL vectors.
void Spectrogram_Compute(q15_t *samples, q15_t *melvec)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b092      	sub	sp, #72	; 0x48
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
	// STEP 1  : Windowing of input samples
	//           --> Pointwise product
	//           Complexity: O(N)
	//           Number of cycles: <TODO>
	arm_mult_q15(samples, hamming_window, buf, SAMPLES_PER_MELVEC);
 8003a76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a7a:	4a3c      	ldr	r2, [pc, #240]	; (8003b6c <Spectrogram_Compute+0x100>)
 8003a7c:	493c      	ldr	r1, [pc, #240]	; (8003b70 <Spectrogram_Compute+0x104>)
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f006 fd1c 	bl	800a4bc <arm_mult_q15>
	//           Number of cycles: <TODO>

	// Since the FFT is a recursive algorithm, the values are rescaled in the function to ensure that overflow cannot happen.
	arm_rfft_instance_q15 rfft_inst;

	arm_rfft_init_q15(&rfft_inst, SAMPLES_PER_MELVEC, 0, 1);
 8003a84:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003a88:	2301      	movs	r3, #1
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a90:	f006 f956 	bl	8009d40 <arm_rfft_init_q15>

	arm_rfft_q15(&rfft_inst, buf, buf_fft);
 8003a94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a98:	4a36      	ldr	r2, [pc, #216]	; (8003b74 <Spectrogram_Compute+0x108>)
 8003a9a:	4934      	ldr	r1, [pc, #208]	; (8003b6c <Spectrogram_Compute+0x100>)
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f006 f8d3 	bl	8009c48 <arm_rfft_q15>
	// STEP 3.1: Find the extremum value (maximum of absolute values)
	//           Complexity: O(N)
	//           Number of cycles: <TODO>

	q15_t vmax;
	uint32_t pIndex=0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	623b      	str	r3, [r7, #32]

	arm_absmax_q15(buf_fft, SAMPLES_PER_MELVEC, &vmax, &pIndex);
 8003aa6:	f107 0320 	add.w	r3, r7, #32
 8003aaa:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8003aae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ab2:	4830      	ldr	r0, [pc, #192]	; (8003b74 <Spectrogram_Compute+0x108>)
 8003ab4:	f7fe f926 	bl	8001d04 <arm_absmax_q15>

	// STEP 3.2: Normalize the vector - Dynamic range increase
	//           Complexity: O(N)
	//           Number of cycles: <TODO>

	for (int i=0; i < SAMPLES_PER_MELVEC; i++) // We don't use the second half of the symmetric spectrum
 8003ab8:	2300      	movs	r3, #0
 8003aba:	647b      	str	r3, [r7, #68]	; 0x44
 8003abc:	e010      	b.n	8003ae0 <Spectrogram_Compute+0x74>
	{
		buf[i] = (q15_t) (((q31_t) buf_fft[i] << 15) /((q31_t)vmax));
 8003abe:	4a2d      	ldr	r2, [pc, #180]	; (8003b74 <Spectrogram_Compute+0x108>)
 8003ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ac2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003ac6:	03db      	lsls	r3, r3, #15
 8003ac8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8003acc:	fb93 f3f2 	sdiv	r3, r3, r2
 8003ad0:	b219      	sxth	r1, r3
 8003ad2:	4a26      	ldr	r2, [pc, #152]	; (8003b6c <Spectrogram_Compute+0x100>)
 8003ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ad6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0; i < SAMPLES_PER_MELVEC; i++) // We don't use the second half of the symmetric spectrum
 8003ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003adc:	3301      	adds	r3, #1
 8003ade:	647b      	str	r3, [r7, #68]	; 0x44
 8003ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ae2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ae6:	dbea      	blt.n	8003abe <Spectrogram_Compute+0x52>
	// STEP 3.3: Compute the complex magnitude
	//           --> The output buffer is now two times smaller because (real|imag) --> (mag)
	//           Complexity: O(N)
	//           Number of cycles: <TODO>

	arm_cmplx_mag_q15(buf, buf, SAMPLES_PER_MELVEC/2);
 8003ae8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003aec:	491f      	ldr	r1, [pc, #124]	; (8003b6c <Spectrogram_Compute+0x100>)
 8003aee:	481f      	ldr	r0, [pc, #124]	; (8003b6c <Spectrogram_Compute+0x100>)
 8003af0:	f006 fba8 	bl	800a244 <arm_cmplx_mag_q15>

	// STEP 3.4: Denormalize the vector
	//           Complexity: O(N)
	//           Number of cycles: <TODO>

	for (int i=0; i < SAMPLES_PER_MELVEC/2; i++)
 8003af4:	2300      	movs	r3, #0
 8003af6:	643b      	str	r3, [r7, #64]	; 0x40
 8003af8:	e010      	b.n	8003b1c <Spectrogram_Compute+0xb0>
	{
		buf[i] = (q15_t) ((((q31_t) buf[i]) * ((q31_t) vmax) ) >> 15 );
 8003afa:	4a1c      	ldr	r2, [pc, #112]	; (8003b6c <Spectrogram_Compute+0x100>)
 8003afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003afe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003b02:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8003b06:	fb02 f303 	mul.w	r3, r2, r3
 8003b0a:	13db      	asrs	r3, r3, #15
 8003b0c:	b219      	sxth	r1, r3
 8003b0e:	4a17      	ldr	r2, [pc, #92]	; (8003b6c <Spectrogram_Compute+0x100>)
 8003b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0; i < SAMPLES_PER_MELVEC/2; i++)
 8003b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b18:	3301      	adds	r3, #1
 8003b1a:	643b      	str	r3, [r7, #64]	; 0x40
 8003b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b1e:	2bff      	cmp	r3, #255	; 0xff
 8003b20:	ddeb      	ble.n	8003afa <Spectrogram_Compute+0x8e>
	// /!\ In order to avoid overflows completely the input signals should be scaled down. Scale down one of the input matrices by log2(numColsA) bits to avoid overflows,
	// as a total of numColsA additions are computed internally for each output element. Because our hz2mel_mat matrix contains lots of zeros in its rows, this is not necessary.
	
	arm_matrix_instance_q15 hz2mel_inst, fftmag_inst, melvec_inst;

	arm_mat_init_q15(&hz2mel_inst, MELVEC_LENGTH, SAMPLES_PER_MELVEC/2, hz2mel_mat);
 8003b22:	f107 0018 	add.w	r0, r7, #24
 8003b26:	4b14      	ldr	r3, [pc, #80]	; (8003b78 <Spectrogram_Compute+0x10c>)
 8003b28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b2c:	2114      	movs	r1, #20
 8003b2e:	f006 fb85 	bl	800a23c <arm_mat_init_q15>
	arm_mat_init_q15(&fftmag_inst, SAMPLES_PER_MELVEC/2, 1, buf);
 8003b32:	f107 0010 	add.w	r0, r7, #16
 8003b36:	4b0d      	ldr	r3, [pc, #52]	; (8003b6c <Spectrogram_Compute+0x100>)
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b3e:	f006 fb7d 	bl	800a23c <arm_mat_init_q15>
	arm_mat_init_q15(&melvec_inst, MELVEC_LENGTH, 1, melvec);
 8003b42:	f107 0008 	add.w	r0, r7, #8
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	2114      	movs	r1, #20
 8003b4c:	f006 fb76 	bl	800a23c <arm_mat_init_q15>

	arm_mat_mult_fast_q15(&hz2mel_inst, &fftmag_inst, &melvec_inst, buf_tmp);
 8003b50:	f107 0208 	add.w	r2, r7, #8
 8003b54:	f107 0110 	add.w	r1, r7, #16
 8003b58:	f107 0018 	add.w	r0, r7, #24
 8003b5c:	4b07      	ldr	r3, [pc, #28]	; (8003b7c <Spectrogram_Compute+0x110>)
 8003b5e:	f006 f96b 	bl	8009e38 <arm_mat_mult_fast_q15>
}
 8003b62:	bf00      	nop
 8003b64:	3748      	adds	r7, #72	; 0x48
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20003d70 	.word	0x20003d70
 8003b70:	20002b94 	.word	0x20002b94
 8003b74:	20004170 	.word	0x20004170
 8003b78:	20000394 	.word	0x20000394
 8003b7c:	20004970 	.word	0x20004970

08003b80 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003b84:	4b1b      	ldr	r3, [pc, #108]	; (8003bf4 <MX_SPI1_Init+0x74>)
 8003b86:	4a1c      	ldr	r2, [pc, #112]	; (8003bf8 <MX_SPI1_Init+0x78>)
 8003b88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b8a:	4b1a      	ldr	r3, [pc, #104]	; (8003bf4 <MX_SPI1_Init+0x74>)
 8003b8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b92:	4b18      	ldr	r3, [pc, #96]	; (8003bf4 <MX_SPI1_Init+0x74>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b98:	4b16      	ldr	r3, [pc, #88]	; (8003bf4 <MX_SPI1_Init+0x74>)
 8003b9a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b9e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ba0:	4b14      	ldr	r3, [pc, #80]	; (8003bf4 <MX_SPI1_Init+0x74>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ba6:	4b13      	ldr	r3, [pc, #76]	; (8003bf4 <MX_SPI1_Init+0x74>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003bac:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <MX_SPI1_Init+0x74>)
 8003bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bb2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003bb4:	4b0f      	ldr	r3, [pc, #60]	; (8003bf4 <MX_SPI1_Init+0x74>)
 8003bb6:	2208      	movs	r2, #8
 8003bb8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bba:	4b0e      	ldr	r3, [pc, #56]	; (8003bf4 <MX_SPI1_Init+0x74>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003bc0:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <MX_SPI1_Init+0x74>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <MX_SPI1_Init+0x74>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003bcc:	4b09      	ldr	r3, [pc, #36]	; (8003bf4 <MX_SPI1_Init+0x74>)
 8003bce:	2207      	movs	r2, #7
 8003bd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003bd2:	4b08      	ldr	r3, [pc, #32]	; (8003bf4 <MX_SPI1_Init+0x74>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003bd8:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <MX_SPI1_Init+0x74>)
 8003bda:	2208      	movs	r2, #8
 8003bdc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003bde:	4805      	ldr	r0, [pc, #20]	; (8003bf4 <MX_SPI1_Init+0x74>)
 8003be0:	f004 f812 	bl	8007c08 <HAL_SPI_Init>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003bea:	f7fe fc45 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003bee:	bf00      	nop
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20004b70 	.word	0x20004b70
 8003bf8:	40013000 	.word	0x40013000

08003bfc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08a      	sub	sp, #40	; 0x28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c04:	f107 0314 	add.w	r3, r7, #20
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	605a      	str	r2, [r3, #4]
 8003c0e:	609a      	str	r2, [r3, #8]
 8003c10:	60da      	str	r2, [r3, #12]
 8003c12:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a26      	ldr	r2, [pc, #152]	; (8003cb4 <HAL_SPI_MspInit+0xb8>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d145      	bne.n	8003caa <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c1e:	4b26      	ldr	r3, [pc, #152]	; (8003cb8 <HAL_SPI_MspInit+0xbc>)
 8003c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c22:	4a25      	ldr	r2, [pc, #148]	; (8003cb8 <HAL_SPI_MspInit+0xbc>)
 8003c24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c28:	6613      	str	r3, [r2, #96]	; 0x60
 8003c2a:	4b23      	ldr	r3, [pc, #140]	; (8003cb8 <HAL_SPI_MspInit+0xbc>)
 8003c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c32:	613b      	str	r3, [r7, #16]
 8003c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c36:	4b20      	ldr	r3, [pc, #128]	; (8003cb8 <HAL_SPI_MspInit+0xbc>)
 8003c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3a:	4a1f      	ldr	r2, [pc, #124]	; (8003cb8 <HAL_SPI_MspInit+0xbc>)
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c42:	4b1d      	ldr	r3, [pc, #116]	; (8003cb8 <HAL_SPI_MspInit+0xbc>)
 8003c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c4e:	4b1a      	ldr	r3, [pc, #104]	; (8003cb8 <HAL_SPI_MspInit+0xbc>)
 8003c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c52:	4a19      	ldr	r2, [pc, #100]	; (8003cb8 <HAL_SPI_MspInit+0xbc>)
 8003c54:	f043 0310 	orr.w	r3, r3, #16
 8003c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c5a:	4b17      	ldr	r3, [pc, #92]	; (8003cb8 <HAL_SPI_MspInit+0xbc>)
 8003c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5e:	f003 0310 	and.w	r3, r3, #16
 8003c62:	60bb      	str	r3, [r7, #8]
 8003c64:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PE13     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c66:	23c0      	movs	r3, #192	; 0xc0
 8003c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c72:	2303      	movs	r3, #3
 8003c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c76:	2305      	movs	r3, #5
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c7a:	f107 0314 	add.w	r3, r7, #20
 8003c7e:	4619      	mov	r1, r3
 8003c80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c84:	f002 fa82 	bl	800618c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003c88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c8e:	2302      	movs	r3, #2
 8003c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c96:	2303      	movs	r3, #3
 8003c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c9a:	2305      	movs	r3, #5
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c9e:	f107 0314 	add.w	r3, r7, #20
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4805      	ldr	r0, [pc, #20]	; (8003cbc <HAL_SPI_MspInit+0xc0>)
 8003ca6:	f002 fa71 	bl	800618c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003caa:	bf00      	nop
 8003cac:	3728      	adds	r7, #40	; 0x28
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40013000 	.word	0x40013000
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	48001000 	.word	0x48001000

08003cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cc6:	4b0f      	ldr	r3, [pc, #60]	; (8003d04 <HAL_MspInit+0x44>)
 8003cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cca:	4a0e      	ldr	r2, [pc, #56]	; (8003d04 <HAL_MspInit+0x44>)
 8003ccc:	f043 0301 	orr.w	r3, r3, #1
 8003cd0:	6613      	str	r3, [r2, #96]	; 0x60
 8003cd2:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <HAL_MspInit+0x44>)
 8003cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	607b      	str	r3, [r7, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cde:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <HAL_MspInit+0x44>)
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce2:	4a08      	ldr	r2, [pc, #32]	; (8003d04 <HAL_MspInit+0x44>)
 8003ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8003cea:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <HAL_MspInit+0x44>)
 8003cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	603b      	str	r3, [r7, #0]
 8003cf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	40021000 	.word	0x40021000

08003d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d0c:	e7fe      	b.n	8003d0c <NMI_Handler+0x4>

08003d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d12:	e7fe      	b.n	8003d12 <HardFault_Handler+0x4>

08003d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d18:	e7fe      	b.n	8003d18 <MemManage_Handler+0x4>

08003d1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d1e:	e7fe      	b.n	8003d1e <BusFault_Handler+0x4>

08003d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d24:	e7fe      	b.n	8003d24 <UsageFault_Handler+0x4>

08003d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d26:	b480      	push	{r7}
 8003d28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d2a:	bf00      	nop
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d38:	bf00      	nop
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d42:	b480      	push	{r7}
 8003d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d46:	bf00      	nop
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d54:	f000 fa5c 	bl	8004210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d58:	bf00      	nop
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RADIO_INT_Pin);
 8003d60:	2008      	movs	r0, #8
 8003d62:	f002 fbbd 	bl	80064e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003d66:	bf00      	nop
 8003d68:	bd80      	pop	{r7, pc}
	...

08003d6c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003d70:	4802      	ldr	r0, [pc, #8]	; (8003d7c <DMA1_Channel1_IRQHandler+0x10>)
 8003d72:	f002 f92b 	bl	8005fcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003d76:	bf00      	nop
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	200031ec 	.word	0x200031ec

08003d80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003d84:	4802      	ldr	r0, [pc, #8]	; (8003d90 <TIM3_IRQHandler+0x10>)
 8003d86:	f004 fc29 	bl	80085dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003d8a:	bf00      	nop
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	20004bd8 	.word	0x20004bd8

08003d94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003d98:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003d9c:	f002 fba0 	bl	80064e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003da0:	bf00      	nop
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003dac:	4a14      	ldr	r2, [pc, #80]	; (8003e00 <_sbrk+0x5c>)
 8003dae:	4b15      	ldr	r3, [pc, #84]	; (8003e04 <_sbrk+0x60>)
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003db8:	4b13      	ldr	r3, [pc, #76]	; (8003e08 <_sbrk+0x64>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d102      	bne.n	8003dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003dc0:	4b11      	ldr	r3, [pc, #68]	; (8003e08 <_sbrk+0x64>)
 8003dc2:	4a12      	ldr	r2, [pc, #72]	; (8003e0c <_sbrk+0x68>)
 8003dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dc6:	4b10      	ldr	r3, [pc, #64]	; (8003e08 <_sbrk+0x64>)
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4413      	add	r3, r2
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d207      	bcs.n	8003de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003dd4:	f007 ffce 	bl	800bd74 <__errno>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	220c      	movs	r2, #12
 8003ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003de2:	e009      	b.n	8003df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003de4:	4b08      	ldr	r3, [pc, #32]	; (8003e08 <_sbrk+0x64>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dea:	4b07      	ldr	r3, [pc, #28]	; (8003e08 <_sbrk+0x64>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4413      	add	r3, r2
 8003df2:	4a05      	ldr	r2, [pc, #20]	; (8003e08 <_sbrk+0x64>)
 8003df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003df6:	68fb      	ldr	r3, [r7, #12]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	20050000 	.word	0x20050000
 8003e04:	00000400 	.word	0x00000400
 8003e08:	20004bd4 	.word	0x20004bd4
 8003e0c:	20004e00 	.word	0x20004e00

08003e10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003e14:	4b15      	ldr	r3, [pc, #84]	; (8003e6c <SystemInit+0x5c>)
 8003e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1a:	4a14      	ldr	r2, [pc, #80]	; (8003e6c <SystemInit+0x5c>)
 8003e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003e24:	4b12      	ldr	r3, [pc, #72]	; (8003e70 <SystemInit+0x60>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a11      	ldr	r2, [pc, #68]	; (8003e70 <SystemInit+0x60>)
 8003e2a:	f043 0301 	orr.w	r3, r3, #1
 8003e2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003e30:	4b0f      	ldr	r3, [pc, #60]	; (8003e70 <SystemInit+0x60>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003e36:	4b0e      	ldr	r3, [pc, #56]	; (8003e70 <SystemInit+0x60>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a0d      	ldr	r2, [pc, #52]	; (8003e70 <SystemInit+0x60>)
 8003e3c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003e40:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003e44:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003e46:	4b0a      	ldr	r3, [pc, #40]	; (8003e70 <SystemInit+0x60>)
 8003e48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e4c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003e4e:	4b08      	ldr	r3, [pc, #32]	; (8003e70 <SystemInit+0x60>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a07      	ldr	r2, [pc, #28]	; (8003e70 <SystemInit+0x60>)
 8003e54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e58:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003e5a:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <SystemInit+0x60>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	619a      	str	r2, [r3, #24]
}
 8003e60:	bf00      	nop
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	e000ed00 	.word	0xe000ed00
 8003e70:	40021000 	.word	0x40021000

08003e74 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b088      	sub	sp, #32
 8003e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e7a:	f107 0310 	add.w	r3, r7, #16
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	605a      	str	r2, [r3, #4]
 8003e84:	609a      	str	r2, [r3, #8]
 8003e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e88:	1d3b      	adds	r3, r7, #4
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	605a      	str	r2, [r3, #4]
 8003e90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003e92:	4b1d      	ldr	r3, [pc, #116]	; (8003f08 <MX_TIM3_Init+0x94>)
 8003e94:	4a1d      	ldr	r2, [pc, #116]	; (8003f0c <MX_TIM3_Init+0x98>)
 8003e96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 23;
 8003e98:	4b1b      	ldr	r3, [pc, #108]	; (8003f08 <MX_TIM3_Init+0x94>)
 8003e9a:	2217      	movs	r2, #23
 8003e9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e9e:	4b1a      	ldr	r3, [pc, #104]	; (8003f08 <MX_TIM3_Init+0x94>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 195;
 8003ea4:	4b18      	ldr	r3, [pc, #96]	; (8003f08 <MX_TIM3_Init+0x94>)
 8003ea6:	22c3      	movs	r2, #195	; 0xc3
 8003ea8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003eaa:	4b17      	ldr	r3, [pc, #92]	; (8003f08 <MX_TIM3_Init+0x94>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003eb0:	4b15      	ldr	r3, [pc, #84]	; (8003f08 <MX_TIM3_Init+0x94>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003eb6:	4814      	ldr	r0, [pc, #80]	; (8003f08 <MX_TIM3_Init+0x94>)
 8003eb8:	f004 fad0 	bl	800845c <HAL_TIM_Base_Init>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003ec2:	f7fe fad9 	bl	8002478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003ecc:	f107 0310 	add.w	r3, r7, #16
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	480d      	ldr	r0, [pc, #52]	; (8003f08 <MX_TIM3_Init+0x94>)
 8003ed4:	f004 fc84 	bl	80087e0 <HAL_TIM_ConfigClockSource>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003ede:	f7fe facb 	bl	8002478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003ee2:	2320      	movs	r3, #32
 8003ee4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003eea:	1d3b      	adds	r3, r7, #4
 8003eec:	4619      	mov	r1, r3
 8003eee:	4806      	ldr	r0, [pc, #24]	; (8003f08 <MX_TIM3_Init+0x94>)
 8003ef0:	f004 fea6 	bl	8008c40 <HAL_TIMEx_MasterConfigSynchronization>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003efa:	f7fe fabd 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003efe:	bf00      	nop
 8003f00:	3720      	adds	r7, #32
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20004bd8 	.word	0x20004bd8
 8003f0c:	40000400 	.word	0x40000400

08003f10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a0d      	ldr	r2, [pc, #52]	; (8003f54 <HAL_TIM_Base_MspInit+0x44>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d113      	bne.n	8003f4a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f22:	4b0d      	ldr	r3, [pc, #52]	; (8003f58 <HAL_TIM_Base_MspInit+0x48>)
 8003f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f26:	4a0c      	ldr	r2, [pc, #48]	; (8003f58 <HAL_TIM_Base_MspInit+0x48>)
 8003f28:	f043 0302 	orr.w	r3, r3, #2
 8003f2c:	6593      	str	r3, [r2, #88]	; 0x58
 8003f2e:	4b0a      	ldr	r3, [pc, #40]	; (8003f58 <HAL_TIM_Base_MspInit+0x48>)
 8003f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	201d      	movs	r0, #29
 8003f40:	f001 feb7 	bl	8005cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003f44:	201d      	movs	r0, #29
 8003f46:	f001 fed0 	bl	8005cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003f4a:	bf00      	nop
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40000400 	.word	0x40000400
 8003f58:	40021000 	.word	0x40021000

08003f5c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003f60:	4b12      	ldr	r3, [pc, #72]	; (8003fac <MX_LPUART1_UART_Init+0x50>)
 8003f62:	4a13      	ldr	r2, [pc, #76]	; (8003fb0 <MX_LPUART1_UART_Init+0x54>)
 8003f64:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003f66:	4b11      	ldr	r3, [pc, #68]	; (8003fac <MX_LPUART1_UART_Init+0x50>)
 8003f68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f6c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f6e:	4b0f      	ldr	r3, [pc, #60]	; (8003fac <MX_LPUART1_UART_Init+0x50>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003f74:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <MX_LPUART1_UART_Init+0x50>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003f7a:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <MX_LPUART1_UART_Init+0x50>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003f80:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <MX_LPUART1_UART_Init+0x50>)
 8003f82:	220c      	movs	r2, #12
 8003f84:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f86:	4b09      	ldr	r3, [pc, #36]	; (8003fac <MX_LPUART1_UART_Init+0x50>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f8c:	4b07      	ldr	r3, [pc, #28]	; (8003fac <MX_LPUART1_UART_Init+0x50>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f92:	4b06      	ldr	r3, [pc, #24]	; (8003fac <MX_LPUART1_UART_Init+0x50>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003f98:	4804      	ldr	r0, [pc, #16]	; (8003fac <MX_LPUART1_UART_Init+0x50>)
 8003f9a:	f004 fef7 	bl	8008d8c <HAL_UART_Init>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8003fa4:	f7fe fa68 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003fa8:	bf00      	nop
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	20004c24 	.word	0x20004c24
 8003fb0:	40008000 	.word	0x40008000

08003fb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b0ac      	sub	sp, #176	; 0xb0
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fbc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	605a      	str	r2, [r3, #4]
 8003fc6:	609a      	str	r2, [r3, #8]
 8003fc8:	60da      	str	r2, [r3, #12]
 8003fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003fcc:	f107 0310 	add.w	r3, r7, #16
 8003fd0:	228c      	movs	r2, #140	; 0x8c
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f007 fe7b 	bl	800bcd0 <memset>
  if(uartHandle->Instance==LPUART1)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a23      	ldr	r2, [pc, #140]	; (800406c <HAL_UART_MspInit+0xb8>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d13e      	bne.n	8004062 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003fe4:	2320      	movs	r3, #32
 8003fe6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_SYSCLK;
 8003fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fec:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fee:	f107 0310 	add.w	r3, r7, #16
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f003 f93e 	bl	8007274 <HAL_RCCEx_PeriphCLKConfig>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003ffe:	f7fe fa3b 	bl	8002478 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004002:	4b1b      	ldr	r3, [pc, #108]	; (8004070 <HAL_UART_MspInit+0xbc>)
 8004004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004006:	4a1a      	ldr	r2, [pc, #104]	; (8004070 <HAL_UART_MspInit+0xbc>)
 8004008:	f043 0301 	orr.w	r3, r3, #1
 800400c:	65d3      	str	r3, [r2, #92]	; 0x5c
 800400e:	4b18      	ldr	r3, [pc, #96]	; (8004070 <HAL_UART_MspInit+0xbc>)
 8004010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800401a:	4b15      	ldr	r3, [pc, #84]	; (8004070 <HAL_UART_MspInit+0xbc>)
 800401c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800401e:	4a14      	ldr	r2, [pc, #80]	; (8004070 <HAL_UART_MspInit+0xbc>)
 8004020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004026:	4b12      	ldr	r3, [pc, #72]	; (8004070 <HAL_UART_MspInit+0xbc>)
 8004028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800402a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402e:	60bb      	str	r3, [r7, #8]
 8004030:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8004032:	f002 fad1 	bl	80065d8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004036:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800403a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800403e:	2302      	movs	r3, #2
 8004040:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004044:	2300      	movs	r3, #0
 8004046:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800404a:	2303      	movs	r3, #3
 800404c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004050:	2308      	movs	r3, #8
 8004052:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004056:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800405a:	4619      	mov	r1, r3
 800405c:	4805      	ldr	r0, [pc, #20]	; (8004074 <HAL_UART_MspInit+0xc0>)
 800405e:	f002 f895 	bl	800618c <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8004062:	bf00      	nop
 8004064:	37b0      	adds	r7, #176	; 0xb0
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	40008000 	.word	0x40008000
 8004070:	40021000 	.word	0x40021000
 8004074:	48001800 	.word	0x48001800

08004078 <start_cycle_count>:
	printf(" %lu cycles.\r\n", res);
}

#else

void start_cycle_count() {}
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
 800407c:	bf00      	nop
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <stop_cycle_count>:
void stop_cycle_count(char *s) {}
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
	...

0800409c <hex_encode>:
#endif // PERF_COUNT


// Encode the binary buffer buf of length len in the null-terminated string s
// (which must have length at least 2*len+1).
void hex_encode(char* s, const uint8_t* buf, size_t len) {
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
    s[2*len] = '\0';
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	4413      	add	r3, r2
 80040b0:	2200      	movs	r2, #0
 80040b2:	701a      	strb	r2, [r3, #0]
    for (size_t i=0; i<len; i++) {
 80040b4:	2300      	movs	r3, #0
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	e01e      	b.n	80040f8 <hex_encode+0x5c>
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	4413      	add	r3, r2
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	091b      	lsrs	r3, r3, #4
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	4619      	mov	r1, r3
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	4413      	add	r3, r2
 80040d0:	4a0f      	ldr	r2, [pc, #60]	; (8004110 <hex_encode+0x74>)
 80040d2:	5c52      	ldrb	r2, [r2, r1]
 80040d4:	701a      	strb	r2, [r3, #0]
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	4413      	add	r3, r2
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	f003 020f 	and.w	r2, r3, #15
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	3301      	adds	r3, #1
 80040e8:	68f9      	ldr	r1, [r7, #12]
 80040ea:	440b      	add	r3, r1
 80040ec:	4908      	ldr	r1, [pc, #32]	; (8004110 <hex_encode+0x74>)
 80040ee:	5c8a      	ldrb	r2, [r1, r2]
 80040f0:	701a      	strb	r2, [r3, #0]
    for (size_t i=0; i<len; i++) {
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	3301      	adds	r3, #1
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d3dc      	bcc.n	80040ba <hex_encode+0x1e>
    }
}
 8004100:	bf00      	nop
 8004102:	bf00      	nop
 8004104:	371c      	adds	r7, #28
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	0800dec0 	.word	0x0800dec0

08004114 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004114:	f8df d034 	ldr.w	sp, [pc, #52]	; 800414c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004118:	f7ff fe7a 	bl	8003e10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800411c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800411e:	e003      	b.n	8004128 <LoopCopyDataInit>

08004120 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004120:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004122:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004124:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004126:	3104      	adds	r1, #4

08004128 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004128:	480a      	ldr	r0, [pc, #40]	; (8004154 <LoopForever+0xa>)
	ldr	r3, =_edata
 800412a:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <LoopForever+0xe>)
	adds	r2, r0, r1
 800412c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800412e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004130:	d3f6      	bcc.n	8004120 <CopyDataInit>
	ldr	r2, =_sbss
 8004132:	4a0a      	ldr	r2, [pc, #40]	; (800415c <LoopForever+0x12>)
	b	LoopFillZerobss
 8004134:	e002      	b.n	800413c <LoopFillZerobss>

08004136 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004136:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004138:	f842 3b04 	str.w	r3, [r2], #4

0800413c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800413c:	4b08      	ldr	r3, [pc, #32]	; (8004160 <LoopForever+0x16>)
	cmp	r2, r3
 800413e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004140:	d3f9      	bcc.n	8004136 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004142:	f007 fe1d 	bl	800bd80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004146:	f7fe f8f5 	bl	8002334 <main>

0800414a <LoopForever>:

LoopForever:
    b LoopForever
 800414a:	e7fe      	b.n	800414a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800414c:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8004150:	08020104 	.word	0x08020104
	ldr	r0, =_sdata
 8004154:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004158:	20003168 	.word	0x20003168
	ldr	r2, =_sbss
 800415c:	20003168 	.word	0x20003168
	ldr	r3, = _ebss
 8004160:	20004dfc 	.word	0x20004dfc

08004164 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004164:	e7fe      	b.n	8004164 <ADC1_2_IRQHandler>

08004166 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004170:	2003      	movs	r0, #3
 8004172:	f001 fd93 	bl	8005c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004176:	2000      	movs	r0, #0
 8004178:	f000 f80e 	bl	8004198 <HAL_InitTick>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	71fb      	strb	r3, [r7, #7]
 8004186:	e001      	b.n	800418c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004188:	f7ff fd9a 	bl	8003cc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800418c:	79fb      	ldrb	r3, [r7, #7]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80041a0:	2300      	movs	r3, #0
 80041a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80041a4:	4b17      	ldr	r3, [pc, #92]	; (8004204 <HAL_InitTick+0x6c>)
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d023      	beq.n	80041f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80041ac:	4b16      	ldr	r3, [pc, #88]	; (8004208 <HAL_InitTick+0x70>)
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	4b14      	ldr	r3, [pc, #80]	; (8004204 <HAL_InitTick+0x6c>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	4619      	mov	r1, r3
 80041b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80041be:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c2:	4618      	mov	r0, r3
 80041c4:	f001 fd9f 	bl	8005d06 <HAL_SYSTICK_Config>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10f      	bne.n	80041ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b0f      	cmp	r3, #15
 80041d2:	d809      	bhi.n	80041e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041d4:	2200      	movs	r2, #0
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041dc:	f001 fd69 	bl	8005cb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80041e0:	4a0a      	ldr	r2, [pc, #40]	; (800420c <HAL_InitTick+0x74>)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	e007      	b.n	80041f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	73fb      	strb	r3, [r7, #15]
 80041ec:	e004      	b.n	80041f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	73fb      	strb	r3, [r7, #15]
 80041f2:	e001      	b.n	80041f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20002f9c 	.word	0x20002f9c
 8004208:	20002f94 	.word	0x20002f94
 800420c:	20002f98 	.word	0x20002f98

08004210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004214:	4b06      	ldr	r3, [pc, #24]	; (8004230 <HAL_IncTick+0x20>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	461a      	mov	r2, r3
 800421a:	4b06      	ldr	r3, [pc, #24]	; (8004234 <HAL_IncTick+0x24>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4413      	add	r3, r2
 8004220:	4a04      	ldr	r2, [pc, #16]	; (8004234 <HAL_IncTick+0x24>)
 8004222:	6013      	str	r3, [r2, #0]
}
 8004224:	bf00      	nop
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	20002f9c 	.word	0x20002f9c
 8004234:	20004cac 	.word	0x20004cac

08004238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  return uwTick;
 800423c:	4b03      	ldr	r3, [pc, #12]	; (800424c <HAL_GetTick+0x14>)
 800423e:	681b      	ldr	r3, [r3, #0]
}
 8004240:	4618      	mov	r0, r3
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	20004cac 	.word	0x20004cac

08004250 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	431a      	orrs	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	609a      	str	r2, [r3, #8]
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	431a      	orrs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	609a      	str	r2, [r3, #8]
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
 80042c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	3360      	adds	r3, #96	; 0x60
 80042ca:	461a      	mov	r2, r3
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	4b08      	ldr	r3, [pc, #32]	; (80042fc <LL_ADC_SetOffset+0x44>)
 80042da:	4013      	ands	r3, r2
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80042f0:	bf00      	nop
 80042f2:	371c      	adds	r7, #28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	03fff000 	.word	0x03fff000

08004300 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	3360      	adds	r3, #96	; 0x60
 800430e:	461a      	mov	r2, r3
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004320:	4618      	mov	r0, r3
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	3360      	adds	r3, #96	; 0x60
 800433c:	461a      	mov	r2, r3
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	431a      	orrs	r2, r3
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004356:	bf00      	nop
 8004358:	371c      	adds	r7, #28
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004362:	b480      	push	{r7}
 8004364:	b083      	sub	sp, #12
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	615a      	str	r2, [r3, #20]
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800439c:	2301      	movs	r3, #1
 800439e:	e000      	b.n	80043a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b087      	sub	sp, #28
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	3330      	adds	r3, #48	; 0x30
 80043be:	461a      	mov	r2, r3
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	0a1b      	lsrs	r3, r3, #8
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	f003 030c 	and.w	r3, r3, #12
 80043ca:	4413      	add	r3, r2
 80043cc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f003 031f 	and.w	r3, r3, #31
 80043d8:	211f      	movs	r1, #31
 80043da:	fa01 f303 	lsl.w	r3, r1, r3
 80043de:	43db      	mvns	r3, r3
 80043e0:	401a      	ands	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	0e9b      	lsrs	r3, r3, #26
 80043e6:	f003 011f 	and.w	r1, r3, #31
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	f003 031f 	and.w	r3, r3, #31
 80043f0:	fa01 f303 	lsl.w	r3, r1, r3
 80043f4:	431a      	orrs	r2, r3
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80043fa:	bf00      	nop
 80043fc:	371c      	adds	r7, #28
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004406:	b480      	push	{r7}
 8004408:	b087      	sub	sp, #28
 800440a:	af00      	add	r7, sp, #0
 800440c:	60f8      	str	r0, [r7, #12]
 800440e:	60b9      	str	r1, [r7, #8]
 8004410:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	3314      	adds	r3, #20
 8004416:	461a      	mov	r2, r3
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	0e5b      	lsrs	r3, r3, #25
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	4413      	add	r3, r2
 8004424:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	0d1b      	lsrs	r3, r3, #20
 800442e:	f003 031f 	and.w	r3, r3, #31
 8004432:	2107      	movs	r1, #7
 8004434:	fa01 f303 	lsl.w	r3, r1, r3
 8004438:	43db      	mvns	r3, r3
 800443a:	401a      	ands	r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	0d1b      	lsrs	r3, r3, #20
 8004440:	f003 031f 	and.w	r3, r3, #31
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	fa01 f303 	lsl.w	r3, r1, r3
 800444a:	431a      	orrs	r2, r3
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004450:	bf00      	nop
 8004452:	371c      	adds	r7, #28
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004474:	43db      	mvns	r3, r3
 8004476:	401a      	ands	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f003 0318 	and.w	r3, r3, #24
 800447e:	4908      	ldr	r1, [pc, #32]	; (80044a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004480:	40d9      	lsrs	r1, r3
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	400b      	ands	r3, r1
 8004486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800448a:	431a      	orrs	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004492:	bf00      	nop
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	0007ffff 	.word	0x0007ffff

080044a4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 031f 	and.w	r3, r3, #31
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80044d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6093      	str	r3, [r2, #8]
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044f8:	d101      	bne.n	80044fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80044fa:	2301      	movs	r3, #1
 80044fc:	e000      	b.n	8004500 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800451c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004520:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004544:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004548:	d101      	bne.n	800454e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800456c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004570:	f043 0201 	orr.w	r2, r3, #1
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004594:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004598:	f043 0202 	orr.w	r2, r3, #2
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d101      	bne.n	80045c4 <LL_ADC_IsEnabled+0x18>
 80045c0:	2301      	movs	r3, #1
 80045c2:	e000      	b.n	80045c6 <LL_ADC_IsEnabled+0x1a>
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d101      	bne.n	80045ea <LL_ADC_IsDisableOngoing+0x18>
 80045e6:	2301      	movs	r3, #1
 80045e8:	e000      	b.n	80045ec <LL_ADC_IsDisableOngoing+0x1a>
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004608:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800460c:	f043 0204 	orr.w	r2, r3, #4
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004630:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004634:	f043 0210 	orr.w	r2, r3, #16
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b04      	cmp	r3, #4
 800465a:	d101      	bne.n	8004660 <LL_ADC_REG_IsConversionOngoing+0x18>
 800465c:	2301      	movs	r3, #1
 800465e:	e000      	b.n	8004662 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800467e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004682:	f043 0220 	orr.w	r2, r3, #32
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b08      	cmp	r3, #8
 80046a8:	d101      	bne.n	80046ae <LL_ADC_INJ_IsConversionOngoing+0x18>
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80046bc:	b590      	push	{r4, r7, lr}
 80046be:	b089      	sub	sp, #36	; 0x24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e133      	b.n	800493e <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d109      	bne.n	80046f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7fc fc67 	bl	8000fb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff fef1 	bl	80044e4 <LL_ADC_IsDeepPowerDownEnabled>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d004      	beq.n	8004712 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff fed7 	bl	80044c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7ff ff0c 	bl	8004534 <LL_ADC_IsInternalRegulatorEnabled>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d115      	bne.n	800474e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff fef0 	bl	800450c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800472c:	4b86      	ldr	r3, [pc, #536]	; (8004948 <HAL_ADC_Init+0x28c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	099b      	lsrs	r3, r3, #6
 8004732:	4a86      	ldr	r2, [pc, #536]	; (800494c <HAL_ADC_Init+0x290>)
 8004734:	fba2 2303 	umull	r2, r3, r2, r3
 8004738:	099b      	lsrs	r3, r3, #6
 800473a:	3301      	adds	r3, #1
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004740:	e002      	b.n	8004748 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3b01      	subs	r3, #1
 8004746:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f9      	bne.n	8004742 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff feee 	bl	8004534 <LL_ADC_IsInternalRegulatorEnabled>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10d      	bne.n	800477a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004762:	f043 0210 	orr.w	r2, r3, #16
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476e:	f043 0201 	orr.w	r2, r3, #1
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4618      	mov	r0, r3
 8004780:	f7ff ff62 	bl	8004648 <LL_ADC_REG_IsConversionOngoing>
 8004784:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478a:	f003 0310 	and.w	r3, r3, #16
 800478e:	2b00      	cmp	r3, #0
 8004790:	f040 80cc 	bne.w	800492c <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2b00      	cmp	r3, #0
 8004798:	f040 80c8 	bne.w	800492c <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80047a4:	f043 0202 	orr.w	r2, r3, #2
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7ff fefb 	bl	80045ac <LL_ADC_IsEnabled>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d115      	bne.n	80047e8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047bc:	4864      	ldr	r0, [pc, #400]	; (8004950 <HAL_ADC_Init+0x294>)
 80047be:	f7ff fef5 	bl	80045ac <LL_ADC_IsEnabled>
 80047c2:	4604      	mov	r4, r0
 80047c4:	4863      	ldr	r0, [pc, #396]	; (8004954 <HAL_ADC_Init+0x298>)
 80047c6:	f7ff fef1 	bl	80045ac <LL_ADC_IsEnabled>
 80047ca:	4603      	mov	r3, r0
 80047cc:	431c      	orrs	r4, r3
 80047ce:	4862      	ldr	r0, [pc, #392]	; (8004958 <HAL_ADC_Init+0x29c>)
 80047d0:	f7ff feec 	bl	80045ac <LL_ADC_IsEnabled>
 80047d4:	4603      	mov	r3, r0
 80047d6:	4323      	orrs	r3, r4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d105      	bne.n	80047e8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	4619      	mov	r1, r3
 80047e2:	485e      	ldr	r0, [pc, #376]	; (800495c <HAL_ADC_Init+0x2a0>)
 80047e4:	f7ff fd34 	bl	8004250 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	7e5b      	ldrb	r3, [r3, #25]
 80047ec:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80047f2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80047f8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80047fe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004806:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004808:	4313      	orrs	r3, r2
 800480a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d106      	bne.n	8004824 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	3b01      	subs	r3, #1
 800481c:	045b      	lsls	r3, r3, #17
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	4313      	orrs	r3, r2
 8004822:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004828:	2b00      	cmp	r3, #0
 800482a:	d009      	beq.n	8004840 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004830:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4313      	orrs	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	4b46      	ldr	r3, [pc, #280]	; (8004960 <HAL_ADC_Init+0x2a4>)
 8004848:	4013      	ands	r3, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6812      	ldr	r2, [r2, #0]
 800484e:	69b9      	ldr	r1, [r7, #24]
 8004850:	430b      	orrs	r3, r1
 8004852:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4618      	mov	r0, r3
 800485a:	f7ff ff1c 	bl	8004696 <LL_ADC_INJ_IsConversionOngoing>
 800485e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d140      	bne.n	80048e8 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d13d      	bne.n	80048e8 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	7e1b      	ldrb	r3, [r3, #24]
 8004874:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004876:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800487e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004880:	4313      	orrs	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800488e:	f023 0306 	bic.w	r3, r3, #6
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6812      	ldr	r2, [r2, #0]
 8004896:	69b9      	ldr	r1, [r7, #24]
 8004898:	430b      	orrs	r3, r1
 800489a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d118      	bne.n	80048d8 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80048b0:	f023 0304 	bic.w	r3, r3, #4
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80048bc:	4311      	orrs	r1, r2
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80048c2:	4311      	orrs	r1, r2
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80048c8:	430a      	orrs	r2, r1
 80048ca:	431a      	orrs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f042 0201 	orr.w	r2, r2, #1
 80048d4:	611a      	str	r2, [r3, #16]
 80048d6:	e007      	b.n	80048e8 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691a      	ldr	r2, [r3, #16]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0201 	bic.w	r2, r2, #1
 80048e6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d10c      	bne.n	800490a <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	f023 010f 	bic.w	r1, r3, #15
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	1e5a      	subs	r2, r3, #1
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	631a      	str	r2, [r3, #48]	; 0x30
 8004908:	e007      	b.n	800491a <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 020f 	bic.w	r2, r2, #15
 8004918:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491e:	f023 0303 	bic.w	r3, r3, #3
 8004922:	f043 0201 	orr.w	r2, r3, #1
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	659a      	str	r2, [r3, #88]	; 0x58
 800492a:	e007      	b.n	800493c <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004930:	f043 0210 	orr.w	r2, r3, #16
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800493c:	7ffb      	ldrb	r3, [r7, #31]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3724      	adds	r7, #36	; 0x24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd90      	pop	{r4, r7, pc}
 8004946:	bf00      	nop
 8004948:	20002f94 	.word	0x20002f94
 800494c:	053e2d63 	.word	0x053e2d63
 8004950:	50040000 	.word	0x50040000
 8004954:	50040100 	.word	0x50040100
 8004958:	50040200 	.word	0x50040200
 800495c:	50040300 	.word	0x50040300
 8004960:	fff0c007 	.word	0xfff0c007

08004964 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004970:	4853      	ldr	r0, [pc, #332]	; (8004ac0 <HAL_ADC_Start_DMA+0x15c>)
 8004972:	f7ff fd97 	bl	80044a4 <LL_ADC_GetMultimode>
 8004976:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff fe63 	bl	8004648 <LL_ADC_REG_IsConversionOngoing>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	f040 8093 	bne.w	8004ab0 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004990:	2b01      	cmp	r3, #1
 8004992:	d101      	bne.n	8004998 <HAL_ADC_Start_DMA+0x34>
 8004994:	2302      	movs	r3, #2
 8004996:	e08e      	b.n	8004ab6 <HAL_ADC_Start_DMA+0x152>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a47      	ldr	r2, [pc, #284]	; (8004ac4 <HAL_ADC_Start_DMA+0x160>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d008      	beq.n	80049bc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d005      	beq.n	80049bc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	2b05      	cmp	r3, #5
 80049b4:	d002      	beq.n	80049bc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	2b09      	cmp	r3, #9
 80049ba:	d172      	bne.n	8004aa2 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 fdc1 	bl	8005544 <ADC_Enable>
 80049c2:	4603      	mov	r3, r0
 80049c4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80049c6:	7dfb      	ldrb	r3, [r7, #23]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d165      	bne.n	8004a98 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80049d4:	f023 0301 	bic.w	r3, r3, #1
 80049d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a38      	ldr	r2, [pc, #224]	; (8004ac8 <HAL_ADC_Start_DMA+0x164>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d002      	beq.n	80049f0 <HAL_ADC_Start_DMA+0x8c>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	e000      	b.n	80049f2 <HAL_ADC_Start_DMA+0x8e>
 80049f0:	4b36      	ldr	r3, [pc, #216]	; (8004acc <HAL_ADC_Start_DMA+0x168>)
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	6812      	ldr	r2, [r2, #0]
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d002      	beq.n	8004a00 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d105      	bne.n	8004a0c <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a04:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d006      	beq.n	8004a26 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1c:	f023 0206 	bic.w	r2, r3, #6
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a24:	e002      	b.n	8004a2c <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a30:	4a27      	ldr	r2, [pc, #156]	; (8004ad0 <HAL_ADC_Start_DMA+0x16c>)
 8004a32:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a38:	4a26      	ldr	r2, [pc, #152]	; (8004ad4 <HAL_ADC_Start_DMA+0x170>)
 8004a3a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a40:	4a25      	ldr	r2, [pc, #148]	; (8004ad8 <HAL_ADC_Start_DMA+0x174>)
 8004a42:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	221c      	movs	r2, #28
 8004a4a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f042 0210 	orr.w	r2, r2, #16
 8004a62:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68da      	ldr	r2, [r3, #12]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 0201 	orr.w	r2, r2, #1
 8004a72:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3340      	adds	r3, #64	; 0x40
 8004a7e:	4619      	mov	r1, r3
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f001 fa04 	bl	8005e90 <HAL_DMA_Start_IT>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff fdb1 	bl	80045f8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004a96:	e00d      	b.n	8004ab4 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 8004aa0:	e008      	b.n	8004ab4 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004aae:	e001      	b.n	8004ab4 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	50040300 	.word	0x50040300
 8004ac4:	50040200 	.word	0x50040200
 8004ac8:	50040100 	.word	0x50040100
 8004acc:	50040000 	.word	0x50040000
 8004ad0:	0800570f 	.word	0x0800570f
 8004ad4:	080057e7 	.word	0x080057e7
 8004ad8:	08005803 	.word	0x08005803

08004adc <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d101      	bne.n	8004af2 <HAL_ADC_Stop_DMA+0x16>
 8004aee:	2302      	movs	r3, #2
 8004af0:	e051      	b.n	8004b96 <HAL_ADC_Stop_DMA+0xba>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004afa:	2103      	movs	r1, #3
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 fc65 	bl	80053cc <ADC_ConversionStop>
 8004b02:	4603      	mov	r3, r0
 8004b04:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d13f      	bne.n	8004b8c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0201 	bic.w	r2, r2, #1
 8004b1a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b20:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d10f      	bne.n	8004b4a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f001 fa0e 	bl	8005f50 <HAL_DMA_Abort>
 8004b34:	4603      	mov	r3, r0
 8004b36:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004b38:	7bfb      	ldrb	r3, [r7, #15]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d005      	beq.n	8004b4a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 0210 	bic.w	r2, r2, #16
 8004b58:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d105      	bne.n	8004b6c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 fd75 	bl	8005650 <ADC_Disable>
 8004b66:	4603      	mov	r3, r0
 8004b68:	73fb      	strb	r3, [r7, #15]
 8004b6a:	e002      	b.n	8004b72 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 fd6f 	bl	8005650 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004b72:	7bfb      	ldrb	r3, [r7, #15]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d109      	bne.n	8004b8c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004b80:	f023 0301 	bic.w	r3, r3, #1
 8004b84:	f043 0201 	orr.w	r2, r3, #1
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
	...

08004bb4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b0b6      	sub	sp, #216	; 0xd8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d101      	bne.n	8004bd6 <HAL_ADC_ConfigChannel+0x22>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	e3e3      	b.n	800539e <HAL_ADC_ConfigChannel+0x7ea>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7ff fd30 	bl	8004648 <LL_ADC_REG_IsConversionOngoing>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f040 83c4 	bne.w	8005378 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2b05      	cmp	r3, #5
 8004bfe:	d824      	bhi.n	8004c4a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	3b02      	subs	r3, #2
 8004c06:	2b03      	cmp	r3, #3
 8004c08:	d81b      	bhi.n	8004c42 <HAL_ADC_ConfigChannel+0x8e>
 8004c0a:	a201      	add	r2, pc, #4	; (adr r2, 8004c10 <HAL_ADC_ConfigChannel+0x5c>)
 8004c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c10:	08004c21 	.word	0x08004c21
 8004c14:	08004c29 	.word	0x08004c29
 8004c18:	08004c31 	.word	0x08004c31
 8004c1c:	08004c39 	.word	0x08004c39
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004c20:	230c      	movs	r3, #12
 8004c22:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004c26:	e010      	b.n	8004c4a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004c28:	2312      	movs	r3, #18
 8004c2a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004c2e:	e00c      	b.n	8004c4a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004c30:	2318      	movs	r3, #24
 8004c32:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004c36:	e008      	b.n	8004c4a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004c38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004c40:	e003      	b.n	8004c4a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8004c42:	2306      	movs	r3, #6
 8004c44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004c48:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6818      	ldr	r0, [r3, #0]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	461a      	mov	r2, r3
 8004c54:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004c58:	f7ff fba9 	bl	80043ae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff fcf1 	bl	8004648 <LL_ADC_REG_IsConversionOngoing>
 8004c66:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7ff fd11 	bl	8004696 <LL_ADC_INJ_IsConversionOngoing>
 8004c74:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f040 81bf 	bne.w	8005000 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004c82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f040 81ba 	bne.w	8005000 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c94:	d10f      	bne.n	8004cb6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6818      	ldr	r0, [r3, #0]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	f7ff fbb0 	bl	8004406 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff fb57 	bl	8004362 <LL_ADC_SetSamplingTimeCommonConfig>
 8004cb4:	e00e      	b.n	8004cd4 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6818      	ldr	r0, [r3, #0]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	6819      	ldr	r1, [r3, #0]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f7ff fb9f 	bl	8004406 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2100      	movs	r1, #0
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7ff fb47 	bl	8004362 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	695a      	ldr	r2, [r3, #20]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	08db      	lsrs	r3, r3, #3
 8004ce0:	f003 0303 	and.w	r3, r3, #3
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d00a      	beq.n	8004d0c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6818      	ldr	r0, [r3, #0]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	6919      	ldr	r1, [r3, #16]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d06:	f7ff fad7 	bl	80042b8 <LL_ADC_SetOffset>
 8004d0a:	e179      	b.n	8005000 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2100      	movs	r1, #0
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7ff faf4 	bl	8004300 <LL_ADC_GetOffsetChannel>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10a      	bne.n	8004d38 <HAL_ADC_ConfigChannel+0x184>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2100      	movs	r1, #0
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7ff fae9 	bl	8004300 <LL_ADC_GetOffsetChannel>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	0e9b      	lsrs	r3, r3, #26
 8004d32:	f003 021f 	and.w	r2, r3, #31
 8004d36:	e01e      	b.n	8004d76 <HAL_ADC_ConfigChannel+0x1c2>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7ff fade 	bl	8004300 <LL_ADC_GetOffsetChannel>
 8004d44:	4603      	mov	r3, r0
 8004d46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d4e:	fa93 f3a3 	rbit	r3, r3
 8004d52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004d56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004d5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004d5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_ADC_ConfigChannel+0x1b6>
    return 32U;
 8004d66:	2320      	movs	r3, #32
 8004d68:	e004      	b.n	8004d74 <HAL_ADC_ConfigChannel+0x1c0>
  return __builtin_clz(value);
 8004d6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004d6e:	fab3 f383 	clz	r3, r3
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d105      	bne.n	8004d8e <HAL_ADC_ConfigChannel+0x1da>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	0e9b      	lsrs	r3, r3, #26
 8004d88:	f003 031f 	and.w	r3, r3, #31
 8004d8c:	e018      	b.n	8004dc0 <HAL_ADC_ConfigChannel+0x20c>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d9a:	fa93 f3a3 	rbit	r3, r3
 8004d9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004da2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004da6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004daa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8004db2:	2320      	movs	r3, #32
 8004db4:	e004      	b.n	8004dc0 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8004db6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004dba:	fab3 f383 	clz	r3, r3
 8004dbe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d106      	bne.n	8004dd2 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	2100      	movs	r1, #0
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff faad 	bl	800432c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7ff fa91 	bl	8004300 <LL_ADC_GetOffsetChannel>
 8004dde:	4603      	mov	r3, r0
 8004de0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10a      	bne.n	8004dfe <HAL_ADC_ConfigChannel+0x24a>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2101      	movs	r1, #1
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7ff fa86 	bl	8004300 <LL_ADC_GetOffsetChannel>
 8004df4:	4603      	mov	r3, r0
 8004df6:	0e9b      	lsrs	r3, r3, #26
 8004df8:	f003 021f 	and.w	r2, r3, #31
 8004dfc:	e01e      	b.n	8004e3c <HAL_ADC_ConfigChannel+0x288>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2101      	movs	r1, #1
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff fa7b 	bl	8004300 <LL_ADC_GetOffsetChannel>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e14:	fa93 f3a3 	rbit	r3, r3
 8004e18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004e24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8004e2c:	2320      	movs	r3, #32
 8004e2e:	e004      	b.n	8004e3a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8004e30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004e34:	fab3 f383 	clz	r3, r3
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d105      	bne.n	8004e54 <HAL_ADC_ConfigChannel+0x2a0>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	0e9b      	lsrs	r3, r3, #26
 8004e4e:	f003 031f 	and.w	r3, r3, #31
 8004e52:	e018      	b.n	8004e86 <HAL_ADC_ConfigChannel+0x2d2>
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e60:	fa93 f3a3 	rbit	r3, r3
 8004e64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004e68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004e70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8004e78:	2320      	movs	r3, #32
 8004e7a:	e004      	b.n	8004e86 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8004e7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e80:	fab3 f383 	clz	r3, r3
 8004e84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d106      	bne.n	8004e98 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	2101      	movs	r1, #1
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7ff fa4a 	bl	800432c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2102      	movs	r1, #2
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7ff fa2e 	bl	8004300 <LL_ADC_GetOffsetChannel>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10a      	bne.n	8004ec4 <HAL_ADC_ConfigChannel+0x310>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2102      	movs	r1, #2
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7ff fa23 	bl	8004300 <LL_ADC_GetOffsetChannel>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	0e9b      	lsrs	r3, r3, #26
 8004ebe:	f003 021f 	and.w	r2, r3, #31
 8004ec2:	e01e      	b.n	8004f02 <HAL_ADC_ConfigChannel+0x34e>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2102      	movs	r1, #2
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff fa18 	bl	8004300 <LL_ADC_GetOffsetChannel>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004eda:	fa93 f3a3 	rbit	r3, r3
 8004ede:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004ee2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ee6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8004ef2:	2320      	movs	r3, #32
 8004ef4:	e004      	b.n	8004f00 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8004ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004efa:	fab3 f383 	clz	r3, r3
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d105      	bne.n	8004f1a <HAL_ADC_ConfigChannel+0x366>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	0e9b      	lsrs	r3, r3, #26
 8004f14:	f003 031f 	and.w	r3, r3, #31
 8004f18:	e014      	b.n	8004f44 <HAL_ADC_ConfigChannel+0x390>
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f22:	fa93 f3a3 	rbit	r3, r3
 8004f26:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004f28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004f2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8004f36:	2320      	movs	r3, #32
 8004f38:	e004      	b.n	8004f44 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8004f3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f3e:	fab3 f383 	clz	r3, r3
 8004f42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d106      	bne.n	8004f56 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	2102      	movs	r1, #2
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7ff f9eb 	bl	800432c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2103      	movs	r1, #3
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7ff f9cf 	bl	8004300 <LL_ADC_GetOffsetChannel>
 8004f62:	4603      	mov	r3, r0
 8004f64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <HAL_ADC_ConfigChannel+0x3ce>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2103      	movs	r1, #3
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7ff f9c4 	bl	8004300 <LL_ADC_GetOffsetChannel>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	0e9b      	lsrs	r3, r3, #26
 8004f7c:	f003 021f 	and.w	r2, r3, #31
 8004f80:	e017      	b.n	8004fb2 <HAL_ADC_ConfigChannel+0x3fe>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2103      	movs	r1, #3
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7ff f9b9 	bl	8004300 <LL_ADC_GetOffsetChannel>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f94:	fa93 f3a3 	rbit	r3, r3
 8004f98:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f9c:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004f9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8004fa4:	2320      	movs	r3, #32
 8004fa6:	e003      	b.n	8004fb0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8004fa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004faa:	fab3 f383 	clz	r3, r3
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d105      	bne.n	8004fca <HAL_ADC_ConfigChannel+0x416>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	0e9b      	lsrs	r3, r3, #26
 8004fc4:	f003 031f 	and.w	r3, r3, #31
 8004fc8:	e011      	b.n	8004fee <HAL_ADC_ConfigChannel+0x43a>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fd2:	fa93 f3a3 	rbit	r3, r3
 8004fd6:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004fd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fda:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004fdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8004fe2:	2320      	movs	r3, #32
 8004fe4:	e003      	b.n	8004fee <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8004fe6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fe8:	fab3 f383 	clz	r3, r3
 8004fec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d106      	bne.n	8005000 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	2103      	movs	r1, #3
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7ff f996 	bl	800432c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff fad1 	bl	80045ac <LL_ADC_IsEnabled>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	f040 813f 	bne.w	8005290 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6818      	ldr	r0, [r3, #0]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	6819      	ldr	r1, [r3, #0]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	461a      	mov	r2, r3
 8005020:	f7ff fa1c 	bl	800445c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	4a8e      	ldr	r2, [pc, #568]	; (8005264 <HAL_ADC_ConfigChannel+0x6b0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	f040 8130 	bne.w	8005290 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10b      	bne.n	8005058 <HAL_ADC_ConfigChannel+0x4a4>
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	0e9b      	lsrs	r3, r3, #26
 8005046:	3301      	adds	r3, #1
 8005048:	f003 031f 	and.w	r3, r3, #31
 800504c:	2b09      	cmp	r3, #9
 800504e:	bf94      	ite	ls
 8005050:	2301      	movls	r3, #1
 8005052:	2300      	movhi	r3, #0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	e019      	b.n	800508c <HAL_ADC_ConfigChannel+0x4d8>
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005060:	fa93 f3a3 	rbit	r3, r3
 8005064:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005068:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800506a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8005070:	2320      	movs	r3, #32
 8005072:	e003      	b.n	800507c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8005074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005076:	fab3 f383 	clz	r3, r3
 800507a:	b2db      	uxtb	r3, r3
 800507c:	3301      	adds	r3, #1
 800507e:	f003 031f 	and.w	r3, r3, #31
 8005082:	2b09      	cmp	r3, #9
 8005084:	bf94      	ite	ls
 8005086:	2301      	movls	r3, #1
 8005088:	2300      	movhi	r3, #0
 800508a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800508c:	2b00      	cmp	r3, #0
 800508e:	d079      	beq.n	8005184 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005098:	2b00      	cmp	r3, #0
 800509a:	d107      	bne.n	80050ac <HAL_ADC_ConfigChannel+0x4f8>
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	0e9b      	lsrs	r3, r3, #26
 80050a2:	3301      	adds	r3, #1
 80050a4:	069b      	lsls	r3, r3, #26
 80050a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050aa:	e015      	b.n	80050d8 <HAL_ADC_ConfigChannel+0x524>
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050b4:	fa93 f3a3 	rbit	r3, r3
 80050b8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80050ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050bc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80050be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80050c4:	2320      	movs	r3, #32
 80050c6:	e003      	b.n	80050d0 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80050c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ca:	fab3 f383 	clz	r3, r3
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	3301      	adds	r3, #1
 80050d2:	069b      	lsls	r3, r3, #26
 80050d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d109      	bne.n	80050f8 <HAL_ADC_ConfigChannel+0x544>
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	0e9b      	lsrs	r3, r3, #26
 80050ea:	3301      	adds	r3, #1
 80050ec:	f003 031f 	and.w	r3, r3, #31
 80050f0:	2101      	movs	r1, #1
 80050f2:	fa01 f303 	lsl.w	r3, r1, r3
 80050f6:	e017      	b.n	8005128 <HAL_ADC_ConfigChannel+0x574>
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005100:	fa93 f3a3 	rbit	r3, r3
 8005104:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005108:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800510a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8005110:	2320      	movs	r3, #32
 8005112:	e003      	b.n	800511c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8005114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005116:	fab3 f383 	clz	r3, r3
 800511a:	b2db      	uxtb	r3, r3
 800511c:	3301      	adds	r3, #1
 800511e:	f003 031f 	and.w	r3, r3, #31
 8005122:	2101      	movs	r1, #1
 8005124:	fa01 f303 	lsl.w	r3, r1, r3
 8005128:	ea42 0103 	orr.w	r1, r2, r3
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10a      	bne.n	800514e <HAL_ADC_ConfigChannel+0x59a>
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	0e9b      	lsrs	r3, r3, #26
 800513e:	3301      	adds	r3, #1
 8005140:	f003 021f 	and.w	r2, r3, #31
 8005144:	4613      	mov	r3, r2
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	4413      	add	r3, r2
 800514a:	051b      	lsls	r3, r3, #20
 800514c:	e018      	b.n	8005180 <HAL_ADC_ConfigChannel+0x5cc>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005156:	fa93 f3a3 	rbit	r3, r3
 800515a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800515c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8005166:	2320      	movs	r3, #32
 8005168:	e003      	b.n	8005172 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800516a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516c:	fab3 f383 	clz	r3, r3
 8005170:	b2db      	uxtb	r3, r3
 8005172:	3301      	adds	r3, #1
 8005174:	f003 021f 	and.w	r2, r3, #31
 8005178:	4613      	mov	r3, r2
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	4413      	add	r3, r2
 800517e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005180:	430b      	orrs	r3, r1
 8005182:	e080      	b.n	8005286 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800518c:	2b00      	cmp	r3, #0
 800518e:	d107      	bne.n	80051a0 <HAL_ADC_ConfigChannel+0x5ec>
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	0e9b      	lsrs	r3, r3, #26
 8005196:	3301      	adds	r3, #1
 8005198:	069b      	lsls	r3, r3, #26
 800519a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800519e:	e015      	b.n	80051cc <HAL_ADC_ConfigChannel+0x618>
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a8:	fa93 f3a3 	rbit	r3, r3
 80051ac:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80051b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80051b8:	2320      	movs	r3, #32
 80051ba:	e003      	b.n	80051c4 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80051bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051be:	fab3 f383 	clz	r3, r3
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	3301      	adds	r3, #1
 80051c6:	069b      	lsls	r3, r3, #26
 80051c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d109      	bne.n	80051ec <HAL_ADC_ConfigChannel+0x638>
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	0e9b      	lsrs	r3, r3, #26
 80051de:	3301      	adds	r3, #1
 80051e0:	f003 031f 	and.w	r3, r3, #31
 80051e4:	2101      	movs	r1, #1
 80051e6:	fa01 f303 	lsl.w	r3, r1, r3
 80051ea:	e017      	b.n	800521c <HAL_ADC_ConfigChannel+0x668>
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	fa93 f3a3 	rbit	r3, r3
 80051f8:	61bb      	str	r3, [r7, #24]
  return result;
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80051fe:	6a3b      	ldr	r3, [r7, #32]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8005204:	2320      	movs	r3, #32
 8005206:	e003      	b.n	8005210 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	fab3 f383 	clz	r3, r3
 800520e:	b2db      	uxtb	r3, r3
 8005210:	3301      	adds	r3, #1
 8005212:	f003 031f 	and.w	r3, r3, #31
 8005216:	2101      	movs	r1, #1
 8005218:	fa01 f303 	lsl.w	r3, r1, r3
 800521c:	ea42 0103 	orr.w	r1, r2, r3
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10d      	bne.n	8005248 <HAL_ADC_ConfigChannel+0x694>
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	0e9b      	lsrs	r3, r3, #26
 8005232:	3301      	adds	r3, #1
 8005234:	f003 021f 	and.w	r2, r3, #31
 8005238:	4613      	mov	r3, r2
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	4413      	add	r3, r2
 800523e:	3b1e      	subs	r3, #30
 8005240:	051b      	lsls	r3, r3, #20
 8005242:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005246:	e01d      	b.n	8005284 <HAL_ADC_ConfigChannel+0x6d0>
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	fa93 f3a3 	rbit	r3, r3
 8005254:	60fb      	str	r3, [r7, #12]
  return result;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d103      	bne.n	8005268 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8005260:	2320      	movs	r3, #32
 8005262:	e005      	b.n	8005270 <HAL_ADC_ConfigChannel+0x6bc>
 8005264:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	fab3 f383 	clz	r3, r3
 800526e:	b2db      	uxtb	r3, r3
 8005270:	3301      	adds	r3, #1
 8005272:	f003 021f 	and.w	r2, r3, #31
 8005276:	4613      	mov	r3, r2
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	4413      	add	r3, r2
 800527c:	3b1e      	subs	r3, #30
 800527e:	051b      	lsls	r3, r3, #20
 8005280:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005284:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800528a:	4619      	mov	r1, r3
 800528c:	f7ff f8bb 	bl	8004406 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	4b44      	ldr	r3, [pc, #272]	; (80053a8 <HAL_ADC_ConfigChannel+0x7f4>)
 8005296:	4013      	ands	r3, r2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d07a      	beq.n	8005392 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800529c:	4843      	ldr	r0, [pc, #268]	; (80053ac <HAL_ADC_ConfigChannel+0x7f8>)
 800529e:	f7fe fffd 	bl	800429c <LL_ADC_GetCommonPathInternalCh>
 80052a2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a41      	ldr	r2, [pc, #260]	; (80053b0 <HAL_ADC_ConfigChannel+0x7fc>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d12c      	bne.n	800530a <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80052b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d126      	bne.n	800530a <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a3c      	ldr	r2, [pc, #240]	; (80053b4 <HAL_ADC_ConfigChannel+0x800>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d004      	beq.n	80052d0 <HAL_ADC_ConfigChannel+0x71c>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a3b      	ldr	r2, [pc, #236]	; (80053b8 <HAL_ADC_ConfigChannel+0x804>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d15d      	bne.n	800538c <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80052d8:	4619      	mov	r1, r3
 80052da:	4834      	ldr	r0, [pc, #208]	; (80053ac <HAL_ADC_ConfigChannel+0x7f8>)
 80052dc:	f7fe ffcb 	bl	8004276 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80052e0:	4b36      	ldr	r3, [pc, #216]	; (80053bc <HAL_ADC_ConfigChannel+0x808>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	099b      	lsrs	r3, r3, #6
 80052e6:	4a36      	ldr	r2, [pc, #216]	; (80053c0 <HAL_ADC_ConfigChannel+0x80c>)
 80052e8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ec:	099b      	lsrs	r3, r3, #6
 80052ee:	1c5a      	adds	r2, r3, #1
 80052f0:	4613      	mov	r3, r2
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	4413      	add	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80052fa:	e002      	b.n	8005302 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	3b01      	subs	r3, #1
 8005300:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1f9      	bne.n	80052fc <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005308:	e040      	b.n	800538c <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a2d      	ldr	r2, [pc, #180]	; (80053c4 <HAL_ADC_ConfigChannel+0x810>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d118      	bne.n	8005346 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005314:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005318:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d112      	bne.n	8005346 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a23      	ldr	r2, [pc, #140]	; (80053b4 <HAL_ADC_ConfigChannel+0x800>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d004      	beq.n	8005334 <HAL_ADC_ConfigChannel+0x780>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a22      	ldr	r2, [pc, #136]	; (80053b8 <HAL_ADC_ConfigChannel+0x804>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d12d      	bne.n	8005390 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005334:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005338:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800533c:	4619      	mov	r1, r3
 800533e:	481b      	ldr	r0, [pc, #108]	; (80053ac <HAL_ADC_ConfigChannel+0x7f8>)
 8005340:	f7fe ff99 	bl	8004276 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005344:	e024      	b.n	8005390 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a1f      	ldr	r2, [pc, #124]	; (80053c8 <HAL_ADC_ConfigChannel+0x814>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d120      	bne.n	8005392 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005350:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005354:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d11a      	bne.n	8005392 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a14      	ldr	r2, [pc, #80]	; (80053b4 <HAL_ADC_ConfigChannel+0x800>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d115      	bne.n	8005392 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005366:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800536a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800536e:	4619      	mov	r1, r3
 8005370:	480e      	ldr	r0, [pc, #56]	; (80053ac <HAL_ADC_ConfigChannel+0x7f8>)
 8005372:	f7fe ff80 	bl	8004276 <LL_ADC_SetCommonPathInternalCh>
 8005376:	e00c      	b.n	8005392 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537c:	f043 0220 	orr.w	r2, r3, #32
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800538a:	e002      	b.n	8005392 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800538c:	bf00      	nop
 800538e:	e000      	b.n	8005392 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005390:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800539a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800539e:	4618      	mov	r0, r3
 80053a0:	37d8      	adds	r7, #216	; 0xd8
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	80080000 	.word	0x80080000
 80053ac:	50040300 	.word	0x50040300
 80053b0:	c7520000 	.word	0xc7520000
 80053b4:	50040000 	.word	0x50040000
 80053b8:	50040200 	.word	0x50040200
 80053bc:	20002f94 	.word	0x20002f94
 80053c0:	053e2d63 	.word	0x053e2d63
 80053c4:	cb840000 	.word	0xcb840000
 80053c8:	80000001 	.word	0x80000001

080053cc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b088      	sub	sp, #32
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80053d6:	2300      	movs	r3, #0
 80053d8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff f930 	bl	8004648 <LL_ADC_REG_IsConversionOngoing>
 80053e8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7ff f951 	bl	8004696 <LL_ADC_INJ_IsConversionOngoing>
 80053f4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d103      	bne.n	8005404 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f000 8098 	beq.w	8005534 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d02a      	beq.n	8005468 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	7e5b      	ldrb	r3, [r3, #25]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d126      	bne.n	8005468 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	7e1b      	ldrb	r3, [r3, #24]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d122      	bne.n	8005468 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005422:	2301      	movs	r3, #1
 8005424:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005426:	e014      	b.n	8005452 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	4a45      	ldr	r2, [pc, #276]	; (8005540 <ADC_ConversionStop+0x174>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d90d      	bls.n	800544c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005434:	f043 0210 	orr.w	r2, r3, #16
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005440:	f043 0201 	orr.w	r2, r3, #1
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e074      	b.n	8005536 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	3301      	adds	r3, #1
 8005450:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545c:	2b40      	cmp	r3, #64	; 0x40
 800545e:	d1e3      	bne.n	8005428 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2240      	movs	r2, #64	; 0x40
 8005466:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	2b02      	cmp	r3, #2
 800546c:	d014      	beq.n	8005498 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4618      	mov	r0, r3
 8005474:	f7ff f8e8 	bl	8004648 <LL_ADC_REG_IsConversionOngoing>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00c      	beq.n	8005498 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	f7ff f8a5 	bl	80045d2 <LL_ADC_IsDisableOngoing>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d104      	bne.n	8005498 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4618      	mov	r0, r3
 8005494:	f7ff f8c4 	bl	8004620 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d014      	beq.n	80054c8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7ff f8f7 	bl	8004696 <LL_ADC_INJ_IsConversionOngoing>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00c      	beq.n	80054c8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff f88d 	bl	80045d2 <LL_ADC_IsDisableOngoing>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d104      	bne.n	80054c8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff f8d3 	bl	800466e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d005      	beq.n	80054da <ADC_ConversionStop+0x10e>
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	2b03      	cmp	r3, #3
 80054d2:	d105      	bne.n	80054e0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80054d4:	230c      	movs	r3, #12
 80054d6:	617b      	str	r3, [r7, #20]
        break;
 80054d8:	e005      	b.n	80054e6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80054da:	2308      	movs	r3, #8
 80054dc:	617b      	str	r3, [r7, #20]
        break;
 80054de:	e002      	b.n	80054e6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80054e0:	2304      	movs	r3, #4
 80054e2:	617b      	str	r3, [r7, #20]
        break;
 80054e4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80054e6:	f7fe fea7 	bl	8004238 <HAL_GetTick>
 80054ea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80054ec:	e01b      	b.n	8005526 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80054ee:	f7fe fea3 	bl	8004238 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b05      	cmp	r3, #5
 80054fa:	d914      	bls.n	8005526 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689a      	ldr	r2, [r3, #8]
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	4013      	ands	r3, r2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00d      	beq.n	8005526 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800550e:	f043 0210 	orr.w	r2, r3, #16
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800551a:	f043 0201 	orr.w	r2, r3, #1
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e007      	b.n	8005536 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	4013      	ands	r3, r2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1dc      	bne.n	80054ee <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3720      	adds	r7, #32
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	a33fffff 	.word	0xa33fffff

08005544 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800554c:	2300      	movs	r3, #0
 800554e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff f829 	bl	80045ac <LL_ADC_IsEnabled>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d169      	bne.n	8005634 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689a      	ldr	r2, [r3, #8]
 8005566:	4b36      	ldr	r3, [pc, #216]	; (8005640 <ADC_Enable+0xfc>)
 8005568:	4013      	ands	r3, r2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00d      	beq.n	800558a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005572:	f043 0210 	orr.w	r2, r3, #16
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800557e:	f043 0201 	orr.w	r2, r3, #1
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e055      	b.n	8005636 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4618      	mov	r0, r3
 8005590:	f7fe ffe4 	bl	800455c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005594:	482b      	ldr	r0, [pc, #172]	; (8005644 <ADC_Enable+0x100>)
 8005596:	f7fe fe81 	bl	800429c <LL_ADC_GetCommonPathInternalCh>
 800559a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800559c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d013      	beq.n	80055cc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80055a4:	4b28      	ldr	r3, [pc, #160]	; (8005648 <ADC_Enable+0x104>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	099b      	lsrs	r3, r3, #6
 80055aa:	4a28      	ldr	r2, [pc, #160]	; (800564c <ADC_Enable+0x108>)
 80055ac:	fba2 2303 	umull	r2, r3, r2, r3
 80055b0:	099b      	lsrs	r3, r3, #6
 80055b2:	1c5a      	adds	r2, r3, #1
 80055b4:	4613      	mov	r3, r2
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	4413      	add	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80055be:	e002      	b.n	80055c6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	3b01      	subs	r3, #1
 80055c4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1f9      	bne.n	80055c0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80055cc:	f7fe fe34 	bl	8004238 <HAL_GetTick>
 80055d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80055d2:	e028      	b.n	8005626 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4618      	mov	r0, r3
 80055da:	f7fe ffe7 	bl	80045ac <LL_ADC_IsEnabled>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d104      	bne.n	80055ee <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7fe ffb7 	bl	800455c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80055ee:	f7fe fe23 	bl	8004238 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d914      	bls.n	8005626 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b01      	cmp	r3, #1
 8005608:	d00d      	beq.n	8005626 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800560e:	f043 0210 	orr.w	r2, r3, #16
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800561a:	f043 0201 	orr.w	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e007      	b.n	8005636 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b01      	cmp	r3, #1
 8005632:	d1cf      	bne.n	80055d4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	8000003f 	.word	0x8000003f
 8005644:	50040300 	.word	0x50040300
 8005648:	20002f94 	.word	0x20002f94
 800564c:	053e2d63 	.word	0x053e2d63

08005650 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4618      	mov	r0, r3
 800565e:	f7fe ffb8 	bl	80045d2 <LL_ADC_IsDisableOngoing>
 8005662:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4618      	mov	r0, r3
 800566a:	f7fe ff9f 	bl	80045ac <LL_ADC_IsEnabled>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d047      	beq.n	8005704 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d144      	bne.n	8005704 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f003 030d 	and.w	r3, r3, #13
 8005684:	2b01      	cmp	r3, #1
 8005686:	d10c      	bne.n	80056a2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4618      	mov	r0, r3
 800568e:	f7fe ff79 	bl	8004584 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2203      	movs	r2, #3
 8005698:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800569a:	f7fe fdcd 	bl	8004238 <HAL_GetTick>
 800569e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80056a0:	e029      	b.n	80056f6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a6:	f043 0210 	orr.w	r2, r3, #16
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b2:	f043 0201 	orr.w	r2, r3, #1
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e023      	b.n	8005706 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80056be:	f7fe fdbb 	bl	8004238 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d914      	bls.n	80056f6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00d      	beq.n	80056f6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056de:	f043 0210 	orr.w	r2, r3, #16
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ea:	f043 0201 	orr.w	r2, r3, #1
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e007      	b.n	8005706 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1dc      	bne.n	80056be <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005720:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005724:	2b00      	cmp	r3, #0
 8005726:	d14b      	bne.n	80057c0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800572c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0308 	and.w	r3, r3, #8
 800573e:	2b00      	cmp	r3, #0
 8005740:	d021      	beq.n	8005786 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4618      	mov	r0, r3
 8005748:	f7fe fe1e 	bl	8004388 <LL_ADC_REG_IsTriggerSourceSWStart>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d032      	beq.n	80057b8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d12b      	bne.n	80057b8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005764:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d11f      	bne.n	80057b8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800577c:	f043 0201 	orr.w	r2, r3, #1
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	659a      	str	r2, [r3, #88]	; 0x58
 8005784:	e018      	b.n	80057b8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	f003 0302 	and.w	r3, r3, #2
 8005790:	2b00      	cmp	r3, #0
 8005792:	d111      	bne.n	80057b8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005798:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d105      	bne.n	80057b8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b0:	f043 0201 	orr.w	r2, r3, #1
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f7fb fe43 	bl	8001444 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80057be:	e00e      	b.n	80057de <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c4:	f003 0310 	and.w	r3, r3, #16
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f7ff f9e6 	bl	8004b9e <HAL_ADC_ErrorCallback>
}
 80057d2:	e004      	b.n	80057de <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	4798      	blx	r3
}
 80057de:	bf00      	nop
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b084      	sub	sp, #16
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f7fb fe30 	bl	800145a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80057fa:	bf00      	nop
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b084      	sub	sp, #16
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005814:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005820:	f043 0204 	orr.w	r2, r3, #4
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f7ff f9b8 	bl	8004b9e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800582e:	bf00      	nop
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <LL_ADC_IsEnabled>:
{
 8005836:	b480      	push	{r7}
 8005838:	b083      	sub	sp, #12
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b01      	cmp	r3, #1
 8005848:	d101      	bne.n	800584e <LL_ADC_IsEnabled+0x18>
 800584a:	2301      	movs	r3, #1
 800584c:	e000      	b.n	8005850 <LL_ADC_IsEnabled+0x1a>
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <LL_ADC_StartCalibration>:
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800586e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005878:	4313      	orrs	r3, r2
 800587a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	609a      	str	r2, [r3, #8]
}
 8005882:	bf00      	nop
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <LL_ADC_IsCalibrationOnGoing>:
{
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800589e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058a2:	d101      	bne.n	80058a8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80058a4:	2301      	movs	r3, #1
 80058a6:	e000      	b.n	80058aa <LL_ADC_IsCalibrationOnGoing+0x1c>
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <LL_ADC_REG_IsConversionOngoing>:
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	2b04      	cmp	r3, #4
 80058c8:	d101      	bne.n	80058ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80058ca:	2301      	movs	r3, #1
 80058cc:	e000      	b.n	80058d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80058e6:	2300      	movs	r3, #0
 80058e8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d101      	bne.n	80058f8 <HAL_ADCEx_Calibration_Start+0x1c>
 80058f4:	2302      	movs	r3, #2
 80058f6:	e04d      	b.n	8005994 <HAL_ADCEx_Calibration_Start+0xb8>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f7ff fea5 	bl	8005650 <ADC_Disable>
 8005906:	4603      	mov	r3, r0
 8005908:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800590a:	7bfb      	ldrb	r3, [r7, #15]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d136      	bne.n	800597e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005914:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005918:	f023 0302 	bic.w	r3, r3, #2
 800591c:	f043 0202 	orr.w	r2, r3, #2
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6839      	ldr	r1, [r7, #0]
 800592a:	4618      	mov	r0, r3
 800592c:	f7ff ff96 	bl	800585c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005930:	e014      	b.n	800595c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	3301      	adds	r3, #1
 8005936:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800593e:	d30d      	bcc.n	800595c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005944:	f023 0312 	bic.w	r3, r3, #18
 8005948:	f043 0210 	orr.w	r2, r3, #16
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e01b      	b.n	8005994 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4618      	mov	r0, r3
 8005962:	f7ff ff94 	bl	800588e <LL_ADC_IsCalibrationOnGoing>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1e2      	bne.n	8005932 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005970:	f023 0303 	bic.w	r3, r3, #3
 8005974:	f043 0201 	orr.w	r2, r3, #1
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	659a      	str	r2, [r3, #88]	; 0x58
 800597c:	e005      	b.n	800598a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005982:	f043 0210 	orr.w	r2, r3, #16
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8005992:	7bfb      	ldrb	r3, [r7, #15]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800599c:	b590      	push	{r4, r7, lr}
 800599e:	b0a1      	sub	sp, #132	; 0x84
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059a6:	2300      	movs	r3, #0
 80059a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d101      	bne.n	80059ba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80059b6:	2302      	movs	r3, #2
 80059b8:	e093      	b.n	8005ae2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80059c2:	2300      	movs	r3, #0
 80059c4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80059c6:	2300      	movs	r3, #0
 80059c8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a47      	ldr	r2, [pc, #284]	; (8005aec <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d102      	bne.n	80059da <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80059d4:	4b46      	ldr	r3, [pc, #280]	; (8005af0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	e001      	b.n	80059de <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80059da:	2300      	movs	r3, #0
 80059dc:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10b      	bne.n	80059fc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e8:	f043 0220 	orr.w	r2, r3, #32
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e072      	b.n	8005ae2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7ff ff59 	bl	80058b6 <LL_ADC_REG_IsConversionOngoing>
 8005a04:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7ff ff53 	bl	80058b6 <LL_ADC_REG_IsConversionOngoing>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d154      	bne.n	8005ac0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005a16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d151      	bne.n	8005ac0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005a1c:	4b35      	ldr	r3, [pc, #212]	; (8005af4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005a1e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d02c      	beq.n	8005a82 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005a28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	6859      	ldr	r1, [r3, #4]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a3a:	035b      	lsls	r3, r3, #13
 8005a3c:	430b      	orrs	r3, r1
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a42:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a44:	4829      	ldr	r0, [pc, #164]	; (8005aec <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005a46:	f7ff fef6 	bl	8005836 <LL_ADC_IsEnabled>
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	4828      	ldr	r0, [pc, #160]	; (8005af0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005a4e:	f7ff fef2 	bl	8005836 <LL_ADC_IsEnabled>
 8005a52:	4603      	mov	r3, r0
 8005a54:	431c      	orrs	r4, r3
 8005a56:	4828      	ldr	r0, [pc, #160]	; (8005af8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005a58:	f7ff feed 	bl	8005836 <LL_ADC_IsEnabled>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	4323      	orrs	r3, r4
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d137      	bne.n	8005ad4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005a64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005a6c:	f023 030f 	bic.w	r3, r3, #15
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	6811      	ldr	r1, [r2, #0]
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	6892      	ldr	r2, [r2, #8]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a7e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005a80:	e028      	b.n	8005ad4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005a82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a8c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a8e:	4817      	ldr	r0, [pc, #92]	; (8005aec <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005a90:	f7ff fed1 	bl	8005836 <LL_ADC_IsEnabled>
 8005a94:	4604      	mov	r4, r0
 8005a96:	4816      	ldr	r0, [pc, #88]	; (8005af0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005a98:	f7ff fecd 	bl	8005836 <LL_ADC_IsEnabled>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	431c      	orrs	r4, r3
 8005aa0:	4815      	ldr	r0, [pc, #84]	; (8005af8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005aa2:	f7ff fec8 	bl	8005836 <LL_ADC_IsEnabled>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	4323      	orrs	r3, r4
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d112      	bne.n	8005ad4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005aae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005ab6:	f023 030f 	bic.w	r3, r3, #15
 8005aba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005abc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005abe:	e009      	b.n	8005ad4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac4:	f043 0220 	orr.w	r2, r3, #32
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005ad2:	e000      	b.n	8005ad6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005ad4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8005ade:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3784      	adds	r7, #132	; 0x84
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd90      	pop	{r4, r7, pc}
 8005aea:	bf00      	nop
 8005aec:	50040000 	.word	0x50040000
 8005af0:	50040100 	.word	0x50040100
 8005af4:	50040300 	.word	0x50040300
 8005af8:	50040200 	.word	0x50040200

08005afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f003 0307 	and.w	r3, r3, #7
 8005b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b0c:	4b0c      	ldr	r3, [pc, #48]	; (8005b40 <__NVIC_SetPriorityGrouping+0x44>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b18:	4013      	ands	r3, r2
 8005b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b2e:	4a04      	ldr	r2, [pc, #16]	; (8005b40 <__NVIC_SetPriorityGrouping+0x44>)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	60d3      	str	r3, [r2, #12]
}
 8005b34:	bf00      	nop
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	e000ed00 	.word	0xe000ed00

08005b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b48:	4b04      	ldr	r3, [pc, #16]	; (8005b5c <__NVIC_GetPriorityGrouping+0x18>)
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	0a1b      	lsrs	r3, r3, #8
 8005b4e:	f003 0307 	and.w	r3, r3, #7
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	e000ed00 	.word	0xe000ed00

08005b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	4603      	mov	r3, r0
 8005b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	db0b      	blt.n	8005b8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b72:	79fb      	ldrb	r3, [r7, #7]
 8005b74:	f003 021f 	and.w	r2, r3, #31
 8005b78:	4907      	ldr	r1, [pc, #28]	; (8005b98 <__NVIC_EnableIRQ+0x38>)
 8005b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b7e:	095b      	lsrs	r3, r3, #5
 8005b80:	2001      	movs	r0, #1
 8005b82:	fa00 f202 	lsl.w	r2, r0, r2
 8005b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005b8a:	bf00      	nop
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	e000e100 	.word	0xe000e100

08005b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	6039      	str	r1, [r7, #0]
 8005ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	db0a      	blt.n	8005bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	490c      	ldr	r1, [pc, #48]	; (8005be8 <__NVIC_SetPriority+0x4c>)
 8005bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bba:	0112      	lsls	r2, r2, #4
 8005bbc:	b2d2      	uxtb	r2, r2
 8005bbe:	440b      	add	r3, r1
 8005bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005bc4:	e00a      	b.n	8005bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	4908      	ldr	r1, [pc, #32]	; (8005bec <__NVIC_SetPriority+0x50>)
 8005bcc:	79fb      	ldrb	r3, [r7, #7]
 8005bce:	f003 030f 	and.w	r3, r3, #15
 8005bd2:	3b04      	subs	r3, #4
 8005bd4:	0112      	lsls	r2, r2, #4
 8005bd6:	b2d2      	uxtb	r2, r2
 8005bd8:	440b      	add	r3, r1
 8005bda:	761a      	strb	r2, [r3, #24]
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	e000e100 	.word	0xe000e100
 8005bec:	e000ed00 	.word	0xe000ed00

08005bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b089      	sub	sp, #36	; 0x24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f003 0307 	and.w	r3, r3, #7
 8005c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	f1c3 0307 	rsb	r3, r3, #7
 8005c0a:	2b04      	cmp	r3, #4
 8005c0c:	bf28      	it	cs
 8005c0e:	2304      	movcs	r3, #4
 8005c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	3304      	adds	r3, #4
 8005c16:	2b06      	cmp	r3, #6
 8005c18:	d902      	bls.n	8005c20 <NVIC_EncodePriority+0x30>
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	3b03      	subs	r3, #3
 8005c1e:	e000      	b.n	8005c22 <NVIC_EncodePriority+0x32>
 8005c20:	2300      	movs	r3, #0
 8005c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2e:	43da      	mvns	r2, r3
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	401a      	ands	r2, r3
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c42:	43d9      	mvns	r1, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c48:	4313      	orrs	r3, r2
         );
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3724      	adds	r7, #36	; 0x24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
	...

08005c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	3b01      	subs	r3, #1
 8005c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c68:	d301      	bcc.n	8005c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e00f      	b.n	8005c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c6e:	4a0a      	ldr	r2, [pc, #40]	; (8005c98 <SysTick_Config+0x40>)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	3b01      	subs	r3, #1
 8005c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c76:	210f      	movs	r1, #15
 8005c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c7c:	f7ff ff8e 	bl	8005b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c80:	4b05      	ldr	r3, [pc, #20]	; (8005c98 <SysTick_Config+0x40>)
 8005c82:	2200      	movs	r2, #0
 8005c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c86:	4b04      	ldr	r3, [pc, #16]	; (8005c98 <SysTick_Config+0x40>)
 8005c88:	2207      	movs	r2, #7
 8005c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	e000e010 	.word	0xe000e010

08005c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f7ff ff29 	bl	8005afc <__NVIC_SetPriorityGrouping>
}
 8005caa:	bf00      	nop
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b086      	sub	sp, #24
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	4603      	mov	r3, r0
 8005cba:	60b9      	str	r1, [r7, #8]
 8005cbc:	607a      	str	r2, [r7, #4]
 8005cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005cc4:	f7ff ff3e 	bl	8005b44 <__NVIC_GetPriorityGrouping>
 8005cc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	68b9      	ldr	r1, [r7, #8]
 8005cce:	6978      	ldr	r0, [r7, #20]
 8005cd0:	f7ff ff8e 	bl	8005bf0 <NVIC_EncodePriority>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cda:	4611      	mov	r1, r2
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7ff ff5d 	bl	8005b9c <__NVIC_SetPriority>
}
 8005ce2:	bf00      	nop
 8005ce4:	3718      	adds	r7, #24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b082      	sub	sp, #8
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7ff ff31 	bl	8005b60 <__NVIC_EnableIRQ>
}
 8005cfe:	bf00      	nop
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b082      	sub	sp, #8
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7ff ffa2 	bl	8005c58 <SysTick_Config>
 8005d14:	4603      	mov	r3, r0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
	...

08005d20 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e098      	b.n	8005e64 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	461a      	mov	r2, r3
 8005d38:	4b4d      	ldr	r3, [pc, #308]	; (8005e70 <HAL_DMA_Init+0x150>)
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d80f      	bhi.n	8005d5e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	461a      	mov	r2, r3
 8005d44:	4b4b      	ldr	r3, [pc, #300]	; (8005e74 <HAL_DMA_Init+0x154>)
 8005d46:	4413      	add	r3, r2
 8005d48:	4a4b      	ldr	r2, [pc, #300]	; (8005e78 <HAL_DMA_Init+0x158>)
 8005d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d4e:	091b      	lsrs	r3, r3, #4
 8005d50:	009a      	lsls	r2, r3, #2
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a48      	ldr	r2, [pc, #288]	; (8005e7c <HAL_DMA_Init+0x15c>)
 8005d5a:	641a      	str	r2, [r3, #64]	; 0x40
 8005d5c:	e00e      	b.n	8005d7c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	461a      	mov	r2, r3
 8005d64:	4b46      	ldr	r3, [pc, #280]	; (8005e80 <HAL_DMA_Init+0x160>)
 8005d66:	4413      	add	r3, r2
 8005d68:	4a43      	ldr	r2, [pc, #268]	; (8005e78 <HAL_DMA_Init+0x158>)
 8005d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d6e:	091b      	lsrs	r3, r3, #4
 8005d70:	009a      	lsls	r2, r3, #2
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a42      	ldr	r2, [pc, #264]	; (8005e84 <HAL_DMA_Init+0x164>)
 8005d7a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005db8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dd6:	d039      	beq.n	8005e4c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ddc:	4a27      	ldr	r2, [pc, #156]	; (8005e7c <HAL_DMA_Init+0x15c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d11a      	bne.n	8005e18 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005de2:	4b29      	ldr	r3, [pc, #164]	; (8005e88 <HAL_DMA_Init+0x168>)
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dea:	f003 031c 	and.w	r3, r3, #28
 8005dee:	210f      	movs	r1, #15
 8005df0:	fa01 f303 	lsl.w	r3, r1, r3
 8005df4:	43db      	mvns	r3, r3
 8005df6:	4924      	ldr	r1, [pc, #144]	; (8005e88 <HAL_DMA_Init+0x168>)
 8005df8:	4013      	ands	r3, r2
 8005dfa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005dfc:	4b22      	ldr	r3, [pc, #136]	; (8005e88 <HAL_DMA_Init+0x168>)
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6859      	ldr	r1, [r3, #4]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e08:	f003 031c 	and.w	r3, r3, #28
 8005e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e10:	491d      	ldr	r1, [pc, #116]	; (8005e88 <HAL_DMA_Init+0x168>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	600b      	str	r3, [r1, #0]
 8005e16:	e019      	b.n	8005e4c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005e18:	4b1c      	ldr	r3, [pc, #112]	; (8005e8c <HAL_DMA_Init+0x16c>)
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e20:	f003 031c 	and.w	r3, r3, #28
 8005e24:	210f      	movs	r1, #15
 8005e26:	fa01 f303 	lsl.w	r3, r1, r3
 8005e2a:	43db      	mvns	r3, r3
 8005e2c:	4917      	ldr	r1, [pc, #92]	; (8005e8c <HAL_DMA_Init+0x16c>)
 8005e2e:	4013      	ands	r3, r2
 8005e30:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005e32:	4b16      	ldr	r3, [pc, #88]	; (8005e8c <HAL_DMA_Init+0x16c>)
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6859      	ldr	r1, [r3, #4]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3e:	f003 031c 	and.w	r3, r3, #28
 8005e42:	fa01 f303 	lsl.w	r3, r1, r3
 8005e46:	4911      	ldr	r1, [pc, #68]	; (8005e8c <HAL_DMA_Init+0x16c>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	40020407 	.word	0x40020407
 8005e74:	bffdfff8 	.word	0xbffdfff8
 8005e78:	cccccccd 	.word	0xcccccccd
 8005e7c:	40020000 	.word	0x40020000
 8005e80:	bffdfbf8 	.word	0xbffdfbf8
 8005e84:	40020400 	.word	0x40020400
 8005e88:	400200a8 	.word	0x400200a8
 8005e8c:	400204a8 	.word	0x400204a8

08005e90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d101      	bne.n	8005eb0 <HAL_DMA_Start_IT+0x20>
 8005eac:	2302      	movs	r3, #2
 8005eae:	e04b      	b.n	8005f48 <HAL_DMA_Start_IT+0xb8>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d13a      	bne.n	8005f3a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 0201 	bic.w	r2, r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	68b9      	ldr	r1, [r7, #8]
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 f91e 	bl	800612a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d008      	beq.n	8005f08 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f042 020e 	orr.w	r2, r2, #14
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	e00f      	b.n	8005f28 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0204 	bic.w	r2, r2, #4
 8005f16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 020a 	orr.w	r2, r2, #10
 8005f26:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f042 0201 	orr.w	r2, r2, #1
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	e005      	b.n	8005f46 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005f42:	2302      	movs	r3, #2
 8005f44:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3718      	adds	r7, #24
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d008      	beq.n	8005f7a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2204      	movs	r2, #4
 8005f6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e022      	b.n	8005fc0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f022 020e 	bic.w	r2, r2, #14
 8005f88:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 0201 	bic.w	r2, r2, #1
 8005f98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9e:	f003 021c 	and.w	r2, r3, #28
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8005fac:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3714      	adds	r7, #20
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe8:	f003 031c 	and.w	r3, r3, #28
 8005fec:	2204      	movs	r2, #4
 8005fee:	409a      	lsls	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d026      	beq.n	8006046 <HAL_DMA_IRQHandler+0x7a>
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f003 0304 	and.w	r3, r3, #4
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d021      	beq.n	8006046 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0320 	and.w	r3, r3, #32
 800600c:	2b00      	cmp	r3, #0
 800600e:	d107      	bne.n	8006020 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 0204 	bic.w	r2, r2, #4
 800601e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006024:	f003 021c 	and.w	r2, r3, #28
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602c:	2104      	movs	r1, #4
 800602e:	fa01 f202 	lsl.w	r2, r1, r2
 8006032:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006038:	2b00      	cmp	r3, #0
 800603a:	d071      	beq.n	8006120 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006044:	e06c      	b.n	8006120 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800604a:	f003 031c 	and.w	r3, r3, #28
 800604e:	2202      	movs	r2, #2
 8006050:	409a      	lsls	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	4013      	ands	r3, r2
 8006056:	2b00      	cmp	r3, #0
 8006058:	d02e      	beq.n	80060b8 <HAL_DMA_IRQHandler+0xec>
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d029      	beq.n	80060b8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0320 	and.w	r3, r3, #32
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10b      	bne.n	800608a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f022 020a 	bic.w	r2, r2, #10
 8006080:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800608e:	f003 021c 	and.w	r2, r3, #28
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	2102      	movs	r1, #2
 8006098:	fa01 f202 	lsl.w	r2, r1, r2
 800609c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d038      	beq.n	8006120 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80060b6:	e033      	b.n	8006120 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060bc:	f003 031c 	and.w	r3, r3, #28
 80060c0:	2208      	movs	r2, #8
 80060c2:	409a      	lsls	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4013      	ands	r3, r2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d02a      	beq.n	8006122 <HAL_DMA_IRQHandler+0x156>
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	f003 0308 	and.w	r3, r3, #8
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d025      	beq.n	8006122 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 020e 	bic.w	r2, r2, #14
 80060e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ea:	f003 021c 	and.w	r2, r3, #28
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	2101      	movs	r1, #1
 80060f4:	fa01 f202 	lsl.w	r2, r1, r2
 80060f8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006114:	2b00      	cmp	r3, #0
 8006116:	d004      	beq.n	8006122 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006120:	bf00      	nop
 8006122:	bf00      	nop
}
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800612a:	b480      	push	{r7}
 800612c:	b085      	sub	sp, #20
 800612e:	af00      	add	r7, sp, #0
 8006130:	60f8      	str	r0, [r7, #12]
 8006132:	60b9      	str	r1, [r7, #8]
 8006134:	607a      	str	r2, [r7, #4]
 8006136:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613c:	f003 021c 	and.w	r2, r3, #28
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006144:	2101      	movs	r1, #1
 8006146:	fa01 f202 	lsl.w	r2, r1, r2
 800614a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	2b10      	cmp	r3, #16
 800615a:	d108      	bne.n	800616e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800616c:	e007      	b.n	800617e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	60da      	str	r2, [r3, #12]
}
 800617e:	bf00      	nop
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
	...

0800618c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006196:	2300      	movs	r3, #0
 8006198:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800619a:	e166      	b.n	800646a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	2101      	movs	r1, #1
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	fa01 f303 	lsl.w	r3, r1, r3
 80061a8:	4013      	ands	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 8158 	beq.w	8006464 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f003 0303 	and.w	r3, r3, #3
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d005      	beq.n	80061cc <HAL_GPIO_Init+0x40>
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f003 0303 	and.w	r3, r3, #3
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d130      	bne.n	800622e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	005b      	lsls	r3, r3, #1
 80061d6:	2203      	movs	r2, #3
 80061d8:	fa02 f303 	lsl.w	r3, r2, r3
 80061dc:	43db      	mvns	r3, r3
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	4013      	ands	r3, r2
 80061e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	68da      	ldr	r2, [r3, #12]
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	005b      	lsls	r3, r3, #1
 80061ec:	fa02 f303 	lsl.w	r3, r2, r3
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006202:	2201      	movs	r2, #1
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	fa02 f303 	lsl.w	r3, r2, r3
 800620a:	43db      	mvns	r3, r3
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	4013      	ands	r3, r2
 8006210:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	091b      	lsrs	r3, r3, #4
 8006218:	f003 0201 	and.w	r2, r3, #1
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	fa02 f303 	lsl.w	r3, r2, r3
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	4313      	orrs	r3, r2
 8006226:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f003 0303 	and.w	r3, r3, #3
 8006236:	2b03      	cmp	r3, #3
 8006238:	d017      	beq.n	800626a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	005b      	lsls	r3, r3, #1
 8006244:	2203      	movs	r2, #3
 8006246:	fa02 f303 	lsl.w	r3, r2, r3
 800624a:	43db      	mvns	r3, r3
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	4013      	ands	r3, r2
 8006250:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	689a      	ldr	r2, [r3, #8]
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	fa02 f303 	lsl.w	r3, r2, r3
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	4313      	orrs	r3, r2
 8006262:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f003 0303 	and.w	r3, r3, #3
 8006272:	2b02      	cmp	r3, #2
 8006274:	d123      	bne.n	80062be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	08da      	lsrs	r2, r3, #3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	3208      	adds	r2, #8
 800627e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006282:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f003 0307 	and.w	r3, r3, #7
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	220f      	movs	r2, #15
 800628e:	fa02 f303 	lsl.w	r3, r2, r3
 8006292:	43db      	mvns	r3, r3
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	4013      	ands	r3, r2
 8006298:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	691a      	ldr	r2, [r3, #16]
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f003 0307 	and.w	r3, r3, #7
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	fa02 f303 	lsl.w	r3, r2, r3
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	08da      	lsrs	r2, r3, #3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3208      	adds	r2, #8
 80062b8:	6939      	ldr	r1, [r7, #16]
 80062ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	005b      	lsls	r3, r3, #1
 80062c8:	2203      	movs	r2, #3
 80062ca:	fa02 f303 	lsl.w	r3, r2, r3
 80062ce:	43db      	mvns	r3, r3
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	4013      	ands	r3, r2
 80062d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f003 0203 	and.w	r2, r3, #3
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	005b      	lsls	r3, r3, #1
 80062e2:	fa02 f303 	lsl.w	r3, r2, r3
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 80b2 	beq.w	8006464 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006300:	4b61      	ldr	r3, [pc, #388]	; (8006488 <HAL_GPIO_Init+0x2fc>)
 8006302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006304:	4a60      	ldr	r2, [pc, #384]	; (8006488 <HAL_GPIO_Init+0x2fc>)
 8006306:	f043 0301 	orr.w	r3, r3, #1
 800630a:	6613      	str	r3, [r2, #96]	; 0x60
 800630c:	4b5e      	ldr	r3, [pc, #376]	; (8006488 <HAL_GPIO_Init+0x2fc>)
 800630e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	60bb      	str	r3, [r7, #8]
 8006316:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006318:	4a5c      	ldr	r2, [pc, #368]	; (800648c <HAL_GPIO_Init+0x300>)
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	089b      	lsrs	r3, r3, #2
 800631e:	3302      	adds	r3, #2
 8006320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006324:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f003 0303 	and.w	r3, r3, #3
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	220f      	movs	r2, #15
 8006330:	fa02 f303 	lsl.w	r3, r2, r3
 8006334:	43db      	mvns	r3, r3
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	4013      	ands	r3, r2
 800633a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006342:	d02b      	beq.n	800639c <HAL_GPIO_Init+0x210>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a52      	ldr	r2, [pc, #328]	; (8006490 <HAL_GPIO_Init+0x304>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d025      	beq.n	8006398 <HAL_GPIO_Init+0x20c>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a51      	ldr	r2, [pc, #324]	; (8006494 <HAL_GPIO_Init+0x308>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d01f      	beq.n	8006394 <HAL_GPIO_Init+0x208>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a50      	ldr	r2, [pc, #320]	; (8006498 <HAL_GPIO_Init+0x30c>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d019      	beq.n	8006390 <HAL_GPIO_Init+0x204>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a4f      	ldr	r2, [pc, #316]	; (800649c <HAL_GPIO_Init+0x310>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d013      	beq.n	800638c <HAL_GPIO_Init+0x200>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a4e      	ldr	r2, [pc, #312]	; (80064a0 <HAL_GPIO_Init+0x314>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d00d      	beq.n	8006388 <HAL_GPIO_Init+0x1fc>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a4d      	ldr	r2, [pc, #308]	; (80064a4 <HAL_GPIO_Init+0x318>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d007      	beq.n	8006384 <HAL_GPIO_Init+0x1f8>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a4c      	ldr	r2, [pc, #304]	; (80064a8 <HAL_GPIO_Init+0x31c>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d101      	bne.n	8006380 <HAL_GPIO_Init+0x1f4>
 800637c:	2307      	movs	r3, #7
 800637e:	e00e      	b.n	800639e <HAL_GPIO_Init+0x212>
 8006380:	2308      	movs	r3, #8
 8006382:	e00c      	b.n	800639e <HAL_GPIO_Init+0x212>
 8006384:	2306      	movs	r3, #6
 8006386:	e00a      	b.n	800639e <HAL_GPIO_Init+0x212>
 8006388:	2305      	movs	r3, #5
 800638a:	e008      	b.n	800639e <HAL_GPIO_Init+0x212>
 800638c:	2304      	movs	r3, #4
 800638e:	e006      	b.n	800639e <HAL_GPIO_Init+0x212>
 8006390:	2303      	movs	r3, #3
 8006392:	e004      	b.n	800639e <HAL_GPIO_Init+0x212>
 8006394:	2302      	movs	r3, #2
 8006396:	e002      	b.n	800639e <HAL_GPIO_Init+0x212>
 8006398:	2301      	movs	r3, #1
 800639a:	e000      	b.n	800639e <HAL_GPIO_Init+0x212>
 800639c:	2300      	movs	r3, #0
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	f002 0203 	and.w	r2, r2, #3
 80063a4:	0092      	lsls	r2, r2, #2
 80063a6:	4093      	lsls	r3, r2
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80063ae:	4937      	ldr	r1, [pc, #220]	; (800648c <HAL_GPIO_Init+0x300>)
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	089b      	lsrs	r3, r3, #2
 80063b4:	3302      	adds	r3, #2
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80063bc:	4b3b      	ldr	r3, [pc, #236]	; (80064ac <HAL_GPIO_Init+0x320>)
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	43db      	mvns	r3, r3
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	4013      	ands	r3, r2
 80063ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d003      	beq.n	80063e0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4313      	orrs	r3, r2
 80063de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80063e0:	4a32      	ldr	r2, [pc, #200]	; (80064ac <HAL_GPIO_Init+0x320>)
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80063e6:	4b31      	ldr	r3, [pc, #196]	; (80064ac <HAL_GPIO_Init+0x320>)
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	43db      	mvns	r3, r3
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4013      	ands	r3, r2
 80063f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	4313      	orrs	r3, r2
 8006408:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800640a:	4a28      	ldr	r2, [pc, #160]	; (80064ac <HAL_GPIO_Init+0x320>)
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006410:	4b26      	ldr	r3, [pc, #152]	; (80064ac <HAL_GPIO_Init+0x320>)
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	43db      	mvns	r3, r3
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	4013      	ands	r3, r2
 800641e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d003      	beq.n	8006434 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	4313      	orrs	r3, r2
 8006432:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006434:	4a1d      	ldr	r2, [pc, #116]	; (80064ac <HAL_GPIO_Init+0x320>)
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800643a:	4b1c      	ldr	r3, [pc, #112]	; (80064ac <HAL_GPIO_Init+0x320>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	43db      	mvns	r3, r3
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	4013      	ands	r3, r2
 8006448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4313      	orrs	r3, r2
 800645c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800645e:	4a13      	ldr	r2, [pc, #76]	; (80064ac <HAL_GPIO_Init+0x320>)
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	3301      	adds	r3, #1
 8006468:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	fa22 f303 	lsr.w	r3, r2, r3
 8006474:	2b00      	cmp	r3, #0
 8006476:	f47f ae91 	bne.w	800619c <HAL_GPIO_Init+0x10>
  }
}
 800647a:	bf00      	nop
 800647c:	bf00      	nop
 800647e:	371c      	adds	r7, #28
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	40021000 	.word	0x40021000
 800648c:	40010000 	.word	0x40010000
 8006490:	48000400 	.word	0x48000400
 8006494:	48000800 	.word	0x48000800
 8006498:	48000c00 	.word	0x48000c00
 800649c:	48001000 	.word	0x48001000
 80064a0:	48001400 	.word	0x48001400
 80064a4:	48001800 	.word	0x48001800
 80064a8:	48001c00 	.word	0x48001c00
 80064ac:	40010400 	.word	0x40010400

080064b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	460b      	mov	r3, r1
 80064ba:	807b      	strh	r3, [r7, #2]
 80064bc:	4613      	mov	r3, r2
 80064be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80064c0:	787b      	ldrb	r3, [r7, #1]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80064c6:	887a      	ldrh	r2, [r7, #2]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80064cc:	e002      	b.n	80064d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80064ce:	887a      	ldrh	r2, [r7, #2]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	4603      	mov	r3, r0
 80064e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80064ea:	4b08      	ldr	r3, [pc, #32]	; (800650c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064ec:	695a      	ldr	r2, [r3, #20]
 80064ee:	88fb      	ldrh	r3, [r7, #6]
 80064f0:	4013      	ands	r3, r2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d006      	beq.n	8006504 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80064f6:	4a05      	ldr	r2, [pc, #20]	; (800650c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064f8:	88fb      	ldrh	r3, [r7, #6]
 80064fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80064fc:	88fb      	ldrh	r3, [r7, #6]
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fb fed0 	bl	80022a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8006504:	bf00      	nop
 8006506:	3708      	adds	r7, #8
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	40010400 	.word	0x40010400

08006510 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006510:	b480      	push	{r7}
 8006512:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006514:	4b04      	ldr	r3, [pc, #16]	; (8006528 <HAL_PWREx_GetVoltageRange+0x18>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800651c:	4618      	mov	r0, r3
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	40007000 	.word	0x40007000

0800652c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800653a:	d130      	bne.n	800659e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800653c:	4b23      	ldr	r3, [pc, #140]	; (80065cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006548:	d038      	beq.n	80065bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800654a:	4b20      	ldr	r3, [pc, #128]	; (80065cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006552:	4a1e      	ldr	r2, [pc, #120]	; (80065cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006554:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006558:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800655a:	4b1d      	ldr	r3, [pc, #116]	; (80065d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2232      	movs	r2, #50	; 0x32
 8006560:	fb02 f303 	mul.w	r3, r2, r3
 8006564:	4a1b      	ldr	r2, [pc, #108]	; (80065d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006566:	fba2 2303 	umull	r2, r3, r2, r3
 800656a:	0c9b      	lsrs	r3, r3, #18
 800656c:	3301      	adds	r3, #1
 800656e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006570:	e002      	b.n	8006578 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	3b01      	subs	r3, #1
 8006576:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006578:	4b14      	ldr	r3, [pc, #80]	; (80065cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006584:	d102      	bne.n	800658c <HAL_PWREx_ControlVoltageScaling+0x60>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1f2      	bne.n	8006572 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800658c:	4b0f      	ldr	r3, [pc, #60]	; (80065cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006598:	d110      	bne.n	80065bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e00f      	b.n	80065be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800659e:	4b0b      	ldr	r3, [pc, #44]	; (80065cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80065a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065aa:	d007      	beq.n	80065bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80065ac:	4b07      	ldr	r3, [pc, #28]	; (80065cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80065b4:	4a05      	ldr	r2, [pc, #20]	; (80065cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80065b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	40007000 	.word	0x40007000
 80065d0:	20002f94 	.word	0x20002f94
 80065d4:	431bde83 	.word	0x431bde83

080065d8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80065d8:	b480      	push	{r7}
 80065da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80065dc:	4b05      	ldr	r3, [pc, #20]	; (80065f4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	4a04      	ldr	r2, [pc, #16]	; (80065f4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80065e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065e6:	6053      	str	r3, [r2, #4]
}
 80065e8:	bf00      	nop
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	40007000 	.word	0x40007000

080065f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b088      	sub	sp, #32
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d102      	bne.n	800660c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	f000 bc08 	b.w	8006e1c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800660c:	4b96      	ldr	r3, [pc, #600]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f003 030c 	and.w	r3, r3, #12
 8006614:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006616:	4b94      	ldr	r3, [pc, #592]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	f003 0303 	and.w	r3, r3, #3
 800661e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0310 	and.w	r3, r3, #16
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 80e4 	beq.w	80067f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d007      	beq.n	8006644 <HAL_RCC_OscConfig+0x4c>
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	2b0c      	cmp	r3, #12
 8006638:	f040 808b 	bne.w	8006752 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	2b01      	cmp	r3, #1
 8006640:	f040 8087 	bne.w	8006752 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006644:	4b88      	ldr	r3, [pc, #544]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0302 	and.w	r3, r3, #2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d005      	beq.n	800665c <HAL_RCC_OscConfig+0x64>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e3df      	b.n	8006e1c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a1a      	ldr	r2, [r3, #32]
 8006660:	4b81      	ldr	r3, [pc, #516]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0308 	and.w	r3, r3, #8
 8006668:	2b00      	cmp	r3, #0
 800666a:	d004      	beq.n	8006676 <HAL_RCC_OscConfig+0x7e>
 800666c:	4b7e      	ldr	r3, [pc, #504]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006674:	e005      	b.n	8006682 <HAL_RCC_OscConfig+0x8a>
 8006676:	4b7c      	ldr	r3, [pc, #496]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 8006678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800667c:	091b      	lsrs	r3, r3, #4
 800667e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006682:	4293      	cmp	r3, r2
 8006684:	d223      	bcs.n	80066ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	4618      	mov	r0, r3
 800668c:	f000 fd92 	bl	80071b4 <RCC_SetFlashLatencyFromMSIRange>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e3c0      	b.n	8006e1c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800669a:	4b73      	ldr	r3, [pc, #460]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a72      	ldr	r2, [pc, #456]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80066a0:	f043 0308 	orr.w	r3, r3, #8
 80066a4:	6013      	str	r3, [r2, #0]
 80066a6:	4b70      	ldr	r3, [pc, #448]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	496d      	ldr	r1, [pc, #436]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80066b8:	4b6b      	ldr	r3, [pc, #428]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	69db      	ldr	r3, [r3, #28]
 80066c4:	021b      	lsls	r3, r3, #8
 80066c6:	4968      	ldr	r1, [pc, #416]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	604b      	str	r3, [r1, #4]
 80066cc:	e025      	b.n	800671a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80066ce:	4b66      	ldr	r3, [pc, #408]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a65      	ldr	r2, [pc, #404]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80066d4:	f043 0308 	orr.w	r3, r3, #8
 80066d8:	6013      	str	r3, [r2, #0]
 80066da:	4b63      	ldr	r3, [pc, #396]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	4960      	ldr	r1, [pc, #384]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80066ec:	4b5e      	ldr	r3, [pc, #376]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	69db      	ldr	r3, [r3, #28]
 80066f8:	021b      	lsls	r3, r3, #8
 80066fa:	495b      	ldr	r1, [pc, #364]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d109      	bne.n	800671a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	4618      	mov	r0, r3
 800670c:	f000 fd52 	bl	80071b4 <RCC_SetFlashLatencyFromMSIRange>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e380      	b.n	8006e1c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800671a:	f000 fc87 	bl	800702c <HAL_RCC_GetSysClockFreq>
 800671e:	4602      	mov	r2, r0
 8006720:	4b51      	ldr	r3, [pc, #324]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	091b      	lsrs	r3, r3, #4
 8006726:	f003 030f 	and.w	r3, r3, #15
 800672a:	4950      	ldr	r1, [pc, #320]	; (800686c <HAL_RCC_OscConfig+0x274>)
 800672c:	5ccb      	ldrb	r3, [r1, r3]
 800672e:	f003 031f 	and.w	r3, r3, #31
 8006732:	fa22 f303 	lsr.w	r3, r2, r3
 8006736:	4a4e      	ldr	r2, [pc, #312]	; (8006870 <HAL_RCC_OscConfig+0x278>)
 8006738:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800673a:	4b4e      	ldr	r3, [pc, #312]	; (8006874 <HAL_RCC_OscConfig+0x27c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4618      	mov	r0, r3
 8006740:	f7fd fd2a 	bl	8004198 <HAL_InitTick>
 8006744:	4603      	mov	r3, r0
 8006746:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d052      	beq.n	80067f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800674e:	7bfb      	ldrb	r3, [r7, #15]
 8006750:	e364      	b.n	8006e1c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d032      	beq.n	80067c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800675a:	4b43      	ldr	r3, [pc, #268]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a42      	ldr	r2, [pc, #264]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 8006760:	f043 0301 	orr.w	r3, r3, #1
 8006764:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006766:	f7fd fd67 	bl	8004238 <HAL_GetTick>
 800676a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800676c:	e008      	b.n	8006780 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800676e:	f7fd fd63 	bl	8004238 <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	2b02      	cmp	r3, #2
 800677a:	d901      	bls.n	8006780 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e34d      	b.n	8006e1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006780:	4b39      	ldr	r3, [pc, #228]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0302 	and.w	r3, r3, #2
 8006788:	2b00      	cmp	r3, #0
 800678a:	d0f0      	beq.n	800676e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800678c:	4b36      	ldr	r3, [pc, #216]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a35      	ldr	r2, [pc, #212]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 8006792:	f043 0308 	orr.w	r3, r3, #8
 8006796:	6013      	str	r3, [r2, #0]
 8006798:	4b33      	ldr	r3, [pc, #204]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	4930      	ldr	r1, [pc, #192]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80067aa:	4b2f      	ldr	r3, [pc, #188]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	021b      	lsls	r3, r3, #8
 80067b8:	492b      	ldr	r1, [pc, #172]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	604b      	str	r3, [r1, #4]
 80067be:	e01a      	b.n	80067f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80067c0:	4b29      	ldr	r3, [pc, #164]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a28      	ldr	r2, [pc, #160]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80067c6:	f023 0301 	bic.w	r3, r3, #1
 80067ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80067cc:	f7fd fd34 	bl	8004238 <HAL_GetTick>
 80067d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80067d2:	e008      	b.n	80067e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80067d4:	f7fd fd30 	bl	8004238 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e31a      	b.n	8006e1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80067e6:	4b20      	ldr	r3, [pc, #128]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0302 	and.w	r3, r3, #2
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1f0      	bne.n	80067d4 <HAL_RCC_OscConfig+0x1dc>
 80067f2:	e000      	b.n	80067f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80067f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d073      	beq.n	80068ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	2b08      	cmp	r3, #8
 8006806:	d005      	beq.n	8006814 <HAL_RCC_OscConfig+0x21c>
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	2b0c      	cmp	r3, #12
 800680c:	d10e      	bne.n	800682c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	2b03      	cmp	r3, #3
 8006812:	d10b      	bne.n	800682c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006814:	4b14      	ldr	r3, [pc, #80]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d063      	beq.n	80068e8 <HAL_RCC_OscConfig+0x2f0>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d15f      	bne.n	80068e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e2f7      	b.n	8006e1c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006834:	d106      	bne.n	8006844 <HAL_RCC_OscConfig+0x24c>
 8006836:	4b0c      	ldr	r3, [pc, #48]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a0b      	ldr	r2, [pc, #44]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 800683c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	e025      	b.n	8006890 <HAL_RCC_OscConfig+0x298>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800684c:	d114      	bne.n	8006878 <HAL_RCC_OscConfig+0x280>
 800684e:	4b06      	ldr	r3, [pc, #24]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a05      	ldr	r2, [pc, #20]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 8006854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006858:	6013      	str	r3, [r2, #0]
 800685a:	4b03      	ldr	r3, [pc, #12]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a02      	ldr	r2, [pc, #8]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 8006860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006864:	6013      	str	r3, [r2, #0]
 8006866:	e013      	b.n	8006890 <HAL_RCC_OscConfig+0x298>
 8006868:	40021000 	.word	0x40021000
 800686c:	0800dee4 	.word	0x0800dee4
 8006870:	20002f94 	.word	0x20002f94
 8006874:	20002f98 	.word	0x20002f98
 8006878:	4ba0      	ldr	r3, [pc, #640]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a9f      	ldr	r2, [pc, #636]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 800687e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	4b9d      	ldr	r3, [pc, #628]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a9c      	ldr	r2, [pc, #624]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 800688a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800688e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d013      	beq.n	80068c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006898:	f7fd fcce 	bl	8004238 <HAL_GetTick>
 800689c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800689e:	e008      	b.n	80068b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068a0:	f7fd fcca 	bl	8004238 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	2b64      	cmp	r3, #100	; 0x64
 80068ac:	d901      	bls.n	80068b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e2b4      	b.n	8006e1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068b2:	4b92      	ldr	r3, [pc, #584]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d0f0      	beq.n	80068a0 <HAL_RCC_OscConfig+0x2a8>
 80068be:	e014      	b.n	80068ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c0:	f7fd fcba 	bl	8004238 <HAL_GetTick>
 80068c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068c8:	f7fd fcb6 	bl	8004238 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b64      	cmp	r3, #100	; 0x64
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e2a0      	b.n	8006e1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068da:	4b88      	ldr	r3, [pc, #544]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1f0      	bne.n	80068c8 <HAL_RCC_OscConfig+0x2d0>
 80068e6:	e000      	b.n	80068ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d060      	beq.n	80069b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	2b04      	cmp	r3, #4
 80068fa:	d005      	beq.n	8006908 <HAL_RCC_OscConfig+0x310>
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	2b0c      	cmp	r3, #12
 8006900:	d119      	bne.n	8006936 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	2b02      	cmp	r3, #2
 8006906:	d116      	bne.n	8006936 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006908:	4b7c      	ldr	r3, [pc, #496]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006910:	2b00      	cmp	r3, #0
 8006912:	d005      	beq.n	8006920 <HAL_RCC_OscConfig+0x328>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e27d      	b.n	8006e1c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006920:	4b76      	ldr	r3, [pc, #472]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	061b      	lsls	r3, r3, #24
 800692e:	4973      	ldr	r1, [pc, #460]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006930:	4313      	orrs	r3, r2
 8006932:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006934:	e040      	b.n	80069b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d023      	beq.n	8006986 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800693e:	4b6f      	ldr	r3, [pc, #444]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a6e      	ldr	r2, [pc, #440]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694a:	f7fd fc75 	bl	8004238 <HAL_GetTick>
 800694e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006950:	e008      	b.n	8006964 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006952:	f7fd fc71 	bl	8004238 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	2b02      	cmp	r3, #2
 800695e:	d901      	bls.n	8006964 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e25b      	b.n	8006e1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006964:	4b65      	ldr	r3, [pc, #404]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800696c:	2b00      	cmp	r3, #0
 800696e:	d0f0      	beq.n	8006952 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006970:	4b62      	ldr	r3, [pc, #392]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	061b      	lsls	r3, r3, #24
 800697e:	495f      	ldr	r1, [pc, #380]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006980:	4313      	orrs	r3, r2
 8006982:	604b      	str	r3, [r1, #4]
 8006984:	e018      	b.n	80069b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006986:	4b5d      	ldr	r3, [pc, #372]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a5c      	ldr	r2, [pc, #368]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 800698c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006992:	f7fd fc51 	bl	8004238 <HAL_GetTick>
 8006996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006998:	e008      	b.n	80069ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800699a:	f7fd fc4d 	bl	8004238 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d901      	bls.n	80069ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e237      	b.n	8006e1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80069ac:	4b53      	ldr	r3, [pc, #332]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1f0      	bne.n	800699a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0308 	and.w	r3, r3, #8
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d03c      	beq.n	8006a3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d01c      	beq.n	8006a06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069cc:	4b4b      	ldr	r3, [pc, #300]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 80069ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069d2:	4a4a      	ldr	r2, [pc, #296]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 80069d4:	f043 0301 	orr.w	r3, r3, #1
 80069d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069dc:	f7fd fc2c 	bl	8004238 <HAL_GetTick>
 80069e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069e2:	e008      	b.n	80069f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069e4:	f7fd fc28 	bl	8004238 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e212      	b.n	8006e1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069f6:	4b41      	ldr	r3, [pc, #260]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 80069f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069fc:	f003 0302 	and.w	r3, r3, #2
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d0ef      	beq.n	80069e4 <HAL_RCC_OscConfig+0x3ec>
 8006a04:	e01b      	b.n	8006a3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a06:	4b3d      	ldr	r3, [pc, #244]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a0c:	4a3b      	ldr	r2, [pc, #236]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006a0e:	f023 0301 	bic.w	r3, r3, #1
 8006a12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a16:	f7fd fc0f 	bl	8004238 <HAL_GetTick>
 8006a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a1c:	e008      	b.n	8006a30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a1e:	f7fd fc0b 	bl	8004238 <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d901      	bls.n	8006a30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e1f5      	b.n	8006e1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a30:	4b32      	ldr	r3, [pc, #200]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1ef      	bne.n	8006a1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0304 	and.w	r3, r3, #4
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 80a6 	beq.w	8006b98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006a50:	4b2a      	ldr	r3, [pc, #168]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10d      	bne.n	8006a78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a5c:	4b27      	ldr	r3, [pc, #156]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a60:	4a26      	ldr	r2, [pc, #152]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a66:	6593      	str	r3, [r2, #88]	; 0x58
 8006a68:	4b24      	ldr	r3, [pc, #144]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a70:	60bb      	str	r3, [r7, #8]
 8006a72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a74:	2301      	movs	r3, #1
 8006a76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a78:	4b21      	ldr	r3, [pc, #132]	; (8006b00 <HAL_RCC_OscConfig+0x508>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d118      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a84:	4b1e      	ldr	r3, [pc, #120]	; (8006b00 <HAL_RCC_OscConfig+0x508>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a1d      	ldr	r2, [pc, #116]	; (8006b00 <HAL_RCC_OscConfig+0x508>)
 8006a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a90:	f7fd fbd2 	bl	8004238 <HAL_GetTick>
 8006a94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a96:	e008      	b.n	8006aaa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a98:	f7fd fbce 	bl	8004238 <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e1b8      	b.n	8006e1c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006aaa:	4b15      	ldr	r3, [pc, #84]	; (8006b00 <HAL_RCC_OscConfig+0x508>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d0f0      	beq.n	8006a98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d108      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x4d8>
 8006abe:	4b0f      	ldr	r3, [pc, #60]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac4:	4a0d      	ldr	r2, [pc, #52]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006ac6:	f043 0301 	orr.w	r3, r3, #1
 8006aca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ace:	e029      	b.n	8006b24 <HAL_RCC_OscConfig+0x52c>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	2b05      	cmp	r3, #5
 8006ad6:	d115      	bne.n	8006b04 <HAL_RCC_OscConfig+0x50c>
 8006ad8:	4b08      	ldr	r3, [pc, #32]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ade:	4a07      	ldr	r2, [pc, #28]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006ae0:	f043 0304 	orr.w	r3, r3, #4
 8006ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ae8:	4b04      	ldr	r3, [pc, #16]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aee:	4a03      	ldr	r2, [pc, #12]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006af0:	f043 0301 	orr.w	r3, r3, #1
 8006af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006af8:	e014      	b.n	8006b24 <HAL_RCC_OscConfig+0x52c>
 8006afa:	bf00      	nop
 8006afc:	40021000 	.word	0x40021000
 8006b00:	40007000 	.word	0x40007000
 8006b04:	4b9d      	ldr	r3, [pc, #628]	; (8006d7c <HAL_RCC_OscConfig+0x784>)
 8006b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b0a:	4a9c      	ldr	r2, [pc, #624]	; (8006d7c <HAL_RCC_OscConfig+0x784>)
 8006b0c:	f023 0301 	bic.w	r3, r3, #1
 8006b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006b14:	4b99      	ldr	r3, [pc, #612]	; (8006d7c <HAL_RCC_OscConfig+0x784>)
 8006b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b1a:	4a98      	ldr	r2, [pc, #608]	; (8006d7c <HAL_RCC_OscConfig+0x784>)
 8006b1c:	f023 0304 	bic.w	r3, r3, #4
 8006b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d016      	beq.n	8006b5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b2c:	f7fd fb84 	bl	8004238 <HAL_GetTick>
 8006b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b32:	e00a      	b.n	8006b4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b34:	f7fd fb80 	bl	8004238 <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d901      	bls.n	8006b4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e168      	b.n	8006e1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b4a:	4b8c      	ldr	r3, [pc, #560]	; (8006d7c <HAL_RCC_OscConfig+0x784>)
 8006b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b50:	f003 0302 	and.w	r3, r3, #2
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d0ed      	beq.n	8006b34 <HAL_RCC_OscConfig+0x53c>
 8006b58:	e015      	b.n	8006b86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b5a:	f7fd fb6d 	bl	8004238 <HAL_GetTick>
 8006b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b60:	e00a      	b.n	8006b78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b62:	f7fd fb69 	bl	8004238 <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d901      	bls.n	8006b78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e151      	b.n	8006e1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b78:	4b80      	ldr	r3, [pc, #512]	; (8006d7c <HAL_RCC_OscConfig+0x784>)
 8006b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b7e:	f003 0302 	and.w	r3, r3, #2
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1ed      	bne.n	8006b62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b86:	7ffb      	ldrb	r3, [r7, #31]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d105      	bne.n	8006b98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b8c:	4b7b      	ldr	r3, [pc, #492]	; (8006d7c <HAL_RCC_OscConfig+0x784>)
 8006b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b90:	4a7a      	ldr	r2, [pc, #488]	; (8006d7c <HAL_RCC_OscConfig+0x784>)
 8006b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b96:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0320 	and.w	r3, r3, #32
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d03c      	beq.n	8006c1e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d01c      	beq.n	8006be6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006bac:	4b73      	ldr	r3, [pc, #460]	; (8006d7c <HAL_RCC_OscConfig+0x784>)
 8006bae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bb2:	4a72      	ldr	r2, [pc, #456]	; (8006d7c <HAL_RCC_OscConfig+0x784>)
 8006bb4:	f043 0301 	orr.w	r3, r3, #1
 8006bb8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bbc:	f7fd fb3c 	bl	8004238 <HAL_GetTick>
 8006bc0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006bc2:	e008      	b.n	8006bd6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bc4:	f7fd fb38 	bl	8004238 <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d901      	bls.n	8006bd6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e122      	b.n	8006e1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006bd6:	4b69      	ldr	r3, [pc, #420]	; (8006d7c <HAL_RCC_OscConfig+0x784>)
 8006bd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d0ef      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x5cc>
 8006be4:	e01b      	b.n	8006c1e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006be6:	4b65      	ldr	r3, [pc, #404]	; (8006d7c <HAL_RCC_OscConfig+0x784>)
 8006be8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bec:	4a63      	ldr	r2, [pc, #396]	; (8006d7c <HAL_RCC_OscConfig+0x784>)
 8006bee:	f023 0301 	bic.w	r3, r3, #1
 8006bf2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bf6:	f7fd fb1f 	bl	8004238 <HAL_GetTick>
 8006bfa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006bfc:	e008      	b.n	8006c10 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bfe:	f7fd fb1b 	bl	8004238 <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d901      	bls.n	8006c10 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e105      	b.n	8006e1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006c10:	4b5a      	ldr	r3, [pc, #360]	; (8006d7c <HAL_RCC_OscConfig+0x784>)
 8006c12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c16:	f003 0302 	and.w	r3, r3, #2
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1ef      	bne.n	8006bfe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f000 80f9 	beq.w	8006e1a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	f040 80cf 	bne.w	8006dd0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006c32:	4b52      	ldr	r3, [pc, #328]	; (8006d7c <HAL_RCC_OscConfig+0x784>)
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f003 0203 	and.w	r2, r3, #3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d12c      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c50:	3b01      	subs	r3, #1
 8006c52:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d123      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c62:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d11b      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c72:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d113      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c82:	085b      	lsrs	r3, r3, #1
 8006c84:	3b01      	subs	r3, #1
 8006c86:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d109      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	085b      	lsrs	r3, r3, #1
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d071      	beq.n	8006d84 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	2b0c      	cmp	r3, #12
 8006ca4:	d068      	beq.n	8006d78 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006ca6:	4b35      	ldr	r3, [pc, #212]	; (8006d7c <HAL_RCC_OscConfig+0x784>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d105      	bne.n	8006cbe <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006cb2:	4b32      	ldr	r3, [pc, #200]	; (8006d7c <HAL_RCC_OscConfig+0x784>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e0ac      	b.n	8006e1c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006cc2:	4b2e      	ldr	r3, [pc, #184]	; (8006d7c <HAL_RCC_OscConfig+0x784>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a2d      	ldr	r2, [pc, #180]	; (8006d7c <HAL_RCC_OscConfig+0x784>)
 8006cc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ccc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006cce:	f7fd fab3 	bl	8004238 <HAL_GetTick>
 8006cd2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cd4:	e008      	b.n	8006ce8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cd6:	f7fd faaf 	bl	8004238 <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d901      	bls.n	8006ce8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e099      	b.n	8006e1c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ce8:	4b24      	ldr	r3, [pc, #144]	; (8006d7c <HAL_RCC_OscConfig+0x784>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1f0      	bne.n	8006cd6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cf4:	4b21      	ldr	r3, [pc, #132]	; (8006d7c <HAL_RCC_OscConfig+0x784>)
 8006cf6:	68da      	ldr	r2, [r3, #12]
 8006cf8:	4b21      	ldr	r3, [pc, #132]	; (8006d80 <HAL_RCC_OscConfig+0x788>)
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006d04:	3a01      	subs	r2, #1
 8006d06:	0112      	lsls	r2, r2, #4
 8006d08:	4311      	orrs	r1, r2
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d0e:	0212      	lsls	r2, r2, #8
 8006d10:	4311      	orrs	r1, r2
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006d16:	0852      	lsrs	r2, r2, #1
 8006d18:	3a01      	subs	r2, #1
 8006d1a:	0552      	lsls	r2, r2, #21
 8006d1c:	4311      	orrs	r1, r2
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006d22:	0852      	lsrs	r2, r2, #1
 8006d24:	3a01      	subs	r2, #1
 8006d26:	0652      	lsls	r2, r2, #25
 8006d28:	4311      	orrs	r1, r2
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d2e:	06d2      	lsls	r2, r2, #27
 8006d30:	430a      	orrs	r2, r1
 8006d32:	4912      	ldr	r1, [pc, #72]	; (8006d7c <HAL_RCC_OscConfig+0x784>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006d38:	4b10      	ldr	r3, [pc, #64]	; (8006d7c <HAL_RCC_OscConfig+0x784>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a0f      	ldr	r2, [pc, #60]	; (8006d7c <HAL_RCC_OscConfig+0x784>)
 8006d3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d44:	4b0d      	ldr	r3, [pc, #52]	; (8006d7c <HAL_RCC_OscConfig+0x784>)
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	4a0c      	ldr	r2, [pc, #48]	; (8006d7c <HAL_RCC_OscConfig+0x784>)
 8006d4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006d50:	f7fd fa72 	bl	8004238 <HAL_GetTick>
 8006d54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d56:	e008      	b.n	8006d6a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d58:	f7fd fa6e 	bl	8004238 <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d901      	bls.n	8006d6a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e058      	b.n	8006e1c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d6a:	4b04      	ldr	r3, [pc, #16]	; (8006d7c <HAL_RCC_OscConfig+0x784>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d0f0      	beq.n	8006d58 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006d76:	e050      	b.n	8006e1a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e04f      	b.n	8006e1c <HAL_RCC_OscConfig+0x824>
 8006d7c:	40021000 	.word	0x40021000
 8006d80:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d84:	4b27      	ldr	r3, [pc, #156]	; (8006e24 <HAL_RCC_OscConfig+0x82c>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d144      	bne.n	8006e1a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006d90:	4b24      	ldr	r3, [pc, #144]	; (8006e24 <HAL_RCC_OscConfig+0x82c>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a23      	ldr	r2, [pc, #140]	; (8006e24 <HAL_RCC_OscConfig+0x82c>)
 8006d96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d9c:	4b21      	ldr	r3, [pc, #132]	; (8006e24 <HAL_RCC_OscConfig+0x82c>)
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	4a20      	ldr	r2, [pc, #128]	; (8006e24 <HAL_RCC_OscConfig+0x82c>)
 8006da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006da6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006da8:	f7fd fa46 	bl	8004238 <HAL_GetTick>
 8006dac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dae:	e008      	b.n	8006dc2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006db0:	f7fd fa42 	bl	8004238 <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d901      	bls.n	8006dc2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e02c      	b.n	8006e1c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dc2:	4b18      	ldr	r3, [pc, #96]	; (8006e24 <HAL_RCC_OscConfig+0x82c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d0f0      	beq.n	8006db0 <HAL_RCC_OscConfig+0x7b8>
 8006dce:	e024      	b.n	8006e1a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	2b0c      	cmp	r3, #12
 8006dd4:	d01f      	beq.n	8006e16 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dd6:	4b13      	ldr	r3, [pc, #76]	; (8006e24 <HAL_RCC_OscConfig+0x82c>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a12      	ldr	r2, [pc, #72]	; (8006e24 <HAL_RCC_OscConfig+0x82c>)
 8006ddc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006de0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006de2:	f7fd fa29 	bl	8004238 <HAL_GetTick>
 8006de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006de8:	e008      	b.n	8006dfc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dea:	f7fd fa25 	bl	8004238 <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d901      	bls.n	8006dfc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e00f      	b.n	8006e1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006dfc:	4b09      	ldr	r3, [pc, #36]	; (8006e24 <HAL_RCC_OscConfig+0x82c>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1f0      	bne.n	8006dea <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006e08:	4b06      	ldr	r3, [pc, #24]	; (8006e24 <HAL_RCC_OscConfig+0x82c>)
 8006e0a:	68da      	ldr	r2, [r3, #12]
 8006e0c:	4905      	ldr	r1, [pc, #20]	; (8006e24 <HAL_RCC_OscConfig+0x82c>)
 8006e0e:	4b06      	ldr	r3, [pc, #24]	; (8006e28 <HAL_RCC_OscConfig+0x830>)
 8006e10:	4013      	ands	r3, r2
 8006e12:	60cb      	str	r3, [r1, #12]
 8006e14:	e001      	b.n	8006e1a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e000      	b.n	8006e1c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3720      	adds	r7, #32
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	40021000 	.word	0x40021000
 8006e28:	feeefffc 	.word	0xfeeefffc

08006e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e0e7      	b.n	8007010 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e40:	4b75      	ldr	r3, [pc, #468]	; (8007018 <HAL_RCC_ClockConfig+0x1ec>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0307 	and.w	r3, r3, #7
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d910      	bls.n	8006e70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e4e:	4b72      	ldr	r3, [pc, #456]	; (8007018 <HAL_RCC_ClockConfig+0x1ec>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f023 0207 	bic.w	r2, r3, #7
 8006e56:	4970      	ldr	r1, [pc, #448]	; (8007018 <HAL_RCC_ClockConfig+0x1ec>)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e5e:	4b6e      	ldr	r3, [pc, #440]	; (8007018 <HAL_RCC_ClockConfig+0x1ec>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0307 	and.w	r3, r3, #7
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d001      	beq.n	8006e70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e0cf      	b.n	8007010 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0302 	and.w	r3, r3, #2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d010      	beq.n	8006e9e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	4b66      	ldr	r3, [pc, #408]	; (800701c <HAL_RCC_ClockConfig+0x1f0>)
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d908      	bls.n	8006e9e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e8c:	4b63      	ldr	r3, [pc, #396]	; (800701c <HAL_RCC_ClockConfig+0x1f0>)
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	4960      	ldr	r1, [pc, #384]	; (800701c <HAL_RCC_ClockConfig+0x1f0>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0301 	and.w	r3, r3, #1
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d04c      	beq.n	8006f44 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	d107      	bne.n	8006ec2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006eb2:	4b5a      	ldr	r3, [pc, #360]	; (800701c <HAL_RCC_ClockConfig+0x1f0>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d121      	bne.n	8006f02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e0a6      	b.n	8007010 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d107      	bne.n	8006eda <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006eca:	4b54      	ldr	r3, [pc, #336]	; (800701c <HAL_RCC_ClockConfig+0x1f0>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d115      	bne.n	8006f02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e09a      	b.n	8007010 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d107      	bne.n	8006ef2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ee2:	4b4e      	ldr	r3, [pc, #312]	; (800701c <HAL_RCC_ClockConfig+0x1f0>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0302 	and.w	r3, r3, #2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d109      	bne.n	8006f02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e08e      	b.n	8007010 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ef2:	4b4a      	ldr	r3, [pc, #296]	; (800701c <HAL_RCC_ClockConfig+0x1f0>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e086      	b.n	8007010 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006f02:	4b46      	ldr	r3, [pc, #280]	; (800701c <HAL_RCC_ClockConfig+0x1f0>)
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f023 0203 	bic.w	r2, r3, #3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	4943      	ldr	r1, [pc, #268]	; (800701c <HAL_RCC_ClockConfig+0x1f0>)
 8006f10:	4313      	orrs	r3, r2
 8006f12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f14:	f7fd f990 	bl	8004238 <HAL_GetTick>
 8006f18:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f1a:	e00a      	b.n	8006f32 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f1c:	f7fd f98c 	bl	8004238 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d901      	bls.n	8006f32 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e06e      	b.n	8007010 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f32:	4b3a      	ldr	r3, [pc, #232]	; (800701c <HAL_RCC_ClockConfig+0x1f0>)
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f003 020c 	and.w	r2, r3, #12
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d1eb      	bne.n	8006f1c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0302 	and.w	r3, r3, #2
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d010      	beq.n	8006f72 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	689a      	ldr	r2, [r3, #8]
 8006f54:	4b31      	ldr	r3, [pc, #196]	; (800701c <HAL_RCC_ClockConfig+0x1f0>)
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d208      	bcs.n	8006f72 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f60:	4b2e      	ldr	r3, [pc, #184]	; (800701c <HAL_RCC_ClockConfig+0x1f0>)
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	492b      	ldr	r1, [pc, #172]	; (800701c <HAL_RCC_ClockConfig+0x1f0>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f72:	4b29      	ldr	r3, [pc, #164]	; (8007018 <HAL_RCC_ClockConfig+0x1ec>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0307 	and.w	r3, r3, #7
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d210      	bcs.n	8006fa2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f80:	4b25      	ldr	r3, [pc, #148]	; (8007018 <HAL_RCC_ClockConfig+0x1ec>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f023 0207 	bic.w	r2, r3, #7
 8006f88:	4923      	ldr	r1, [pc, #140]	; (8007018 <HAL_RCC_ClockConfig+0x1ec>)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f90:	4b21      	ldr	r3, [pc, #132]	; (8007018 <HAL_RCC_ClockConfig+0x1ec>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0307 	and.w	r3, r3, #7
 8006f98:	683a      	ldr	r2, [r7, #0]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d001      	beq.n	8006fa2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e036      	b.n	8007010 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 0304 	and.w	r3, r3, #4
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d008      	beq.n	8006fc0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fae:	4b1b      	ldr	r3, [pc, #108]	; (800701c <HAL_RCC_ClockConfig+0x1f0>)
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	4918      	ldr	r1, [pc, #96]	; (800701c <HAL_RCC_ClockConfig+0x1f0>)
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0308 	and.w	r3, r3, #8
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d009      	beq.n	8006fe0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fcc:	4b13      	ldr	r3, [pc, #76]	; (800701c <HAL_RCC_ClockConfig+0x1f0>)
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	00db      	lsls	r3, r3, #3
 8006fda:	4910      	ldr	r1, [pc, #64]	; (800701c <HAL_RCC_ClockConfig+0x1f0>)
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006fe0:	f000 f824 	bl	800702c <HAL_RCC_GetSysClockFreq>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	4b0d      	ldr	r3, [pc, #52]	; (800701c <HAL_RCC_ClockConfig+0x1f0>)
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	091b      	lsrs	r3, r3, #4
 8006fec:	f003 030f 	and.w	r3, r3, #15
 8006ff0:	490b      	ldr	r1, [pc, #44]	; (8007020 <HAL_RCC_ClockConfig+0x1f4>)
 8006ff2:	5ccb      	ldrb	r3, [r1, r3]
 8006ff4:	f003 031f 	and.w	r3, r3, #31
 8006ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ffc:	4a09      	ldr	r2, [pc, #36]	; (8007024 <HAL_RCC_ClockConfig+0x1f8>)
 8006ffe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007000:	4b09      	ldr	r3, [pc, #36]	; (8007028 <HAL_RCC_ClockConfig+0x1fc>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4618      	mov	r0, r3
 8007006:	f7fd f8c7 	bl	8004198 <HAL_InitTick>
 800700a:	4603      	mov	r3, r0
 800700c:	72fb      	strb	r3, [r7, #11]

  return status;
 800700e:	7afb      	ldrb	r3, [r7, #11]
}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	40022000 	.word	0x40022000
 800701c:	40021000 	.word	0x40021000
 8007020:	0800dee4 	.word	0x0800dee4
 8007024:	20002f94 	.word	0x20002f94
 8007028:	20002f98 	.word	0x20002f98

0800702c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800702c:	b480      	push	{r7}
 800702e:	b089      	sub	sp, #36	; 0x24
 8007030:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007032:	2300      	movs	r3, #0
 8007034:	61fb      	str	r3, [r7, #28]
 8007036:	2300      	movs	r3, #0
 8007038:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800703a:	4b3e      	ldr	r3, [pc, #248]	; (8007134 <HAL_RCC_GetSysClockFreq+0x108>)
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f003 030c 	and.w	r3, r3, #12
 8007042:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007044:	4b3b      	ldr	r3, [pc, #236]	; (8007134 <HAL_RCC_GetSysClockFreq+0x108>)
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	f003 0303 	and.w	r3, r3, #3
 800704c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d005      	beq.n	8007060 <HAL_RCC_GetSysClockFreq+0x34>
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	2b0c      	cmp	r3, #12
 8007058:	d121      	bne.n	800709e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d11e      	bne.n	800709e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007060:	4b34      	ldr	r3, [pc, #208]	; (8007134 <HAL_RCC_GetSysClockFreq+0x108>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0308 	and.w	r3, r3, #8
 8007068:	2b00      	cmp	r3, #0
 800706a:	d107      	bne.n	800707c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800706c:	4b31      	ldr	r3, [pc, #196]	; (8007134 <HAL_RCC_GetSysClockFreq+0x108>)
 800706e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007072:	0a1b      	lsrs	r3, r3, #8
 8007074:	f003 030f 	and.w	r3, r3, #15
 8007078:	61fb      	str	r3, [r7, #28]
 800707a:	e005      	b.n	8007088 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800707c:	4b2d      	ldr	r3, [pc, #180]	; (8007134 <HAL_RCC_GetSysClockFreq+0x108>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	091b      	lsrs	r3, r3, #4
 8007082:	f003 030f 	and.w	r3, r3, #15
 8007086:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007088:	4a2b      	ldr	r2, [pc, #172]	; (8007138 <HAL_RCC_GetSysClockFreq+0x10c>)
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007090:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10d      	bne.n	80070b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800709c:	e00a      	b.n	80070b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	2b04      	cmp	r3, #4
 80070a2:	d102      	bne.n	80070aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80070a4:	4b25      	ldr	r3, [pc, #148]	; (800713c <HAL_RCC_GetSysClockFreq+0x110>)
 80070a6:	61bb      	str	r3, [r7, #24]
 80070a8:	e004      	b.n	80070b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	2b08      	cmp	r3, #8
 80070ae:	d101      	bne.n	80070b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80070b0:	4b23      	ldr	r3, [pc, #140]	; (8007140 <HAL_RCC_GetSysClockFreq+0x114>)
 80070b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	2b0c      	cmp	r3, #12
 80070b8:	d134      	bne.n	8007124 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80070ba:	4b1e      	ldr	r3, [pc, #120]	; (8007134 <HAL_RCC_GetSysClockFreq+0x108>)
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	f003 0303 	and.w	r3, r3, #3
 80070c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d003      	beq.n	80070d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	2b03      	cmp	r3, #3
 80070ce:	d003      	beq.n	80070d8 <HAL_RCC_GetSysClockFreq+0xac>
 80070d0:	e005      	b.n	80070de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80070d2:	4b1a      	ldr	r3, [pc, #104]	; (800713c <HAL_RCC_GetSysClockFreq+0x110>)
 80070d4:	617b      	str	r3, [r7, #20]
      break;
 80070d6:	e005      	b.n	80070e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80070d8:	4b19      	ldr	r3, [pc, #100]	; (8007140 <HAL_RCC_GetSysClockFreq+0x114>)
 80070da:	617b      	str	r3, [r7, #20]
      break;
 80070dc:	e002      	b.n	80070e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	617b      	str	r3, [r7, #20]
      break;
 80070e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80070e4:	4b13      	ldr	r3, [pc, #76]	; (8007134 <HAL_RCC_GetSysClockFreq+0x108>)
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	091b      	lsrs	r3, r3, #4
 80070ea:	f003 0307 	and.w	r3, r3, #7
 80070ee:	3301      	adds	r3, #1
 80070f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80070f2:	4b10      	ldr	r3, [pc, #64]	; (8007134 <HAL_RCC_GetSysClockFreq+0x108>)
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	0a1b      	lsrs	r3, r3, #8
 80070f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	fb03 f202 	mul.w	r2, r3, r2
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	fbb2 f3f3 	udiv	r3, r2, r3
 8007108:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800710a:	4b0a      	ldr	r3, [pc, #40]	; (8007134 <HAL_RCC_GetSysClockFreq+0x108>)
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	0e5b      	lsrs	r3, r3, #25
 8007110:	f003 0303 	and.w	r3, r3, #3
 8007114:	3301      	adds	r3, #1
 8007116:	005b      	lsls	r3, r3, #1
 8007118:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007122:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007124:	69bb      	ldr	r3, [r7, #24]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3724      	adds	r7, #36	; 0x24
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	40021000 	.word	0x40021000
 8007138:	0800defc 	.word	0x0800defc
 800713c:	00f42400 	.word	0x00f42400
 8007140:	007a1200 	.word	0x007a1200

08007144 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007144:	b480      	push	{r7}
 8007146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007148:	4b03      	ldr	r3, [pc, #12]	; (8007158 <HAL_RCC_GetHCLKFreq+0x14>)
 800714a:	681b      	ldr	r3, [r3, #0]
}
 800714c:	4618      	mov	r0, r3
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	20002f94 	.word	0x20002f94

0800715c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007160:	f7ff fff0 	bl	8007144 <HAL_RCC_GetHCLKFreq>
 8007164:	4602      	mov	r2, r0
 8007166:	4b06      	ldr	r3, [pc, #24]	; (8007180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	0a1b      	lsrs	r3, r3, #8
 800716c:	f003 0307 	and.w	r3, r3, #7
 8007170:	4904      	ldr	r1, [pc, #16]	; (8007184 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007172:	5ccb      	ldrb	r3, [r1, r3]
 8007174:	f003 031f 	and.w	r3, r3, #31
 8007178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800717c:	4618      	mov	r0, r3
 800717e:	bd80      	pop	{r7, pc}
 8007180:	40021000 	.word	0x40021000
 8007184:	0800def4 	.word	0x0800def4

08007188 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800718c:	f7ff ffda 	bl	8007144 <HAL_RCC_GetHCLKFreq>
 8007190:	4602      	mov	r2, r0
 8007192:	4b06      	ldr	r3, [pc, #24]	; (80071ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	0adb      	lsrs	r3, r3, #11
 8007198:	f003 0307 	and.w	r3, r3, #7
 800719c:	4904      	ldr	r1, [pc, #16]	; (80071b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800719e:	5ccb      	ldrb	r3, [r1, r3]
 80071a0:	f003 031f 	and.w	r3, r3, #31
 80071a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	40021000 	.word	0x40021000
 80071b0:	0800def4 	.word	0x0800def4

080071b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80071bc:	2300      	movs	r3, #0
 80071be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80071c0:	4b2a      	ldr	r3, [pc, #168]	; (800726c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d003      	beq.n	80071d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80071cc:	f7ff f9a0 	bl	8006510 <HAL_PWREx_GetVoltageRange>
 80071d0:	6178      	str	r0, [r7, #20]
 80071d2:	e014      	b.n	80071fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80071d4:	4b25      	ldr	r3, [pc, #148]	; (800726c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071d8:	4a24      	ldr	r2, [pc, #144]	; (800726c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071de:	6593      	str	r3, [r2, #88]	; 0x58
 80071e0:	4b22      	ldr	r3, [pc, #136]	; (800726c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071e8:	60fb      	str	r3, [r7, #12]
 80071ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80071ec:	f7ff f990 	bl	8006510 <HAL_PWREx_GetVoltageRange>
 80071f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80071f2:	4b1e      	ldr	r3, [pc, #120]	; (800726c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071f6:	4a1d      	ldr	r2, [pc, #116]	; (800726c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007204:	d10b      	bne.n	800721e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2b80      	cmp	r3, #128	; 0x80
 800720a:	d919      	bls.n	8007240 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2ba0      	cmp	r3, #160	; 0xa0
 8007210:	d902      	bls.n	8007218 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007212:	2302      	movs	r3, #2
 8007214:	613b      	str	r3, [r7, #16]
 8007216:	e013      	b.n	8007240 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007218:	2301      	movs	r3, #1
 800721a:	613b      	str	r3, [r7, #16]
 800721c:	e010      	b.n	8007240 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b80      	cmp	r3, #128	; 0x80
 8007222:	d902      	bls.n	800722a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007224:	2303      	movs	r3, #3
 8007226:	613b      	str	r3, [r7, #16]
 8007228:	e00a      	b.n	8007240 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2b80      	cmp	r3, #128	; 0x80
 800722e:	d102      	bne.n	8007236 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007230:	2302      	movs	r3, #2
 8007232:	613b      	str	r3, [r7, #16]
 8007234:	e004      	b.n	8007240 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2b70      	cmp	r3, #112	; 0x70
 800723a:	d101      	bne.n	8007240 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800723c:	2301      	movs	r3, #1
 800723e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007240:	4b0b      	ldr	r3, [pc, #44]	; (8007270 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f023 0207 	bic.w	r2, r3, #7
 8007248:	4909      	ldr	r1, [pc, #36]	; (8007270 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	4313      	orrs	r3, r2
 800724e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007250:	4b07      	ldr	r3, [pc, #28]	; (8007270 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0307 	and.w	r3, r3, #7
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	429a      	cmp	r2, r3
 800725c:	d001      	beq.n	8007262 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e000      	b.n	8007264 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3718      	adds	r7, #24
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	40021000 	.word	0x40021000
 8007270:	40022000 	.word	0x40022000

08007274 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800727c:	2300      	movs	r3, #0
 800727e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007280:	2300      	movs	r3, #0
 8007282:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800728c:	2b00      	cmp	r3, #0
 800728e:	d041      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007294:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007298:	d02a      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800729a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800729e:	d824      	bhi.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80072a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072a4:	d008      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80072a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072aa:	d81e      	bhi.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00a      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80072b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072b4:	d010      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80072b6:	e018      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80072b8:	4b86      	ldr	r3, [pc, #536]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	4a85      	ldr	r2, [pc, #532]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80072c4:	e015      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	3304      	adds	r3, #4
 80072ca:	2100      	movs	r1, #0
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 facd 	bl	800786c <RCCEx_PLLSAI1_Config>
 80072d2:	4603      	mov	r3, r0
 80072d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80072d6:	e00c      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	3320      	adds	r3, #32
 80072dc:	2100      	movs	r1, #0
 80072de:	4618      	mov	r0, r3
 80072e0:	f000 fbb6 	bl	8007a50 <RCCEx_PLLSAI2_Config>
 80072e4:	4603      	mov	r3, r0
 80072e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80072e8:	e003      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	74fb      	strb	r3, [r7, #19]
      break;
 80072ee:	e000      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80072f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072f2:	7cfb      	ldrb	r3, [r7, #19]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10b      	bne.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80072f8:	4b76      	ldr	r3, [pc, #472]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007306:	4973      	ldr	r1, [pc, #460]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007308:	4313      	orrs	r3, r2
 800730a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800730e:	e001      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007310:	7cfb      	ldrb	r3, [r7, #19]
 8007312:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d041      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007324:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007328:	d02a      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800732a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800732e:	d824      	bhi.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007330:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007334:	d008      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007336:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800733a:	d81e      	bhi.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00a      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007344:	d010      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007346:	e018      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007348:	4b62      	ldr	r3, [pc, #392]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	4a61      	ldr	r2, [pc, #388]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800734e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007352:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007354:	e015      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	3304      	adds	r3, #4
 800735a:	2100      	movs	r1, #0
 800735c:	4618      	mov	r0, r3
 800735e:	f000 fa85 	bl	800786c <RCCEx_PLLSAI1_Config>
 8007362:	4603      	mov	r3, r0
 8007364:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007366:	e00c      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	3320      	adds	r3, #32
 800736c:	2100      	movs	r1, #0
 800736e:	4618      	mov	r0, r3
 8007370:	f000 fb6e 	bl	8007a50 <RCCEx_PLLSAI2_Config>
 8007374:	4603      	mov	r3, r0
 8007376:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007378:	e003      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	74fb      	strb	r3, [r7, #19]
      break;
 800737e:	e000      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007380:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007382:	7cfb      	ldrb	r3, [r7, #19]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10b      	bne.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007388:	4b52      	ldr	r3, [pc, #328]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800738a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800738e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007396:	494f      	ldr	r1, [pc, #316]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007398:	4313      	orrs	r3, r2
 800739a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800739e:	e001      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a0:	7cfb      	ldrb	r3, [r7, #19]
 80073a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 80a0 	beq.w	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073b2:	2300      	movs	r3, #0
 80073b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80073b6:	4b47      	ldr	r3, [pc, #284]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80073c2:	2301      	movs	r3, #1
 80073c4:	e000      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80073c6:	2300      	movs	r3, #0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00d      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073cc:	4b41      	ldr	r3, [pc, #260]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d0:	4a40      	ldr	r2, [pc, #256]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073d6:	6593      	str	r3, [r2, #88]	; 0x58
 80073d8:	4b3e      	ldr	r3, [pc, #248]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073e0:	60bb      	str	r3, [r7, #8]
 80073e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073e4:	2301      	movs	r3, #1
 80073e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073e8:	4b3b      	ldr	r3, [pc, #236]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a3a      	ldr	r2, [pc, #232]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80073ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073f4:	f7fc ff20 	bl	8004238 <HAL_GetTick>
 80073f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80073fa:	e009      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073fc:	f7fc ff1c 	bl	8004238 <HAL_GetTick>
 8007400:	4602      	mov	r2, r0
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	2b02      	cmp	r3, #2
 8007408:	d902      	bls.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	74fb      	strb	r3, [r7, #19]
        break;
 800740e:	e005      	b.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007410:	4b31      	ldr	r3, [pc, #196]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007418:	2b00      	cmp	r3, #0
 800741a:	d0ef      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800741c:	7cfb      	ldrb	r3, [r7, #19]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d15c      	bne.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007422:	4b2c      	ldr	r3, [pc, #176]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007428:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800742c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d01f      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	429a      	cmp	r2, r3
 800743e:	d019      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007440:	4b24      	ldr	r3, [pc, #144]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800744a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800744c:	4b21      	ldr	r3, [pc, #132]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800744e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007452:	4a20      	ldr	r2, [pc, #128]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800745c:	4b1d      	ldr	r3, [pc, #116]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800745e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007462:	4a1c      	ldr	r2, [pc, #112]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800746c:	4a19      	ldr	r2, [pc, #100]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	2b00      	cmp	r3, #0
 800747c:	d016      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800747e:	f7fc fedb 	bl	8004238 <HAL_GetTick>
 8007482:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007484:	e00b      	b.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007486:	f7fc fed7 	bl	8004238 <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	f241 3288 	movw	r2, #5000	; 0x1388
 8007494:	4293      	cmp	r3, r2
 8007496:	d902      	bls.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	74fb      	strb	r3, [r7, #19]
            break;
 800749c:	e006      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800749e:	4b0d      	ldr	r3, [pc, #52]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074a4:	f003 0302 	and.w	r3, r3, #2
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d0ec      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80074ac:	7cfb      	ldrb	r3, [r7, #19]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10c      	bne.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074b2:	4b08      	ldr	r3, [pc, #32]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c2:	4904      	ldr	r1, [pc, #16]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074c4:	4313      	orrs	r3, r2
 80074c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80074ca:	e009      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80074cc:	7cfb      	ldrb	r3, [r7, #19]
 80074ce:	74bb      	strb	r3, [r7, #18]
 80074d0:	e006      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80074d2:	bf00      	nop
 80074d4:	40021000 	.word	0x40021000
 80074d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074dc:	7cfb      	ldrb	r3, [r7, #19]
 80074de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074e0:	7c7b      	ldrb	r3, [r7, #17]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d105      	bne.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074e6:	4ba6      	ldr	r3, [pc, #664]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ea:	4aa5      	ldr	r2, [pc, #660]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00a      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80074fe:	4ba0      	ldr	r3, [pc, #640]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007504:	f023 0203 	bic.w	r2, r3, #3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750c:	499c      	ldr	r1, [pc, #624]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800750e:	4313      	orrs	r3, r2
 8007510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0302 	and.w	r3, r3, #2
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00a      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007520:	4b97      	ldr	r3, [pc, #604]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007526:	f023 020c 	bic.w	r2, r3, #12
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800752e:	4994      	ldr	r1, [pc, #592]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007530:	4313      	orrs	r3, r2
 8007532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0304 	and.w	r3, r3, #4
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00a      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007542:	4b8f      	ldr	r3, [pc, #572]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007548:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007550:	498b      	ldr	r1, [pc, #556]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007552:	4313      	orrs	r3, r2
 8007554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0308 	and.w	r3, r3, #8
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00a      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007564:	4b86      	ldr	r3, [pc, #536]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800756a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007572:	4983      	ldr	r1, [pc, #524]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007574:	4313      	orrs	r3, r2
 8007576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 0310 	and.w	r3, r3, #16
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00a      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007586:	4b7e      	ldr	r3, [pc, #504]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800758c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007594:	497a      	ldr	r1, [pc, #488]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007596:	4313      	orrs	r3, r2
 8007598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 0320 	and.w	r3, r3, #32
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00a      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80075a8:	4b75      	ldr	r3, [pc, #468]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80075aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075b6:	4972      	ldr	r1, [pc, #456]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80075b8:	4313      	orrs	r3, r2
 80075ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00a      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075ca:	4b6d      	ldr	r3, [pc, #436]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80075cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075d8:	4969      	ldr	r1, [pc, #420]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00a      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80075ec:	4b64      	ldr	r3, [pc, #400]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80075ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075fa:	4961      	ldr	r1, [pc, #388]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80075fc:	4313      	orrs	r3, r2
 80075fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00a      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800760e:	4b5c      	ldr	r3, [pc, #368]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007614:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800761c:	4958      	ldr	r1, [pc, #352]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800761e:	4313      	orrs	r3, r2
 8007620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00a      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007630:	4b53      	ldr	r3, [pc, #332]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007636:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800763e:	4950      	ldr	r1, [pc, #320]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007640:	4313      	orrs	r3, r2
 8007642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00a      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007652:	4b4b      	ldr	r3, [pc, #300]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007658:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007660:	4947      	ldr	r1, [pc, #284]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007662:	4313      	orrs	r3, r2
 8007664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00a      	beq.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007674:	4b42      	ldr	r3, [pc, #264]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007676:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800767a:	f023 0203 	bic.w	r2, r3, #3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007682:	493f      	ldr	r1, [pc, #252]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007684:	4313      	orrs	r3, r2
 8007686:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007692:	2b00      	cmp	r3, #0
 8007694:	d028      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007696:	4b3a      	ldr	r3, [pc, #232]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800769c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076a4:	4936      	ldr	r1, [pc, #216]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076b4:	d106      	bne.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076b6:	4b32      	ldr	r3, [pc, #200]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	4a31      	ldr	r2, [pc, #196]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80076bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076c0:	60d3      	str	r3, [r2, #12]
 80076c2:	e011      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076cc:	d10c      	bne.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	3304      	adds	r3, #4
 80076d2:	2101      	movs	r1, #1
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 f8c9 	bl	800786c <RCCEx_PLLSAI1_Config>
 80076da:	4603      	mov	r3, r0
 80076dc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80076de:	7cfb      	ldrb	r3, [r7, #19]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d001      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80076e4:	7cfb      	ldrb	r3, [r7, #19]
 80076e6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d028      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80076f4:	4b22      	ldr	r3, [pc, #136]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80076f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007702:	491f      	ldr	r1, [pc, #124]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007704:	4313      	orrs	r3, r2
 8007706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800770e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007712:	d106      	bne.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007714:	4b1a      	ldr	r3, [pc, #104]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	4a19      	ldr	r2, [pc, #100]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800771a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800771e:	60d3      	str	r3, [r2, #12]
 8007720:	e011      	b.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007726:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800772a:	d10c      	bne.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	3304      	adds	r3, #4
 8007730:	2101      	movs	r1, #1
 8007732:	4618      	mov	r0, r3
 8007734:	f000 f89a 	bl	800786c <RCCEx_PLLSAI1_Config>
 8007738:	4603      	mov	r3, r0
 800773a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800773c:	7cfb      	ldrb	r3, [r7, #19]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d001      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8007742:	7cfb      	ldrb	r3, [r7, #19]
 8007744:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d02a      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007752:	4b0b      	ldr	r3, [pc, #44]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007758:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007760:	4907      	ldr	r1, [pc, #28]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007762:	4313      	orrs	r3, r2
 8007764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800776c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007770:	d108      	bne.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007772:	4b03      	ldr	r3, [pc, #12]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	4a02      	ldr	r2, [pc, #8]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007778:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800777c:	60d3      	str	r3, [r2, #12]
 800777e:	e013      	b.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8007780:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007788:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800778c:	d10c      	bne.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	3304      	adds	r3, #4
 8007792:	2101      	movs	r1, #1
 8007794:	4618      	mov	r0, r3
 8007796:	f000 f869 	bl	800786c <RCCEx_PLLSAI1_Config>
 800779a:	4603      	mov	r3, r0
 800779c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800779e:	7cfb      	ldrb	r3, [r7, #19]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d001      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80077a4:	7cfb      	ldrb	r3, [r7, #19]
 80077a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d02f      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80077b4:	4b2c      	ldr	r3, [pc, #176]	; (8007868 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80077b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077c2:	4929      	ldr	r1, [pc, #164]	; (8007868 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80077c4:	4313      	orrs	r3, r2
 80077c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077d2:	d10d      	bne.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	3304      	adds	r3, #4
 80077d8:	2102      	movs	r1, #2
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 f846 	bl	800786c <RCCEx_PLLSAI1_Config>
 80077e0:	4603      	mov	r3, r0
 80077e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80077e4:	7cfb      	ldrb	r3, [r7, #19]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d014      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80077ea:	7cfb      	ldrb	r3, [r7, #19]
 80077ec:	74bb      	strb	r3, [r7, #18]
 80077ee:	e011      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077f8:	d10c      	bne.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	3320      	adds	r3, #32
 80077fe:	2102      	movs	r1, #2
 8007800:	4618      	mov	r0, r3
 8007802:	f000 f925 	bl	8007a50 <RCCEx_PLLSAI2_Config>
 8007806:	4603      	mov	r3, r0
 8007808:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800780a:	7cfb      	ldrb	r3, [r7, #19]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d001      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8007810:	7cfb      	ldrb	r3, [r7, #19]
 8007812:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00b      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007820:	4b11      	ldr	r3, [pc, #68]	; (8007868 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007826:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007830:	490d      	ldr	r1, [pc, #52]	; (8007868 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007832:	4313      	orrs	r3, r2
 8007834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00b      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007844:	4b08      	ldr	r3, [pc, #32]	; (8007868 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800784a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007854:	4904      	ldr	r1, [pc, #16]	; (8007868 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007856:	4313      	orrs	r3, r2
 8007858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800785c:	7cbb      	ldrb	r3, [r7, #18]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3718      	adds	r7, #24
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	40021000 	.word	0x40021000

0800786c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800787a:	4b74      	ldr	r3, [pc, #464]	; (8007a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f003 0303 	and.w	r3, r3, #3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d018      	beq.n	80078b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007886:	4b71      	ldr	r3, [pc, #452]	; (8007a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	f003 0203 	and.w	r2, r3, #3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	429a      	cmp	r2, r3
 8007894:	d10d      	bne.n	80078b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
       ||
 800789a:	2b00      	cmp	r3, #0
 800789c:	d009      	beq.n	80078b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800789e:	4b6b      	ldr	r3, [pc, #428]	; (8007a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	091b      	lsrs	r3, r3, #4
 80078a4:	f003 0307 	and.w	r3, r3, #7
 80078a8:	1c5a      	adds	r2, r3, #1
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685b      	ldr	r3, [r3, #4]
       ||
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d047      	beq.n	8007942 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	73fb      	strb	r3, [r7, #15]
 80078b6:	e044      	b.n	8007942 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b03      	cmp	r3, #3
 80078be:	d018      	beq.n	80078f2 <RCCEx_PLLSAI1_Config+0x86>
 80078c0:	2b03      	cmp	r3, #3
 80078c2:	d825      	bhi.n	8007910 <RCCEx_PLLSAI1_Config+0xa4>
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d002      	beq.n	80078ce <RCCEx_PLLSAI1_Config+0x62>
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d009      	beq.n	80078e0 <RCCEx_PLLSAI1_Config+0x74>
 80078cc:	e020      	b.n	8007910 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80078ce:	4b5f      	ldr	r3, [pc, #380]	; (8007a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 0302 	and.w	r3, r3, #2
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d11d      	bne.n	8007916 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078de:	e01a      	b.n	8007916 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80078e0:	4b5a      	ldr	r3, [pc, #360]	; (8007a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d116      	bne.n	800791a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078f0:	e013      	b.n	800791a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80078f2:	4b56      	ldr	r3, [pc, #344]	; (8007a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10f      	bne.n	800791e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80078fe:	4b53      	ldr	r3, [pc, #332]	; (8007a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d109      	bne.n	800791e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800790e:	e006      	b.n	800791e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	73fb      	strb	r3, [r7, #15]
      break;
 8007914:	e004      	b.n	8007920 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007916:	bf00      	nop
 8007918:	e002      	b.n	8007920 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800791a:	bf00      	nop
 800791c:	e000      	b.n	8007920 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800791e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007920:	7bfb      	ldrb	r3, [r7, #15]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10d      	bne.n	8007942 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007926:	4b49      	ldr	r3, [pc, #292]	; (8007a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6819      	ldr	r1, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	3b01      	subs	r3, #1
 8007938:	011b      	lsls	r3, r3, #4
 800793a:	430b      	orrs	r3, r1
 800793c:	4943      	ldr	r1, [pc, #268]	; (8007a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800793e:	4313      	orrs	r3, r2
 8007940:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007942:	7bfb      	ldrb	r3, [r7, #15]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d17c      	bne.n	8007a42 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007948:	4b40      	ldr	r3, [pc, #256]	; (8007a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a3f      	ldr	r2, [pc, #252]	; (8007a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800794e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007952:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007954:	f7fc fc70 	bl	8004238 <HAL_GetTick>
 8007958:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800795a:	e009      	b.n	8007970 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800795c:	f7fc fc6c 	bl	8004238 <HAL_GetTick>
 8007960:	4602      	mov	r2, r0
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	2b02      	cmp	r3, #2
 8007968:	d902      	bls.n	8007970 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	73fb      	strb	r3, [r7, #15]
        break;
 800796e:	e005      	b.n	800797c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007970:	4b36      	ldr	r3, [pc, #216]	; (8007a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1ef      	bne.n	800795c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800797c:	7bfb      	ldrb	r3, [r7, #15]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d15f      	bne.n	8007a42 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d110      	bne.n	80079aa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007988:	4b30      	ldr	r3, [pc, #192]	; (8007a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007990:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	6892      	ldr	r2, [r2, #8]
 8007998:	0211      	lsls	r1, r2, #8
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	68d2      	ldr	r2, [r2, #12]
 800799e:	06d2      	lsls	r2, r2, #27
 80079a0:	430a      	orrs	r2, r1
 80079a2:	492a      	ldr	r1, [pc, #168]	; (8007a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 80079a4:	4313      	orrs	r3, r2
 80079a6:	610b      	str	r3, [r1, #16]
 80079a8:	e027      	b.n	80079fa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d112      	bne.n	80079d6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80079b0:	4b26      	ldr	r3, [pc, #152]	; (8007a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80079b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	6892      	ldr	r2, [r2, #8]
 80079c0:	0211      	lsls	r1, r2, #8
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	6912      	ldr	r2, [r2, #16]
 80079c6:	0852      	lsrs	r2, r2, #1
 80079c8:	3a01      	subs	r2, #1
 80079ca:	0552      	lsls	r2, r2, #21
 80079cc:	430a      	orrs	r2, r1
 80079ce:	491f      	ldr	r1, [pc, #124]	; (8007a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 80079d0:	4313      	orrs	r3, r2
 80079d2:	610b      	str	r3, [r1, #16]
 80079d4:	e011      	b.n	80079fa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80079d6:	4b1d      	ldr	r3, [pc, #116]	; (8007a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80079de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	6892      	ldr	r2, [r2, #8]
 80079e6:	0211      	lsls	r1, r2, #8
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	6952      	ldr	r2, [r2, #20]
 80079ec:	0852      	lsrs	r2, r2, #1
 80079ee:	3a01      	subs	r2, #1
 80079f0:	0652      	lsls	r2, r2, #25
 80079f2:	430a      	orrs	r2, r1
 80079f4:	4915      	ldr	r1, [pc, #84]	; (8007a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 80079f6:	4313      	orrs	r3, r2
 80079f8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80079fa:	4b14      	ldr	r3, [pc, #80]	; (8007a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a13      	ldr	r2, [pc, #76]	; (8007a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a04:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a06:	f7fc fc17 	bl	8004238 <HAL_GetTick>
 8007a0a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007a0c:	e009      	b.n	8007a22 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007a0e:	f7fc fc13 	bl	8004238 <HAL_GetTick>
 8007a12:	4602      	mov	r2, r0
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d902      	bls.n	8007a22 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	73fb      	strb	r3, [r7, #15]
          break;
 8007a20:	e005      	b.n	8007a2e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007a22:	4b0a      	ldr	r3, [pc, #40]	; (8007a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d0ef      	beq.n	8007a0e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007a2e:	7bfb      	ldrb	r3, [r7, #15]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d106      	bne.n	8007a42 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007a34:	4b05      	ldr	r3, [pc, #20]	; (8007a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a36:	691a      	ldr	r2, [r3, #16]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	699b      	ldr	r3, [r3, #24]
 8007a3c:	4903      	ldr	r1, [pc, #12]	; (8007a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	40021000 	.word	0x40021000

08007a50 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007a5e:	4b69      	ldr	r3, [pc, #420]	; (8007c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	f003 0303 	and.w	r3, r3, #3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d018      	beq.n	8007a9c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007a6a:	4b66      	ldr	r3, [pc, #408]	; (8007c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	f003 0203 	and.w	r2, r3, #3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d10d      	bne.n	8007a96 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
       ||
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d009      	beq.n	8007a96 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007a82:	4b60      	ldr	r3, [pc, #384]	; (8007c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	091b      	lsrs	r3, r3, #4
 8007a88:	f003 0307 	and.w	r3, r3, #7
 8007a8c:	1c5a      	adds	r2, r3, #1
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	685b      	ldr	r3, [r3, #4]
       ||
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d047      	beq.n	8007b26 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	73fb      	strb	r3, [r7, #15]
 8007a9a:	e044      	b.n	8007b26 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d018      	beq.n	8007ad6 <RCCEx_PLLSAI2_Config+0x86>
 8007aa4:	2b03      	cmp	r3, #3
 8007aa6:	d825      	bhi.n	8007af4 <RCCEx_PLLSAI2_Config+0xa4>
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d002      	beq.n	8007ab2 <RCCEx_PLLSAI2_Config+0x62>
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d009      	beq.n	8007ac4 <RCCEx_PLLSAI2_Config+0x74>
 8007ab0:	e020      	b.n	8007af4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007ab2:	4b54      	ldr	r3, [pc, #336]	; (8007c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 0302 	and.w	r3, r3, #2
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d11d      	bne.n	8007afa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ac2:	e01a      	b.n	8007afa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007ac4:	4b4f      	ldr	r3, [pc, #316]	; (8007c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d116      	bne.n	8007afe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ad4:	e013      	b.n	8007afe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007ad6:	4b4b      	ldr	r3, [pc, #300]	; (8007c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10f      	bne.n	8007b02 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007ae2:	4b48      	ldr	r3, [pc, #288]	; (8007c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d109      	bne.n	8007b02 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007af2:	e006      	b.n	8007b02 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	73fb      	strb	r3, [r7, #15]
      break;
 8007af8:	e004      	b.n	8007b04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007afa:	bf00      	nop
 8007afc:	e002      	b.n	8007b04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007afe:	bf00      	nop
 8007b00:	e000      	b.n	8007b04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007b02:	bf00      	nop
    }

    if(status == HAL_OK)
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d10d      	bne.n	8007b26 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007b0a:	4b3e      	ldr	r3, [pc, #248]	; (8007c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6819      	ldr	r1, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	011b      	lsls	r3, r3, #4
 8007b1e:	430b      	orrs	r3, r1
 8007b20:	4938      	ldr	r1, [pc, #224]	; (8007c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007b22:	4313      	orrs	r3, r2
 8007b24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007b26:	7bfb      	ldrb	r3, [r7, #15]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d166      	bne.n	8007bfa <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007b2c:	4b35      	ldr	r3, [pc, #212]	; (8007c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a34      	ldr	r2, [pc, #208]	; (8007c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007b32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b38:	f7fc fb7e 	bl	8004238 <HAL_GetTick>
 8007b3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007b3e:	e009      	b.n	8007b54 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007b40:	f7fc fb7a 	bl	8004238 <HAL_GetTick>
 8007b44:	4602      	mov	r2, r0
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d902      	bls.n	8007b54 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	73fb      	strb	r3, [r7, #15]
        break;
 8007b52:	e005      	b.n	8007b60 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007b54:	4b2b      	ldr	r3, [pc, #172]	; (8007c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1ef      	bne.n	8007b40 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d149      	bne.n	8007bfa <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d110      	bne.n	8007b8e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007b6c:	4b25      	ldr	r3, [pc, #148]	; (8007c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007b6e:	695b      	ldr	r3, [r3, #20]
 8007b70:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007b74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	6892      	ldr	r2, [r2, #8]
 8007b7c:	0211      	lsls	r1, r2, #8
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	68d2      	ldr	r2, [r2, #12]
 8007b82:	06d2      	lsls	r2, r2, #27
 8007b84:	430a      	orrs	r2, r1
 8007b86:	491f      	ldr	r1, [pc, #124]	; (8007c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	614b      	str	r3, [r1, #20]
 8007b8c:	e011      	b.n	8007bb2 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007b8e:	4b1d      	ldr	r3, [pc, #116]	; (8007c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007b96:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	6892      	ldr	r2, [r2, #8]
 8007b9e:	0211      	lsls	r1, r2, #8
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	6912      	ldr	r2, [r2, #16]
 8007ba4:	0852      	lsrs	r2, r2, #1
 8007ba6:	3a01      	subs	r2, #1
 8007ba8:	0652      	lsls	r2, r2, #25
 8007baa:	430a      	orrs	r2, r1
 8007bac:	4915      	ldr	r1, [pc, #84]	; (8007c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007bb2:	4b14      	ldr	r3, [pc, #80]	; (8007c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a13      	ldr	r2, [pc, #76]	; (8007c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bbc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bbe:	f7fc fb3b 	bl	8004238 <HAL_GetTick>
 8007bc2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007bc4:	e009      	b.n	8007bda <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007bc6:	f7fc fb37 	bl	8004238 <HAL_GetTick>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d902      	bls.n	8007bda <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	73fb      	strb	r3, [r7, #15]
          break;
 8007bd8:	e005      	b.n	8007be6 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007bda:	4b0a      	ldr	r3, [pc, #40]	; (8007c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d0ef      	beq.n	8007bc6 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8007be6:	7bfb      	ldrb	r3, [r7, #15]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d106      	bne.n	8007bfa <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007bec:	4b05      	ldr	r3, [pc, #20]	; (8007c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007bee:	695a      	ldr	r2, [r3, #20]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	695b      	ldr	r3, [r3, #20]
 8007bf4:	4903      	ldr	r1, [pc, #12]	; (8007c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	40021000 	.word	0x40021000

08007c08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d101      	bne.n	8007c1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e095      	b.n	8007d46 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d108      	bne.n	8007c34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c2a:	d009      	beq.n	8007c40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	61da      	str	r2, [r3, #28]
 8007c32:	e005      	b.n	8007c40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d106      	bne.n	8007c60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7fb ffce 	bl	8003bfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2202      	movs	r2, #2
 8007c64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c80:	d902      	bls.n	8007c88 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007c82:	2300      	movs	r3, #0
 8007c84:	60fb      	str	r3, [r7, #12]
 8007c86:	e002      	b.n	8007c8e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c8c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007c96:	d007      	beq.n	8007ca8 <HAL_SPI_Init+0xa0>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ca0:	d002      	beq.n	8007ca8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007cb8:	431a      	orrs	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	f003 0302 	and.w	r3, r3, #2
 8007cc2:	431a      	orrs	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	695b      	ldr	r3, [r3, #20]
 8007cc8:	f003 0301 	and.w	r3, r3, #1
 8007ccc:	431a      	orrs	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	699b      	ldr	r3, [r3, #24]
 8007cd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cd6:	431a      	orrs	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	69db      	ldr	r3, [r3, #28]
 8007cdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ce0:	431a      	orrs	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cea:	ea42 0103 	orr.w	r1, r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	430a      	orrs	r2, r1
 8007cfc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	0c1b      	lsrs	r3, r3, #16
 8007d04:	f003 0204 	and.w	r2, r3, #4
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0c:	f003 0310 	and.w	r3, r3, #16
 8007d10:	431a      	orrs	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d16:	f003 0308 	and.w	r3, r3, #8
 8007d1a:	431a      	orrs	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007d24:	ea42 0103 	orr.w	r1, r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	430a      	orrs	r2, r1
 8007d34:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b08a      	sub	sp, #40	; 0x28
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	60f8      	str	r0, [r7, #12]
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	607a      	str	r2, [r7, #4]
 8007d5a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007d60:	2300      	movs	r3, #0
 8007d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d101      	bne.n	8007d74 <HAL_SPI_TransmitReceive+0x26>
 8007d70:	2302      	movs	r3, #2
 8007d72:	e20a      	b.n	800818a <HAL_SPI_TransmitReceive+0x43c>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d7c:	f7fc fa5c 	bl	8004238 <HAL_GetTick>
 8007d80:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d88:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007d90:	887b      	ldrh	r3, [r7, #2]
 8007d92:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007d94:	887b      	ldrh	r3, [r7, #2]
 8007d96:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d98:	7efb      	ldrb	r3, [r7, #27]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d00e      	beq.n	8007dbc <HAL_SPI_TransmitReceive+0x6e>
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007da4:	d106      	bne.n	8007db4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d102      	bne.n	8007db4 <HAL_SPI_TransmitReceive+0x66>
 8007dae:	7efb      	ldrb	r3, [r7, #27]
 8007db0:	2b04      	cmp	r3, #4
 8007db2:	d003      	beq.n	8007dbc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007db4:	2302      	movs	r3, #2
 8007db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007dba:	e1e0      	b.n	800817e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d005      	beq.n	8007dce <HAL_SPI_TransmitReceive+0x80>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d002      	beq.n	8007dce <HAL_SPI_TransmitReceive+0x80>
 8007dc8:	887b      	ldrh	r3, [r7, #2]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d103      	bne.n	8007dd6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007dd4:	e1d3      	b.n	800817e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b04      	cmp	r3, #4
 8007de0:	d003      	beq.n	8007dea <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2205      	movs	r2, #5
 8007de6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	887a      	ldrh	r2, [r7, #2]
 8007dfa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	887a      	ldrh	r2, [r7, #2]
 8007e02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	887a      	ldrh	r2, [r7, #2]
 8007e10:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	887a      	ldrh	r2, [r7, #2]
 8007e16:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2200      	movs	r2, #0
 8007e22:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e2c:	d802      	bhi.n	8007e34 <HAL_SPI_TransmitReceive+0xe6>
 8007e2e:	8a3b      	ldrh	r3, [r7, #16]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d908      	bls.n	8007e46 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	685a      	ldr	r2, [r3, #4]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e42:	605a      	str	r2, [r3, #4]
 8007e44:	e007      	b.n	8007e56 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	685a      	ldr	r2, [r3, #4]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e54:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e60:	2b40      	cmp	r3, #64	; 0x40
 8007e62:	d007      	beq.n	8007e74 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e7c:	f240 8081 	bls.w	8007f82 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d002      	beq.n	8007e8e <HAL_SPI_TransmitReceive+0x140>
 8007e88:	8a7b      	ldrh	r3, [r7, #18]
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d16d      	bne.n	8007f6a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e92:	881a      	ldrh	r2, [r3, #0]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9e:	1c9a      	adds	r2, r3, #2
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007eb2:	e05a      	b.n	8007f6a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f003 0302 	and.w	r3, r3, #2
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d11b      	bne.n	8007efa <HAL_SPI_TransmitReceive+0x1ac>
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d016      	beq.n	8007efa <HAL_SPI_TransmitReceive+0x1ac>
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d113      	bne.n	8007efa <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed6:	881a      	ldrh	r2, [r3, #0]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee2:	1c9a      	adds	r2, r3, #2
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	f003 0301 	and.w	r3, r3, #1
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d11c      	bne.n	8007f42 <HAL_SPI_TransmitReceive+0x1f4>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d016      	beq.n	8007f42 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68da      	ldr	r2, [r3, #12]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1e:	b292      	uxth	r2, r2
 8007f20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f26:	1c9a      	adds	r2, r3, #2
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	3b01      	subs	r3, #1
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007f42:	f7fc f979 	bl	8004238 <HAL_GetTick>
 8007f46:	4602      	mov	r2, r0
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d80b      	bhi.n	8007f6a <HAL_SPI_TransmitReceive+0x21c>
 8007f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f58:	d007      	beq.n	8007f6a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007f68:	e109      	b.n	800817e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d19f      	bne.n	8007eb4 <HAL_SPI_TransmitReceive+0x166>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d199      	bne.n	8007eb4 <HAL_SPI_TransmitReceive+0x166>
 8007f80:	e0e3      	b.n	800814a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d003      	beq.n	8007f92 <HAL_SPI_TransmitReceive+0x244>
 8007f8a:	8a7b      	ldrh	r3, [r7, #18]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	f040 80cf 	bne.w	8008130 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d912      	bls.n	8007fc2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa0:	881a      	ldrh	r2, [r3, #0]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fac:	1c9a      	adds	r2, r3, #2
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	3b02      	subs	r3, #2
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007fc0:	e0b6      	b.n	8008130 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	330c      	adds	r3, #12
 8007fcc:	7812      	ldrb	r2, [r2, #0]
 8007fce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd4:	1c5a      	adds	r2, r3, #1
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fe8:	e0a2      	b.n	8008130 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	f003 0302 	and.w	r3, r3, #2
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d134      	bne.n	8008062 <HAL_SPI_TransmitReceive+0x314>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d02f      	beq.n	8008062 <HAL_SPI_TransmitReceive+0x314>
 8008002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008004:	2b01      	cmp	r3, #1
 8008006:	d12c      	bne.n	8008062 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800800c:	b29b      	uxth	r3, r3
 800800e:	2b01      	cmp	r3, #1
 8008010:	d912      	bls.n	8008038 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008016:	881a      	ldrh	r2, [r3, #0]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008022:	1c9a      	adds	r2, r3, #2
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800802c:	b29b      	uxth	r3, r3
 800802e:	3b02      	subs	r3, #2
 8008030:	b29a      	uxth	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008036:	e012      	b.n	800805e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	330c      	adds	r3, #12
 8008042:	7812      	ldrb	r2, [r2, #0]
 8008044:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804a:	1c5a      	adds	r2, r3, #1
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008054:	b29b      	uxth	r3, r3
 8008056:	3b01      	subs	r3, #1
 8008058:	b29a      	uxth	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800805e:	2300      	movs	r3, #0
 8008060:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	f003 0301 	and.w	r3, r3, #1
 800806c:	2b01      	cmp	r3, #1
 800806e:	d148      	bne.n	8008102 <HAL_SPI_TransmitReceive+0x3b4>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008076:	b29b      	uxth	r3, r3
 8008078:	2b00      	cmp	r3, #0
 800807a:	d042      	beq.n	8008102 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008082:	b29b      	uxth	r3, r3
 8008084:	2b01      	cmp	r3, #1
 8008086:	d923      	bls.n	80080d0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68da      	ldr	r2, [r3, #12]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008092:	b292      	uxth	r2, r2
 8008094:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809a:	1c9a      	adds	r2, r3, #2
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	3b02      	subs	r3, #2
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d81f      	bhi.n	80080fe <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	685a      	ldr	r2, [r3, #4]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80080cc:	605a      	str	r2, [r3, #4]
 80080ce:	e016      	b.n	80080fe <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f103 020c 	add.w	r2, r3, #12
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080dc:	7812      	ldrb	r2, [r2, #0]
 80080de:	b2d2      	uxtb	r2, r2
 80080e0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e6:	1c5a      	adds	r2, r3, #1
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	3b01      	subs	r3, #1
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80080fe:	2301      	movs	r3, #1
 8008100:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008102:	f7fc f899 	bl	8004238 <HAL_GetTick>
 8008106:	4602      	mov	r2, r0
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	1ad3      	subs	r3, r2, r3
 800810c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800810e:	429a      	cmp	r2, r3
 8008110:	d803      	bhi.n	800811a <HAL_SPI_TransmitReceive+0x3cc>
 8008112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008114:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008118:	d102      	bne.n	8008120 <HAL_SPI_TransmitReceive+0x3d2>
 800811a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811c:	2b00      	cmp	r3, #0
 800811e:	d107      	bne.n	8008130 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800812e:	e026      	b.n	800817e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008134:	b29b      	uxth	r3, r3
 8008136:	2b00      	cmp	r3, #0
 8008138:	f47f af57 	bne.w	8007fea <HAL_SPI_TransmitReceive+0x29c>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008142:	b29b      	uxth	r3, r3
 8008144:	2b00      	cmp	r3, #0
 8008146:	f47f af50 	bne.w	8007fea <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800814a:	69fa      	ldr	r2, [r7, #28]
 800814c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f000 f93e 	bl	80083d0 <SPI_EndRxTxTransaction>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d005      	beq.n	8008166 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2220      	movs	r2, #32
 8008164:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800816a:	2b00      	cmp	r3, #0
 800816c:	d003      	beq.n	8008176 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008174:	e003      	b.n	800817e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008186:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800818a:	4618      	mov	r0, r3
 800818c:	3728      	adds	r7, #40	; 0x28
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
	...

08008194 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b088      	sub	sp, #32
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	603b      	str	r3, [r7, #0]
 80081a0:	4613      	mov	r3, r2
 80081a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80081a4:	f7fc f848 	bl	8004238 <HAL_GetTick>
 80081a8:	4602      	mov	r2, r0
 80081aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ac:	1a9b      	subs	r3, r3, r2
 80081ae:	683a      	ldr	r2, [r7, #0]
 80081b0:	4413      	add	r3, r2
 80081b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80081b4:	f7fc f840 	bl	8004238 <HAL_GetTick>
 80081b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80081ba:	4b39      	ldr	r3, [pc, #228]	; (80082a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	015b      	lsls	r3, r3, #5
 80081c0:	0d1b      	lsrs	r3, r3, #20
 80081c2:	69fa      	ldr	r2, [r7, #28]
 80081c4:	fb02 f303 	mul.w	r3, r2, r3
 80081c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80081ca:	e054      	b.n	8008276 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081d2:	d050      	beq.n	8008276 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80081d4:	f7fc f830 	bl	8004238 <HAL_GetTick>
 80081d8:	4602      	mov	r2, r0
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	1ad3      	subs	r3, r2, r3
 80081de:	69fa      	ldr	r2, [r7, #28]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d902      	bls.n	80081ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d13d      	bne.n	8008266 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	685a      	ldr	r2, [r3, #4]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80081f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008202:	d111      	bne.n	8008228 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800820c:	d004      	beq.n	8008218 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008216:	d107      	bne.n	8008228 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008226:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800822c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008230:	d10f      	bne.n	8008252 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008240:	601a      	str	r2, [r3, #0]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008250:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008262:	2303      	movs	r3, #3
 8008264:	e017      	b.n	8008296 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d101      	bne.n	8008270 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800826c:	2300      	movs	r3, #0
 800826e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	3b01      	subs	r3, #1
 8008274:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	689a      	ldr	r2, [r3, #8]
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	4013      	ands	r3, r2
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	429a      	cmp	r2, r3
 8008284:	bf0c      	ite	eq
 8008286:	2301      	moveq	r3, #1
 8008288:	2300      	movne	r3, #0
 800828a:	b2db      	uxtb	r3, r3
 800828c:	461a      	mov	r2, r3
 800828e:	79fb      	ldrb	r3, [r7, #7]
 8008290:	429a      	cmp	r2, r3
 8008292:	d19b      	bne.n	80081cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3720      	adds	r7, #32
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	20002f94 	.word	0x20002f94

080082a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b08a      	sub	sp, #40	; 0x28
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	607a      	str	r2, [r7, #4]
 80082b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80082b2:	2300      	movs	r3, #0
 80082b4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80082b6:	f7fb ffbf 	bl	8004238 <HAL_GetTick>
 80082ba:	4602      	mov	r2, r0
 80082bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082be:	1a9b      	subs	r3, r3, r2
 80082c0:	683a      	ldr	r2, [r7, #0]
 80082c2:	4413      	add	r3, r2
 80082c4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80082c6:	f7fb ffb7 	bl	8004238 <HAL_GetTick>
 80082ca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	330c      	adds	r3, #12
 80082d2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80082d4:	4b3d      	ldr	r3, [pc, #244]	; (80083cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	4613      	mov	r3, r2
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	4413      	add	r3, r2
 80082de:	00da      	lsls	r2, r3, #3
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	0d1b      	lsrs	r3, r3, #20
 80082e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082e6:	fb02 f303 	mul.w	r3, r2, r3
 80082ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80082ec:	e060      	b.n	80083b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80082f4:	d107      	bne.n	8008306 <SPI_WaitFifoStateUntilTimeout+0x62>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d104      	bne.n	8008306 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	b2db      	uxtb	r3, r3
 8008302:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008304:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800830c:	d050      	beq.n	80083b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800830e:	f7fb ff93 	bl	8004238 <HAL_GetTick>
 8008312:	4602      	mov	r2, r0
 8008314:	6a3b      	ldr	r3, [r7, #32]
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800831a:	429a      	cmp	r2, r3
 800831c:	d902      	bls.n	8008324 <SPI_WaitFifoStateUntilTimeout+0x80>
 800831e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008320:	2b00      	cmp	r3, #0
 8008322:	d13d      	bne.n	80083a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	685a      	ldr	r2, [r3, #4]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008332:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800833c:	d111      	bne.n	8008362 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008346:	d004      	beq.n	8008352 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008350:	d107      	bne.n	8008362 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008360:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800836a:	d10f      	bne.n	800838c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800838a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800839c:	2303      	movs	r3, #3
 800839e:	e010      	b.n	80083c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d101      	bne.n	80083aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80083a6:	2300      	movs	r3, #0
 80083a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	3b01      	subs	r3, #1
 80083ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	689a      	ldr	r2, [r3, #8]
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	4013      	ands	r3, r2
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d196      	bne.n	80082ee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3728      	adds	r7, #40	; 0x28
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	20002f94 	.word	0x20002f94

080083d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af02      	add	r7, sp, #8
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	2200      	movs	r2, #0
 80083e4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f7ff ff5b 	bl	80082a4 <SPI_WaitFifoStateUntilTimeout>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d007      	beq.n	8008404 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083f8:	f043 0220 	orr.w	r2, r3, #32
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	e027      	b.n	8008454 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	2200      	movs	r2, #0
 800840c:	2180      	movs	r1, #128	; 0x80
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f7ff fec0 	bl	8008194 <SPI_WaitFlagStateUntilTimeout>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d007      	beq.n	800842a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800841e:	f043 0220 	orr.w	r2, r3, #32
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008426:	2303      	movs	r3, #3
 8008428:	e014      	b.n	8008454 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	2200      	movs	r2, #0
 8008432:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f7ff ff34 	bl	80082a4 <SPI_WaitFifoStateUntilTimeout>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d007      	beq.n	8008452 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008446:	f043 0220 	orr.w	r2, r3, #32
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800844e:	2303      	movs	r3, #3
 8008450:	e000      	b.n	8008454 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e049      	b.n	8008502 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b00      	cmp	r3, #0
 8008478:	d106      	bne.n	8008488 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7fb fd44 	bl	8003f10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2202      	movs	r2, #2
 800848c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	3304      	adds	r3, #4
 8008498:	4619      	mov	r1, r3
 800849a:	4610      	mov	r0, r2
 800849c:	f000 fa9c 	bl	80089d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3708      	adds	r7, #8
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
	...

0800850c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b01      	cmp	r3, #1
 800851e:	d001      	beq.n	8008524 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e047      	b.n	80085b4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2202      	movs	r2, #2
 8008528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a23      	ldr	r2, [pc, #140]	; (80085c0 <HAL_TIM_Base_Start+0xb4>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d01d      	beq.n	8008572 <HAL_TIM_Base_Start+0x66>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800853e:	d018      	beq.n	8008572 <HAL_TIM_Base_Start+0x66>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a1f      	ldr	r2, [pc, #124]	; (80085c4 <HAL_TIM_Base_Start+0xb8>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d013      	beq.n	8008572 <HAL_TIM_Base_Start+0x66>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a1e      	ldr	r2, [pc, #120]	; (80085c8 <HAL_TIM_Base_Start+0xbc>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d00e      	beq.n	8008572 <HAL_TIM_Base_Start+0x66>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a1c      	ldr	r2, [pc, #112]	; (80085cc <HAL_TIM_Base_Start+0xc0>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d009      	beq.n	8008572 <HAL_TIM_Base_Start+0x66>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a1b      	ldr	r2, [pc, #108]	; (80085d0 <HAL_TIM_Base_Start+0xc4>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d004      	beq.n	8008572 <HAL_TIM_Base_Start+0x66>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a19      	ldr	r2, [pc, #100]	; (80085d4 <HAL_TIM_Base_Start+0xc8>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d115      	bne.n	800859e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	689a      	ldr	r2, [r3, #8]
 8008578:	4b17      	ldr	r3, [pc, #92]	; (80085d8 <HAL_TIM_Base_Start+0xcc>)
 800857a:	4013      	ands	r3, r2
 800857c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2b06      	cmp	r3, #6
 8008582:	d015      	beq.n	80085b0 <HAL_TIM_Base_Start+0xa4>
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800858a:	d011      	beq.n	80085b0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f042 0201 	orr.w	r2, r2, #1
 800859a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800859c:	e008      	b.n	80085b0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f042 0201 	orr.w	r2, r2, #1
 80085ac:	601a      	str	r2, [r3, #0]
 80085ae:	e000      	b.n	80085b2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3714      	adds	r7, #20
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr
 80085c0:	40012c00 	.word	0x40012c00
 80085c4:	40000400 	.word	0x40000400
 80085c8:	40000800 	.word	0x40000800
 80085cc:	40000c00 	.word	0x40000c00
 80085d0:	40013400 	.word	0x40013400
 80085d4:	40014000 	.word	0x40014000
 80085d8:	00010007 	.word	0x00010007

080085dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	f003 0302 	and.w	r3, r3, #2
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d020      	beq.n	8008640 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f003 0302 	and.w	r3, r3, #2
 8008604:	2b00      	cmp	r3, #0
 8008606:	d01b      	beq.n	8008640 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f06f 0202 	mvn.w	r2, #2
 8008610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2201      	movs	r2, #1
 8008616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	f003 0303 	and.w	r3, r3, #3
 8008622:	2b00      	cmp	r3, #0
 8008624:	d003      	beq.n	800862e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f9b7 	bl	800899a <HAL_TIM_IC_CaptureCallback>
 800862c:	e005      	b.n	800863a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f9a9 	bl	8008986 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 f9ba 	bl	80089ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	f003 0304 	and.w	r3, r3, #4
 8008646:	2b00      	cmp	r3, #0
 8008648:	d020      	beq.n	800868c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f003 0304 	and.w	r3, r3, #4
 8008650:	2b00      	cmp	r3, #0
 8008652:	d01b      	beq.n	800868c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f06f 0204 	mvn.w	r2, #4
 800865c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2202      	movs	r2, #2
 8008662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800866e:	2b00      	cmp	r3, #0
 8008670:	d003      	beq.n	800867a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f991 	bl	800899a <HAL_TIM_IC_CaptureCallback>
 8008678:	e005      	b.n	8008686 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 f983 	bl	8008986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f994 	bl	80089ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	f003 0308 	and.w	r3, r3, #8
 8008692:	2b00      	cmp	r3, #0
 8008694:	d020      	beq.n	80086d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f003 0308 	and.w	r3, r3, #8
 800869c:	2b00      	cmp	r3, #0
 800869e:	d01b      	beq.n	80086d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f06f 0208 	mvn.w	r2, #8
 80086a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2204      	movs	r2, #4
 80086ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	69db      	ldr	r3, [r3, #28]
 80086b6:	f003 0303 	and.w	r3, r3, #3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d003      	beq.n	80086c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 f96b 	bl	800899a <HAL_TIM_IC_CaptureCallback>
 80086c4:	e005      	b.n	80086d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 f95d 	bl	8008986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 f96e 	bl	80089ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	f003 0310 	and.w	r3, r3, #16
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d020      	beq.n	8008724 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f003 0310 	and.w	r3, r3, #16
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d01b      	beq.n	8008724 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f06f 0210 	mvn.w	r2, #16
 80086f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2208      	movs	r2, #8
 80086fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	69db      	ldr	r3, [r3, #28]
 8008702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008706:	2b00      	cmp	r3, #0
 8008708:	d003      	beq.n	8008712 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f945 	bl	800899a <HAL_TIM_IC_CaptureCallback>
 8008710:	e005      	b.n	800871e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 f937 	bl	8008986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 f948 	bl	80089ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00c      	beq.n	8008748 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f003 0301 	and.w	r3, r3, #1
 8008734:	2b00      	cmp	r3, #0
 8008736:	d007      	beq.n	8008748 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f06f 0201 	mvn.w	r2, #1
 8008740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 f915 	bl	8008972 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00c      	beq.n	800876c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008758:	2b00      	cmp	r3, #0
 800875a:	d007      	beq.n	800876c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fafc 	bl	8008d64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00c      	beq.n	8008790 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800877c:	2b00      	cmp	r3, #0
 800877e:	d007      	beq.n	8008790 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 faf4 	bl	8008d78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00c      	beq.n	80087b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d007      	beq.n	80087b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80087ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f907 	bl	80089c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	f003 0320 	and.w	r3, r3, #32
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00c      	beq.n	80087d8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f003 0320 	and.w	r3, r3, #32
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d007      	beq.n	80087d8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f06f 0220 	mvn.w	r2, #32
 80087d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fabc 	bl	8008d50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087d8:	bf00      	nop
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087ea:	2300      	movs	r3, #0
 80087ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d101      	bne.n	80087fc <HAL_TIM_ConfigClockSource+0x1c>
 80087f8:	2302      	movs	r3, #2
 80087fa:	e0b6      	b.n	800896a <HAL_TIM_ConfigClockSource+0x18a>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2202      	movs	r2, #2
 8008808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800881a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800881e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008826:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008838:	d03e      	beq.n	80088b8 <HAL_TIM_ConfigClockSource+0xd8>
 800883a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800883e:	f200 8087 	bhi.w	8008950 <HAL_TIM_ConfigClockSource+0x170>
 8008842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008846:	f000 8086 	beq.w	8008956 <HAL_TIM_ConfigClockSource+0x176>
 800884a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800884e:	d87f      	bhi.n	8008950 <HAL_TIM_ConfigClockSource+0x170>
 8008850:	2b70      	cmp	r3, #112	; 0x70
 8008852:	d01a      	beq.n	800888a <HAL_TIM_ConfigClockSource+0xaa>
 8008854:	2b70      	cmp	r3, #112	; 0x70
 8008856:	d87b      	bhi.n	8008950 <HAL_TIM_ConfigClockSource+0x170>
 8008858:	2b60      	cmp	r3, #96	; 0x60
 800885a:	d050      	beq.n	80088fe <HAL_TIM_ConfigClockSource+0x11e>
 800885c:	2b60      	cmp	r3, #96	; 0x60
 800885e:	d877      	bhi.n	8008950 <HAL_TIM_ConfigClockSource+0x170>
 8008860:	2b50      	cmp	r3, #80	; 0x50
 8008862:	d03c      	beq.n	80088de <HAL_TIM_ConfigClockSource+0xfe>
 8008864:	2b50      	cmp	r3, #80	; 0x50
 8008866:	d873      	bhi.n	8008950 <HAL_TIM_ConfigClockSource+0x170>
 8008868:	2b40      	cmp	r3, #64	; 0x40
 800886a:	d058      	beq.n	800891e <HAL_TIM_ConfigClockSource+0x13e>
 800886c:	2b40      	cmp	r3, #64	; 0x40
 800886e:	d86f      	bhi.n	8008950 <HAL_TIM_ConfigClockSource+0x170>
 8008870:	2b30      	cmp	r3, #48	; 0x30
 8008872:	d064      	beq.n	800893e <HAL_TIM_ConfigClockSource+0x15e>
 8008874:	2b30      	cmp	r3, #48	; 0x30
 8008876:	d86b      	bhi.n	8008950 <HAL_TIM_ConfigClockSource+0x170>
 8008878:	2b20      	cmp	r3, #32
 800887a:	d060      	beq.n	800893e <HAL_TIM_ConfigClockSource+0x15e>
 800887c:	2b20      	cmp	r3, #32
 800887e:	d867      	bhi.n	8008950 <HAL_TIM_ConfigClockSource+0x170>
 8008880:	2b00      	cmp	r3, #0
 8008882:	d05c      	beq.n	800893e <HAL_TIM_ConfigClockSource+0x15e>
 8008884:	2b10      	cmp	r3, #16
 8008886:	d05a      	beq.n	800893e <HAL_TIM_ConfigClockSource+0x15e>
 8008888:	e062      	b.n	8008950 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800889a:	f000 f9b1 	bl	8008c00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80088ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	609a      	str	r2, [r3, #8]
      break;
 80088b6:	e04f      	b.n	8008958 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80088c8:	f000 f99a 	bl	8008c00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	689a      	ldr	r2, [r3, #8]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80088da:	609a      	str	r2, [r3, #8]
      break;
 80088dc:	e03c      	b.n	8008958 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088ea:	461a      	mov	r2, r3
 80088ec:	f000 f90e 	bl	8008b0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2150      	movs	r1, #80	; 0x50
 80088f6:	4618      	mov	r0, r3
 80088f8:	f000 f967 	bl	8008bca <TIM_ITRx_SetConfig>
      break;
 80088fc:	e02c      	b.n	8008958 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800890a:	461a      	mov	r2, r3
 800890c:	f000 f92d 	bl	8008b6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2160      	movs	r1, #96	; 0x60
 8008916:	4618      	mov	r0, r3
 8008918:	f000 f957 	bl	8008bca <TIM_ITRx_SetConfig>
      break;
 800891c:	e01c      	b.n	8008958 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800892a:	461a      	mov	r2, r3
 800892c:	f000 f8ee 	bl	8008b0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2140      	movs	r1, #64	; 0x40
 8008936:	4618      	mov	r0, r3
 8008938:	f000 f947 	bl	8008bca <TIM_ITRx_SetConfig>
      break;
 800893c:	e00c      	b.n	8008958 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4619      	mov	r1, r3
 8008948:	4610      	mov	r0, r2
 800894a:	f000 f93e 	bl	8008bca <TIM_ITRx_SetConfig>
      break;
 800894e:	e003      	b.n	8008958 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	73fb      	strb	r3, [r7, #15]
      break;
 8008954:	e000      	b.n	8008958 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008956:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008968:	7bfb      	ldrb	r3, [r7, #15]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008972:	b480      	push	{r7}
 8008974:	b083      	sub	sp, #12
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800897a:	bf00      	nop
 800897c:	370c      	adds	r7, #12
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr

08008986 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008986:	b480      	push	{r7}
 8008988:	b083      	sub	sp, #12
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800898e:	bf00      	nop
 8008990:	370c      	adds	r7, #12
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr

0800899a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800899a:	b480      	push	{r7}
 800899c:	b083      	sub	sp, #12
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80089a2:	bf00      	nop
 80089a4:	370c      	adds	r7, #12
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr

080089ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80089ae:	b480      	push	{r7}
 80089b0:	b083      	sub	sp, #12
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80089b6:	bf00      	nop
 80089b8:	370c      	adds	r7, #12
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr

080089c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80089c2:	b480      	push	{r7}
 80089c4:	b083      	sub	sp, #12
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80089ca:	bf00      	nop
 80089cc:	370c      	adds	r7, #12
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr
	...

080089d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4a40      	ldr	r2, [pc, #256]	; (8008aec <TIM_Base_SetConfig+0x114>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d013      	beq.n	8008a18 <TIM_Base_SetConfig+0x40>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089f6:	d00f      	beq.n	8008a18 <TIM_Base_SetConfig+0x40>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a3d      	ldr	r2, [pc, #244]	; (8008af0 <TIM_Base_SetConfig+0x118>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d00b      	beq.n	8008a18 <TIM_Base_SetConfig+0x40>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a3c      	ldr	r2, [pc, #240]	; (8008af4 <TIM_Base_SetConfig+0x11c>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d007      	beq.n	8008a18 <TIM_Base_SetConfig+0x40>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a3b      	ldr	r2, [pc, #236]	; (8008af8 <TIM_Base_SetConfig+0x120>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d003      	beq.n	8008a18 <TIM_Base_SetConfig+0x40>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a3a      	ldr	r2, [pc, #232]	; (8008afc <TIM_Base_SetConfig+0x124>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d108      	bne.n	8008a2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a2f      	ldr	r2, [pc, #188]	; (8008aec <TIM_Base_SetConfig+0x114>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d01f      	beq.n	8008a72 <TIM_Base_SetConfig+0x9a>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a38:	d01b      	beq.n	8008a72 <TIM_Base_SetConfig+0x9a>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a2c      	ldr	r2, [pc, #176]	; (8008af0 <TIM_Base_SetConfig+0x118>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d017      	beq.n	8008a72 <TIM_Base_SetConfig+0x9a>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a2b      	ldr	r2, [pc, #172]	; (8008af4 <TIM_Base_SetConfig+0x11c>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d013      	beq.n	8008a72 <TIM_Base_SetConfig+0x9a>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a2a      	ldr	r2, [pc, #168]	; (8008af8 <TIM_Base_SetConfig+0x120>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d00f      	beq.n	8008a72 <TIM_Base_SetConfig+0x9a>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4a29      	ldr	r2, [pc, #164]	; (8008afc <TIM_Base_SetConfig+0x124>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d00b      	beq.n	8008a72 <TIM_Base_SetConfig+0x9a>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a28      	ldr	r2, [pc, #160]	; (8008b00 <TIM_Base_SetConfig+0x128>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d007      	beq.n	8008a72 <TIM_Base_SetConfig+0x9a>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a27      	ldr	r2, [pc, #156]	; (8008b04 <TIM_Base_SetConfig+0x12c>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d003      	beq.n	8008a72 <TIM_Base_SetConfig+0x9a>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a26      	ldr	r2, [pc, #152]	; (8008b08 <TIM_Base_SetConfig+0x130>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d108      	bne.n	8008a84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	695b      	ldr	r3, [r3, #20]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	689a      	ldr	r2, [r3, #8]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4a10      	ldr	r2, [pc, #64]	; (8008aec <TIM_Base_SetConfig+0x114>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d00f      	beq.n	8008ad0 <TIM_Base_SetConfig+0xf8>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4a12      	ldr	r2, [pc, #72]	; (8008afc <TIM_Base_SetConfig+0x124>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d00b      	beq.n	8008ad0 <TIM_Base_SetConfig+0xf8>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a11      	ldr	r2, [pc, #68]	; (8008b00 <TIM_Base_SetConfig+0x128>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d007      	beq.n	8008ad0 <TIM_Base_SetConfig+0xf8>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4a10      	ldr	r2, [pc, #64]	; (8008b04 <TIM_Base_SetConfig+0x12c>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d003      	beq.n	8008ad0 <TIM_Base_SetConfig+0xf8>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a0f      	ldr	r2, [pc, #60]	; (8008b08 <TIM_Base_SetConfig+0x130>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d103      	bne.n	8008ad8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	691a      	ldr	r2, [r3, #16]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	615a      	str	r2, [r3, #20]
}
 8008ade:	bf00      	nop
 8008ae0:	3714      	adds	r7, #20
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	40012c00 	.word	0x40012c00
 8008af0:	40000400 	.word	0x40000400
 8008af4:	40000800 	.word	0x40000800
 8008af8:	40000c00 	.word	0x40000c00
 8008afc:	40013400 	.word	0x40013400
 8008b00:	40014000 	.word	0x40014000
 8008b04:	40014400 	.word	0x40014400
 8008b08:	40014800 	.word	0x40014800

08008b0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b087      	sub	sp, #28
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6a1b      	ldr	r3, [r3, #32]
 8008b1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	f023 0201 	bic.w	r2, r3, #1
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	699b      	ldr	r3, [r3, #24]
 8008b2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	011b      	lsls	r3, r3, #4
 8008b3c:	693a      	ldr	r2, [r7, #16]
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	f023 030a 	bic.w	r3, r3, #10
 8008b48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b4a:	697a      	ldr	r2, [r7, #20]
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	697a      	ldr	r2, [r7, #20]
 8008b5c:	621a      	str	r2, [r3, #32]
}
 8008b5e:	bf00      	nop
 8008b60:	371c      	adds	r7, #28
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr

08008b6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	b087      	sub	sp, #28
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	60f8      	str	r0, [r7, #12]
 8008b72:	60b9      	str	r1, [r7, #8]
 8008b74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	6a1b      	ldr	r3, [r3, #32]
 8008b7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6a1b      	ldr	r3, [r3, #32]
 8008b80:	f023 0210 	bic.w	r2, r3, #16
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	699b      	ldr	r3, [r3, #24]
 8008b8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	031b      	lsls	r3, r3, #12
 8008b9a:	693a      	ldr	r2, [r7, #16]
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ba6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	011b      	lsls	r3, r3, #4
 8008bac:	697a      	ldr	r2, [r7, #20]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	693a      	ldr	r2, [r7, #16]
 8008bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	697a      	ldr	r2, [r7, #20]
 8008bbc:	621a      	str	r2, [r3, #32]
}
 8008bbe:	bf00      	nop
 8008bc0:	371c      	adds	r7, #28
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr

08008bca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008bca:	b480      	push	{r7}
 8008bcc:	b085      	sub	sp, #20
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
 8008bd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008be0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008be2:	683a      	ldr	r2, [r7, #0]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	f043 0307 	orr.w	r3, r3, #7
 8008bec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	609a      	str	r2, [r3, #8]
}
 8008bf4:	bf00      	nop
 8008bf6:	3714      	adds	r7, #20
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b087      	sub	sp, #28
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	607a      	str	r2, [r7, #4]
 8008c0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	021a      	lsls	r2, r3, #8
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	431a      	orrs	r2, r3
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	697a      	ldr	r2, [r7, #20]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	697a      	ldr	r2, [r7, #20]
 8008c32:	609a      	str	r2, [r3, #8]
}
 8008c34:	bf00      	nop
 8008c36:	371c      	adds	r7, #28
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d101      	bne.n	8008c58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c54:	2302      	movs	r3, #2
 8008c56:	e068      	b.n	8008d2a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2202      	movs	r2, #2
 8008c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a2e      	ldr	r2, [pc, #184]	; (8008d38 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d004      	beq.n	8008c8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a2d      	ldr	r2, [pc, #180]	; (8008d3c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d108      	bne.n	8008c9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008c92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ca4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a1e      	ldr	r2, [pc, #120]	; (8008d38 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d01d      	beq.n	8008cfe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cca:	d018      	beq.n	8008cfe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a1b      	ldr	r2, [pc, #108]	; (8008d40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d013      	beq.n	8008cfe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a1a      	ldr	r2, [pc, #104]	; (8008d44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d00e      	beq.n	8008cfe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a18      	ldr	r2, [pc, #96]	; (8008d48 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d009      	beq.n	8008cfe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a13      	ldr	r2, [pc, #76]	; (8008d3c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d004      	beq.n	8008cfe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a14      	ldr	r2, [pc, #80]	; (8008d4c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d10c      	bne.n	8008d18 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	68ba      	ldr	r2, [r7, #8]
 8008d16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3714      	adds	r7, #20
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop
 8008d38:	40012c00 	.word	0x40012c00
 8008d3c:	40013400 	.word	0x40013400
 8008d40:	40000400 	.word	0x40000400
 8008d44:	40000800 	.word	0x40000800
 8008d48:	40000c00 	.word	0x40000c00
 8008d4c:	40014000 	.word	0x40014000

08008d50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d6c:	bf00      	nop
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d101      	bne.n	8008d9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e040      	b.n	8008e20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d106      	bne.n	8008db4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f7fb f900 	bl	8003fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2224      	movs	r2, #36	; 0x24
 8008db8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f022 0201 	bic.w	r2, r2, #1
 8008dc8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d002      	beq.n	8008dd8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 fc34 	bl	8009640 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f979 	bl	80090d0 <UART_SetConfig>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d101      	bne.n	8008de8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e01b      	b.n	8008e20 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	685a      	ldr	r2, [r3, #4]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008df6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	689a      	ldr	r2, [r3, #8]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f042 0201 	orr.w	r2, r2, #1
 8008e16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 fcb3 	bl	8009784 <UART_CheckIdleState>
 8008e1e:	4603      	mov	r3, r0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b08a      	sub	sp, #40	; 0x28
 8008e2c:	af02      	add	r7, sp, #8
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	603b      	str	r3, [r7, #0]
 8008e34:	4613      	mov	r3, r2
 8008e36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e3c:	2b20      	cmp	r3, #32
 8008e3e:	d178      	bne.n	8008f32 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d002      	beq.n	8008e4c <HAL_UART_Transmit+0x24>
 8008e46:	88fb      	ldrh	r3, [r7, #6]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d101      	bne.n	8008e50 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e071      	b.n	8008f34 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2221      	movs	r2, #33	; 0x21
 8008e5c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e5e:	f7fb f9eb 	bl	8004238 <HAL_GetTick>
 8008e62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	88fa      	ldrh	r2, [r7, #6]
 8008e68:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	88fa      	ldrh	r2, [r7, #6]
 8008e70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e7c:	d108      	bne.n	8008e90 <HAL_UART_Transmit+0x68>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d104      	bne.n	8008e90 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008e86:	2300      	movs	r3, #0
 8008e88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	61bb      	str	r3, [r7, #24]
 8008e8e:	e003      	b.n	8008e98 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e94:	2300      	movs	r3, #0
 8008e96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008e98:	e030      	b.n	8008efc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	2180      	movs	r1, #128	; 0x80
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f000 fd15 	bl	80098d4 <UART_WaitOnFlagUntilTimeout>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d004      	beq.n	8008eba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2220      	movs	r2, #32
 8008eb4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008eb6:	2303      	movs	r3, #3
 8008eb8:	e03c      	b.n	8008f34 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10b      	bne.n	8008ed8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	881a      	ldrh	r2, [r3, #0]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ecc:	b292      	uxth	r2, r2
 8008ece:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	3302      	adds	r3, #2
 8008ed4:	61bb      	str	r3, [r7, #24]
 8008ed6:	e008      	b.n	8008eea <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	781a      	ldrb	r2, [r3, #0]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	b292      	uxth	r2, r2
 8008ee2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	b29a      	uxth	r2, r3
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d1c8      	bne.n	8008e9a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	2140      	movs	r1, #64	; 0x40
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f000 fcde 	bl	80098d4 <UART_WaitOnFlagUntilTimeout>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d004      	beq.n	8008f28 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2220      	movs	r2, #32
 8008f22:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8008f24:	2303      	movs	r3, #3
 8008f26:	e005      	b.n	8008f34 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2220      	movs	r2, #32
 8008f2c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	e000      	b.n	8008f34 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008f32:	2302      	movs	r3, #2
  }
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3720      	adds	r7, #32
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b08a      	sub	sp, #40	; 0x28
 8008f40:	af02      	add	r7, sp, #8
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	603b      	str	r3, [r7, #0]
 8008f48:	4613      	mov	r3, r2
 8008f4a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f52:	2b20      	cmp	r3, #32
 8008f54:	f040 80b6 	bne.w	80090c4 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d002      	beq.n	8008f64 <HAL_UART_Receive+0x28>
 8008f5e:	88fb      	ldrh	r3, [r7, #6]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d101      	bne.n	8008f68 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	e0ae      	b.n	80090c6 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2222      	movs	r2, #34	; 0x22
 8008f74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f7e:	f7fb f95b 	bl	8004238 <HAL_GetTick>
 8008f82:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	88fa      	ldrh	r2, [r7, #6]
 8008f88:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	88fa      	ldrh	r2, [r7, #6]
 8008f90:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f9c:	d10e      	bne.n	8008fbc <HAL_UART_Receive+0x80>
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d105      	bne.n	8008fb2 <HAL_UART_Receive+0x76>
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008fac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008fb0:	e02d      	b.n	800900e <HAL_UART_Receive+0xd2>
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	22ff      	movs	r2, #255	; 0xff
 8008fb6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008fba:	e028      	b.n	800900e <HAL_UART_Receive+0xd2>
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10d      	bne.n	8008fe0 <HAL_UART_Receive+0xa4>
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	691b      	ldr	r3, [r3, #16]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d104      	bne.n	8008fd6 <HAL_UART_Receive+0x9a>
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	22ff      	movs	r2, #255	; 0xff
 8008fd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008fd4:	e01b      	b.n	800900e <HAL_UART_Receive+0xd2>
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	227f      	movs	r2, #127	; 0x7f
 8008fda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008fde:	e016      	b.n	800900e <HAL_UART_Receive+0xd2>
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fe8:	d10d      	bne.n	8009006 <HAL_UART_Receive+0xca>
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d104      	bne.n	8008ffc <HAL_UART_Receive+0xc0>
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	227f      	movs	r2, #127	; 0x7f
 8008ff6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008ffa:	e008      	b.n	800900e <HAL_UART_Receive+0xd2>
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	223f      	movs	r2, #63	; 0x3f
 8009000:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009004:	e003      	b.n	800900e <HAL_UART_Receive+0xd2>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2200      	movs	r2, #0
 800900a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009014:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800901e:	d108      	bne.n	8009032 <HAL_UART_Receive+0xf6>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d104      	bne.n	8009032 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8009028:	2300      	movs	r3, #0
 800902a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	61bb      	str	r3, [r7, #24]
 8009030:	e003      	b.n	800903a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009036:	2300      	movs	r3, #0
 8009038:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800903a:	e037      	b.n	80090ac <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	9300      	str	r3, [sp, #0]
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	2200      	movs	r2, #0
 8009044:	2120      	movs	r1, #32
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f000 fc44 	bl	80098d4 <UART_WaitOnFlagUntilTimeout>
 800904c:	4603      	mov	r3, r0
 800904e:	2b00      	cmp	r3, #0
 8009050:	d005      	beq.n	800905e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2220      	movs	r2, #32
 8009056:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800905a:	2303      	movs	r3, #3
 800905c:	e033      	b.n	80090c6 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d10c      	bne.n	800907e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800906a:	b29a      	uxth	r2, r3
 800906c:	8a7b      	ldrh	r3, [r7, #18]
 800906e:	4013      	ands	r3, r2
 8009070:	b29a      	uxth	r2, r3
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	3302      	adds	r3, #2
 800907a:	61bb      	str	r3, [r7, #24]
 800907c:	e00d      	b.n	800909a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009084:	b29b      	uxth	r3, r3
 8009086:	b2da      	uxtb	r2, r3
 8009088:	8a7b      	ldrh	r3, [r7, #18]
 800908a:	b2db      	uxtb	r3, r3
 800908c:	4013      	ands	r3, r2
 800908e:	b2da      	uxtb	r2, r3
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	3301      	adds	r3, #1
 8009098:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	3b01      	subs	r3, #1
 80090a4:	b29a      	uxth	r2, r3
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d1c1      	bne.n	800903c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2220      	movs	r2, #32
 80090bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	e000      	b.n	80090c6 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80090c4:	2302      	movs	r3, #2
  }
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3720      	adds	r7, #32
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
	...

080090d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090d4:	b08a      	sub	sp, #40	; 0x28
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80090da:	2300      	movs	r3, #0
 80090dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	689a      	ldr	r2, [r3, #8]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	431a      	orrs	r2, r3
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	695b      	ldr	r3, [r3, #20]
 80090ee:	431a      	orrs	r2, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	69db      	ldr	r3, [r3, #28]
 80090f4:	4313      	orrs	r3, r2
 80090f6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	4ba4      	ldr	r3, [pc, #656]	; (8009390 <UART_SetConfig+0x2c0>)
 8009100:	4013      	ands	r3, r2
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	6812      	ldr	r2, [r2, #0]
 8009106:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009108:	430b      	orrs	r3, r1
 800910a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	68da      	ldr	r2, [r3, #12]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	430a      	orrs	r2, r1
 8009120:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	699b      	ldr	r3, [r3, #24]
 8009126:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a99      	ldr	r2, [pc, #612]	; (8009394 <UART_SetConfig+0x2c4>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d004      	beq.n	800913c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6a1b      	ldr	r3, [r3, #32]
 8009136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009138:	4313      	orrs	r3, r2
 800913a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800914c:	430a      	orrs	r2, r1
 800914e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a90      	ldr	r2, [pc, #576]	; (8009398 <UART_SetConfig+0x2c8>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d126      	bne.n	80091a8 <UART_SetConfig+0xd8>
 800915a:	4b90      	ldr	r3, [pc, #576]	; (800939c <UART_SetConfig+0x2cc>)
 800915c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009160:	f003 0303 	and.w	r3, r3, #3
 8009164:	2b03      	cmp	r3, #3
 8009166:	d81b      	bhi.n	80091a0 <UART_SetConfig+0xd0>
 8009168:	a201      	add	r2, pc, #4	; (adr r2, 8009170 <UART_SetConfig+0xa0>)
 800916a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916e:	bf00      	nop
 8009170:	08009181 	.word	0x08009181
 8009174:	08009191 	.word	0x08009191
 8009178:	08009189 	.word	0x08009189
 800917c:	08009199 	.word	0x08009199
 8009180:	2301      	movs	r3, #1
 8009182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009186:	e116      	b.n	80093b6 <UART_SetConfig+0x2e6>
 8009188:	2302      	movs	r3, #2
 800918a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800918e:	e112      	b.n	80093b6 <UART_SetConfig+0x2e6>
 8009190:	2304      	movs	r3, #4
 8009192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009196:	e10e      	b.n	80093b6 <UART_SetConfig+0x2e6>
 8009198:	2308      	movs	r3, #8
 800919a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800919e:	e10a      	b.n	80093b6 <UART_SetConfig+0x2e6>
 80091a0:	2310      	movs	r3, #16
 80091a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091a6:	e106      	b.n	80093b6 <UART_SetConfig+0x2e6>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a7c      	ldr	r2, [pc, #496]	; (80093a0 <UART_SetConfig+0x2d0>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d138      	bne.n	8009224 <UART_SetConfig+0x154>
 80091b2:	4b7a      	ldr	r3, [pc, #488]	; (800939c <UART_SetConfig+0x2cc>)
 80091b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091b8:	f003 030c 	and.w	r3, r3, #12
 80091bc:	2b0c      	cmp	r3, #12
 80091be:	d82d      	bhi.n	800921c <UART_SetConfig+0x14c>
 80091c0:	a201      	add	r2, pc, #4	; (adr r2, 80091c8 <UART_SetConfig+0xf8>)
 80091c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c6:	bf00      	nop
 80091c8:	080091fd 	.word	0x080091fd
 80091cc:	0800921d 	.word	0x0800921d
 80091d0:	0800921d 	.word	0x0800921d
 80091d4:	0800921d 	.word	0x0800921d
 80091d8:	0800920d 	.word	0x0800920d
 80091dc:	0800921d 	.word	0x0800921d
 80091e0:	0800921d 	.word	0x0800921d
 80091e4:	0800921d 	.word	0x0800921d
 80091e8:	08009205 	.word	0x08009205
 80091ec:	0800921d 	.word	0x0800921d
 80091f0:	0800921d 	.word	0x0800921d
 80091f4:	0800921d 	.word	0x0800921d
 80091f8:	08009215 	.word	0x08009215
 80091fc:	2300      	movs	r3, #0
 80091fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009202:	e0d8      	b.n	80093b6 <UART_SetConfig+0x2e6>
 8009204:	2302      	movs	r3, #2
 8009206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800920a:	e0d4      	b.n	80093b6 <UART_SetConfig+0x2e6>
 800920c:	2304      	movs	r3, #4
 800920e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009212:	e0d0      	b.n	80093b6 <UART_SetConfig+0x2e6>
 8009214:	2308      	movs	r3, #8
 8009216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800921a:	e0cc      	b.n	80093b6 <UART_SetConfig+0x2e6>
 800921c:	2310      	movs	r3, #16
 800921e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009222:	e0c8      	b.n	80093b6 <UART_SetConfig+0x2e6>
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a5e      	ldr	r2, [pc, #376]	; (80093a4 <UART_SetConfig+0x2d4>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d125      	bne.n	800927a <UART_SetConfig+0x1aa>
 800922e:	4b5b      	ldr	r3, [pc, #364]	; (800939c <UART_SetConfig+0x2cc>)
 8009230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009234:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009238:	2b30      	cmp	r3, #48	; 0x30
 800923a:	d016      	beq.n	800926a <UART_SetConfig+0x19a>
 800923c:	2b30      	cmp	r3, #48	; 0x30
 800923e:	d818      	bhi.n	8009272 <UART_SetConfig+0x1a2>
 8009240:	2b20      	cmp	r3, #32
 8009242:	d00a      	beq.n	800925a <UART_SetConfig+0x18a>
 8009244:	2b20      	cmp	r3, #32
 8009246:	d814      	bhi.n	8009272 <UART_SetConfig+0x1a2>
 8009248:	2b00      	cmp	r3, #0
 800924a:	d002      	beq.n	8009252 <UART_SetConfig+0x182>
 800924c:	2b10      	cmp	r3, #16
 800924e:	d008      	beq.n	8009262 <UART_SetConfig+0x192>
 8009250:	e00f      	b.n	8009272 <UART_SetConfig+0x1a2>
 8009252:	2300      	movs	r3, #0
 8009254:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009258:	e0ad      	b.n	80093b6 <UART_SetConfig+0x2e6>
 800925a:	2302      	movs	r3, #2
 800925c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009260:	e0a9      	b.n	80093b6 <UART_SetConfig+0x2e6>
 8009262:	2304      	movs	r3, #4
 8009264:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009268:	e0a5      	b.n	80093b6 <UART_SetConfig+0x2e6>
 800926a:	2308      	movs	r3, #8
 800926c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009270:	e0a1      	b.n	80093b6 <UART_SetConfig+0x2e6>
 8009272:	2310      	movs	r3, #16
 8009274:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009278:	e09d      	b.n	80093b6 <UART_SetConfig+0x2e6>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a4a      	ldr	r2, [pc, #296]	; (80093a8 <UART_SetConfig+0x2d8>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d125      	bne.n	80092d0 <UART_SetConfig+0x200>
 8009284:	4b45      	ldr	r3, [pc, #276]	; (800939c <UART_SetConfig+0x2cc>)
 8009286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800928a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800928e:	2bc0      	cmp	r3, #192	; 0xc0
 8009290:	d016      	beq.n	80092c0 <UART_SetConfig+0x1f0>
 8009292:	2bc0      	cmp	r3, #192	; 0xc0
 8009294:	d818      	bhi.n	80092c8 <UART_SetConfig+0x1f8>
 8009296:	2b80      	cmp	r3, #128	; 0x80
 8009298:	d00a      	beq.n	80092b0 <UART_SetConfig+0x1e0>
 800929a:	2b80      	cmp	r3, #128	; 0x80
 800929c:	d814      	bhi.n	80092c8 <UART_SetConfig+0x1f8>
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d002      	beq.n	80092a8 <UART_SetConfig+0x1d8>
 80092a2:	2b40      	cmp	r3, #64	; 0x40
 80092a4:	d008      	beq.n	80092b8 <UART_SetConfig+0x1e8>
 80092a6:	e00f      	b.n	80092c8 <UART_SetConfig+0x1f8>
 80092a8:	2300      	movs	r3, #0
 80092aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092ae:	e082      	b.n	80093b6 <UART_SetConfig+0x2e6>
 80092b0:	2302      	movs	r3, #2
 80092b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092b6:	e07e      	b.n	80093b6 <UART_SetConfig+0x2e6>
 80092b8:	2304      	movs	r3, #4
 80092ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092be:	e07a      	b.n	80093b6 <UART_SetConfig+0x2e6>
 80092c0:	2308      	movs	r3, #8
 80092c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092c6:	e076      	b.n	80093b6 <UART_SetConfig+0x2e6>
 80092c8:	2310      	movs	r3, #16
 80092ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092ce:	e072      	b.n	80093b6 <UART_SetConfig+0x2e6>
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a35      	ldr	r2, [pc, #212]	; (80093ac <UART_SetConfig+0x2dc>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d12a      	bne.n	8009330 <UART_SetConfig+0x260>
 80092da:	4b30      	ldr	r3, [pc, #192]	; (800939c <UART_SetConfig+0x2cc>)
 80092dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092e8:	d01a      	beq.n	8009320 <UART_SetConfig+0x250>
 80092ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092ee:	d81b      	bhi.n	8009328 <UART_SetConfig+0x258>
 80092f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092f4:	d00c      	beq.n	8009310 <UART_SetConfig+0x240>
 80092f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092fa:	d815      	bhi.n	8009328 <UART_SetConfig+0x258>
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d003      	beq.n	8009308 <UART_SetConfig+0x238>
 8009300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009304:	d008      	beq.n	8009318 <UART_SetConfig+0x248>
 8009306:	e00f      	b.n	8009328 <UART_SetConfig+0x258>
 8009308:	2300      	movs	r3, #0
 800930a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800930e:	e052      	b.n	80093b6 <UART_SetConfig+0x2e6>
 8009310:	2302      	movs	r3, #2
 8009312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009316:	e04e      	b.n	80093b6 <UART_SetConfig+0x2e6>
 8009318:	2304      	movs	r3, #4
 800931a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800931e:	e04a      	b.n	80093b6 <UART_SetConfig+0x2e6>
 8009320:	2308      	movs	r3, #8
 8009322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009326:	e046      	b.n	80093b6 <UART_SetConfig+0x2e6>
 8009328:	2310      	movs	r3, #16
 800932a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800932e:	e042      	b.n	80093b6 <UART_SetConfig+0x2e6>
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a17      	ldr	r2, [pc, #92]	; (8009394 <UART_SetConfig+0x2c4>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d13a      	bne.n	80093b0 <UART_SetConfig+0x2e0>
 800933a:	4b18      	ldr	r3, [pc, #96]	; (800939c <UART_SetConfig+0x2cc>)
 800933c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009340:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009344:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009348:	d01a      	beq.n	8009380 <UART_SetConfig+0x2b0>
 800934a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800934e:	d81b      	bhi.n	8009388 <UART_SetConfig+0x2b8>
 8009350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009354:	d00c      	beq.n	8009370 <UART_SetConfig+0x2a0>
 8009356:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800935a:	d815      	bhi.n	8009388 <UART_SetConfig+0x2b8>
 800935c:	2b00      	cmp	r3, #0
 800935e:	d003      	beq.n	8009368 <UART_SetConfig+0x298>
 8009360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009364:	d008      	beq.n	8009378 <UART_SetConfig+0x2a8>
 8009366:	e00f      	b.n	8009388 <UART_SetConfig+0x2b8>
 8009368:	2300      	movs	r3, #0
 800936a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800936e:	e022      	b.n	80093b6 <UART_SetConfig+0x2e6>
 8009370:	2302      	movs	r3, #2
 8009372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009376:	e01e      	b.n	80093b6 <UART_SetConfig+0x2e6>
 8009378:	2304      	movs	r3, #4
 800937a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800937e:	e01a      	b.n	80093b6 <UART_SetConfig+0x2e6>
 8009380:	2308      	movs	r3, #8
 8009382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009386:	e016      	b.n	80093b6 <UART_SetConfig+0x2e6>
 8009388:	2310      	movs	r3, #16
 800938a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800938e:	e012      	b.n	80093b6 <UART_SetConfig+0x2e6>
 8009390:	efff69f3 	.word	0xefff69f3
 8009394:	40008000 	.word	0x40008000
 8009398:	40013800 	.word	0x40013800
 800939c:	40021000 	.word	0x40021000
 80093a0:	40004400 	.word	0x40004400
 80093a4:	40004800 	.word	0x40004800
 80093a8:	40004c00 	.word	0x40004c00
 80093ac:	40005000 	.word	0x40005000
 80093b0:	2310      	movs	r3, #16
 80093b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a9f      	ldr	r2, [pc, #636]	; (8009638 <UART_SetConfig+0x568>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d17a      	bne.n	80094b6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80093c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80093c4:	2b08      	cmp	r3, #8
 80093c6:	d824      	bhi.n	8009412 <UART_SetConfig+0x342>
 80093c8:	a201      	add	r2, pc, #4	; (adr r2, 80093d0 <UART_SetConfig+0x300>)
 80093ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ce:	bf00      	nop
 80093d0:	080093f5 	.word	0x080093f5
 80093d4:	08009413 	.word	0x08009413
 80093d8:	080093fd 	.word	0x080093fd
 80093dc:	08009413 	.word	0x08009413
 80093e0:	08009403 	.word	0x08009403
 80093e4:	08009413 	.word	0x08009413
 80093e8:	08009413 	.word	0x08009413
 80093ec:	08009413 	.word	0x08009413
 80093f0:	0800940b 	.word	0x0800940b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093f4:	f7fd feb2 	bl	800715c <HAL_RCC_GetPCLK1Freq>
 80093f8:	61f8      	str	r0, [r7, #28]
        break;
 80093fa:	e010      	b.n	800941e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093fc:	4b8f      	ldr	r3, [pc, #572]	; (800963c <UART_SetConfig+0x56c>)
 80093fe:	61fb      	str	r3, [r7, #28]
        break;
 8009400:	e00d      	b.n	800941e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009402:	f7fd fe13 	bl	800702c <HAL_RCC_GetSysClockFreq>
 8009406:	61f8      	str	r0, [r7, #28]
        break;
 8009408:	e009      	b.n	800941e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800940a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800940e:	61fb      	str	r3, [r7, #28]
        break;
 8009410:	e005      	b.n	800941e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009412:	2300      	movs	r3, #0
 8009414:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800941c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	2b00      	cmp	r3, #0
 8009422:	f000 80fb 	beq.w	800961c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	685a      	ldr	r2, [r3, #4]
 800942a:	4613      	mov	r3, r2
 800942c:	005b      	lsls	r3, r3, #1
 800942e:	4413      	add	r3, r2
 8009430:	69fa      	ldr	r2, [r7, #28]
 8009432:	429a      	cmp	r2, r3
 8009434:	d305      	bcc.n	8009442 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800943c:	69fa      	ldr	r2, [r7, #28]
 800943e:	429a      	cmp	r2, r3
 8009440:	d903      	bls.n	800944a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009448:	e0e8      	b.n	800961c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	2200      	movs	r2, #0
 800944e:	461c      	mov	r4, r3
 8009450:	4615      	mov	r5, r2
 8009452:	f04f 0200 	mov.w	r2, #0
 8009456:	f04f 0300 	mov.w	r3, #0
 800945a:	022b      	lsls	r3, r5, #8
 800945c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009460:	0222      	lsls	r2, r4, #8
 8009462:	68f9      	ldr	r1, [r7, #12]
 8009464:	6849      	ldr	r1, [r1, #4]
 8009466:	0849      	lsrs	r1, r1, #1
 8009468:	2000      	movs	r0, #0
 800946a:	4688      	mov	r8, r1
 800946c:	4681      	mov	r9, r0
 800946e:	eb12 0a08 	adds.w	sl, r2, r8
 8009472:	eb43 0b09 	adc.w	fp, r3, r9
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	603b      	str	r3, [r7, #0]
 800947e:	607a      	str	r2, [r7, #4]
 8009480:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009484:	4650      	mov	r0, sl
 8009486:	4659      	mov	r1, fp
 8009488:	f7f7 fb9e 	bl	8000bc8 <__aeabi_uldivmod>
 800948c:	4602      	mov	r2, r0
 800948e:	460b      	mov	r3, r1
 8009490:	4613      	mov	r3, r2
 8009492:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800949a:	d308      	bcc.n	80094ae <UART_SetConfig+0x3de>
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094a2:	d204      	bcs.n	80094ae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	69ba      	ldr	r2, [r7, #24]
 80094aa:	60da      	str	r2, [r3, #12]
 80094ac:	e0b6      	b.n	800961c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80094ae:	2301      	movs	r3, #1
 80094b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80094b4:	e0b2      	b.n	800961c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	69db      	ldr	r3, [r3, #28]
 80094ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094be:	d15e      	bne.n	800957e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80094c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80094c4:	2b08      	cmp	r3, #8
 80094c6:	d828      	bhi.n	800951a <UART_SetConfig+0x44a>
 80094c8:	a201      	add	r2, pc, #4	; (adr r2, 80094d0 <UART_SetConfig+0x400>)
 80094ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ce:	bf00      	nop
 80094d0:	080094f5 	.word	0x080094f5
 80094d4:	080094fd 	.word	0x080094fd
 80094d8:	08009505 	.word	0x08009505
 80094dc:	0800951b 	.word	0x0800951b
 80094e0:	0800950b 	.word	0x0800950b
 80094e4:	0800951b 	.word	0x0800951b
 80094e8:	0800951b 	.word	0x0800951b
 80094ec:	0800951b 	.word	0x0800951b
 80094f0:	08009513 	.word	0x08009513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094f4:	f7fd fe32 	bl	800715c <HAL_RCC_GetPCLK1Freq>
 80094f8:	61f8      	str	r0, [r7, #28]
        break;
 80094fa:	e014      	b.n	8009526 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094fc:	f7fd fe44 	bl	8007188 <HAL_RCC_GetPCLK2Freq>
 8009500:	61f8      	str	r0, [r7, #28]
        break;
 8009502:	e010      	b.n	8009526 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009504:	4b4d      	ldr	r3, [pc, #308]	; (800963c <UART_SetConfig+0x56c>)
 8009506:	61fb      	str	r3, [r7, #28]
        break;
 8009508:	e00d      	b.n	8009526 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800950a:	f7fd fd8f 	bl	800702c <HAL_RCC_GetSysClockFreq>
 800950e:	61f8      	str	r0, [r7, #28]
        break;
 8009510:	e009      	b.n	8009526 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009516:	61fb      	str	r3, [r7, #28]
        break;
 8009518:	e005      	b.n	8009526 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800951a:	2300      	movs	r3, #0
 800951c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009524:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d077      	beq.n	800961c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	005a      	lsls	r2, r3, #1
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	085b      	lsrs	r3, r3, #1
 8009536:	441a      	add	r2, r3
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009540:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	2b0f      	cmp	r3, #15
 8009546:	d916      	bls.n	8009576 <UART_SetConfig+0x4a6>
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800954e:	d212      	bcs.n	8009576 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009550:	69bb      	ldr	r3, [r7, #24]
 8009552:	b29b      	uxth	r3, r3
 8009554:	f023 030f 	bic.w	r3, r3, #15
 8009558:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	085b      	lsrs	r3, r3, #1
 800955e:	b29b      	uxth	r3, r3
 8009560:	f003 0307 	and.w	r3, r3, #7
 8009564:	b29a      	uxth	r2, r3
 8009566:	8afb      	ldrh	r3, [r7, #22]
 8009568:	4313      	orrs	r3, r2
 800956a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	8afa      	ldrh	r2, [r7, #22]
 8009572:	60da      	str	r2, [r3, #12]
 8009574:	e052      	b.n	800961c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009576:	2301      	movs	r3, #1
 8009578:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800957c:	e04e      	b.n	800961c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800957e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009582:	2b08      	cmp	r3, #8
 8009584:	d827      	bhi.n	80095d6 <UART_SetConfig+0x506>
 8009586:	a201      	add	r2, pc, #4	; (adr r2, 800958c <UART_SetConfig+0x4bc>)
 8009588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800958c:	080095b1 	.word	0x080095b1
 8009590:	080095b9 	.word	0x080095b9
 8009594:	080095c1 	.word	0x080095c1
 8009598:	080095d7 	.word	0x080095d7
 800959c:	080095c7 	.word	0x080095c7
 80095a0:	080095d7 	.word	0x080095d7
 80095a4:	080095d7 	.word	0x080095d7
 80095a8:	080095d7 	.word	0x080095d7
 80095ac:	080095cf 	.word	0x080095cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095b0:	f7fd fdd4 	bl	800715c <HAL_RCC_GetPCLK1Freq>
 80095b4:	61f8      	str	r0, [r7, #28]
        break;
 80095b6:	e014      	b.n	80095e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095b8:	f7fd fde6 	bl	8007188 <HAL_RCC_GetPCLK2Freq>
 80095bc:	61f8      	str	r0, [r7, #28]
        break;
 80095be:	e010      	b.n	80095e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80095c0:	4b1e      	ldr	r3, [pc, #120]	; (800963c <UART_SetConfig+0x56c>)
 80095c2:	61fb      	str	r3, [r7, #28]
        break;
 80095c4:	e00d      	b.n	80095e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80095c6:	f7fd fd31 	bl	800702c <HAL_RCC_GetSysClockFreq>
 80095ca:	61f8      	str	r0, [r7, #28]
        break;
 80095cc:	e009      	b.n	80095e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095d2:	61fb      	str	r3, [r7, #28]
        break;
 80095d4:	e005      	b.n	80095e2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80095d6:	2300      	movs	r3, #0
 80095d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80095da:	2301      	movs	r3, #1
 80095dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80095e0:	bf00      	nop
    }

    if (pclk != 0U)
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d019      	beq.n	800961c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	085a      	lsrs	r2, r3, #1
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	441a      	add	r2, r3
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80095fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095fc:	69bb      	ldr	r3, [r7, #24]
 80095fe:	2b0f      	cmp	r3, #15
 8009600:	d909      	bls.n	8009616 <UART_SetConfig+0x546>
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009608:	d205      	bcs.n	8009616 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	b29a      	uxth	r2, r3
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	60da      	str	r2, [r3, #12]
 8009614:	e002      	b.n	800961c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2200      	movs	r2, #0
 8009620:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2200      	movs	r2, #0
 8009626:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009628:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800962c:	4618      	mov	r0, r3
 800962e:	3728      	adds	r7, #40	; 0x28
 8009630:	46bd      	mov	sp, r7
 8009632:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009636:	bf00      	nop
 8009638:	40008000 	.word	0x40008000
 800963c:	00f42400 	.word	0x00f42400

08009640 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964c:	f003 0308 	and.w	r3, r3, #8
 8009650:	2b00      	cmp	r3, #0
 8009652:	d00a      	beq.n	800966a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	430a      	orrs	r2, r1
 8009668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966e:	f003 0301 	and.w	r3, r3, #1
 8009672:	2b00      	cmp	r3, #0
 8009674:	d00a      	beq.n	800968c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	430a      	orrs	r2, r1
 800968a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009690:	f003 0302 	and.w	r3, r3, #2
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00a      	beq.n	80096ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	430a      	orrs	r2, r1
 80096ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b2:	f003 0304 	and.w	r3, r3, #4
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00a      	beq.n	80096d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	430a      	orrs	r2, r1
 80096ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d4:	f003 0310 	and.w	r3, r3, #16
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d00a      	beq.n	80096f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	430a      	orrs	r2, r1
 80096f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f6:	f003 0320 	and.w	r3, r3, #32
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d00a      	beq.n	8009714 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	430a      	orrs	r2, r1
 8009712:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800971c:	2b00      	cmp	r3, #0
 800971e:	d01a      	beq.n	8009756 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	430a      	orrs	r2, r1
 8009734:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800973e:	d10a      	bne.n	8009756 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	430a      	orrs	r2, r1
 8009754:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00a      	beq.n	8009778 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	430a      	orrs	r2, r1
 8009776:	605a      	str	r2, [r3, #4]
  }
}
 8009778:	bf00      	nop
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b098      	sub	sp, #96	; 0x60
 8009788:	af02      	add	r7, sp, #8
 800978a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009794:	f7fa fd50 	bl	8004238 <HAL_GetTick>
 8009798:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f003 0308 	and.w	r3, r3, #8
 80097a4:	2b08      	cmp	r3, #8
 80097a6:	d12e      	bne.n	8009806 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097b0:	2200      	movs	r2, #0
 80097b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 f88c 	bl	80098d4 <UART_WaitOnFlagUntilTimeout>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d021      	beq.n	8009806 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ca:	e853 3f00 	ldrex	r3, [r3]
 80097ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80097d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097d6:	653b      	str	r3, [r7, #80]	; 0x50
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	461a      	mov	r2, r3
 80097de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097e0:	647b      	str	r3, [r7, #68]	; 0x44
 80097e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80097e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097e8:	e841 2300 	strex	r3, r2, [r1]
 80097ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1e6      	bne.n	80097c2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2220      	movs	r2, #32
 80097f8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009802:	2303      	movs	r3, #3
 8009804:	e062      	b.n	80098cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f003 0304 	and.w	r3, r3, #4
 8009810:	2b04      	cmp	r3, #4
 8009812:	d149      	bne.n	80098a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009814:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800981c:	2200      	movs	r2, #0
 800981e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 f856 	bl	80098d4 <UART_WaitOnFlagUntilTimeout>
 8009828:	4603      	mov	r3, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d03c      	beq.n	80098a8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009836:	e853 3f00 	ldrex	r3, [r3]
 800983a:	623b      	str	r3, [r7, #32]
   return(result);
 800983c:	6a3b      	ldr	r3, [r7, #32]
 800983e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009842:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	461a      	mov	r2, r3
 800984a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800984c:	633b      	str	r3, [r7, #48]	; 0x30
 800984e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009850:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009854:	e841 2300 	strex	r3, r2, [r1]
 8009858:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800985a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985c:	2b00      	cmp	r3, #0
 800985e:	d1e6      	bne.n	800982e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	3308      	adds	r3, #8
 8009866:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	e853 3f00 	ldrex	r3, [r3]
 800986e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f023 0301 	bic.w	r3, r3, #1
 8009876:	64bb      	str	r3, [r7, #72]	; 0x48
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	3308      	adds	r3, #8
 800987e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009880:	61fa      	str	r2, [r7, #28]
 8009882:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009884:	69b9      	ldr	r1, [r7, #24]
 8009886:	69fa      	ldr	r2, [r7, #28]
 8009888:	e841 2300 	strex	r3, r2, [r1]
 800988c:	617b      	str	r3, [r7, #20]
   return(result);
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1e5      	bne.n	8009860 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2220      	movs	r2, #32
 8009898:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098a4:	2303      	movs	r3, #3
 80098a6:	e011      	b.n	80098cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2220      	movs	r2, #32
 80098ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2220      	movs	r2, #32
 80098b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3758      	adds	r7, #88	; 0x58
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	603b      	str	r3, [r7, #0]
 80098e0:	4613      	mov	r3, r2
 80098e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098e4:	e049      	b.n	800997a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098ec:	d045      	beq.n	800997a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098ee:	f7fa fca3 	bl	8004238 <HAL_GetTick>
 80098f2:	4602      	mov	r2, r0
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	1ad3      	subs	r3, r2, r3
 80098f8:	69ba      	ldr	r2, [r7, #24]
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d302      	bcc.n	8009904 <UART_WaitOnFlagUntilTimeout+0x30>
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d101      	bne.n	8009908 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009904:	2303      	movs	r3, #3
 8009906:	e048      	b.n	800999a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f003 0304 	and.w	r3, r3, #4
 8009912:	2b00      	cmp	r3, #0
 8009914:	d031      	beq.n	800997a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	69db      	ldr	r3, [r3, #28]
 800991c:	f003 0308 	and.w	r3, r3, #8
 8009920:	2b08      	cmp	r3, #8
 8009922:	d110      	bne.n	8009946 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2208      	movs	r2, #8
 800992a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	f000 f838 	bl	80099a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2208      	movs	r2, #8
 8009936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2200      	movs	r2, #0
 800993e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	e029      	b.n	800999a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	69db      	ldr	r3, [r3, #28]
 800994c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009954:	d111      	bne.n	800997a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800995e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f000 f81e 	bl	80099a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2220      	movs	r2, #32
 800996a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2200      	movs	r2, #0
 8009972:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009976:	2303      	movs	r3, #3
 8009978:	e00f      	b.n	800999a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	69da      	ldr	r2, [r3, #28]
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	4013      	ands	r3, r2
 8009984:	68ba      	ldr	r2, [r7, #8]
 8009986:	429a      	cmp	r2, r3
 8009988:	bf0c      	ite	eq
 800998a:	2301      	moveq	r3, #1
 800998c:	2300      	movne	r3, #0
 800998e:	b2db      	uxtb	r3, r3
 8009990:	461a      	mov	r2, r3
 8009992:	79fb      	ldrb	r3, [r7, #7]
 8009994:	429a      	cmp	r2, r3
 8009996:	d0a6      	beq.n	80098e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099a2:	b480      	push	{r7}
 80099a4:	b095      	sub	sp, #84	; 0x54
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099b2:	e853 3f00 	ldrex	r3, [r3]
 80099b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80099b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	461a      	mov	r2, r3
 80099c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099c8:	643b      	str	r3, [r7, #64]	; 0x40
 80099ca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80099ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099d0:	e841 2300 	strex	r3, r2, [r1]
 80099d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80099d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1e6      	bne.n	80099aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	3308      	adds	r3, #8
 80099e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e4:	6a3b      	ldr	r3, [r7, #32]
 80099e6:	e853 3f00 	ldrex	r3, [r3]
 80099ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	f023 0301 	bic.w	r3, r3, #1
 80099f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	3308      	adds	r3, #8
 80099fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a04:	e841 2300 	strex	r3, r2, [r1]
 8009a08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d1e5      	bne.n	80099dc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d118      	bne.n	8009a4a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	e853 3f00 	ldrex	r3, [r3]
 8009a24:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	f023 0310 	bic.w	r3, r3, #16
 8009a2c:	647b      	str	r3, [r7, #68]	; 0x44
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	461a      	mov	r2, r3
 8009a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a36:	61bb      	str	r3, [r7, #24]
 8009a38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3a:	6979      	ldr	r1, [r7, #20]
 8009a3c:	69ba      	ldr	r2, [r7, #24]
 8009a3e:	e841 2300 	strex	r3, r2, [r1]
 8009a42:	613b      	str	r3, [r7, #16]
   return(result);
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d1e6      	bne.n	8009a18 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2220      	movs	r2, #32
 8009a4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2200      	movs	r2, #0
 8009a56:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009a5e:	bf00      	nop
 8009a60:	3754      	adds	r7, #84	; 0x54
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
	...

08009a6c <arm_q15_to_float>:
 8009a6c:	b470      	push	{r4, r5, r6}
 8009a6e:	0896      	lsrs	r6, r2, #2
 8009a70:	d038      	beq.n	8009ae4 <arm_q15_to_float+0x78>
 8009a72:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8009b38 <arm_q15_to_float+0xcc>
 8009a76:	f100 0408 	add.w	r4, r0, #8
 8009a7a:	f101 0310 	add.w	r3, r1, #16
 8009a7e:	4635      	mov	r5, r6
 8009a80:	f934 cc08 	ldrsh.w	ip, [r4, #-8]
 8009a84:	ee07 ca90 	vmov	s15, ip
 8009a88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a8c:	3d01      	subs	r5, #1
 8009a8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a92:	f104 0408 	add.w	r4, r4, #8
 8009a96:	ed43 7a04 	vstr	s15, [r3, #-16]
 8009a9a:	f934 cc0e 	ldrsh.w	ip, [r4, #-14]
 8009a9e:	ee07 ca90 	vmov	s15, ip
 8009aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009aa6:	f103 0310 	add.w	r3, r3, #16
 8009aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009aae:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 8009ab2:	f934 cc0c 	ldrsh.w	ip, [r4, #-12]
 8009ab6:	ee07 ca90 	vmov	s15, ip
 8009aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009abe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009ac2:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8009ac6:	f934 cc0a 	ldrsh.w	ip, [r4, #-10]
 8009aca:	ee07 ca90 	vmov	s15, ip
 8009ace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ad2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009ad6:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8009ada:	d1d1      	bne.n	8009a80 <arm_q15_to_float+0x14>
 8009adc:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 8009ae0:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8009ae4:	f012 0203 	ands.w	r2, r2, #3
 8009ae8:	d023      	beq.n	8009b32 <arm_q15_to_float+0xc6>
 8009aea:	f9b0 3000 	ldrsh.w	r3, [r0]
 8009aee:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8009b38 <arm_q15_to_float+0xcc>
 8009af2:	ee07 3a90 	vmov	s15, r3
 8009af6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009afa:	3a01      	subs	r2, #1
 8009afc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009b00:	edc1 7a00 	vstr	s15, [r1]
 8009b04:	d015      	beq.n	8009b32 <arm_q15_to_float+0xc6>
 8009b06:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8009b0a:	ee07 3a90 	vmov	s15, r3
 8009b0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b12:	2a01      	cmp	r2, #1
 8009b14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009b18:	edc1 7a01 	vstr	s15, [r1, #4]
 8009b1c:	d009      	beq.n	8009b32 <arm_q15_to_float+0xc6>
 8009b1e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8009b22:	ee07 3a90 	vmov	s15, r3
 8009b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009b2e:	edc1 7a02 	vstr	s15, [r1, #8]
 8009b32:	bc70      	pop	{r4, r5, r6}
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	38000000 	.word	0x38000000

08009b3c <arm_split_rfft_q15>:
 8009b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b40:	b083      	sub	sp, #12
 8009b42:	f101 4580 	add.w	r5, r1, #1073741824	; 0x40000000
 8009b46:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009b48:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009b4a:	3d01      	subs	r5, #1
 8009b4c:	eb04 06c1 	add.w	r6, r4, r1, lsl #3
 8009b50:	00ac      	lsls	r4, r5, #2
 8009b52:	9401      	str	r4, [sp, #4]
 8009b54:	1e4c      	subs	r4, r1, #1
 8009b56:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8009b5a:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 8009b5e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8009b62:	d02d      	beq.n	8009bc0 <arm_split_rfft_q15+0x84>
 8009b64:	2f01      	cmp	r7, #1
 8009b66:	f1a6 0c04 	sub.w	ip, r6, #4
 8009b6a:	f100 0604 	add.w	r6, r0, #4
 8009b6e:	d13e      	bne.n	8009bee <arm_split_rfft_q15+0xb2>
 8009b70:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8009b72:	f1ac 0104 	sub.w	r1, ip, #4
 8009b76:	f107 0808 	add.w	r8, r7, #8
 8009b7a:	f856 7b04 	ldr.w	r7, [r6], #4
 8009b7e:	f852 9b04 	ldr.w	r9, [r2], #4
 8009b82:	fb47 fc09 	smusd	ip, r7, r9
 8009b86:	f855 e904 	ldr.w	lr, [r5], #-4
 8009b8a:	f853 ab04 	ldr.w	sl, [r3], #4
 8009b8e:	fb2e cc0a 	smlad	ip, lr, sl, ip
 8009b92:	fb4e fe1a 	smusdx	lr, lr, sl
 8009b96:	fb27 e719 	smladx	r7, r7, r9, lr
 8009b9a:	143f      	asrs	r7, r7, #16
 8009b9c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 8009ba0:	f1c7 0e00 	rsb	lr, r7, #0
 8009ba4:	3c01      	subs	r4, #1
 8009ba6:	f828 7c02 	strh.w	r7, [r8, #-2]
 8009baa:	f828 cc04 	strh.w	ip, [r8, #-4]
 8009bae:	f1a1 0104 	sub.w	r1, r1, #4
 8009bb2:	f8a1 e00a 	strh.w	lr, [r1, #10]
 8009bb6:	f8a1 c008 	strh.w	ip, [r1, #8]
 8009bba:	f108 0804 	add.w	r8, r8, #4
 8009bbe:	d1dc      	bne.n	8009b7a <arm_split_rfft_q15+0x3e>
 8009bc0:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8009bc4:	f9b0 3000 	ldrsh.w	r3, [r0]
 8009bc8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009bca:	9a01      	ldr	r2, [sp, #4]
 8009bcc:	1a5b      	subs	r3, r3, r1
 8009bce:	4422      	add	r2, r4
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	105b      	asrs	r3, r3, #1
 8009bd4:	8093      	strh	r3, [r2, #4]
 8009bd6:	80d1      	strh	r1, [r2, #6]
 8009bd8:	f9b0 3000 	ldrsh.w	r3, [r0]
 8009bdc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8009be0:	8061      	strh	r1, [r4, #2]
 8009be2:	4413      	add	r3, r2
 8009be4:	105b      	asrs	r3, r3, #1
 8009be6:	8023      	strh	r3, [r4, #0]
 8009be8:	b003      	add	sp, #12
 8009bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bee:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8009bf2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8009bf4:	f1ac 0104 	sub.w	r1, ip, #4
 8009bf8:	f107 0808 	add.w	r8, r7, #8
 8009bfc:	f856 7b04 	ldr.w	r7, [r6], #4
 8009c00:	f8d2 9000 	ldr.w	r9, [r2]
 8009c04:	fb47 fc09 	smusd	ip, r7, r9
 8009c08:	f855 e904 	ldr.w	lr, [r5], #-4
 8009c0c:	f8d3 a000 	ldr.w	sl, [r3]
 8009c10:	fb2e cc0a 	smlad	ip, lr, sl, ip
 8009c14:	fb4e fe1a 	smusdx	lr, lr, sl
 8009c18:	fb27 e719 	smladx	r7, r7, r9, lr
 8009c1c:	143f      	asrs	r7, r7, #16
 8009c1e:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 8009c22:	f1c7 0e00 	rsb	lr, r7, #0
 8009c26:	3c01      	subs	r4, #1
 8009c28:	f828 7c02 	strh.w	r7, [r8, #-2]
 8009c2c:	f828 cc04 	strh.w	ip, [r8, #-4]
 8009c30:	445b      	add	r3, fp
 8009c32:	f8a1 e006 	strh.w	lr, [r1, #6]
 8009c36:	f8a1 c004 	strh.w	ip, [r1, #4]
 8009c3a:	445a      	add	r2, fp
 8009c3c:	f108 0804 	add.w	r8, r8, #4
 8009c40:	f1a1 0104 	sub.w	r1, r1, #4
 8009c44:	d1da      	bne.n	8009bfc <arm_split_rfft_q15+0xc0>
 8009c46:	e7bb      	b.n	8009bc0 <arm_split_rfft_q15+0x84>

08009c48 <arm_rfft_q15>:
 8009c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c4c:	f890 e004 	ldrb.w	lr, [r0, #4]
 8009c50:	6806      	ldr	r6, [r0, #0]
 8009c52:	f1be 0f01 	cmp.w	lr, #1
 8009c56:	4604      	mov	r4, r0
 8009c58:	b083      	sub	sp, #12
 8009c5a:	6940      	ldr	r0, [r0, #20]
 8009c5c:	4615      	mov	r5, r2
 8009c5e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009c62:	460f      	mov	r7, r1
 8009c64:	d00f      	beq.n	8009c86 <arm_rfft_q15+0x3e>
 8009c66:	7963      	ldrb	r3, [r4, #5]
 8009c68:	4672      	mov	r2, lr
 8009c6a:	f000 fd41 	bl	800a6f0 <arm_cfft_q15>
 8009c6e:	68a3      	ldr	r3, [r4, #8]
 8009c70:	9301      	str	r3, [sp, #4]
 8009c72:	9500      	str	r5, [sp, #0]
 8009c74:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 8009c78:	4631      	mov	r1, r6
 8009c7a:	4638      	mov	r0, r7
 8009c7c:	f7ff ff5e 	bl	8009b3c <arm_split_rfft_q15>
 8009c80:	b003      	add	sp, #12
 8009c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c86:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
 8009c8a:	68a2      	ldr	r2, [r4, #8]
 8009c8c:	eb07 0c86 	add.w	ip, r7, r6, lsl #2
 8009c90:	b30e      	cbz	r6, 8009cd6 <arm_rfft_q15+0x8e>
 8009c92:	2a01      	cmp	r2, #1
 8009c94:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8009c98:	d132      	bne.n	8009d00 <arm_rfft_q15+0xb8>
 8009c9a:	46a9      	mov	r9, r5
 8009c9c:	f85c 8904 	ldr.w	r8, [ip], #-4
 8009ca0:	f851 2b04 	ldr.w	r2, [r1], #4
 8009ca4:	fb48 fa02 	smusd	sl, r8, r2
 8009ca8:	f857 bb04 	ldr.w	fp, [r7], #4
 8009cac:	f853 eb04 	ldr.w	lr, [r3], #4
 8009cb0:	fb2b aa0e 	smlad	sl, fp, lr, sl
 8009cb4:	fb28 f812 	smuadx	r8, r8, r2
 8009cb8:	f1c8 0200 	rsb	r2, r8, #0
 8009cbc:	fb4e 2e1b 	smlsdx	lr, lr, fp, r2
 8009cc0:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8009cc4:	0412      	lsls	r2, r2, #16
 8009cc6:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 8009cca:	3e01      	subs	r6, #1
 8009ccc:	f849 2b04 	str.w	r2, [r9], #4
 8009cd0:	d1e4      	bne.n	8009c9c <arm_rfft_q15+0x54>
 8009cd2:	f894 e004 	ldrb.w	lr, [r4, #4]
 8009cd6:	7963      	ldrb	r3, [r4, #5]
 8009cd8:	4672      	mov	r2, lr
 8009cda:	4629      	mov	r1, r5
 8009cdc:	f000 fd08 	bl	800a6f0 <arm_cfft_q15>
 8009ce0:	6823      	ldr	r3, [r4, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d0cc      	beq.n	8009c80 <arm_rfft_q15+0x38>
 8009ce6:	3d02      	subs	r5, #2
 8009ce8:	2100      	movs	r1, #0
 8009cea:	f935 3f02 	ldrsh.w	r3, [r5, #2]!
 8009cee:	005b      	lsls	r3, r3, #1
 8009cf0:	802b      	strh	r3, [r5, #0]
 8009cf2:	6823      	ldr	r3, [r4, #0]
 8009cf4:	3101      	adds	r1, #1
 8009cf6:	428b      	cmp	r3, r1
 8009cf8:	d8f7      	bhi.n	8009cea <arm_rfft_q15+0xa2>
 8009cfa:	b003      	add	sp, #12
 8009cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d00:	ee07 0a90 	vmov	s15, r0
 8009d04:	46a8      	mov	r8, r5
 8009d06:	f85c e904 	ldr.w	lr, [ip], #-4
 8009d0a:	6808      	ldr	r0, [r1, #0]
 8009d0c:	fb4e f900 	smusd	r9, lr, r0
 8009d10:	f857 ab04 	ldr.w	sl, [r7], #4
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	fb2a 9902 	smlad	r9, sl, r2, r9
 8009d1a:	fb2e fe10 	smuadx	lr, lr, r0
 8009d1e:	f1ce 0e00 	rsb	lr, lr, #0
 8009d22:	fb42 e21a 	smlsdx	r2, r2, sl, lr
 8009d26:	0c12      	lsrs	r2, r2, #16
 8009d28:	0412      	lsls	r2, r2, #16
 8009d2a:	ea42 4219 	orr.w	r2, r2, r9, lsr #16
 8009d2e:	3e01      	subs	r6, #1
 8009d30:	f848 2b04 	str.w	r2, [r8], #4
 8009d34:	4459      	add	r1, fp
 8009d36:	445b      	add	r3, fp
 8009d38:	d1e5      	bne.n	8009d06 <arm_rfft_q15+0xbe>
 8009d3a:	ee17 0a90 	vmov	r0, s15
 8009d3e:	e7c8      	b.n	8009cd2 <arm_rfft_q15+0x8a>

08009d40 <arm_rfft_init_q15>:
 8009d40:	b430      	push	{r4, r5}
 8009d42:	b289      	uxth	r1, r1
 8009d44:	4d31      	ldr	r5, [pc, #196]	; (8009e0c <arm_rfft_init_q15+0xcc>)
 8009d46:	4c32      	ldr	r4, [pc, #200]	; (8009e10 <arm_rfft_init_q15+0xd0>)
 8009d48:	6001      	str	r1, [r0, #0]
 8009d4a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009d4e:	e9c0 5403 	strd	r5, r4, [r0, #12]
 8009d52:	7102      	strb	r2, [r0, #4]
 8009d54:	7143      	strb	r3, [r0, #5]
 8009d56:	d053      	beq.n	8009e00 <arm_rfft_init_q15+0xc0>
 8009d58:	d91a      	bls.n	8009d90 <arm_rfft_init_q15+0x50>
 8009d5a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8009d5e:	d033      	beq.n	8009dc8 <arm_rfft_init_q15+0x88>
 8009d60:	d909      	bls.n	8009d76 <arm_rfft_init_q15+0x36>
 8009d62:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8009d66:	d12b      	bne.n	8009dc0 <arm_rfft_init_q15+0x80>
 8009d68:	4b2a      	ldr	r3, [pc, #168]	; (8009e14 <arm_rfft_init_q15+0xd4>)
 8009d6a:	6143      	str	r3, [r0, #20]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	6082      	str	r2, [r0, #8]
 8009d70:	2000      	movs	r0, #0
 8009d72:	bc30      	pop	{r4, r5}
 8009d74:	4770      	bx	lr
 8009d76:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009d7a:	d02c      	beq.n	8009dd6 <arm_rfft_init_q15+0x96>
 8009d7c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8009d80:	d11e      	bne.n	8009dc0 <arm_rfft_init_q15+0x80>
 8009d82:	4b25      	ldr	r3, [pc, #148]	; (8009e18 <arm_rfft_init_q15+0xd8>)
 8009d84:	6143      	str	r3, [r0, #20]
 8009d86:	2204      	movs	r2, #4
 8009d88:	6082      	str	r2, [r0, #8]
 8009d8a:	bc30      	pop	{r4, r5}
 8009d8c:	2000      	movs	r0, #0
 8009d8e:	4770      	bx	lr
 8009d90:	2980      	cmp	r1, #128	; 0x80
 8009d92:	d027      	beq.n	8009de4 <arm_rfft_init_q15+0xa4>
 8009d94:	d909      	bls.n	8009daa <arm_rfft_init_q15+0x6a>
 8009d96:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8009d9a:	d111      	bne.n	8009dc0 <arm_rfft_init_q15+0x80>
 8009d9c:	4b1f      	ldr	r3, [pc, #124]	; (8009e1c <arm_rfft_init_q15+0xdc>)
 8009d9e:	6143      	str	r3, [r0, #20]
 8009da0:	2220      	movs	r2, #32
 8009da2:	6082      	str	r2, [r0, #8]
 8009da4:	bc30      	pop	{r4, r5}
 8009da6:	2000      	movs	r0, #0
 8009da8:	4770      	bx	lr
 8009daa:	2920      	cmp	r1, #32
 8009dac:	d021      	beq.n	8009df2 <arm_rfft_init_q15+0xb2>
 8009dae:	2940      	cmp	r1, #64	; 0x40
 8009db0:	d106      	bne.n	8009dc0 <arm_rfft_init_q15+0x80>
 8009db2:	4b1b      	ldr	r3, [pc, #108]	; (8009e20 <arm_rfft_init_q15+0xe0>)
 8009db4:	6143      	str	r3, [r0, #20]
 8009db6:	2280      	movs	r2, #128	; 0x80
 8009db8:	6082      	str	r2, [r0, #8]
 8009dba:	bc30      	pop	{r4, r5}
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	4770      	bx	lr
 8009dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dc4:	bc30      	pop	{r4, r5}
 8009dc6:	4770      	bx	lr
 8009dc8:	4b16      	ldr	r3, [pc, #88]	; (8009e24 <arm_rfft_init_q15+0xe4>)
 8009dca:	6143      	str	r3, [r0, #20]
 8009dcc:	2202      	movs	r2, #2
 8009dce:	6082      	str	r2, [r0, #8]
 8009dd0:	bc30      	pop	{r4, r5}
 8009dd2:	2000      	movs	r0, #0
 8009dd4:	4770      	bx	lr
 8009dd6:	4b14      	ldr	r3, [pc, #80]	; (8009e28 <arm_rfft_init_q15+0xe8>)
 8009dd8:	6143      	str	r3, [r0, #20]
 8009dda:	2208      	movs	r2, #8
 8009ddc:	6082      	str	r2, [r0, #8]
 8009dde:	bc30      	pop	{r4, r5}
 8009de0:	2000      	movs	r0, #0
 8009de2:	4770      	bx	lr
 8009de4:	4b11      	ldr	r3, [pc, #68]	; (8009e2c <arm_rfft_init_q15+0xec>)
 8009de6:	6143      	str	r3, [r0, #20]
 8009de8:	2240      	movs	r2, #64	; 0x40
 8009dea:	6082      	str	r2, [r0, #8]
 8009dec:	bc30      	pop	{r4, r5}
 8009dee:	2000      	movs	r0, #0
 8009df0:	4770      	bx	lr
 8009df2:	4b0f      	ldr	r3, [pc, #60]	; (8009e30 <arm_rfft_init_q15+0xf0>)
 8009df4:	6143      	str	r3, [r0, #20]
 8009df6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009dfa:	6082      	str	r2, [r0, #8]
 8009dfc:	2000      	movs	r0, #0
 8009dfe:	e7b8      	b.n	8009d72 <arm_rfft_init_q15+0x32>
 8009e00:	4b0c      	ldr	r3, [pc, #48]	; (8009e34 <arm_rfft_init_q15+0xf4>)
 8009e02:	6143      	str	r3, [r0, #20]
 8009e04:	2210      	movs	r2, #16
 8009e06:	6082      	str	r2, [r0, #8]
 8009e08:	2000      	movs	r0, #0
 8009e0a:	e7b2      	b.n	8009d72 <arm_rfft_init_q15+0x32>
 8009e0c:	08011db4 	.word	0x08011db4
 8009e10:	08015db4 	.word	0x08015db4
 8009e14:	0800df8c 	.word	0x0800df8c
 8009e18:	0800df2c 	.word	0x0800df2c
 8009e1c:	0800df3c 	.word	0x0800df3c
 8009e20:	0800df7c 	.word	0x0800df7c
 8009e24:	0800df5c 	.word	0x0800df5c
 8009e28:	0800df9c 	.word	0x0800df9c
 8009e2c:	0800dfac 	.word	0x0800dfac
 8009e30:	0800df4c 	.word	0x0800df4c
 8009e34:	0800df6c 	.word	0x0800df6c

08009e38 <arm_mat_mult_fast_q15>:
 8009e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e3c:	b09d      	sub	sp, #116	; 0x74
 8009e3e:	880f      	ldrh	r7, [r1, #0]
 8009e40:	9009      	str	r0, [sp, #36]	; 0x24
 8009e42:	4606      	mov	r6, r0
 8009e44:	8840      	ldrh	r0, [r0, #2]
 8009e46:	884d      	ldrh	r5, [r1, #2]
 8009e48:	8836      	ldrh	r6, [r6, #0]
 8009e4a:	684c      	ldr	r4, [r1, #4]
 8009e4c:	9017      	str	r0, [sp, #92]	; 0x5c
 8009e4e:	42b8      	cmp	r0, r7
 8009e50:	971a      	str	r7, [sp, #104]	; 0x68
 8009e52:	9518      	str	r5, [sp, #96]	; 0x60
 8009e54:	9616      	str	r6, [sp, #88]	; 0x58
 8009e56:	9219      	str	r2, [sp, #100]	; 0x64
 8009e58:	9311      	str	r3, [sp, #68]	; 0x44
 8009e5a:	f040 81e9 	bne.w	800a230 <arm_mat_mult_fast_q15+0x3f8>
 8009e5e:	8813      	ldrh	r3, [r2, #0]
 8009e60:	42b3      	cmp	r3, r6
 8009e62:	f040 81e5 	bne.w	800a230 <arm_mat_mult_fast_q15+0x3f8>
 8009e66:	8853      	ldrh	r3, [r2, #2]
 8009e68:	42ab      	cmp	r3, r5
 8009e6a:	f040 81e1 	bne.w	800a230 <arm_mat_mult_fast_q15+0x3f8>
 8009e6e:	0043      	lsls	r3, r0, #1
 8009e70:	2801      	cmp	r0, #1
 8009e72:	ea4f 0695 	mov.w	r6, r5, lsr #2
 8009e76:	9306      	str	r3, [sp, #24]
 8009e78:	f005 0703 	and.w	r7, r5, #3
 8009e7c:	d133      	bne.n	8009ee6 <arm_mat_mult_fast_q15+0xae>
 8009e7e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8009e82:	fb06 fc03 	mul.w	ip, r6, r3
 8009e86:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8009e8a:	ea4f 08c6 	mov.w	r8, r6, lsl #3
 8009e8e:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8009e92:	4655      	mov	r5, sl
 8009e94:	4699      	mov	r9, r3
 8009e96:	462b      	mov	r3, r5
 8009e98:	b1ae      	cbz	r6, 8009ec6 <arm_mat_mult_fast_q15+0x8e>
 8009e9a:	4621      	mov	r1, r4
 8009e9c:	4630      	mov	r0, r6
 8009e9e:	680a      	ldr	r2, [r1, #0]
 8009ea0:	801a      	strh	r2, [r3, #0]
 8009ea2:	1412      	asrs	r2, r2, #16
 8009ea4:	f823 2009 	strh.w	r2, [r3, r9]
 8009ea8:	684a      	ldr	r2, [r1, #4]
 8009eaa:	f823 2019 	strh.w	r2, [r3, r9, lsl #1]
 8009eae:	3801      	subs	r0, #1
 8009eb0:	ea4f 4222 	mov.w	r2, r2, asr #16
 8009eb4:	80da      	strh	r2, [r3, #6]
 8009eb6:	f101 0108 	add.w	r1, r1, #8
 8009eba:	f103 0308 	add.w	r3, r3, #8
 8009ebe:	d1ee      	bne.n	8009e9e <arm_mat_mult_fast_q15+0x66>
 8009ec0:	4444      	add	r4, r8
 8009ec2:	eb05 030c 	add.w	r3, r5, ip
 8009ec6:	b147      	cbz	r7, 8009eda <arm_mat_mult_fast_q15+0xa2>
 8009ec8:	4621      	mov	r1, r4
 8009eca:	463a      	mov	r2, r7
 8009ecc:	f931 0b02 	ldrsh.w	r0, [r1], #2
 8009ed0:	8018      	strh	r0, [r3, #0]
 8009ed2:	3a01      	subs	r2, #1
 8009ed4:	444b      	add	r3, r9
 8009ed6:	d1f9      	bne.n	8009ecc <arm_mat_mult_fast_q15+0x94>
 8009ed8:	4474      	add	r4, lr
 8009eda:	45aa      	cmp	sl, r5
 8009edc:	f105 0302 	add.w	r3, r5, #2
 8009ee0:	d038      	beq.n	8009f54 <arm_mat_mult_fast_q15+0x11c>
 8009ee2:	461d      	mov	r5, r3
 8009ee4:	e7d7      	b.n	8009e96 <arm_mat_mult_fast_q15+0x5e>
 8009ee6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009ee8:	181d      	adds	r5, r3, r0
 8009eea:	fb06 f803 	mul.w	r8, r6, r3
 8009eee:	4696      	mov	lr, r2
 8009ef0:	441a      	add	r2, r3
 8009ef2:	006d      	lsls	r5, r5, #1
 8009ef4:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8009ef8:	9212      	str	r2, [sp, #72]	; 0x48
 8009efa:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
 8009efe:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 8009f02:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8009f06:	469b      	mov	fp, r3
 8009f08:	4673      	mov	r3, lr
 8009f0a:	b1a6      	cbz	r6, 8009f36 <arm_mat_mult_fast_q15+0xfe>
 8009f0c:	4621      	mov	r1, r4
 8009f0e:	4630      	mov	r0, r6
 8009f10:	680a      	ldr	r2, [r1, #0]
 8009f12:	801a      	strh	r2, [r3, #0]
 8009f14:	1412      	asrs	r2, r2, #16
 8009f16:	f823 200b 	strh.w	r2, [r3, fp]
 8009f1a:	684a      	ldr	r2, [r1, #4]
 8009f1c:	f823 201b 	strh.w	r2, [r3, fp, lsl #1]
 8009f20:	3801      	subs	r0, #1
 8009f22:	ea4f 4222 	mov.w	r2, r2, asr #16
 8009f26:	535a      	strh	r2, [r3, r5]
 8009f28:	f101 0108 	add.w	r1, r1, #8
 8009f2c:	4463      	add	r3, ip
 8009f2e:	d1ef      	bne.n	8009f10 <arm_mat_mult_fast_q15+0xd8>
 8009f30:	444c      	add	r4, r9
 8009f32:	eb0e 0308 	add.w	r3, lr, r8
 8009f36:	b147      	cbz	r7, 8009f4a <arm_mat_mult_fast_q15+0x112>
 8009f38:	4621      	mov	r1, r4
 8009f3a:	463a      	mov	r2, r7
 8009f3c:	f931 0b02 	ldrsh.w	r0, [r1], #2
 8009f40:	8018      	strh	r0, [r3, #0]
 8009f42:	3a01      	subs	r2, #1
 8009f44:	445b      	add	r3, fp
 8009f46:	d1f9      	bne.n	8009f3c <arm_mat_mult_fast_q15+0x104>
 8009f48:	4454      	add	r4, sl
 8009f4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f4c:	f10e 0e02 	add.w	lr, lr, #2
 8009f50:	4573      	cmp	r3, lr
 8009f52:	d1d9      	bne.n	8009f08 <arm_mat_mult_fast_q15+0xd0>
 8009f54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009f56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009f5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f5e:	004c      	lsls	r4, r1, #1
 8009f60:	eb03 0541 	add.w	r5, r3, r1, lsl #1
 8009f64:	0852      	lsrs	r2, r2, #1
 8009f66:	9415      	str	r4, [sp, #84]	; 0x54
 8009f68:	950d      	str	r5, [sp, #52]	; 0x34
 8009f6a:	9210      	str	r2, [sp, #64]	; 0x40
 8009f6c:	f000 80b1 	beq.w	800a0d2 <arm_mat_mult_fast_q15+0x29a>
 8009f70:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009f72:	460a      	mov	r2, r1
 8009f74:	0846      	lsrs	r6, r0, #1
 8009f76:	f001 0101 	and.w	r1, r1, #1
 8009f7a:	f000 0001 	and.w	r0, r0, #1
 8009f7e:	0852      	lsrs	r2, r2, #1
 8009f80:	911b      	str	r1, [sp, #108]	; 0x6c
 8009f82:	9607      	str	r6, [sp, #28]
 8009f84:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009f88:	900a      	str	r0, [sp, #40]	; 0x28
 8009f8a:	f000 809f 	beq.w	800a0cc <arm_mat_mult_fast_q15+0x294>
 8009f8e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009f92:	1ac8      	subs	r0, r1, r3
 8009f94:	3304      	adds	r3, #4
 8009f96:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8009f9a:	9205      	str	r2, [sp, #20]
 8009f9c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009f9e:	0092      	lsls	r2, r2, #2
 8009fa0:	920b      	str	r2, [sp, #44]	; 0x2c
 8009fa2:	00b2      	lsls	r2, r6, #2
 8009fa4:	1861      	adds	r1, r4, r1
 8009fa6:	920c      	str	r2, [sp, #48]	; 0x30
 8009fa8:	2200      	movs	r2, #0
 8009faa:	9114      	str	r1, [sp, #80]	; 0x50
 8009fac:	920e      	str	r2, [sp, #56]	; 0x38
 8009fae:	9906      	ldr	r1, [sp, #24]
 8009fb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009fb2:	1828      	adds	r0, r5, r0
 8009fb4:	440a      	add	r2, r1
 8009fb6:	9013      	str	r0, [sp, #76]	; 0x4c
 8009fb8:	9212      	str	r2, [sp, #72]	; 0x48
 8009fba:	9304      	str	r3, [sp, #16]
 8009fbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fbe:	005b      	lsls	r3, r3, #1
 8009fc0:	9308      	str	r3, [sp, #32]
 8009fc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fc4:	3304      	adds	r3, #4
 8009fc6:	9303      	str	r3, [sp, #12]
 8009fc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009fca:	9301      	str	r3, [sp, #4]
 8009fcc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009fce:	9300      	str	r3, [sp, #0]
 8009fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fd2:	9a08      	ldr	r2, [sp, #32]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	eb03 0b02 	add.w	fp, r3, r2
 8009fda:	9b06      	ldr	r3, [sp, #24]
 8009fdc:	eb0b 0203 	add.w	r2, fp, r3
 8009fe0:	9b07      	ldr	r3, [sp, #28]
 8009fe2:	9202      	str	r2, [sp, #8]
 8009fe4:	e9dd e800 	ldrd	lr, r8, [sp]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d06a      	beq.n	800a0c2 <arm_mat_mult_fast_q15+0x28a>
 8009fec:	2500      	movs	r5, #0
 8009fee:	462e      	mov	r6, r5
 8009ff0:	462f      	mov	r7, r5
 8009ff2:	46ac      	mov	ip, r5
 8009ff4:	4692      	mov	sl, r2
 8009ff6:	46d9      	mov	r9, fp
 8009ff8:	f859 4b04 	ldr.w	r4, [r9], #4
 8009ffc:	f858 0b04 	ldr.w	r0, [r8], #4
 800a000:	f85a 2b04 	ldr.w	r2, [sl], #4
 800a004:	f85e 1b04 	ldr.w	r1, [lr], #4
 800a008:	fb24 cc00 	smlad	ip, r4, r0, ip
 800a00c:	fb24 7701 	smlad	r7, r4, r1, r7
 800a010:	fb22 6600 	smlad	r6, r2, r0, r6
 800a014:	fb22 5501 	smlad	r5, r2, r1, r5
 800a018:	3b01      	subs	r3, #1
 800a01a:	d1ed      	bne.n	8009ff8 <arm_mat_mult_fast_q15+0x1c0>
 800a01c:	9a02      	ldr	r2, [sp, #8]
 800a01e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a020:	4611      	mov	r1, r2
 800a022:	9a00      	ldr	r2, [sp, #0]
 800a024:	eb02 0e03 	add.w	lr, r2, r3
 800a028:	9a01      	ldr	r2, [sp, #4]
 800a02a:	4419      	add	r1, r3
 800a02c:	9102      	str	r1, [sp, #8]
 800a02e:	449b      	add	fp, r3
 800a030:	eb02 0803 	add.w	r8, r2, r3
 800a034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a036:	b183      	cbz	r3, 800a05a <arm_mat_mult_fast_q15+0x222>
 800a038:	9902      	ldr	r1, [sp, #8]
 800a03a:	f9bb 3000 	ldrsh.w	r3, [fp]
 800a03e:	f9b8 2000 	ldrsh.w	r2, [r8]
 800a042:	f9b1 1000 	ldrsh.w	r1, [r1]
 800a046:	f9be 0000 	ldrsh.w	r0, [lr]
 800a04a:	fb03 cc02 	mla	ip, r3, r2, ip
 800a04e:	fb02 6601 	mla	r6, r2, r1, r6
 800a052:	fb03 7700 	mla	r7, r3, r0, r7
 800a056:	fb01 5500 	mla	r5, r1, r0, r5
 800a05a:	9b04      	ldr	r3, [sp, #16]
 800a05c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a05e:	9801      	ldr	r0, [sp, #4]
 800a060:	ea4f 3cec 	mov.w	ip, ip, asr #15
 800a064:	13ff      	asrs	r7, r7, #15
 800a066:	1d19      	adds	r1, r3, #4
 800a068:	f823 cc04 	strh.w	ip, [r3, #-4]
 800a06c:	f823 7c02 	strh.w	r7, [r3, #-2]
 800a070:	9b03      	ldr	r3, [sp, #12]
 800a072:	9104      	str	r1, [sp, #16]
 800a074:	13f6      	asrs	r6, r6, #15
 800a076:	13ed      	asrs	r5, r5, #15
 800a078:	f823 6c04 	strh.w	r6, [r3, #-4]
 800a07c:	f823 5c02 	strh.w	r5, [r3, #-2]
 800a080:	3304      	adds	r3, #4
 800a082:	9303      	str	r3, [sp, #12]
 800a084:	9b00      	ldr	r3, [sp, #0]
 800a086:	4413      	add	r3, r2
 800a088:	9300      	str	r3, [sp, #0]
 800a08a:	9b05      	ldr	r3, [sp, #20]
 800a08c:	4604      	mov	r4, r0
 800a08e:	4414      	add	r4, r2
 800a090:	428b      	cmp	r3, r1
 800a092:	9401      	str	r4, [sp, #4]
 800a094:	d19c      	bne.n	8009fd0 <arm_mat_mult_fast_q15+0x198>
 800a096:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a098:	9a06      	ldr	r2, [sp, #24]
 800a09a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a09c:	4413      	add	r3, r2
 800a09e:	930e      	str	r3, [sp, #56]	; 0x38
 800a0a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a0a4:	4610      	mov	r0, r2
 800a0a6:	4419      	add	r1, r3
 800a0a8:	9a05      	ldr	r2, [sp, #20]
 800a0aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a0ac:	910f      	str	r1, [sp, #60]	; 0x3c
 800a0ae:	4418      	add	r0, r3
 800a0b0:	441a      	add	r2, r3
 800a0b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0b4:	900d      	str	r0, [sp, #52]	; 0x34
 800a0b6:	3b01      	subs	r3, #1
 800a0b8:	9205      	str	r2, [sp, #20]
 800a0ba:	9310      	str	r3, [sp, #64]	; 0x40
 800a0bc:	d006      	beq.n	800a0cc <arm_mat_mult_fast_q15+0x294>
 800a0be:	1d0b      	adds	r3, r1, #4
 800a0c0:	e77b      	b.n	8009fba <arm_mat_mult_fast_q15+0x182>
 800a0c2:	469c      	mov	ip, r3
 800a0c4:	461d      	mov	r5, r3
 800a0c6:	461e      	mov	r6, r3
 800a0c8:	461f      	mov	r7, r3
 800a0ca:	e7b3      	b.n	800a034 <arm_mat_mult_fast_q15+0x1fc>
 800a0cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d155      	bne.n	800a17e <arm_mat_mult_fast_q15+0x346>
 800a0d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a0d4:	07da      	lsls	r2, r3, #31
 800a0d6:	d54e      	bpl.n	800a176 <arm_mat_mult_fast_q15+0x33e>
 800a0d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a0da:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a0dc:	6852      	ldr	r2, [r2, #4]
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	fb03 fe01 	mul.w	lr, r3, r1
 800a0e4:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 800a0e8:	2900      	cmp	r1, #0
 800a0ea:	d044      	beq.n	800a176 <arm_mat_mult_fast_q15+0x33e>
 800a0ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a0ee:	fb03 f302 	mul.w	r3, r3, r2
 800a0f2:	ea4f 0b43 	mov.w	fp, r3, lsl #1
 800a0f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0f8:	f8cd b008 	str.w	fp, [sp, #8]
 800a0fc:	4473      	add	r3, lr
 800a0fe:	f002 0903 	and.w	r9, r2, #3
 800a102:	ea4f 0892 	mov.w	r8, r2, lsr #2
 800a106:	9301      	str	r3, [sp, #4]
 800a108:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800a10c:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800a110:	ea4f 0ac8 	mov.w	sl, r8, lsl #3
 800a114:	9300      	str	r3, [sp, #0]
 800a116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a118:	685d      	ldr	r5, [r3, #4]
 800a11a:	9b02      	ldr	r3, [sp, #8]
 800a11c:	441d      	add	r5, r3
 800a11e:	f1b8 0f00 	cmp.w	r8, #0
 800a122:	f000 8083 	beq.w	800a22c <arm_mat_mult_fast_q15+0x3f4>
 800a126:	4658      	mov	r0, fp
 800a128:	4629      	mov	r1, r5
 800a12a:	4644      	mov	r4, r8
 800a12c:	2300      	movs	r3, #0
 800a12e:	680f      	ldr	r7, [r1, #0]
 800a130:	684a      	ldr	r2, [r1, #4]
 800a132:	f8d0 c000 	ldr.w	ip, [r0]
 800a136:	6846      	ldr	r6, [r0, #4]
 800a138:	3108      	adds	r1, #8
 800a13a:	3008      	adds	r0, #8
 800a13c:	fb27 330c 	smlad	r3, r7, ip, r3
 800a140:	fb22 3306 	smlad	r3, r2, r6, r3
 800a144:	3c01      	subs	r4, #1
 800a146:	d1f2      	bne.n	800a12e <arm_mat_mult_fast_q15+0x2f6>
 800a148:	44d3      	add	fp, sl
 800a14a:	4455      	add	r5, sl
 800a14c:	f1b9 0f00 	cmp.w	r9, #0
 800a150:	d00b      	beq.n	800a16a <arm_mat_mult_fast_q15+0x332>
 800a152:	4659      	mov	r1, fp
 800a154:	464a      	mov	r2, r9
 800a156:	f835 4b02 	ldrh.w	r4, [r5], #2
 800a15a:	f831 0b02 	ldrh.w	r0, [r1], #2
 800a15e:	3a01      	subs	r2, #1
 800a160:	fb14 3300 	smlabb	r3, r4, r0, r3
 800a164:	d1f7      	bne.n	800a156 <arm_mat_mult_fast_q15+0x31e>
 800a166:	9a00      	ldr	r2, [sp, #0]
 800a168:	4493      	add	fp, r2
 800a16a:	13db      	asrs	r3, r3, #15
 800a16c:	f82e 3b02 	strh.w	r3, [lr], #2
 800a170:	9b01      	ldr	r3, [sp, #4]
 800a172:	459e      	cmp	lr, r3
 800a174:	d1cf      	bne.n	800a116 <arm_mat_mult_fast_q15+0x2de>
 800a176:	2000      	movs	r0, #0
 800a178:	b01d      	add	sp, #116	; 0x74
 800a17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a17e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a180:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a182:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a184:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800a188:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a18a:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800a18e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a190:	fb03 fb0b 	mul.w	fp, r3, fp
 800a194:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a196:	eb02 0b4b 	add.w	fp, r2, fp, lsl #1
 800a19a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	f002 0903 	and.w	r9, r2, #3
 800a1a2:	f1a1 0e02 	sub.w	lr, r1, #2
 800a1a6:	ea4f 0892 	mov.w	r8, r2, lsr #2
 800a1aa:	449e      	add	lr, r3
 800a1ac:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800a1b0:	eb0b 02c8 	add.w	r2, fp, r8, lsl #3
 800a1b4:	9301      	str	r3, [sp, #4]
 800a1b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a1b8:	9202      	str	r2, [sp, #8]
 800a1ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a1be:	9200      	str	r2, [sp, #0]
 800a1c0:	f023 0a01 	bic.w	sl, r3, #1
 800a1c4:	f1b8 0f00 	cmp.w	r8, #0
 800a1c8:	d02d      	beq.n	800a226 <arm_mat_mult_fast_q15+0x3ee>
 800a1ca:	4658      	mov	r0, fp
 800a1cc:	4661      	mov	r1, ip
 800a1ce:	4644      	mov	r4, r8
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	680e      	ldr	r6, [r1, #0]
 800a1d4:	684a      	ldr	r2, [r1, #4]
 800a1d6:	6807      	ldr	r7, [r0, #0]
 800a1d8:	6845      	ldr	r5, [r0, #4]
 800a1da:	3108      	adds	r1, #8
 800a1dc:	3008      	adds	r0, #8
 800a1de:	fb26 3307 	smlad	r3, r6, r7, r3
 800a1e2:	fb22 3305 	smlad	r3, r2, r5, r3
 800a1e6:	3c01      	subs	r4, #1
 800a1e8:	d1f3      	bne.n	800a1d2 <arm_mat_mult_fast_q15+0x39a>
 800a1ea:	9a00      	ldr	r2, [sp, #0]
 800a1ec:	9902      	ldr	r1, [sp, #8]
 800a1ee:	4494      	add	ip, r2
 800a1f0:	f1b9 0f00 	cmp.w	r9, #0
 800a1f4:	d00b      	beq.n	800a20e <arm_mat_mult_fast_q15+0x3d6>
 800a1f6:	4660      	mov	r0, ip
 800a1f8:	464a      	mov	r2, r9
 800a1fa:	f830 5b02 	ldrh.w	r5, [r0], #2
 800a1fe:	f831 4b02 	ldrh.w	r4, [r1], #2
 800a202:	3a01      	subs	r2, #1
 800a204:	fb15 3304 	smlabb	r3, r5, r4, r3
 800a208:	d1f7      	bne.n	800a1fa <arm_mat_mult_fast_q15+0x3c2>
 800a20a:	9a01      	ldr	r2, [sp, #4]
 800a20c:	4494      	add	ip, r2
 800a20e:	13db      	asrs	r3, r3, #15
 800a210:	f8ae 3000 	strh.w	r3, [lr]
 800a214:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a216:	f1ba 0a01 	subs.w	sl, sl, #1
 800a21a:	449e      	add	lr, r3
 800a21c:	f43f af59 	beq.w	800a0d2 <arm_mat_mult_fast_q15+0x29a>
 800a220:	f1b8 0f00 	cmp.w	r8, #0
 800a224:	d1d1      	bne.n	800a1ca <arm_mat_mult_fast_q15+0x392>
 800a226:	4659      	mov	r1, fp
 800a228:	4643      	mov	r3, r8
 800a22a:	e7e1      	b.n	800a1f0 <arm_mat_mult_fast_q15+0x3b8>
 800a22c:	4643      	mov	r3, r8
 800a22e:	e78d      	b.n	800a14c <arm_mat_mult_fast_q15+0x314>
 800a230:	f06f 0002 	mvn.w	r0, #2
 800a234:	b01d      	add	sp, #116	; 0x74
 800a236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a23a:	bf00      	nop

0800a23c <arm_mat_init_q15>:
 800a23c:	8001      	strh	r1, [r0, #0]
 800a23e:	8042      	strh	r2, [r0, #2]
 800a240:	6043      	str	r3, [r0, #4]
 800a242:	4770      	bx	lr

0800a244 <arm_cmplx_mag_q15>:
 800a244:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a248:	ea5f 0992 	movs.w	r9, r2, lsr #2
 800a24c:	4617      	mov	r7, r2
 800a24e:	4680      	mov	r8, r0
 800a250:	460e      	mov	r6, r1
 800a252:	d029      	beq.n	800a2a8 <arm_cmplx_mag_q15+0x64>
 800a254:	4605      	mov	r5, r0
 800a256:	46ca      	mov	sl, r9
 800a258:	460c      	mov	r4, r1
 800a25a:	6828      	ldr	r0, [r5, #0]
 800a25c:	fb20 f000 	smuad	r0, r0, r0
 800a260:	4621      	mov	r1, r4
 800a262:	1440      	asrs	r0, r0, #17
 800a264:	f000 f832 	bl	800a2cc <arm_sqrt_q15>
 800a268:	6868      	ldr	r0, [r5, #4]
 800a26a:	fb20 f000 	smuad	r0, r0, r0
 800a26e:	1ca1      	adds	r1, r4, #2
 800a270:	1440      	asrs	r0, r0, #17
 800a272:	f000 f82b 	bl	800a2cc <arm_sqrt_q15>
 800a276:	68a8      	ldr	r0, [r5, #8]
 800a278:	fb20 f000 	smuad	r0, r0, r0
 800a27c:	1d21      	adds	r1, r4, #4
 800a27e:	1440      	asrs	r0, r0, #17
 800a280:	f000 f824 	bl	800a2cc <arm_sqrt_q15>
 800a284:	3510      	adds	r5, #16
 800a286:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800a28a:	fb23 f303 	smuad	r3, r3, r3
 800a28e:	1da1      	adds	r1, r4, #6
 800a290:	1458      	asrs	r0, r3, #17
 800a292:	f000 f81b 	bl	800a2cc <arm_sqrt_q15>
 800a296:	f1ba 0a01 	subs.w	sl, sl, #1
 800a29a:	f104 0408 	add.w	r4, r4, #8
 800a29e:	d1dc      	bne.n	800a25a <arm_cmplx_mag_q15+0x16>
 800a2a0:	eb06 06c9 	add.w	r6, r6, r9, lsl #3
 800a2a4:	eb08 1809 	add.w	r8, r8, r9, lsl #4
 800a2a8:	f017 0703 	ands.w	r7, r7, #3
 800a2ac:	d00c      	beq.n	800a2c8 <arm_cmplx_mag_q15+0x84>
 800a2ae:	eb06 0747 	add.w	r7, r6, r7, lsl #1
 800a2b2:	f858 0b04 	ldr.w	r0, [r8], #4
 800a2b6:	fb20 f000 	smuad	r0, r0, r0
 800a2ba:	4631      	mov	r1, r6
 800a2bc:	1440      	asrs	r0, r0, #17
 800a2be:	3602      	adds	r6, #2
 800a2c0:	f000 f804 	bl	800a2cc <arm_sqrt_q15>
 800a2c4:	42be      	cmp	r6, r7
 800a2c6:	d1f4      	bne.n	800a2b2 <arm_cmplx_mag_q15+0x6e>
 800a2c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a2cc <arm_sqrt_q15>:
 800a2cc:	2800      	cmp	r0, #0
 800a2ce:	dd5c      	ble.n	800a38a <arm_sqrt_q15+0xbe>
 800a2d0:	fab0 f280 	clz	r2, r0
 800a2d4:	3a11      	subs	r2, #17
 800a2d6:	b470      	push	{r4, r5, r6}
 800a2d8:	b294      	uxth	r4, r2
 800a2da:	f012 0201 	ands.w	r2, r2, #1
 800a2de:	bf1a      	itte	ne
 800a2e0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800a2e4:	4098      	lslne	r0, r3
 800a2e6:	40a0      	lsleq	r0, r4
 800a2e8:	b200      	sxth	r0, r0
 800a2ea:	ee07 0a90 	vmov	s15, r0
 800a2ee:	eefa 7ae8 	vcvt.f32.s32	s15, s15, #15
 800a2f2:	4b28      	ldr	r3, [pc, #160]	; (800a394 <arm_sqrt_q15+0xc8>)
 800a2f4:	ee17 5a90 	vmov	r5, s15
 800a2f8:	eba3 0365 	sub.w	r3, r3, r5, asr #1
 800a2fc:	ee07 3a90 	vmov	s15, r3
 800a300:	eefe 7ac9 	vcvt.s32.f32	s15, s15, #14
 800a304:	1046      	asrs	r6, r0, #1
 800a306:	ee17 3a90 	vmov	r3, s15
 800a30a:	b21b      	sxth	r3, r3
 800a30c:	fb03 f503 	mul.w	r5, r3, r3
 800a310:	13ed      	asrs	r5, r5, #15
 800a312:	fb15 f506 	smulbb	r5, r5, r6
 800a316:	13ed      	asrs	r5, r5, #15
 800a318:	f5c5 5540 	rsb	r5, r5, #12288	; 0x3000
 800a31c:	fb03 f305 	mul.w	r3, r3, r5
 800a320:	f343 334f 	sbfx	r3, r3, #13, #16
 800a324:	f023 0303 	bic.w	r3, r3, #3
 800a328:	fb03 f503 	mul.w	r5, r3, r3
 800a32c:	13ed      	asrs	r5, r5, #15
 800a32e:	fb15 f506 	smulbb	r5, r5, r6
 800a332:	13ed      	asrs	r5, r5, #15
 800a334:	f5c5 5540 	rsb	r5, r5, #12288	; 0x3000
 800a338:	fb03 f305 	mul.w	r3, r3, r5
 800a33c:	f343 334f 	sbfx	r3, r3, #13, #16
 800a340:	f023 0303 	bic.w	r3, r3, #3
 800a344:	fb03 f503 	mul.w	r5, r3, r3
 800a348:	13ed      	asrs	r5, r5, #15
 800a34a:	fb15 f506 	smulbb	r5, r5, r6
 800a34e:	13ed      	asrs	r5, r5, #15
 800a350:	f5c5 5540 	rsb	r5, r5, #12288	; 0x3000
 800a354:	fb03 f305 	mul.w	r3, r3, r5
 800a358:	13db      	asrs	r3, r3, #15
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	fb13 f300 	smulbb	r3, r3, r0
 800a360:	f343 338f 	sbfx	r3, r3, #14, #16
 800a364:	f023 0301 	bic.w	r3, r3, #1
 800a368:	b13a      	cbz	r2, 800a37a <arm_sqrt_q15+0xae>
 800a36a:	3c01      	subs	r4, #1
 800a36c:	1064      	asrs	r4, r4, #1
 800a36e:	4123      	asrs	r3, r4
 800a370:	b21b      	sxth	r3, r3
 800a372:	2000      	movs	r0, #0
 800a374:	bc70      	pop	{r4, r5, r6}
 800a376:	800b      	strh	r3, [r1, #0]
 800a378:	4770      	bx	lr
 800a37a:	f344 044e 	sbfx	r4, r4, #1, #15
 800a37e:	4123      	asrs	r3, r4
 800a380:	b21b      	sxth	r3, r3
 800a382:	2000      	movs	r0, #0
 800a384:	bc70      	pop	{r4, r5, r6}
 800a386:	800b      	strh	r3, [r1, #0]
 800a388:	4770      	bx	lr
 800a38a:	2300      	movs	r3, #0
 800a38c:	800b      	strh	r3, [r1, #0]
 800a38e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a392:	4770      	bx	lr
 800a394:	5f3759df 	.word	0x5f3759df

0800a398 <arm_shift_q15>:
 800a398:	2900      	cmp	r1, #0
 800a39a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a39e:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800a3a2:	db4a      	blt.n	800a43a <arm_shift_q15+0xa2>
 800a3a4:	f1bc 0f00 	cmp.w	ip, #0
 800a3a8:	d02b      	beq.n	800a402 <arm_shift_q15+0x6a>
 800a3aa:	f100 0508 	add.w	r5, r0, #8
 800a3ae:	4616      	mov	r6, r2
 800a3b0:	4667      	mov	r7, ip
 800a3b2:	f935 4c08 	ldrsh.w	r4, [r5, #-8]
 800a3b6:	408c      	lsls	r4, r1
 800a3b8:	f304 040f 	ssat	r4, #16, r4
 800a3bc:	f935 ec06 	ldrsh.w	lr, [r5, #-6]
 800a3c0:	fa0e fe01 	lsl.w	lr, lr, r1
 800a3c4:	f30e 0e0f 	ssat	lr, #16, lr
 800a3c8:	b2a4      	uxth	r4, r4
 800a3ca:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800a3ce:	6034      	str	r4, [r6, #0]
 800a3d0:	f935 4c04 	ldrsh.w	r4, [r5, #-4]
 800a3d4:	408c      	lsls	r4, r1
 800a3d6:	f304 040f 	ssat	r4, #16, r4
 800a3da:	f935 ec02 	ldrsh.w	lr, [r5, #-2]
 800a3de:	fa0e fe01 	lsl.w	lr, lr, r1
 800a3e2:	f30e 0e0f 	ssat	lr, #16, lr
 800a3e6:	b2a4      	uxth	r4, r4
 800a3e8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800a3ec:	3f01      	subs	r7, #1
 800a3ee:	6074      	str	r4, [r6, #4]
 800a3f0:	f105 0508 	add.w	r5, r5, #8
 800a3f4:	f106 0608 	add.w	r6, r6, #8
 800a3f8:	d1db      	bne.n	800a3b2 <arm_shift_q15+0x1a>
 800a3fa:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 800a3fe:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 800a402:	f013 0303 	ands.w	r3, r3, #3
 800a406:	d016      	beq.n	800a436 <arm_shift_q15+0x9e>
 800a408:	f9b0 4000 	ldrsh.w	r4, [r0]
 800a40c:	408c      	lsls	r4, r1
 800a40e:	f304 040f 	ssat	r4, #16, r4
 800a412:	3b01      	subs	r3, #1
 800a414:	8014      	strh	r4, [r2, #0]
 800a416:	d00e      	beq.n	800a436 <arm_shift_q15+0x9e>
 800a418:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800a41c:	408c      	lsls	r4, r1
 800a41e:	f304 040f 	ssat	r4, #16, r4
 800a422:	2b01      	cmp	r3, #1
 800a424:	8054      	strh	r4, [r2, #2]
 800a426:	d006      	beq.n	800a436 <arm_shift_q15+0x9e>
 800a428:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800a42c:	fa03 f101 	lsl.w	r1, r3, r1
 800a430:	f301 010f 	ssat	r1, #16, r1
 800a434:	8091      	strh	r1, [r2, #4]
 800a436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a43a:	f1bc 0f00 	cmp.w	ip, #0
 800a43e:	d025      	beq.n	800a48c <arm_shift_q15+0xf4>
 800a440:	424f      	negs	r7, r1
 800a442:	f100 0508 	add.w	r5, r0, #8
 800a446:	4616      	mov	r6, r2
 800a448:	46e6      	mov	lr, ip
 800a44a:	f935 4c08 	ldrsh.w	r4, [r5, #-8]
 800a44e:	f935 8c06 	ldrsh.w	r8, [r5, #-6]
 800a452:	413c      	asrs	r4, r7
 800a454:	fa48 f807 	asr.w	r8, r8, r7
 800a458:	b2a4      	uxth	r4, r4
 800a45a:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800a45e:	6034      	str	r4, [r6, #0]
 800a460:	f935 4c04 	ldrsh.w	r4, [r5, #-4]
 800a464:	f935 8c02 	ldrsh.w	r8, [r5, #-2]
 800a468:	413c      	asrs	r4, r7
 800a46a:	b2a4      	uxth	r4, r4
 800a46c:	fa48 f807 	asr.w	r8, r8, r7
 800a470:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800a474:	f1be 0e01 	subs.w	lr, lr, #1
 800a478:	6074      	str	r4, [r6, #4]
 800a47a:	f105 0508 	add.w	r5, r5, #8
 800a47e:	f106 0608 	add.w	r6, r6, #8
 800a482:	d1e2      	bne.n	800a44a <arm_shift_q15+0xb2>
 800a484:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 800a488:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 800a48c:	f013 0303 	ands.w	r3, r3, #3
 800a490:	d0d1      	beq.n	800a436 <arm_shift_q15+0x9e>
 800a492:	f9b0 4000 	ldrsh.w	r4, [r0]
 800a496:	4249      	negs	r1, r1
 800a498:	410c      	asrs	r4, r1
 800a49a:	3b01      	subs	r3, #1
 800a49c:	8014      	strh	r4, [r2, #0]
 800a49e:	d0ca      	beq.n	800a436 <arm_shift_q15+0x9e>
 800a4a0:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	fa44 f401 	asr.w	r4, r4, r1
 800a4aa:	8054      	strh	r4, [r2, #2]
 800a4ac:	d0c3      	beq.n	800a436 <arm_shift_q15+0x9e>
 800a4ae:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800a4b2:	fa43 f101 	asr.w	r1, r3, r1
 800a4b6:	8091      	strh	r1, [r2, #4]
 800a4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a4bc <arm_mult_q15>:
 800a4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c0:	ea5f 0893 	movs.w	r8, r3, lsr #2
 800a4c4:	d037      	beq.n	800a536 <arm_mult_q15+0x7a>
 800a4c6:	4694      	mov	ip, r2
 800a4c8:	460f      	mov	r7, r1
 800a4ca:	4606      	mov	r6, r0
 800a4cc:	46c6      	mov	lr, r8
 800a4ce:	f8d6 a000 	ldr.w	sl, [r6]
 800a4d2:	683d      	ldr	r5, [r7, #0]
 800a4d4:	6874      	ldr	r4, [r6, #4]
 800a4d6:	f8d7 b004 	ldr.w	fp, [r7, #4]
 800a4da:	fb15 f93a 	smultt	r9, r5, sl
 800a4de:	ea4f 39e9 	mov.w	r9, r9, asr #15
 800a4e2:	3608      	adds	r6, #8
 800a4e4:	3708      	adds	r7, #8
 800a4e6:	f309 090f 	ssat	r9, #16, r9
 800a4ea:	fb1a fa05 	smulbb	sl, sl, r5
 800a4ee:	ea4f 3aea 	mov.w	sl, sl, asr #15
 800a4f2:	f30a 0a0f 	ssat	sl, #16, sl
 800a4f6:	fb1b f534 	smultt	r5, fp, r4
 800a4fa:	13ed      	asrs	r5, r5, #15
 800a4fc:	f305 050f 	ssat	r5, #16, r5
 800a500:	fb14 f40b 	smulbb	r4, r4, fp
 800a504:	13e4      	asrs	r4, r4, #15
 800a506:	f304 040f 	ssat	r4, #16, r4
 800a50a:	fa1f fa8a 	uxth.w	sl, sl
 800a50e:	b2a4      	uxth	r4, r4
 800a510:	ea4a 4909 	orr.w	r9, sl, r9, lsl #16
 800a514:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800a518:	f1be 0e01 	subs.w	lr, lr, #1
 800a51c:	f8cc 9000 	str.w	r9, [ip]
 800a520:	f8cc 4004 	str.w	r4, [ip, #4]
 800a524:	f10c 0c08 	add.w	ip, ip, #8
 800a528:	d1d1      	bne.n	800a4ce <arm_mult_q15+0x12>
 800a52a:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
 800a52e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800a532:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 800a536:	f013 0303 	ands.w	r3, r3, #3
 800a53a:	d01b      	beq.n	800a574 <arm_mult_q15+0xb8>
 800a53c:	880c      	ldrh	r4, [r1, #0]
 800a53e:	8805      	ldrh	r5, [r0, #0]
 800a540:	fb14 f405 	smulbb	r4, r4, r5
 800a544:	13e4      	asrs	r4, r4, #15
 800a546:	f304 040f 	ssat	r4, #16, r4
 800a54a:	3b01      	subs	r3, #1
 800a54c:	8014      	strh	r4, [r2, #0]
 800a54e:	d011      	beq.n	800a574 <arm_mult_q15+0xb8>
 800a550:	884c      	ldrh	r4, [r1, #2]
 800a552:	8845      	ldrh	r5, [r0, #2]
 800a554:	fb14 f405 	smulbb	r4, r4, r5
 800a558:	13e4      	asrs	r4, r4, #15
 800a55a:	f304 040f 	ssat	r4, #16, r4
 800a55e:	2b01      	cmp	r3, #1
 800a560:	8054      	strh	r4, [r2, #2]
 800a562:	d007      	beq.n	800a574 <arm_mult_q15+0xb8>
 800a564:	8883      	ldrh	r3, [r0, #4]
 800a566:	8889      	ldrh	r1, [r1, #4]
 800a568:	fb13 f301 	smulbb	r3, r3, r1
 800a56c:	13db      	asrs	r3, r3, #15
 800a56e:	f303 030f 	ssat	r3, #16, r3
 800a572:	8093      	strh	r3, [r2, #4]
 800a574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a578 <arm_cfft_radix4by2_q15>:
 800a578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a57c:	084d      	lsrs	r5, r1, #1
 800a57e:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 800a582:	4616      	mov	r6, r2
 800a584:	d047      	beq.n	800a616 <arm_cfft_radix4by2_q15+0x9e>
 800a586:	4604      	mov	r4, r0
 800a588:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800a630 <arm_cfft_radix4by2_q15+0xb8>
 800a58c:	4696      	mov	lr, r2
 800a58e:	4638      	mov	r0, r7
 800a590:	4621      	mov	r1, r4
 800a592:	462a      	mov	r2, r5
 800a594:	f04f 0c00 	mov.w	ip, #0
 800a598:	680b      	ldr	r3, [r1, #0]
 800a59a:	f8d0 a000 	ldr.w	sl, [r0]
 800a59e:	fa93 f32c 	shadd16	r3, r3, ip
 800a5a2:	fa9a fa2c 	shadd16	sl, sl, ip
 800a5a6:	fa93 f92a 	shadd16	r9, r3, sl
 800a5aa:	fad3 fa1a 	qsub16	sl, r3, sl
 800a5ae:	f85e 3b04 	ldr.w	r3, [lr], #4
 800a5b2:	f841 9b04 	str.w	r9, [r1], #4
 800a5b6:	fb23 f90a 	smuad	r9, r3, sl
 800a5ba:	fb43 f31a 	smusdx	r3, r3, sl
 800a5be:	ea03 0308 	and.w	r3, r3, r8
 800a5c2:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 800a5c6:	3a01      	subs	r2, #1
 800a5c8:	f840 3b04 	str.w	r3, [r0], #4
 800a5cc:	d1e4      	bne.n	800a598 <arm_cfft_radix4by2_q15+0x20>
 800a5ce:	4629      	mov	r1, r5
 800a5d0:	2302      	movs	r3, #2
 800a5d2:	4632      	mov	r2, r6
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	f000 f8e9 	bl	800a7ac <arm_radix4_butterfly_q15>
 800a5da:	4638      	mov	r0, r7
 800a5dc:	4629      	mov	r1, r5
 800a5de:	4632      	mov	r2, r6
 800a5e0:	2302      	movs	r3, #2
 800a5e2:	f000 f8e3 	bl	800a7ac <arm_radix4_butterfly_q15>
 800a5e6:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	f9b0 6000 	ldrsh.w	r6, [r0]
 800a5f0:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800a5f4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800a5f8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800a5fc:	0076      	lsls	r6, r6, #1
 800a5fe:	0064      	lsls	r4, r4, #1
 800a600:	0052      	lsls	r2, r2, #1
 800a602:	005b      	lsls	r3, r3, #1
 800a604:	8006      	strh	r6, [r0, #0]
 800a606:	8044      	strh	r4, [r0, #2]
 800a608:	8082      	strh	r2, [r0, #4]
 800a60a:	80c3      	strh	r3, [r0, #6]
 800a60c:	3008      	adds	r0, #8
 800a60e:	4285      	cmp	r5, r0
 800a610:	d1ec      	bne.n	800a5ec <arm_cfft_radix4by2_q15+0x74>
 800a612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a616:	4629      	mov	r1, r5
 800a618:	2302      	movs	r3, #2
 800a61a:	f000 f8c7 	bl	800a7ac <arm_radix4_butterfly_q15>
 800a61e:	4632      	mov	r2, r6
 800a620:	4629      	mov	r1, r5
 800a622:	4638      	mov	r0, r7
 800a624:	2302      	movs	r3, #2
 800a626:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a62a:	f000 b8bf 	b.w	800a7ac <arm_radix4_butterfly_q15>
 800a62e:	bf00      	nop
 800a630:	ffff0000 	.word	0xffff0000

0800a634 <arm_cfft_radix4by2_inverse_q15>:
 800a634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a638:	084d      	lsrs	r5, r1, #1
 800a63a:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 800a63e:	4616      	mov	r6, r2
 800a640:	d047      	beq.n	800a6d2 <arm_cfft_radix4by2_inverse_q15+0x9e>
 800a642:	4604      	mov	r4, r0
 800a644:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800a6ec <arm_cfft_radix4by2_inverse_q15+0xb8>
 800a648:	4696      	mov	lr, r2
 800a64a:	4638      	mov	r0, r7
 800a64c:	4621      	mov	r1, r4
 800a64e:	462a      	mov	r2, r5
 800a650:	f04f 0c00 	mov.w	ip, #0
 800a654:	680b      	ldr	r3, [r1, #0]
 800a656:	f8d0 a000 	ldr.w	sl, [r0]
 800a65a:	fa93 f32c 	shadd16	r3, r3, ip
 800a65e:	fa9a fa2c 	shadd16	sl, sl, ip
 800a662:	fa93 f92a 	shadd16	r9, r3, sl
 800a666:	fad3 fa1a 	qsub16	sl, r3, sl
 800a66a:	f85e 3b04 	ldr.w	r3, [lr], #4
 800a66e:	f841 9b04 	str.w	r9, [r1], #4
 800a672:	fb43 f90a 	smusd	r9, r3, sl
 800a676:	fb23 f31a 	smuadx	r3, r3, sl
 800a67a:	ea03 0308 	and.w	r3, r3, r8
 800a67e:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 800a682:	3a01      	subs	r2, #1
 800a684:	f840 3b04 	str.w	r3, [r0], #4
 800a688:	d1e4      	bne.n	800a654 <arm_cfft_radix4by2_inverse_q15+0x20>
 800a68a:	4629      	mov	r1, r5
 800a68c:	2302      	movs	r3, #2
 800a68e:	4632      	mov	r2, r6
 800a690:	4620      	mov	r0, r4
 800a692:	f000 fa35 	bl	800ab00 <arm_radix4_butterfly_inverse_q15>
 800a696:	4638      	mov	r0, r7
 800a698:	4629      	mov	r1, r5
 800a69a:	4632      	mov	r2, r6
 800a69c:	2302      	movs	r3, #2
 800a69e:	f000 fa2f 	bl	800ab00 <arm_radix4_butterfly_inverse_q15>
 800a6a2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	f9b0 6000 	ldrsh.w	r6, [r0]
 800a6ac:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800a6b0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800a6b4:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800a6b8:	0076      	lsls	r6, r6, #1
 800a6ba:	0064      	lsls	r4, r4, #1
 800a6bc:	0052      	lsls	r2, r2, #1
 800a6be:	005b      	lsls	r3, r3, #1
 800a6c0:	8006      	strh	r6, [r0, #0]
 800a6c2:	8044      	strh	r4, [r0, #2]
 800a6c4:	8082      	strh	r2, [r0, #4]
 800a6c6:	80c3      	strh	r3, [r0, #6]
 800a6c8:	3008      	adds	r0, #8
 800a6ca:	4285      	cmp	r5, r0
 800a6cc:	d1ec      	bne.n	800a6a8 <arm_cfft_radix4by2_inverse_q15+0x74>
 800a6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6d2:	4629      	mov	r1, r5
 800a6d4:	2302      	movs	r3, #2
 800a6d6:	f000 fa13 	bl	800ab00 <arm_radix4_butterfly_inverse_q15>
 800a6da:	4632      	mov	r2, r6
 800a6dc:	4629      	mov	r1, r5
 800a6de:	4638      	mov	r0, r7
 800a6e0:	2302      	movs	r3, #2
 800a6e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6e6:	f000 ba0b 	b.w	800ab00 <arm_radix4_butterfly_inverse_q15>
 800a6ea:	bf00      	nop
 800a6ec:	ffff0000 	.word	0xffff0000

0800a6f0 <arm_cfft_q15>:
 800a6f0:	b5e0      	push	{r5, r6, r7, lr}
 800a6f2:	2a01      	cmp	r2, #1
 800a6f4:	460f      	mov	r7, r1
 800a6f6:	4605      	mov	r5, r0
 800a6f8:	8801      	ldrh	r1, [r0, #0]
 800a6fa:	461e      	mov	r6, r3
 800a6fc:	d02f      	beq.n	800a75e <arm_cfft_q15+0x6e>
 800a6fe:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a702:	d026      	beq.n	800a752 <arm_cfft_q15+0x62>
 800a704:	d908      	bls.n	800a718 <arm_cfft_q15+0x28>
 800a706:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800a70a:	d017      	beq.n	800a73c <arm_cfft_q15+0x4c>
 800a70c:	d91b      	bls.n	800a746 <arm_cfft_q15+0x56>
 800a70e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800a712:	d01e      	beq.n	800a752 <arm_cfft_q15+0x62>
 800a714:	b93e      	cbnz	r6, 800a726 <arm_cfft_q15+0x36>
 800a716:	bde0      	pop	{r5, r6, r7, pc}
 800a718:	2940      	cmp	r1, #64	; 0x40
 800a71a:	d01a      	beq.n	800a752 <arm_cfft_q15+0x62>
 800a71c:	d90a      	bls.n	800a734 <arm_cfft_q15+0x44>
 800a71e:	2980      	cmp	r1, #128	; 0x80
 800a720:	d00c      	beq.n	800a73c <arm_cfft_q15+0x4c>
 800a722:	2e00      	cmp	r6, #0
 800a724:	d0f7      	beq.n	800a716 <arm_cfft_q15+0x26>
 800a726:	68aa      	ldr	r2, [r5, #8]
 800a728:	89a9      	ldrh	r1, [r5, #12]
 800a72a:	4638      	mov	r0, r7
 800a72c:	e8bd 40e0 	ldmia.w	sp!, {r5, r6, r7, lr}
 800a730:	f000 bb90 	b.w	800ae54 <arm_bitreversal_16>
 800a734:	2910      	cmp	r1, #16
 800a736:	d00c      	beq.n	800a752 <arm_cfft_q15+0x62>
 800a738:	2920      	cmp	r1, #32
 800a73a:	d1eb      	bne.n	800a714 <arm_cfft_q15+0x24>
 800a73c:	686a      	ldr	r2, [r5, #4]
 800a73e:	4638      	mov	r0, r7
 800a740:	f7ff ff1a 	bl	800a578 <arm_cfft_radix4by2_q15>
 800a744:	e7e6      	b.n	800a714 <arm_cfft_q15+0x24>
 800a746:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a74a:	d0f7      	beq.n	800a73c <arm_cfft_q15+0x4c>
 800a74c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a750:	d1e0      	bne.n	800a714 <arm_cfft_q15+0x24>
 800a752:	686a      	ldr	r2, [r5, #4]
 800a754:	2301      	movs	r3, #1
 800a756:	4638      	mov	r0, r7
 800a758:	f000 f828 	bl	800a7ac <arm_radix4_butterfly_q15>
 800a75c:	e7da      	b.n	800a714 <arm_cfft_q15+0x24>
 800a75e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a762:	d01d      	beq.n	800a7a0 <arm_cfft_q15+0xb0>
 800a764:	d907      	bls.n	800a776 <arm_cfft_q15+0x86>
 800a766:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800a76a:	d00e      	beq.n	800a78a <arm_cfft_q15+0x9a>
 800a76c:	d912      	bls.n	800a794 <arm_cfft_q15+0xa4>
 800a76e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800a772:	d1cf      	bne.n	800a714 <arm_cfft_q15+0x24>
 800a774:	e014      	b.n	800a7a0 <arm_cfft_q15+0xb0>
 800a776:	2940      	cmp	r1, #64	; 0x40
 800a778:	d012      	beq.n	800a7a0 <arm_cfft_q15+0xb0>
 800a77a:	d902      	bls.n	800a782 <arm_cfft_q15+0x92>
 800a77c:	2980      	cmp	r1, #128	; 0x80
 800a77e:	d004      	beq.n	800a78a <arm_cfft_q15+0x9a>
 800a780:	e7c8      	b.n	800a714 <arm_cfft_q15+0x24>
 800a782:	2910      	cmp	r1, #16
 800a784:	d00c      	beq.n	800a7a0 <arm_cfft_q15+0xb0>
 800a786:	2920      	cmp	r1, #32
 800a788:	d1c4      	bne.n	800a714 <arm_cfft_q15+0x24>
 800a78a:	686a      	ldr	r2, [r5, #4]
 800a78c:	4638      	mov	r0, r7
 800a78e:	f7ff ff51 	bl	800a634 <arm_cfft_radix4by2_inverse_q15>
 800a792:	e7bf      	b.n	800a714 <arm_cfft_q15+0x24>
 800a794:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a798:	d0f7      	beq.n	800a78a <arm_cfft_q15+0x9a>
 800a79a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a79e:	d1b9      	bne.n	800a714 <arm_cfft_q15+0x24>
 800a7a0:	686a      	ldr	r2, [r5, #4]
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	4638      	mov	r0, r7
 800a7a6:	f000 f9ab 	bl	800ab00 <arm_radix4_butterfly_inverse_q15>
 800a7aa:	e7b3      	b.n	800a714 <arm_cfft_q15+0x24>

0800a7ac <arm_radix4_butterfly_q15>:
 800a7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b0:	b093      	sub	sp, #76	; 0x4c
 800a7b2:	f021 0a03 	bic.w	sl, r1, #3
 800a7b6:	eb00 0c4a 	add.w	ip, r0, sl, lsl #1
 800a7ba:	9210      	str	r2, [sp, #64]	; 0x40
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	ea4f 0291 	mov.w	r2, r1, lsr #2
 800a7c2:	eb0c 050a 	add.w	r5, ip, sl
 800a7c6:	9101      	str	r1, [sp, #4]
 800a7c8:	900f      	str	r0, [sp, #60]	; 0x3c
 800a7ca:	9303      	str	r3, [sp, #12]
 800a7cc:	4482      	add	sl, r0
 800a7ce:	9211      	str	r2, [sp, #68]	; 0x44
 800a7d0:	f040 8124 	bne.w	800aa1c <arm_radix4_butterfly_q15+0x270>
 800a7d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a7d6:	f8df e324 	ldr.w	lr, [pc, #804]	; 800aafc <arm_radix4_butterfly_q15+0x350>
 800a7da:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800a7dc:	f8cd a008 	str.w	sl, [sp, #8]
 800a7e0:	4693      	mov	fp, r2
 800a7e2:	4690      	mov	r8, r2
 800a7e4:	4657      	mov	r7, sl
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	4691      	mov	r9, r2
 800a7ea:	6830      	ldr	r0, [r6, #0]
 800a7ec:	f8dc 2000 	ldr.w	r2, [ip]
 800a7f0:	6839      	ldr	r1, [r7, #0]
 800a7f2:	fa90 f023 	shadd16	r0, r0, r3
 800a7f6:	fa91 f123 	shadd16	r1, r1, r3
 800a7fa:	fa90 f023 	shadd16	r0, r0, r3
 800a7fe:	fa91 fa23 	shadd16	sl, r1, r3
 800a802:	fa92 f223 	shadd16	r2, r2, r3
 800a806:	6829      	ldr	r1, [r5, #0]
 800a808:	fa92 f223 	shadd16	r2, r2, r3
 800a80c:	fa91 f123 	shadd16	r1, r1, r3
 800a810:	fa90 f412 	qadd16	r4, r0, r2
 800a814:	fa91 f123 	shadd16	r1, r1, r3
 800a818:	fa9a f111 	qadd16	r1, sl, r1
 800a81c:	fa94 fa21 	shadd16	sl, r4, r1
 800a820:	f846 ab04 	str.w	sl, [r6], #4
 800a824:	fad4 f411 	qsub16	r4, r4, r1
 800a828:	fad0 f212 	qsub16	r2, r0, r2
 800a82c:	f85b 1b08 	ldr.w	r1, [fp], #8
 800a830:	fb21 f004 	smuad	r0, r1, r4
 800a834:	fb41 f114 	smusdx	r1, r1, r4
 800a838:	ea01 010e 	and.w	r1, r1, lr
 800a83c:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 800a840:	6838      	ldr	r0, [r7, #0]
 800a842:	f847 1b04 	str.w	r1, [r7], #4
 800a846:	fa90 f023 	shadd16	r0, r0, r3
 800a84a:	682c      	ldr	r4, [r5, #0]
 800a84c:	fa90 f023 	shadd16	r0, r0, r3
 800a850:	fa94 f423 	shadd16	r4, r4, r3
 800a854:	f859 1b04 	ldr.w	r1, [r9], #4
 800a858:	fa94 f423 	shadd16	r4, r4, r3
 800a85c:	fad0 f014 	qsub16	r0, r0, r4
 800a860:	faa2 f410 	qasx	r4, r2, r0
 800a864:	fae2 f210 	qsax	r2, r2, r0
 800a868:	fb21 fa02 	smuad	sl, r1, r2
 800a86c:	fb41 f212 	smusdx	r2, r1, r2
 800a870:	ea02 020e 	and.w	r2, r2, lr
 800a874:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 800a878:	f84c 2b04 	str.w	r2, [ip], #4
 800a87c:	f858 2b0c 	ldr.w	r2, [r8], #12
 800a880:	fb22 f104 	smuad	r1, r2, r4
 800a884:	fb42 f214 	smusdx	r2, r2, r4
 800a888:	ea02 020e 	and.w	r2, r2, lr
 800a88c:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 800a890:	f845 2b04 	str.w	r2, [r5], #4
 800a894:	9a02      	ldr	r2, [sp, #8]
 800a896:	42b2      	cmp	r2, r6
 800a898:	d1a7      	bne.n	800a7ea <arm_radix4_butterfly_q15+0x3e>
 800a89a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a89c:	9b03      	ldr	r3, [sp, #12]
 800a89e:	2a04      	cmp	r2, #4
 800a8a0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800a8a4:	f240 8127 	bls.w	800aaf6 <arm_radix4_butterfly_q15+0x34a>
 800a8a8:	f8df a250 	ldr.w	sl, [pc, #592]	; 800aafc <arm_radix4_butterfly_q15+0x350>
 800a8ac:	920e      	str	r2, [sp, #56]	; 0x38
 800a8ae:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a8b0:	9102      	str	r1, [sp, #8]
 800a8b2:	4608      	mov	r0, r1
 800a8b4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800a8b8:	0889      	lsrs	r1, r1, #2
 800a8ba:	0092      	lsls	r2, r2, #2
 800a8bc:	0086      	lsls	r6, r0, #2
 800a8be:	9801      	ldr	r0, [sp, #4]
 800a8c0:	920d      	str	r2, [sp, #52]	; 0x34
 800a8c2:	008c      	lsls	r4, r1, #2
 800a8c4:	009a      	lsls	r2, r3, #2
 800a8c6:	00db      	lsls	r3, r3, #3
 800a8c8:	4288      	cmp	r0, r1
 800a8ca:	940a      	str	r4, [sp, #40]	; 0x28
 800a8cc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8ce:	4604      	mov	r4, r0
 800a8d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8d2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a8d4:	910e      	str	r1, [sp, #56]	; 0x38
 800a8d6:	bf28      	it	cs
 800a8d8:	460c      	movcs	r4, r1
 800a8da:	e9cd 0305 	strd	r0, r3, [sp, #20]
 800a8de:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800a8e2:	9308      	str	r3, [sp, #32]
 800a8e4:	9307      	str	r3, [sp, #28]
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	940c      	str	r4, [sp, #48]	; 0x30
 800a8ea:	9104      	str	r1, [sp, #16]
 800a8ec:	9209      	str	r2, [sp, #36]	; 0x24
 800a8ee:	9303      	str	r3, [sp, #12]
 800a8f0:	9b08      	ldr	r3, [sp, #32]
 800a8f2:	9a05      	ldr	r2, [sp, #20]
 800a8f4:	f8d3 9000 	ldr.w	r9, [r3]
 800a8f8:	9b07      	ldr	r3, [sp, #28]
 800a8fa:	9f03      	ldr	r7, [sp, #12]
 800a8fc:	f8d3 8000 	ldr.w	r8, [r3]
 800a900:	9b06      	ldr	r3, [sp, #24]
 800a902:	f8d3 e000 	ldr.w	lr, [r3]
 800a906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a908:	4615      	mov	r5, r2
 800a90a:	1898      	adds	r0, r3, r2
 800a90c:	9a04      	ldr	r2, [sp, #16]
 800a90e:	4614      	mov	r4, r2
 800a910:	1899      	adds	r1, r3, r2
 800a912:	682a      	ldr	r2, [r5, #0]
 800a914:	6823      	ldr	r3, [r4, #0]
 800a916:	f8d0 b000 	ldr.w	fp, [r0]
 800a91a:	fa92 fc13 	qadd16	ip, r2, r3
 800a91e:	fad2 f213 	qsub16	r2, r2, r3
 800a922:	680b      	ldr	r3, [r1, #0]
 800a924:	fa9b f313 	qadd16	r3, fp, r3
 800a928:	fa9c fb23 	shadd16	fp, ip, r3
 800a92c:	fadc f323 	shsub16	r3, ip, r3
 800a930:	f04f 0c00 	mov.w	ip, #0
 800a934:	fa9b fb2c 	shadd16	fp, fp, ip
 800a938:	f8c5 b000 	str.w	fp, [r5]
 800a93c:	4435      	add	r5, r6
 800a93e:	fb28 fb03 	smuad	fp, r8, r3
 800a942:	fb48 f313 	smusdx	r3, r8, r3
 800a946:	ea03 030a 	and.w	r3, r3, sl
 800a94a:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 800a94e:	f8d0 b000 	ldr.w	fp, [r0]
 800a952:	6003      	str	r3, [r0, #0]
 800a954:	f8d1 c000 	ldr.w	ip, [r1]
 800a958:	fadb fc1c 	qsub16	ip, fp, ip
 800a95c:	4430      	add	r0, r6
 800a95e:	faa2 f32c 	shasx	r3, r2, ip
 800a962:	fae2 f22c 	shsax	r2, r2, ip
 800a966:	fb29 fc02 	smuad	ip, r9, r2
 800a96a:	fb49 f212 	smusdx	r2, r9, r2
 800a96e:	ea02 020a 	and.w	r2, r2, sl
 800a972:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 800a976:	6022      	str	r2, [r4, #0]
 800a978:	4434      	add	r4, r6
 800a97a:	fb2e f203 	smuad	r2, lr, r3
 800a97e:	fb4e f313 	smusdx	r3, lr, r3
 800a982:	ea03 030a 	and.w	r3, r3, sl
 800a986:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 800a98a:	9a02      	ldr	r2, [sp, #8]
 800a98c:	600b      	str	r3, [r1, #0]
 800a98e:	9b01      	ldr	r3, [sp, #4]
 800a990:	4417      	add	r7, r2
 800a992:	42bb      	cmp	r3, r7
 800a994:	4431      	add	r1, r6
 800a996:	d8bc      	bhi.n	800a912 <arm_radix4_butterfly_q15+0x166>
 800a998:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 800a99c:	440a      	add	r2, r1
 800a99e:	9208      	str	r2, [sp, #32]
 800a9a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a9a2:	9a07      	ldr	r2, [sp, #28]
 800a9a4:	9b03      	ldr	r3, [sp, #12]
 800a9a6:	440a      	add	r2, r1
 800a9a8:	9207      	str	r2, [sp, #28]
 800a9aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a9ac:	9a06      	ldr	r2, [sp, #24]
 800a9ae:	440a      	add	r2, r1
 800a9b0:	9206      	str	r2, [sp, #24]
 800a9b2:	9a05      	ldr	r2, [sp, #20]
 800a9b4:	3204      	adds	r2, #4
 800a9b6:	9205      	str	r2, [sp, #20]
 800a9b8:	9a04      	ldr	r2, [sp, #16]
 800a9ba:	3204      	adds	r2, #4
 800a9bc:	9204      	str	r2, [sp, #16]
 800a9be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	9303      	str	r3, [sp, #12]
 800a9c6:	d393      	bcc.n	800a8f0 <arm_radix4_butterfly_q15+0x144>
 800a9c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a9ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9cc:	2a04      	cmp	r2, #4
 800a9ce:	f63f af6e 	bhi.w	800a8ae <arm_radix4_butterfly_q15+0x102>
 800a9d2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800a9d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9d6:	689d      	ldr	r5, [r3, #8]
 800a9d8:	68de      	ldr	r6, [r3, #12]
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	6859      	ldr	r1, [r3, #4]
 800a9de:	fa92 f015 	qadd16	r0, r2, r5
 800a9e2:	3c01      	subs	r4, #1
 800a9e4:	fad2 f215 	qsub16	r2, r2, r5
 800a9e8:	f103 0310 	add.w	r3, r3, #16
 800a9ec:	fa91 f516 	qadd16	r5, r1, r6
 800a9f0:	fad1 f116 	qsub16	r1, r1, r6
 800a9f4:	fa90 f625 	shadd16	r6, r0, r5
 800a9f8:	fad0 f025 	shsub16	r0, r0, r5
 800a9fc:	f843 6c10 	str.w	r6, [r3, #-16]
 800aa00:	f843 0c0c 	str.w	r0, [r3, #-12]
 800aa04:	fae2 f021 	shsax	r0, r2, r1
 800aa08:	faa2 f221 	shasx	r2, r2, r1
 800aa0c:	f843 0c08 	str.w	r0, [r3, #-8]
 800aa10:	f843 2c04 	str.w	r2, [r3, #-4]
 800aa14:	d1df      	bne.n	800a9d6 <arm_radix4_butterfly_q15+0x22a>
 800aa16:	b013      	add	sp, #76	; 0x4c
 800aa18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa1c:	2400      	movs	r4, #0
 800aa1e:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 800aafc <arm_radix4_butterfly_q15+0x350>
 800aa22:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800aa24:	4623      	mov	r3, r4
 800aa26:	4680      	mov	r8, r0
 800aa28:	4691      	mov	r9, r2
 800aa2a:	f8d8 0000 	ldr.w	r0, [r8]
 800aa2e:	f8dc 2000 	ldr.w	r2, [ip]
 800aa32:	f8da 1000 	ldr.w	r1, [sl]
 800aa36:	fa90 f023 	shadd16	r0, r0, r3
 800aa3a:	fa91 f123 	shadd16	r1, r1, r3
 800aa3e:	fa90 f023 	shadd16	r0, r0, r3
 800aa42:	fa91 fb23 	shadd16	fp, r1, r3
 800aa46:	fa92 f223 	shadd16	r2, r2, r3
 800aa4a:	6829      	ldr	r1, [r5, #0]
 800aa4c:	fa92 f223 	shadd16	r2, r2, r3
 800aa50:	fa91 f123 	shadd16	r1, r1, r3
 800aa54:	fa90 f612 	qadd16	r6, r0, r2
 800aa58:	fa91 f123 	shadd16	r1, r1, r3
 800aa5c:	fa9b f111 	qadd16	r1, fp, r1
 800aa60:	fa96 fb21 	shadd16	fp, r6, r1
 800aa64:	f848 bb04 	str.w	fp, [r8], #4
 800aa68:	fad6 f611 	qsub16	r6, r6, r1
 800aa6c:	fad0 f212 	qsub16	r2, r0, r2
 800aa70:	f857 1034 	ldr.w	r1, [r7, r4, lsl #3]
 800aa74:	fb21 f006 	smuad	r0, r1, r6
 800aa78:	fb41 f116 	smusdx	r1, r1, r6
 800aa7c:	ea01 010e 	and.w	r1, r1, lr
 800aa80:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 800aa84:	f8da 0000 	ldr.w	r0, [sl]
 800aa88:	f84a 1b04 	str.w	r1, [sl], #4
 800aa8c:	fa90 f023 	shadd16	r0, r0, r3
 800aa90:	682e      	ldr	r6, [r5, #0]
 800aa92:	fa90 f023 	shadd16	r0, r0, r3
 800aa96:	fa96 f623 	shadd16	r6, r6, r3
 800aa9a:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800aa9e:	fa96 f623 	shadd16	r6, r6, r3
 800aaa2:	fad0 f016 	qsub16	r0, r0, r6
 800aaa6:	faa2 f610 	qasx	r6, r2, r0
 800aaaa:	fae2 f210 	qsax	r2, r2, r0
 800aaae:	fb21 fb02 	smuad	fp, r1, r2
 800aab2:	fb41 f212 	smusdx	r2, r1, r2
 800aab6:	ea02 020e 	and.w	r2, r2, lr
 800aaba:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 800aabe:	f84c 2b04 	str.w	r2, [ip], #4
 800aac2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800aac6:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800aaca:	fb22 f106 	smuad	r1, r2, r6
 800aace:	fb42 f216 	smusdx	r2, r2, r6
 800aad2:	ea02 020e 	and.w	r2, r2, lr
 800aad6:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 800aada:	f845 2b04 	str.w	r2, [r5], #4
 800aade:	9a03      	ldr	r2, [sp, #12]
 800aae0:	f1b9 0901 	subs.w	r9, r9, #1
 800aae4:	4414      	add	r4, r2
 800aae6:	d1a0      	bne.n	800aa2a <arm_radix4_butterfly_q15+0x27e>
 800aae8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aaea:	9b03      	ldr	r3, [sp, #12]
 800aaec:	2a04      	cmp	r2, #4
 800aaee:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800aaf2:	f63f aed9 	bhi.w	800a8a8 <arm_radix4_butterfly_q15+0xfc>
 800aaf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aaf8:	4614      	mov	r4, r2
 800aafa:	e76c      	b.n	800a9d6 <arm_radix4_butterfly_q15+0x22a>
 800aafc:	ffff0000 	.word	0xffff0000

0800ab00 <arm_radix4_butterfly_inverse_q15>:
 800ab00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab04:	b093      	sub	sp, #76	; 0x4c
 800ab06:	f021 0a03 	bic.w	sl, r1, #3
 800ab0a:	eb00 0c4a 	add.w	ip, r0, sl, lsl #1
 800ab0e:	9210      	str	r2, [sp, #64]	; 0x40
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	ea4f 0291 	mov.w	r2, r1, lsr #2
 800ab16:	eb0c 050a 	add.w	r5, ip, sl
 800ab1a:	9101      	str	r1, [sp, #4]
 800ab1c:	900f      	str	r0, [sp, #60]	; 0x3c
 800ab1e:	9303      	str	r3, [sp, #12]
 800ab20:	4482      	add	sl, r0
 800ab22:	9211      	str	r2, [sp, #68]	; 0x44
 800ab24:	f040 8124 	bne.w	800ad70 <arm_radix4_butterfly_inverse_q15+0x270>
 800ab28:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab2a:	f8df e324 	ldr.w	lr, [pc, #804]	; 800ae50 <arm_radix4_butterfly_inverse_q15+0x350>
 800ab2e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800ab30:	f8cd a008 	str.w	sl, [sp, #8]
 800ab34:	4693      	mov	fp, r2
 800ab36:	4690      	mov	r8, r2
 800ab38:	4657      	mov	r7, sl
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	4691      	mov	r9, r2
 800ab3e:	6830      	ldr	r0, [r6, #0]
 800ab40:	f8dc 2000 	ldr.w	r2, [ip]
 800ab44:	6839      	ldr	r1, [r7, #0]
 800ab46:	fa90 f023 	shadd16	r0, r0, r3
 800ab4a:	fa91 f123 	shadd16	r1, r1, r3
 800ab4e:	fa90 f023 	shadd16	r0, r0, r3
 800ab52:	fa91 fa23 	shadd16	sl, r1, r3
 800ab56:	fa92 f223 	shadd16	r2, r2, r3
 800ab5a:	6829      	ldr	r1, [r5, #0]
 800ab5c:	fa92 f223 	shadd16	r2, r2, r3
 800ab60:	fa91 f123 	shadd16	r1, r1, r3
 800ab64:	fa90 f412 	qadd16	r4, r0, r2
 800ab68:	fa91 f123 	shadd16	r1, r1, r3
 800ab6c:	fa9a f111 	qadd16	r1, sl, r1
 800ab70:	fa94 fa21 	shadd16	sl, r4, r1
 800ab74:	f846 ab04 	str.w	sl, [r6], #4
 800ab78:	fad4 f411 	qsub16	r4, r4, r1
 800ab7c:	fad0 f212 	qsub16	r2, r0, r2
 800ab80:	f85b 1b08 	ldr.w	r1, [fp], #8
 800ab84:	fb41 f004 	smusd	r0, r1, r4
 800ab88:	fb21 f114 	smuadx	r1, r1, r4
 800ab8c:	ea01 010e 	and.w	r1, r1, lr
 800ab90:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 800ab94:	6838      	ldr	r0, [r7, #0]
 800ab96:	f847 1b04 	str.w	r1, [r7], #4
 800ab9a:	fa90 f023 	shadd16	r0, r0, r3
 800ab9e:	682c      	ldr	r4, [r5, #0]
 800aba0:	fa90 f023 	shadd16	r0, r0, r3
 800aba4:	fa94 f423 	shadd16	r4, r4, r3
 800aba8:	f859 1b04 	ldr.w	r1, [r9], #4
 800abac:	fa94 f423 	shadd16	r4, r4, r3
 800abb0:	fad0 f014 	qsub16	r0, r0, r4
 800abb4:	fae2 f410 	qsax	r4, r2, r0
 800abb8:	faa2 f210 	qasx	r2, r2, r0
 800abbc:	fb41 fa02 	smusd	sl, r1, r2
 800abc0:	fb21 f212 	smuadx	r2, r1, r2
 800abc4:	ea02 020e 	and.w	r2, r2, lr
 800abc8:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 800abcc:	f84c 2b04 	str.w	r2, [ip], #4
 800abd0:	f858 2b0c 	ldr.w	r2, [r8], #12
 800abd4:	fb42 f104 	smusd	r1, r2, r4
 800abd8:	fb22 f214 	smuadx	r2, r2, r4
 800abdc:	ea02 020e 	and.w	r2, r2, lr
 800abe0:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 800abe4:	f845 2b04 	str.w	r2, [r5], #4
 800abe8:	9a02      	ldr	r2, [sp, #8]
 800abea:	42b2      	cmp	r2, r6
 800abec:	d1a7      	bne.n	800ab3e <arm_radix4_butterfly_inverse_q15+0x3e>
 800abee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800abf0:	9b03      	ldr	r3, [sp, #12]
 800abf2:	2a04      	cmp	r2, #4
 800abf4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800abf8:	f240 8127 	bls.w	800ae4a <arm_radix4_butterfly_inverse_q15+0x34a>
 800abfc:	f8df a250 	ldr.w	sl, [pc, #592]	; 800ae50 <arm_radix4_butterfly_inverse_q15+0x350>
 800ac00:	920e      	str	r2, [sp, #56]	; 0x38
 800ac02:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ac04:	9102      	str	r1, [sp, #8]
 800ac06:	4608      	mov	r0, r1
 800ac08:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800ac0c:	0889      	lsrs	r1, r1, #2
 800ac0e:	0092      	lsls	r2, r2, #2
 800ac10:	0086      	lsls	r6, r0, #2
 800ac12:	9801      	ldr	r0, [sp, #4]
 800ac14:	920d      	str	r2, [sp, #52]	; 0x34
 800ac16:	008c      	lsls	r4, r1, #2
 800ac18:	009a      	lsls	r2, r3, #2
 800ac1a:	00db      	lsls	r3, r3, #3
 800ac1c:	4288      	cmp	r0, r1
 800ac1e:	940a      	str	r4, [sp, #40]	; 0x28
 800ac20:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac22:	4604      	mov	r4, r0
 800ac24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac26:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ac28:	910e      	str	r1, [sp, #56]	; 0x38
 800ac2a:	bf28      	it	cs
 800ac2c:	460c      	movcs	r4, r1
 800ac2e:	e9cd 0305 	strd	r0, r3, [sp, #20]
 800ac32:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ac36:	9308      	str	r3, [sp, #32]
 800ac38:	9307      	str	r3, [sp, #28]
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	940c      	str	r4, [sp, #48]	; 0x30
 800ac3e:	9104      	str	r1, [sp, #16]
 800ac40:	9209      	str	r2, [sp, #36]	; 0x24
 800ac42:	9303      	str	r3, [sp, #12]
 800ac44:	9b08      	ldr	r3, [sp, #32]
 800ac46:	9a05      	ldr	r2, [sp, #20]
 800ac48:	f8d3 9000 	ldr.w	r9, [r3]
 800ac4c:	9b07      	ldr	r3, [sp, #28]
 800ac4e:	9f03      	ldr	r7, [sp, #12]
 800ac50:	f8d3 8000 	ldr.w	r8, [r3]
 800ac54:	9b06      	ldr	r3, [sp, #24]
 800ac56:	f8d3 e000 	ldr.w	lr, [r3]
 800ac5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac5c:	4615      	mov	r5, r2
 800ac5e:	1898      	adds	r0, r3, r2
 800ac60:	9a04      	ldr	r2, [sp, #16]
 800ac62:	4614      	mov	r4, r2
 800ac64:	1899      	adds	r1, r3, r2
 800ac66:	682a      	ldr	r2, [r5, #0]
 800ac68:	6823      	ldr	r3, [r4, #0]
 800ac6a:	f8d0 b000 	ldr.w	fp, [r0]
 800ac6e:	fa92 fc13 	qadd16	ip, r2, r3
 800ac72:	fad2 f213 	qsub16	r2, r2, r3
 800ac76:	680b      	ldr	r3, [r1, #0]
 800ac78:	fa9b f313 	qadd16	r3, fp, r3
 800ac7c:	fa9c fb23 	shadd16	fp, ip, r3
 800ac80:	fadc f323 	shsub16	r3, ip, r3
 800ac84:	f04f 0c00 	mov.w	ip, #0
 800ac88:	fa9b fb2c 	shadd16	fp, fp, ip
 800ac8c:	f8c5 b000 	str.w	fp, [r5]
 800ac90:	4435      	add	r5, r6
 800ac92:	fb48 fb03 	smusd	fp, r8, r3
 800ac96:	fb28 f313 	smuadx	r3, r8, r3
 800ac9a:	ea03 030a 	and.w	r3, r3, sl
 800ac9e:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 800aca2:	f8d0 b000 	ldr.w	fp, [r0]
 800aca6:	6003      	str	r3, [r0, #0]
 800aca8:	f8d1 c000 	ldr.w	ip, [r1]
 800acac:	fadb fc1c 	qsub16	ip, fp, ip
 800acb0:	4430      	add	r0, r6
 800acb2:	fae2 f32c 	shsax	r3, r2, ip
 800acb6:	faa2 f22c 	shasx	r2, r2, ip
 800acba:	fb49 fc02 	smusd	ip, r9, r2
 800acbe:	fb29 f212 	smuadx	r2, r9, r2
 800acc2:	ea02 020a 	and.w	r2, r2, sl
 800acc6:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 800acca:	6022      	str	r2, [r4, #0]
 800accc:	4434      	add	r4, r6
 800acce:	fb4e f203 	smusd	r2, lr, r3
 800acd2:	fb2e f313 	smuadx	r3, lr, r3
 800acd6:	ea03 030a 	and.w	r3, r3, sl
 800acda:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 800acde:	9a02      	ldr	r2, [sp, #8]
 800ace0:	600b      	str	r3, [r1, #0]
 800ace2:	9b01      	ldr	r3, [sp, #4]
 800ace4:	4417      	add	r7, r2
 800ace6:	42bb      	cmp	r3, r7
 800ace8:	4431      	add	r1, r6
 800acea:	d8bc      	bhi.n	800ac66 <arm_radix4_butterfly_inverse_q15+0x166>
 800acec:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 800acf0:	440a      	add	r2, r1
 800acf2:	9208      	str	r2, [sp, #32]
 800acf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800acf6:	9a07      	ldr	r2, [sp, #28]
 800acf8:	9b03      	ldr	r3, [sp, #12]
 800acfa:	440a      	add	r2, r1
 800acfc:	9207      	str	r2, [sp, #28]
 800acfe:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ad00:	9a06      	ldr	r2, [sp, #24]
 800ad02:	440a      	add	r2, r1
 800ad04:	9206      	str	r2, [sp, #24]
 800ad06:	9a05      	ldr	r2, [sp, #20]
 800ad08:	3204      	adds	r2, #4
 800ad0a:	9205      	str	r2, [sp, #20]
 800ad0c:	9a04      	ldr	r2, [sp, #16]
 800ad0e:	3204      	adds	r2, #4
 800ad10:	9204      	str	r2, [sp, #16]
 800ad12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad14:	3301      	adds	r3, #1
 800ad16:	4293      	cmp	r3, r2
 800ad18:	9303      	str	r3, [sp, #12]
 800ad1a:	d393      	bcc.n	800ac44 <arm_radix4_butterfly_inverse_q15+0x144>
 800ad1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad20:	2a04      	cmp	r2, #4
 800ad22:	f63f af6e 	bhi.w	800ac02 <arm_radix4_butterfly_inverse_q15+0x102>
 800ad26:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800ad28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad2a:	689d      	ldr	r5, [r3, #8]
 800ad2c:	68de      	ldr	r6, [r3, #12]
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	6859      	ldr	r1, [r3, #4]
 800ad32:	fa92 f015 	qadd16	r0, r2, r5
 800ad36:	3c01      	subs	r4, #1
 800ad38:	fad2 f215 	qsub16	r2, r2, r5
 800ad3c:	f103 0310 	add.w	r3, r3, #16
 800ad40:	fa91 f516 	qadd16	r5, r1, r6
 800ad44:	fad1 f116 	qsub16	r1, r1, r6
 800ad48:	fa90 f625 	shadd16	r6, r0, r5
 800ad4c:	fad0 f025 	shsub16	r0, r0, r5
 800ad50:	f843 6c10 	str.w	r6, [r3, #-16]
 800ad54:	f843 0c0c 	str.w	r0, [r3, #-12]
 800ad58:	faa2 f021 	shasx	r0, r2, r1
 800ad5c:	fae2 f221 	shsax	r2, r2, r1
 800ad60:	f843 0c08 	str.w	r0, [r3, #-8]
 800ad64:	f843 2c04 	str.w	r2, [r3, #-4]
 800ad68:	d1df      	bne.n	800ad2a <arm_radix4_butterfly_inverse_q15+0x22a>
 800ad6a:	b013      	add	sp, #76	; 0x4c
 800ad6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad70:	2400      	movs	r4, #0
 800ad72:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 800ae50 <arm_radix4_butterfly_inverse_q15+0x350>
 800ad76:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800ad78:	4623      	mov	r3, r4
 800ad7a:	4680      	mov	r8, r0
 800ad7c:	4691      	mov	r9, r2
 800ad7e:	f8d8 0000 	ldr.w	r0, [r8]
 800ad82:	f8dc 2000 	ldr.w	r2, [ip]
 800ad86:	f8da 1000 	ldr.w	r1, [sl]
 800ad8a:	fa90 f023 	shadd16	r0, r0, r3
 800ad8e:	fa91 f123 	shadd16	r1, r1, r3
 800ad92:	fa90 f023 	shadd16	r0, r0, r3
 800ad96:	fa91 fb23 	shadd16	fp, r1, r3
 800ad9a:	fa92 f223 	shadd16	r2, r2, r3
 800ad9e:	6829      	ldr	r1, [r5, #0]
 800ada0:	fa92 f223 	shadd16	r2, r2, r3
 800ada4:	fa91 f123 	shadd16	r1, r1, r3
 800ada8:	fa90 f612 	qadd16	r6, r0, r2
 800adac:	fa91 f123 	shadd16	r1, r1, r3
 800adb0:	fa9b f111 	qadd16	r1, fp, r1
 800adb4:	fa96 fb21 	shadd16	fp, r6, r1
 800adb8:	f848 bb04 	str.w	fp, [r8], #4
 800adbc:	fad6 f611 	qsub16	r6, r6, r1
 800adc0:	fad0 f212 	qsub16	r2, r0, r2
 800adc4:	f857 1034 	ldr.w	r1, [r7, r4, lsl #3]
 800adc8:	fb41 f006 	smusd	r0, r1, r6
 800adcc:	fb21 f116 	smuadx	r1, r1, r6
 800add0:	ea01 010e 	and.w	r1, r1, lr
 800add4:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 800add8:	f8da 0000 	ldr.w	r0, [sl]
 800addc:	f84a 1b04 	str.w	r1, [sl], #4
 800ade0:	fa90 f023 	shadd16	r0, r0, r3
 800ade4:	682e      	ldr	r6, [r5, #0]
 800ade6:	fa90 f023 	shadd16	r0, r0, r3
 800adea:	fa96 f623 	shadd16	r6, r6, r3
 800adee:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800adf2:	fa96 f623 	shadd16	r6, r6, r3
 800adf6:	fad0 f016 	qsub16	r0, r0, r6
 800adfa:	fae2 f610 	qsax	r6, r2, r0
 800adfe:	faa2 f210 	qasx	r2, r2, r0
 800ae02:	fb41 fb02 	smusd	fp, r1, r2
 800ae06:	fb21 f212 	smuadx	r2, r1, r2
 800ae0a:	ea02 020e 	and.w	r2, r2, lr
 800ae0e:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 800ae12:	f84c 2b04 	str.w	r2, [ip], #4
 800ae16:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800ae1a:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800ae1e:	fb42 f106 	smusd	r1, r2, r6
 800ae22:	fb22 f216 	smuadx	r2, r2, r6
 800ae26:	ea02 020e 	and.w	r2, r2, lr
 800ae2a:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 800ae2e:	f845 2b04 	str.w	r2, [r5], #4
 800ae32:	9a03      	ldr	r2, [sp, #12]
 800ae34:	f1b9 0901 	subs.w	r9, r9, #1
 800ae38:	4414      	add	r4, r2
 800ae3a:	d1a0      	bne.n	800ad7e <arm_radix4_butterfly_inverse_q15+0x27e>
 800ae3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ae3e:	9b03      	ldr	r3, [sp, #12]
 800ae40:	2a04      	cmp	r2, #4
 800ae42:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ae46:	f63f aed9 	bhi.w	800abfc <arm_radix4_butterfly_inverse_q15+0xfc>
 800ae4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae4c:	4614      	mov	r4, r2
 800ae4e:	e76c      	b.n	800ad2a <arm_radix4_butterfly_inverse_q15+0x22a>
 800ae50:	ffff0000 	.word	0xffff0000

0800ae54 <arm_bitreversal_16>:
 800ae54:	b1f1      	cbz	r1, 800ae94 <arm_bitreversal_16+0x40>
 800ae56:	b4f0      	push	{r4, r5, r6, r7}
 800ae58:	2400      	movs	r4, #0
 800ae5a:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 800ae5e:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 800ae62:	886d      	ldrh	r5, [r5, #2]
 800ae64:	08ad      	lsrs	r5, r5, #2
 800ae66:	089b      	lsrs	r3, r3, #2
 800ae68:	f830 6015 	ldrh.w	r6, [r0, r5, lsl #1]
 800ae6c:	f830 7013 	ldrh.w	r7, [r0, r3, lsl #1]
 800ae70:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 800ae74:	006e      	lsls	r6, r5, #1
 800ae76:	005b      	lsls	r3, r3, #1
 800ae78:	f820 7015 	strh.w	r7, [r0, r5, lsl #1]
 800ae7c:	3302      	adds	r3, #2
 800ae7e:	1cb5      	adds	r5, r6, #2
 800ae80:	3402      	adds	r4, #2
 800ae82:	b2a4      	uxth	r4, r4
 800ae84:	5ac6      	ldrh	r6, [r0, r3]
 800ae86:	5b47      	ldrh	r7, [r0, r5]
 800ae88:	52c7      	strh	r7, [r0, r3]
 800ae8a:	42a1      	cmp	r1, r4
 800ae8c:	5346      	strh	r6, [r0, r5]
 800ae8e:	d8e4      	bhi.n	800ae5a <arm_bitreversal_16+0x6>
 800ae90:	bcf0      	pop	{r4, r5, r6, r7}
 800ae92:	4770      	bx	lr
 800ae94:	4770      	bx	lr
 800ae96:	bf00      	nop

0800ae98 <__cvt>:
 800ae98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae9c:	ec55 4b10 	vmov	r4, r5, d0
 800aea0:	2d00      	cmp	r5, #0
 800aea2:	460e      	mov	r6, r1
 800aea4:	4619      	mov	r1, r3
 800aea6:	462b      	mov	r3, r5
 800aea8:	bfbb      	ittet	lt
 800aeaa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aeae:	461d      	movlt	r5, r3
 800aeb0:	2300      	movge	r3, #0
 800aeb2:	232d      	movlt	r3, #45	; 0x2d
 800aeb4:	700b      	strb	r3, [r1, #0]
 800aeb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aeb8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aebc:	4691      	mov	r9, r2
 800aebe:	f023 0820 	bic.w	r8, r3, #32
 800aec2:	bfbc      	itt	lt
 800aec4:	4622      	movlt	r2, r4
 800aec6:	4614      	movlt	r4, r2
 800aec8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aecc:	d005      	beq.n	800aeda <__cvt+0x42>
 800aece:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800aed2:	d100      	bne.n	800aed6 <__cvt+0x3e>
 800aed4:	3601      	adds	r6, #1
 800aed6:	2102      	movs	r1, #2
 800aed8:	e000      	b.n	800aedc <__cvt+0x44>
 800aeda:	2103      	movs	r1, #3
 800aedc:	ab03      	add	r3, sp, #12
 800aede:	9301      	str	r3, [sp, #4]
 800aee0:	ab02      	add	r3, sp, #8
 800aee2:	9300      	str	r3, [sp, #0]
 800aee4:	ec45 4b10 	vmov	d0, r4, r5
 800aee8:	4653      	mov	r3, sl
 800aeea:	4632      	mov	r2, r6
 800aeec:	f001 f808 	bl	800bf00 <_dtoa_r>
 800aef0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aef4:	4607      	mov	r7, r0
 800aef6:	d102      	bne.n	800aefe <__cvt+0x66>
 800aef8:	f019 0f01 	tst.w	r9, #1
 800aefc:	d022      	beq.n	800af44 <__cvt+0xac>
 800aefe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af02:	eb07 0906 	add.w	r9, r7, r6
 800af06:	d110      	bne.n	800af2a <__cvt+0x92>
 800af08:	783b      	ldrb	r3, [r7, #0]
 800af0a:	2b30      	cmp	r3, #48	; 0x30
 800af0c:	d10a      	bne.n	800af24 <__cvt+0x8c>
 800af0e:	2200      	movs	r2, #0
 800af10:	2300      	movs	r3, #0
 800af12:	4620      	mov	r0, r4
 800af14:	4629      	mov	r1, r5
 800af16:	f7f5 fde7 	bl	8000ae8 <__aeabi_dcmpeq>
 800af1a:	b918      	cbnz	r0, 800af24 <__cvt+0x8c>
 800af1c:	f1c6 0601 	rsb	r6, r6, #1
 800af20:	f8ca 6000 	str.w	r6, [sl]
 800af24:	f8da 3000 	ldr.w	r3, [sl]
 800af28:	4499      	add	r9, r3
 800af2a:	2200      	movs	r2, #0
 800af2c:	2300      	movs	r3, #0
 800af2e:	4620      	mov	r0, r4
 800af30:	4629      	mov	r1, r5
 800af32:	f7f5 fdd9 	bl	8000ae8 <__aeabi_dcmpeq>
 800af36:	b108      	cbz	r0, 800af3c <__cvt+0xa4>
 800af38:	f8cd 900c 	str.w	r9, [sp, #12]
 800af3c:	2230      	movs	r2, #48	; 0x30
 800af3e:	9b03      	ldr	r3, [sp, #12]
 800af40:	454b      	cmp	r3, r9
 800af42:	d307      	bcc.n	800af54 <__cvt+0xbc>
 800af44:	9b03      	ldr	r3, [sp, #12]
 800af46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af48:	1bdb      	subs	r3, r3, r7
 800af4a:	4638      	mov	r0, r7
 800af4c:	6013      	str	r3, [r2, #0]
 800af4e:	b004      	add	sp, #16
 800af50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af54:	1c59      	adds	r1, r3, #1
 800af56:	9103      	str	r1, [sp, #12]
 800af58:	701a      	strb	r2, [r3, #0]
 800af5a:	e7f0      	b.n	800af3e <__cvt+0xa6>

0800af5c <__exponent>:
 800af5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af5e:	4603      	mov	r3, r0
 800af60:	2900      	cmp	r1, #0
 800af62:	bfb8      	it	lt
 800af64:	4249      	neglt	r1, r1
 800af66:	f803 2b02 	strb.w	r2, [r3], #2
 800af6a:	bfb4      	ite	lt
 800af6c:	222d      	movlt	r2, #45	; 0x2d
 800af6e:	222b      	movge	r2, #43	; 0x2b
 800af70:	2909      	cmp	r1, #9
 800af72:	7042      	strb	r2, [r0, #1]
 800af74:	dd2a      	ble.n	800afcc <__exponent+0x70>
 800af76:	f10d 0207 	add.w	r2, sp, #7
 800af7a:	4617      	mov	r7, r2
 800af7c:	260a      	movs	r6, #10
 800af7e:	4694      	mov	ip, r2
 800af80:	fb91 f5f6 	sdiv	r5, r1, r6
 800af84:	fb06 1415 	mls	r4, r6, r5, r1
 800af88:	3430      	adds	r4, #48	; 0x30
 800af8a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800af8e:	460c      	mov	r4, r1
 800af90:	2c63      	cmp	r4, #99	; 0x63
 800af92:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800af96:	4629      	mov	r1, r5
 800af98:	dcf1      	bgt.n	800af7e <__exponent+0x22>
 800af9a:	3130      	adds	r1, #48	; 0x30
 800af9c:	f1ac 0402 	sub.w	r4, ip, #2
 800afa0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800afa4:	1c41      	adds	r1, r0, #1
 800afa6:	4622      	mov	r2, r4
 800afa8:	42ba      	cmp	r2, r7
 800afaa:	d30a      	bcc.n	800afc2 <__exponent+0x66>
 800afac:	f10d 0209 	add.w	r2, sp, #9
 800afb0:	eba2 020c 	sub.w	r2, r2, ip
 800afb4:	42bc      	cmp	r4, r7
 800afb6:	bf88      	it	hi
 800afb8:	2200      	movhi	r2, #0
 800afba:	4413      	add	r3, r2
 800afbc:	1a18      	subs	r0, r3, r0
 800afbe:	b003      	add	sp, #12
 800afc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afc2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800afc6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800afca:	e7ed      	b.n	800afa8 <__exponent+0x4c>
 800afcc:	2330      	movs	r3, #48	; 0x30
 800afce:	3130      	adds	r1, #48	; 0x30
 800afd0:	7083      	strb	r3, [r0, #2]
 800afd2:	70c1      	strb	r1, [r0, #3]
 800afd4:	1d03      	adds	r3, r0, #4
 800afd6:	e7f1      	b.n	800afbc <__exponent+0x60>

0800afd8 <_printf_float>:
 800afd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afdc:	ed2d 8b02 	vpush	{d8}
 800afe0:	b08d      	sub	sp, #52	; 0x34
 800afe2:	460c      	mov	r4, r1
 800afe4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800afe8:	4616      	mov	r6, r2
 800afea:	461f      	mov	r7, r3
 800afec:	4605      	mov	r5, r0
 800afee:	f000 fe77 	bl	800bce0 <_localeconv_r>
 800aff2:	f8d0 a000 	ldr.w	sl, [r0]
 800aff6:	4650      	mov	r0, sl
 800aff8:	f7f5 f94a 	bl	8000290 <strlen>
 800affc:	2300      	movs	r3, #0
 800affe:	930a      	str	r3, [sp, #40]	; 0x28
 800b000:	6823      	ldr	r3, [r4, #0]
 800b002:	9305      	str	r3, [sp, #20]
 800b004:	f8d8 3000 	ldr.w	r3, [r8]
 800b008:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b00c:	3307      	adds	r3, #7
 800b00e:	f023 0307 	bic.w	r3, r3, #7
 800b012:	f103 0208 	add.w	r2, r3, #8
 800b016:	f8c8 2000 	str.w	r2, [r8]
 800b01a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b01e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b022:	9307      	str	r3, [sp, #28]
 800b024:	f8cd 8018 	str.w	r8, [sp, #24]
 800b028:	ee08 0a10 	vmov	s16, r0
 800b02c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b030:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b034:	4b9e      	ldr	r3, [pc, #632]	; (800b2b0 <_printf_float+0x2d8>)
 800b036:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b03a:	f7f5 fd87 	bl	8000b4c <__aeabi_dcmpun>
 800b03e:	bb88      	cbnz	r0, 800b0a4 <_printf_float+0xcc>
 800b040:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b044:	4b9a      	ldr	r3, [pc, #616]	; (800b2b0 <_printf_float+0x2d8>)
 800b046:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b04a:	f7f5 fd61 	bl	8000b10 <__aeabi_dcmple>
 800b04e:	bb48      	cbnz	r0, 800b0a4 <_printf_float+0xcc>
 800b050:	2200      	movs	r2, #0
 800b052:	2300      	movs	r3, #0
 800b054:	4640      	mov	r0, r8
 800b056:	4649      	mov	r1, r9
 800b058:	f7f5 fd50 	bl	8000afc <__aeabi_dcmplt>
 800b05c:	b110      	cbz	r0, 800b064 <_printf_float+0x8c>
 800b05e:	232d      	movs	r3, #45	; 0x2d
 800b060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b064:	4a93      	ldr	r2, [pc, #588]	; (800b2b4 <_printf_float+0x2dc>)
 800b066:	4b94      	ldr	r3, [pc, #592]	; (800b2b8 <_printf_float+0x2e0>)
 800b068:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b06c:	bf94      	ite	ls
 800b06e:	4690      	movls	r8, r2
 800b070:	4698      	movhi	r8, r3
 800b072:	2303      	movs	r3, #3
 800b074:	6123      	str	r3, [r4, #16]
 800b076:	9b05      	ldr	r3, [sp, #20]
 800b078:	f023 0304 	bic.w	r3, r3, #4
 800b07c:	6023      	str	r3, [r4, #0]
 800b07e:	f04f 0900 	mov.w	r9, #0
 800b082:	9700      	str	r7, [sp, #0]
 800b084:	4633      	mov	r3, r6
 800b086:	aa0b      	add	r2, sp, #44	; 0x2c
 800b088:	4621      	mov	r1, r4
 800b08a:	4628      	mov	r0, r5
 800b08c:	f000 f9da 	bl	800b444 <_printf_common>
 800b090:	3001      	adds	r0, #1
 800b092:	f040 8090 	bne.w	800b1b6 <_printf_float+0x1de>
 800b096:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b09a:	b00d      	add	sp, #52	; 0x34
 800b09c:	ecbd 8b02 	vpop	{d8}
 800b0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0a4:	4642      	mov	r2, r8
 800b0a6:	464b      	mov	r3, r9
 800b0a8:	4640      	mov	r0, r8
 800b0aa:	4649      	mov	r1, r9
 800b0ac:	f7f5 fd4e 	bl	8000b4c <__aeabi_dcmpun>
 800b0b0:	b140      	cbz	r0, 800b0c4 <_printf_float+0xec>
 800b0b2:	464b      	mov	r3, r9
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	bfbc      	itt	lt
 800b0b8:	232d      	movlt	r3, #45	; 0x2d
 800b0ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b0be:	4a7f      	ldr	r2, [pc, #508]	; (800b2bc <_printf_float+0x2e4>)
 800b0c0:	4b7f      	ldr	r3, [pc, #508]	; (800b2c0 <_printf_float+0x2e8>)
 800b0c2:	e7d1      	b.n	800b068 <_printf_float+0x90>
 800b0c4:	6863      	ldr	r3, [r4, #4]
 800b0c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b0ca:	9206      	str	r2, [sp, #24]
 800b0cc:	1c5a      	adds	r2, r3, #1
 800b0ce:	d13f      	bne.n	800b150 <_printf_float+0x178>
 800b0d0:	2306      	movs	r3, #6
 800b0d2:	6063      	str	r3, [r4, #4]
 800b0d4:	9b05      	ldr	r3, [sp, #20]
 800b0d6:	6861      	ldr	r1, [r4, #4]
 800b0d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b0dc:	2300      	movs	r3, #0
 800b0de:	9303      	str	r3, [sp, #12]
 800b0e0:	ab0a      	add	r3, sp, #40	; 0x28
 800b0e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b0e6:	ab09      	add	r3, sp, #36	; 0x24
 800b0e8:	ec49 8b10 	vmov	d0, r8, r9
 800b0ec:	9300      	str	r3, [sp, #0]
 800b0ee:	6022      	str	r2, [r4, #0]
 800b0f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b0f4:	4628      	mov	r0, r5
 800b0f6:	f7ff fecf 	bl	800ae98 <__cvt>
 800b0fa:	9b06      	ldr	r3, [sp, #24]
 800b0fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0fe:	2b47      	cmp	r3, #71	; 0x47
 800b100:	4680      	mov	r8, r0
 800b102:	d108      	bne.n	800b116 <_printf_float+0x13e>
 800b104:	1cc8      	adds	r0, r1, #3
 800b106:	db02      	blt.n	800b10e <_printf_float+0x136>
 800b108:	6863      	ldr	r3, [r4, #4]
 800b10a:	4299      	cmp	r1, r3
 800b10c:	dd41      	ble.n	800b192 <_printf_float+0x1ba>
 800b10e:	f1ab 0302 	sub.w	r3, fp, #2
 800b112:	fa5f fb83 	uxtb.w	fp, r3
 800b116:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b11a:	d820      	bhi.n	800b15e <_printf_float+0x186>
 800b11c:	3901      	subs	r1, #1
 800b11e:	465a      	mov	r2, fp
 800b120:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b124:	9109      	str	r1, [sp, #36]	; 0x24
 800b126:	f7ff ff19 	bl	800af5c <__exponent>
 800b12a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b12c:	1813      	adds	r3, r2, r0
 800b12e:	2a01      	cmp	r2, #1
 800b130:	4681      	mov	r9, r0
 800b132:	6123      	str	r3, [r4, #16]
 800b134:	dc02      	bgt.n	800b13c <_printf_float+0x164>
 800b136:	6822      	ldr	r2, [r4, #0]
 800b138:	07d2      	lsls	r2, r2, #31
 800b13a:	d501      	bpl.n	800b140 <_printf_float+0x168>
 800b13c:	3301      	adds	r3, #1
 800b13e:	6123      	str	r3, [r4, #16]
 800b140:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b144:	2b00      	cmp	r3, #0
 800b146:	d09c      	beq.n	800b082 <_printf_float+0xaa>
 800b148:	232d      	movs	r3, #45	; 0x2d
 800b14a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b14e:	e798      	b.n	800b082 <_printf_float+0xaa>
 800b150:	9a06      	ldr	r2, [sp, #24]
 800b152:	2a47      	cmp	r2, #71	; 0x47
 800b154:	d1be      	bne.n	800b0d4 <_printf_float+0xfc>
 800b156:	2b00      	cmp	r3, #0
 800b158:	d1bc      	bne.n	800b0d4 <_printf_float+0xfc>
 800b15a:	2301      	movs	r3, #1
 800b15c:	e7b9      	b.n	800b0d2 <_printf_float+0xfa>
 800b15e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b162:	d118      	bne.n	800b196 <_printf_float+0x1be>
 800b164:	2900      	cmp	r1, #0
 800b166:	6863      	ldr	r3, [r4, #4]
 800b168:	dd0b      	ble.n	800b182 <_printf_float+0x1aa>
 800b16a:	6121      	str	r1, [r4, #16]
 800b16c:	b913      	cbnz	r3, 800b174 <_printf_float+0x19c>
 800b16e:	6822      	ldr	r2, [r4, #0]
 800b170:	07d0      	lsls	r0, r2, #31
 800b172:	d502      	bpl.n	800b17a <_printf_float+0x1a2>
 800b174:	3301      	adds	r3, #1
 800b176:	440b      	add	r3, r1
 800b178:	6123      	str	r3, [r4, #16]
 800b17a:	65a1      	str	r1, [r4, #88]	; 0x58
 800b17c:	f04f 0900 	mov.w	r9, #0
 800b180:	e7de      	b.n	800b140 <_printf_float+0x168>
 800b182:	b913      	cbnz	r3, 800b18a <_printf_float+0x1b2>
 800b184:	6822      	ldr	r2, [r4, #0]
 800b186:	07d2      	lsls	r2, r2, #31
 800b188:	d501      	bpl.n	800b18e <_printf_float+0x1b6>
 800b18a:	3302      	adds	r3, #2
 800b18c:	e7f4      	b.n	800b178 <_printf_float+0x1a0>
 800b18e:	2301      	movs	r3, #1
 800b190:	e7f2      	b.n	800b178 <_printf_float+0x1a0>
 800b192:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b198:	4299      	cmp	r1, r3
 800b19a:	db05      	blt.n	800b1a8 <_printf_float+0x1d0>
 800b19c:	6823      	ldr	r3, [r4, #0]
 800b19e:	6121      	str	r1, [r4, #16]
 800b1a0:	07d8      	lsls	r0, r3, #31
 800b1a2:	d5ea      	bpl.n	800b17a <_printf_float+0x1a2>
 800b1a4:	1c4b      	adds	r3, r1, #1
 800b1a6:	e7e7      	b.n	800b178 <_printf_float+0x1a0>
 800b1a8:	2900      	cmp	r1, #0
 800b1aa:	bfd4      	ite	le
 800b1ac:	f1c1 0202 	rsble	r2, r1, #2
 800b1b0:	2201      	movgt	r2, #1
 800b1b2:	4413      	add	r3, r2
 800b1b4:	e7e0      	b.n	800b178 <_printf_float+0x1a0>
 800b1b6:	6823      	ldr	r3, [r4, #0]
 800b1b8:	055a      	lsls	r2, r3, #21
 800b1ba:	d407      	bmi.n	800b1cc <_printf_float+0x1f4>
 800b1bc:	6923      	ldr	r3, [r4, #16]
 800b1be:	4642      	mov	r2, r8
 800b1c0:	4631      	mov	r1, r6
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	47b8      	blx	r7
 800b1c6:	3001      	adds	r0, #1
 800b1c8:	d12c      	bne.n	800b224 <_printf_float+0x24c>
 800b1ca:	e764      	b.n	800b096 <_printf_float+0xbe>
 800b1cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b1d0:	f240 80e0 	bls.w	800b394 <_printf_float+0x3bc>
 800b1d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b1d8:	2200      	movs	r2, #0
 800b1da:	2300      	movs	r3, #0
 800b1dc:	f7f5 fc84 	bl	8000ae8 <__aeabi_dcmpeq>
 800b1e0:	2800      	cmp	r0, #0
 800b1e2:	d034      	beq.n	800b24e <_printf_float+0x276>
 800b1e4:	4a37      	ldr	r2, [pc, #220]	; (800b2c4 <_printf_float+0x2ec>)
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	4631      	mov	r1, r6
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	47b8      	blx	r7
 800b1ee:	3001      	adds	r0, #1
 800b1f0:	f43f af51 	beq.w	800b096 <_printf_float+0xbe>
 800b1f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	db02      	blt.n	800b202 <_printf_float+0x22a>
 800b1fc:	6823      	ldr	r3, [r4, #0]
 800b1fe:	07d8      	lsls	r0, r3, #31
 800b200:	d510      	bpl.n	800b224 <_printf_float+0x24c>
 800b202:	ee18 3a10 	vmov	r3, s16
 800b206:	4652      	mov	r2, sl
 800b208:	4631      	mov	r1, r6
 800b20a:	4628      	mov	r0, r5
 800b20c:	47b8      	blx	r7
 800b20e:	3001      	adds	r0, #1
 800b210:	f43f af41 	beq.w	800b096 <_printf_float+0xbe>
 800b214:	f04f 0800 	mov.w	r8, #0
 800b218:	f104 091a 	add.w	r9, r4, #26
 800b21c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b21e:	3b01      	subs	r3, #1
 800b220:	4543      	cmp	r3, r8
 800b222:	dc09      	bgt.n	800b238 <_printf_float+0x260>
 800b224:	6823      	ldr	r3, [r4, #0]
 800b226:	079b      	lsls	r3, r3, #30
 800b228:	f100 8107 	bmi.w	800b43a <_printf_float+0x462>
 800b22c:	68e0      	ldr	r0, [r4, #12]
 800b22e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b230:	4298      	cmp	r0, r3
 800b232:	bfb8      	it	lt
 800b234:	4618      	movlt	r0, r3
 800b236:	e730      	b.n	800b09a <_printf_float+0xc2>
 800b238:	2301      	movs	r3, #1
 800b23a:	464a      	mov	r2, r9
 800b23c:	4631      	mov	r1, r6
 800b23e:	4628      	mov	r0, r5
 800b240:	47b8      	blx	r7
 800b242:	3001      	adds	r0, #1
 800b244:	f43f af27 	beq.w	800b096 <_printf_float+0xbe>
 800b248:	f108 0801 	add.w	r8, r8, #1
 800b24c:	e7e6      	b.n	800b21c <_printf_float+0x244>
 800b24e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b250:	2b00      	cmp	r3, #0
 800b252:	dc39      	bgt.n	800b2c8 <_printf_float+0x2f0>
 800b254:	4a1b      	ldr	r2, [pc, #108]	; (800b2c4 <_printf_float+0x2ec>)
 800b256:	2301      	movs	r3, #1
 800b258:	4631      	mov	r1, r6
 800b25a:	4628      	mov	r0, r5
 800b25c:	47b8      	blx	r7
 800b25e:	3001      	adds	r0, #1
 800b260:	f43f af19 	beq.w	800b096 <_printf_float+0xbe>
 800b264:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b268:	4313      	orrs	r3, r2
 800b26a:	d102      	bne.n	800b272 <_printf_float+0x29a>
 800b26c:	6823      	ldr	r3, [r4, #0]
 800b26e:	07d9      	lsls	r1, r3, #31
 800b270:	d5d8      	bpl.n	800b224 <_printf_float+0x24c>
 800b272:	ee18 3a10 	vmov	r3, s16
 800b276:	4652      	mov	r2, sl
 800b278:	4631      	mov	r1, r6
 800b27a:	4628      	mov	r0, r5
 800b27c:	47b8      	blx	r7
 800b27e:	3001      	adds	r0, #1
 800b280:	f43f af09 	beq.w	800b096 <_printf_float+0xbe>
 800b284:	f04f 0900 	mov.w	r9, #0
 800b288:	f104 0a1a 	add.w	sl, r4, #26
 800b28c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b28e:	425b      	negs	r3, r3
 800b290:	454b      	cmp	r3, r9
 800b292:	dc01      	bgt.n	800b298 <_printf_float+0x2c0>
 800b294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b296:	e792      	b.n	800b1be <_printf_float+0x1e6>
 800b298:	2301      	movs	r3, #1
 800b29a:	4652      	mov	r2, sl
 800b29c:	4631      	mov	r1, r6
 800b29e:	4628      	mov	r0, r5
 800b2a0:	47b8      	blx	r7
 800b2a2:	3001      	adds	r0, #1
 800b2a4:	f43f aef7 	beq.w	800b096 <_printf_float+0xbe>
 800b2a8:	f109 0901 	add.w	r9, r9, #1
 800b2ac:	e7ee      	b.n	800b28c <_printf_float+0x2b4>
 800b2ae:	bf00      	nop
 800b2b0:	7fefffff 	.word	0x7fefffff
 800b2b4:	0801fd84 	.word	0x0801fd84
 800b2b8:	0801fd88 	.word	0x0801fd88
 800b2bc:	0801fd8c 	.word	0x0801fd8c
 800b2c0:	0801fd90 	.word	0x0801fd90
 800b2c4:	0801fd94 	.word	0x0801fd94
 800b2c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	bfa8      	it	ge
 800b2d0:	461a      	movge	r2, r3
 800b2d2:	2a00      	cmp	r2, #0
 800b2d4:	4691      	mov	r9, r2
 800b2d6:	dc37      	bgt.n	800b348 <_printf_float+0x370>
 800b2d8:	f04f 0b00 	mov.w	fp, #0
 800b2dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b2e0:	f104 021a 	add.w	r2, r4, #26
 800b2e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b2e6:	9305      	str	r3, [sp, #20]
 800b2e8:	eba3 0309 	sub.w	r3, r3, r9
 800b2ec:	455b      	cmp	r3, fp
 800b2ee:	dc33      	bgt.n	800b358 <_printf_float+0x380>
 800b2f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	db3b      	blt.n	800b370 <_printf_float+0x398>
 800b2f8:	6823      	ldr	r3, [r4, #0]
 800b2fa:	07da      	lsls	r2, r3, #31
 800b2fc:	d438      	bmi.n	800b370 <_printf_float+0x398>
 800b2fe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b302:	eba2 0903 	sub.w	r9, r2, r3
 800b306:	9b05      	ldr	r3, [sp, #20]
 800b308:	1ad2      	subs	r2, r2, r3
 800b30a:	4591      	cmp	r9, r2
 800b30c:	bfa8      	it	ge
 800b30e:	4691      	movge	r9, r2
 800b310:	f1b9 0f00 	cmp.w	r9, #0
 800b314:	dc35      	bgt.n	800b382 <_printf_float+0x3aa>
 800b316:	f04f 0800 	mov.w	r8, #0
 800b31a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b31e:	f104 0a1a 	add.w	sl, r4, #26
 800b322:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b326:	1a9b      	subs	r3, r3, r2
 800b328:	eba3 0309 	sub.w	r3, r3, r9
 800b32c:	4543      	cmp	r3, r8
 800b32e:	f77f af79 	ble.w	800b224 <_printf_float+0x24c>
 800b332:	2301      	movs	r3, #1
 800b334:	4652      	mov	r2, sl
 800b336:	4631      	mov	r1, r6
 800b338:	4628      	mov	r0, r5
 800b33a:	47b8      	blx	r7
 800b33c:	3001      	adds	r0, #1
 800b33e:	f43f aeaa 	beq.w	800b096 <_printf_float+0xbe>
 800b342:	f108 0801 	add.w	r8, r8, #1
 800b346:	e7ec      	b.n	800b322 <_printf_float+0x34a>
 800b348:	4613      	mov	r3, r2
 800b34a:	4631      	mov	r1, r6
 800b34c:	4642      	mov	r2, r8
 800b34e:	4628      	mov	r0, r5
 800b350:	47b8      	blx	r7
 800b352:	3001      	adds	r0, #1
 800b354:	d1c0      	bne.n	800b2d8 <_printf_float+0x300>
 800b356:	e69e      	b.n	800b096 <_printf_float+0xbe>
 800b358:	2301      	movs	r3, #1
 800b35a:	4631      	mov	r1, r6
 800b35c:	4628      	mov	r0, r5
 800b35e:	9205      	str	r2, [sp, #20]
 800b360:	47b8      	blx	r7
 800b362:	3001      	adds	r0, #1
 800b364:	f43f ae97 	beq.w	800b096 <_printf_float+0xbe>
 800b368:	9a05      	ldr	r2, [sp, #20]
 800b36a:	f10b 0b01 	add.w	fp, fp, #1
 800b36e:	e7b9      	b.n	800b2e4 <_printf_float+0x30c>
 800b370:	ee18 3a10 	vmov	r3, s16
 800b374:	4652      	mov	r2, sl
 800b376:	4631      	mov	r1, r6
 800b378:	4628      	mov	r0, r5
 800b37a:	47b8      	blx	r7
 800b37c:	3001      	adds	r0, #1
 800b37e:	d1be      	bne.n	800b2fe <_printf_float+0x326>
 800b380:	e689      	b.n	800b096 <_printf_float+0xbe>
 800b382:	9a05      	ldr	r2, [sp, #20]
 800b384:	464b      	mov	r3, r9
 800b386:	4442      	add	r2, r8
 800b388:	4631      	mov	r1, r6
 800b38a:	4628      	mov	r0, r5
 800b38c:	47b8      	blx	r7
 800b38e:	3001      	adds	r0, #1
 800b390:	d1c1      	bne.n	800b316 <_printf_float+0x33e>
 800b392:	e680      	b.n	800b096 <_printf_float+0xbe>
 800b394:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b396:	2a01      	cmp	r2, #1
 800b398:	dc01      	bgt.n	800b39e <_printf_float+0x3c6>
 800b39a:	07db      	lsls	r3, r3, #31
 800b39c:	d53a      	bpl.n	800b414 <_printf_float+0x43c>
 800b39e:	2301      	movs	r3, #1
 800b3a0:	4642      	mov	r2, r8
 800b3a2:	4631      	mov	r1, r6
 800b3a4:	4628      	mov	r0, r5
 800b3a6:	47b8      	blx	r7
 800b3a8:	3001      	adds	r0, #1
 800b3aa:	f43f ae74 	beq.w	800b096 <_printf_float+0xbe>
 800b3ae:	ee18 3a10 	vmov	r3, s16
 800b3b2:	4652      	mov	r2, sl
 800b3b4:	4631      	mov	r1, r6
 800b3b6:	4628      	mov	r0, r5
 800b3b8:	47b8      	blx	r7
 800b3ba:	3001      	adds	r0, #1
 800b3bc:	f43f ae6b 	beq.w	800b096 <_printf_float+0xbe>
 800b3c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b3cc:	f7f5 fb8c 	bl	8000ae8 <__aeabi_dcmpeq>
 800b3d0:	b9d8      	cbnz	r0, 800b40a <_printf_float+0x432>
 800b3d2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800b3d6:	f108 0201 	add.w	r2, r8, #1
 800b3da:	4631      	mov	r1, r6
 800b3dc:	4628      	mov	r0, r5
 800b3de:	47b8      	blx	r7
 800b3e0:	3001      	adds	r0, #1
 800b3e2:	d10e      	bne.n	800b402 <_printf_float+0x42a>
 800b3e4:	e657      	b.n	800b096 <_printf_float+0xbe>
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	4652      	mov	r2, sl
 800b3ea:	4631      	mov	r1, r6
 800b3ec:	4628      	mov	r0, r5
 800b3ee:	47b8      	blx	r7
 800b3f0:	3001      	adds	r0, #1
 800b3f2:	f43f ae50 	beq.w	800b096 <_printf_float+0xbe>
 800b3f6:	f108 0801 	add.w	r8, r8, #1
 800b3fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3fc:	3b01      	subs	r3, #1
 800b3fe:	4543      	cmp	r3, r8
 800b400:	dcf1      	bgt.n	800b3e6 <_printf_float+0x40e>
 800b402:	464b      	mov	r3, r9
 800b404:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b408:	e6da      	b.n	800b1c0 <_printf_float+0x1e8>
 800b40a:	f04f 0800 	mov.w	r8, #0
 800b40e:	f104 0a1a 	add.w	sl, r4, #26
 800b412:	e7f2      	b.n	800b3fa <_printf_float+0x422>
 800b414:	2301      	movs	r3, #1
 800b416:	4642      	mov	r2, r8
 800b418:	e7df      	b.n	800b3da <_printf_float+0x402>
 800b41a:	2301      	movs	r3, #1
 800b41c:	464a      	mov	r2, r9
 800b41e:	4631      	mov	r1, r6
 800b420:	4628      	mov	r0, r5
 800b422:	47b8      	blx	r7
 800b424:	3001      	adds	r0, #1
 800b426:	f43f ae36 	beq.w	800b096 <_printf_float+0xbe>
 800b42a:	f108 0801 	add.w	r8, r8, #1
 800b42e:	68e3      	ldr	r3, [r4, #12]
 800b430:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b432:	1a5b      	subs	r3, r3, r1
 800b434:	4543      	cmp	r3, r8
 800b436:	dcf0      	bgt.n	800b41a <_printf_float+0x442>
 800b438:	e6f8      	b.n	800b22c <_printf_float+0x254>
 800b43a:	f04f 0800 	mov.w	r8, #0
 800b43e:	f104 0919 	add.w	r9, r4, #25
 800b442:	e7f4      	b.n	800b42e <_printf_float+0x456>

0800b444 <_printf_common>:
 800b444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b448:	4616      	mov	r6, r2
 800b44a:	4699      	mov	r9, r3
 800b44c:	688a      	ldr	r2, [r1, #8]
 800b44e:	690b      	ldr	r3, [r1, #16]
 800b450:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b454:	4293      	cmp	r3, r2
 800b456:	bfb8      	it	lt
 800b458:	4613      	movlt	r3, r2
 800b45a:	6033      	str	r3, [r6, #0]
 800b45c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b460:	4607      	mov	r7, r0
 800b462:	460c      	mov	r4, r1
 800b464:	b10a      	cbz	r2, 800b46a <_printf_common+0x26>
 800b466:	3301      	adds	r3, #1
 800b468:	6033      	str	r3, [r6, #0]
 800b46a:	6823      	ldr	r3, [r4, #0]
 800b46c:	0699      	lsls	r1, r3, #26
 800b46e:	bf42      	ittt	mi
 800b470:	6833      	ldrmi	r3, [r6, #0]
 800b472:	3302      	addmi	r3, #2
 800b474:	6033      	strmi	r3, [r6, #0]
 800b476:	6825      	ldr	r5, [r4, #0]
 800b478:	f015 0506 	ands.w	r5, r5, #6
 800b47c:	d106      	bne.n	800b48c <_printf_common+0x48>
 800b47e:	f104 0a19 	add.w	sl, r4, #25
 800b482:	68e3      	ldr	r3, [r4, #12]
 800b484:	6832      	ldr	r2, [r6, #0]
 800b486:	1a9b      	subs	r3, r3, r2
 800b488:	42ab      	cmp	r3, r5
 800b48a:	dc26      	bgt.n	800b4da <_printf_common+0x96>
 800b48c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b490:	1e13      	subs	r3, r2, #0
 800b492:	6822      	ldr	r2, [r4, #0]
 800b494:	bf18      	it	ne
 800b496:	2301      	movne	r3, #1
 800b498:	0692      	lsls	r2, r2, #26
 800b49a:	d42b      	bmi.n	800b4f4 <_printf_common+0xb0>
 800b49c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4a0:	4649      	mov	r1, r9
 800b4a2:	4638      	mov	r0, r7
 800b4a4:	47c0      	blx	r8
 800b4a6:	3001      	adds	r0, #1
 800b4a8:	d01e      	beq.n	800b4e8 <_printf_common+0xa4>
 800b4aa:	6823      	ldr	r3, [r4, #0]
 800b4ac:	6922      	ldr	r2, [r4, #16]
 800b4ae:	f003 0306 	and.w	r3, r3, #6
 800b4b2:	2b04      	cmp	r3, #4
 800b4b4:	bf02      	ittt	eq
 800b4b6:	68e5      	ldreq	r5, [r4, #12]
 800b4b8:	6833      	ldreq	r3, [r6, #0]
 800b4ba:	1aed      	subeq	r5, r5, r3
 800b4bc:	68a3      	ldr	r3, [r4, #8]
 800b4be:	bf0c      	ite	eq
 800b4c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4c4:	2500      	movne	r5, #0
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	bfc4      	itt	gt
 800b4ca:	1a9b      	subgt	r3, r3, r2
 800b4cc:	18ed      	addgt	r5, r5, r3
 800b4ce:	2600      	movs	r6, #0
 800b4d0:	341a      	adds	r4, #26
 800b4d2:	42b5      	cmp	r5, r6
 800b4d4:	d11a      	bne.n	800b50c <_printf_common+0xc8>
 800b4d6:	2000      	movs	r0, #0
 800b4d8:	e008      	b.n	800b4ec <_printf_common+0xa8>
 800b4da:	2301      	movs	r3, #1
 800b4dc:	4652      	mov	r2, sl
 800b4de:	4649      	mov	r1, r9
 800b4e0:	4638      	mov	r0, r7
 800b4e2:	47c0      	blx	r8
 800b4e4:	3001      	adds	r0, #1
 800b4e6:	d103      	bne.n	800b4f0 <_printf_common+0xac>
 800b4e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4f0:	3501      	adds	r5, #1
 800b4f2:	e7c6      	b.n	800b482 <_printf_common+0x3e>
 800b4f4:	18e1      	adds	r1, r4, r3
 800b4f6:	1c5a      	adds	r2, r3, #1
 800b4f8:	2030      	movs	r0, #48	; 0x30
 800b4fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4fe:	4422      	add	r2, r4
 800b500:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b504:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b508:	3302      	adds	r3, #2
 800b50a:	e7c7      	b.n	800b49c <_printf_common+0x58>
 800b50c:	2301      	movs	r3, #1
 800b50e:	4622      	mov	r2, r4
 800b510:	4649      	mov	r1, r9
 800b512:	4638      	mov	r0, r7
 800b514:	47c0      	blx	r8
 800b516:	3001      	adds	r0, #1
 800b518:	d0e6      	beq.n	800b4e8 <_printf_common+0xa4>
 800b51a:	3601      	adds	r6, #1
 800b51c:	e7d9      	b.n	800b4d2 <_printf_common+0x8e>
	...

0800b520 <_printf_i>:
 800b520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b524:	7e0f      	ldrb	r7, [r1, #24]
 800b526:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b528:	2f78      	cmp	r7, #120	; 0x78
 800b52a:	4691      	mov	r9, r2
 800b52c:	4680      	mov	r8, r0
 800b52e:	460c      	mov	r4, r1
 800b530:	469a      	mov	sl, r3
 800b532:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b536:	d807      	bhi.n	800b548 <_printf_i+0x28>
 800b538:	2f62      	cmp	r7, #98	; 0x62
 800b53a:	d80a      	bhi.n	800b552 <_printf_i+0x32>
 800b53c:	2f00      	cmp	r7, #0
 800b53e:	f000 80d4 	beq.w	800b6ea <_printf_i+0x1ca>
 800b542:	2f58      	cmp	r7, #88	; 0x58
 800b544:	f000 80c0 	beq.w	800b6c8 <_printf_i+0x1a8>
 800b548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b54c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b550:	e03a      	b.n	800b5c8 <_printf_i+0xa8>
 800b552:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b556:	2b15      	cmp	r3, #21
 800b558:	d8f6      	bhi.n	800b548 <_printf_i+0x28>
 800b55a:	a101      	add	r1, pc, #4	; (adr r1, 800b560 <_printf_i+0x40>)
 800b55c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b560:	0800b5b9 	.word	0x0800b5b9
 800b564:	0800b5cd 	.word	0x0800b5cd
 800b568:	0800b549 	.word	0x0800b549
 800b56c:	0800b549 	.word	0x0800b549
 800b570:	0800b549 	.word	0x0800b549
 800b574:	0800b549 	.word	0x0800b549
 800b578:	0800b5cd 	.word	0x0800b5cd
 800b57c:	0800b549 	.word	0x0800b549
 800b580:	0800b549 	.word	0x0800b549
 800b584:	0800b549 	.word	0x0800b549
 800b588:	0800b549 	.word	0x0800b549
 800b58c:	0800b6d1 	.word	0x0800b6d1
 800b590:	0800b5f9 	.word	0x0800b5f9
 800b594:	0800b68b 	.word	0x0800b68b
 800b598:	0800b549 	.word	0x0800b549
 800b59c:	0800b549 	.word	0x0800b549
 800b5a0:	0800b6f3 	.word	0x0800b6f3
 800b5a4:	0800b549 	.word	0x0800b549
 800b5a8:	0800b5f9 	.word	0x0800b5f9
 800b5ac:	0800b549 	.word	0x0800b549
 800b5b0:	0800b549 	.word	0x0800b549
 800b5b4:	0800b693 	.word	0x0800b693
 800b5b8:	682b      	ldr	r3, [r5, #0]
 800b5ba:	1d1a      	adds	r2, r3, #4
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	602a      	str	r2, [r5, #0]
 800b5c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	e09f      	b.n	800b70c <_printf_i+0x1ec>
 800b5cc:	6820      	ldr	r0, [r4, #0]
 800b5ce:	682b      	ldr	r3, [r5, #0]
 800b5d0:	0607      	lsls	r7, r0, #24
 800b5d2:	f103 0104 	add.w	r1, r3, #4
 800b5d6:	6029      	str	r1, [r5, #0]
 800b5d8:	d501      	bpl.n	800b5de <_printf_i+0xbe>
 800b5da:	681e      	ldr	r6, [r3, #0]
 800b5dc:	e003      	b.n	800b5e6 <_printf_i+0xc6>
 800b5de:	0646      	lsls	r6, r0, #25
 800b5e0:	d5fb      	bpl.n	800b5da <_printf_i+0xba>
 800b5e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b5e6:	2e00      	cmp	r6, #0
 800b5e8:	da03      	bge.n	800b5f2 <_printf_i+0xd2>
 800b5ea:	232d      	movs	r3, #45	; 0x2d
 800b5ec:	4276      	negs	r6, r6
 800b5ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5f2:	485a      	ldr	r0, [pc, #360]	; (800b75c <_printf_i+0x23c>)
 800b5f4:	230a      	movs	r3, #10
 800b5f6:	e012      	b.n	800b61e <_printf_i+0xfe>
 800b5f8:	682b      	ldr	r3, [r5, #0]
 800b5fa:	6820      	ldr	r0, [r4, #0]
 800b5fc:	1d19      	adds	r1, r3, #4
 800b5fe:	6029      	str	r1, [r5, #0]
 800b600:	0605      	lsls	r5, r0, #24
 800b602:	d501      	bpl.n	800b608 <_printf_i+0xe8>
 800b604:	681e      	ldr	r6, [r3, #0]
 800b606:	e002      	b.n	800b60e <_printf_i+0xee>
 800b608:	0641      	lsls	r1, r0, #25
 800b60a:	d5fb      	bpl.n	800b604 <_printf_i+0xe4>
 800b60c:	881e      	ldrh	r6, [r3, #0]
 800b60e:	4853      	ldr	r0, [pc, #332]	; (800b75c <_printf_i+0x23c>)
 800b610:	2f6f      	cmp	r7, #111	; 0x6f
 800b612:	bf0c      	ite	eq
 800b614:	2308      	moveq	r3, #8
 800b616:	230a      	movne	r3, #10
 800b618:	2100      	movs	r1, #0
 800b61a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b61e:	6865      	ldr	r5, [r4, #4]
 800b620:	60a5      	str	r5, [r4, #8]
 800b622:	2d00      	cmp	r5, #0
 800b624:	bfa2      	ittt	ge
 800b626:	6821      	ldrge	r1, [r4, #0]
 800b628:	f021 0104 	bicge.w	r1, r1, #4
 800b62c:	6021      	strge	r1, [r4, #0]
 800b62e:	b90e      	cbnz	r6, 800b634 <_printf_i+0x114>
 800b630:	2d00      	cmp	r5, #0
 800b632:	d04b      	beq.n	800b6cc <_printf_i+0x1ac>
 800b634:	4615      	mov	r5, r2
 800b636:	fbb6 f1f3 	udiv	r1, r6, r3
 800b63a:	fb03 6711 	mls	r7, r3, r1, r6
 800b63e:	5dc7      	ldrb	r7, [r0, r7]
 800b640:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b644:	4637      	mov	r7, r6
 800b646:	42bb      	cmp	r3, r7
 800b648:	460e      	mov	r6, r1
 800b64a:	d9f4      	bls.n	800b636 <_printf_i+0x116>
 800b64c:	2b08      	cmp	r3, #8
 800b64e:	d10b      	bne.n	800b668 <_printf_i+0x148>
 800b650:	6823      	ldr	r3, [r4, #0]
 800b652:	07de      	lsls	r6, r3, #31
 800b654:	d508      	bpl.n	800b668 <_printf_i+0x148>
 800b656:	6923      	ldr	r3, [r4, #16]
 800b658:	6861      	ldr	r1, [r4, #4]
 800b65a:	4299      	cmp	r1, r3
 800b65c:	bfde      	ittt	le
 800b65e:	2330      	movle	r3, #48	; 0x30
 800b660:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b664:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b668:	1b52      	subs	r2, r2, r5
 800b66a:	6122      	str	r2, [r4, #16]
 800b66c:	f8cd a000 	str.w	sl, [sp]
 800b670:	464b      	mov	r3, r9
 800b672:	aa03      	add	r2, sp, #12
 800b674:	4621      	mov	r1, r4
 800b676:	4640      	mov	r0, r8
 800b678:	f7ff fee4 	bl	800b444 <_printf_common>
 800b67c:	3001      	adds	r0, #1
 800b67e:	d14a      	bne.n	800b716 <_printf_i+0x1f6>
 800b680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b684:	b004      	add	sp, #16
 800b686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b68a:	6823      	ldr	r3, [r4, #0]
 800b68c:	f043 0320 	orr.w	r3, r3, #32
 800b690:	6023      	str	r3, [r4, #0]
 800b692:	4833      	ldr	r0, [pc, #204]	; (800b760 <_printf_i+0x240>)
 800b694:	2778      	movs	r7, #120	; 0x78
 800b696:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b69a:	6823      	ldr	r3, [r4, #0]
 800b69c:	6829      	ldr	r1, [r5, #0]
 800b69e:	061f      	lsls	r7, r3, #24
 800b6a0:	f851 6b04 	ldr.w	r6, [r1], #4
 800b6a4:	d402      	bmi.n	800b6ac <_printf_i+0x18c>
 800b6a6:	065f      	lsls	r7, r3, #25
 800b6a8:	bf48      	it	mi
 800b6aa:	b2b6      	uxthmi	r6, r6
 800b6ac:	07df      	lsls	r7, r3, #31
 800b6ae:	bf48      	it	mi
 800b6b0:	f043 0320 	orrmi.w	r3, r3, #32
 800b6b4:	6029      	str	r1, [r5, #0]
 800b6b6:	bf48      	it	mi
 800b6b8:	6023      	strmi	r3, [r4, #0]
 800b6ba:	b91e      	cbnz	r6, 800b6c4 <_printf_i+0x1a4>
 800b6bc:	6823      	ldr	r3, [r4, #0]
 800b6be:	f023 0320 	bic.w	r3, r3, #32
 800b6c2:	6023      	str	r3, [r4, #0]
 800b6c4:	2310      	movs	r3, #16
 800b6c6:	e7a7      	b.n	800b618 <_printf_i+0xf8>
 800b6c8:	4824      	ldr	r0, [pc, #144]	; (800b75c <_printf_i+0x23c>)
 800b6ca:	e7e4      	b.n	800b696 <_printf_i+0x176>
 800b6cc:	4615      	mov	r5, r2
 800b6ce:	e7bd      	b.n	800b64c <_printf_i+0x12c>
 800b6d0:	682b      	ldr	r3, [r5, #0]
 800b6d2:	6826      	ldr	r6, [r4, #0]
 800b6d4:	6961      	ldr	r1, [r4, #20]
 800b6d6:	1d18      	adds	r0, r3, #4
 800b6d8:	6028      	str	r0, [r5, #0]
 800b6da:	0635      	lsls	r5, r6, #24
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	d501      	bpl.n	800b6e4 <_printf_i+0x1c4>
 800b6e0:	6019      	str	r1, [r3, #0]
 800b6e2:	e002      	b.n	800b6ea <_printf_i+0x1ca>
 800b6e4:	0670      	lsls	r0, r6, #25
 800b6e6:	d5fb      	bpl.n	800b6e0 <_printf_i+0x1c0>
 800b6e8:	8019      	strh	r1, [r3, #0]
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	6123      	str	r3, [r4, #16]
 800b6ee:	4615      	mov	r5, r2
 800b6f0:	e7bc      	b.n	800b66c <_printf_i+0x14c>
 800b6f2:	682b      	ldr	r3, [r5, #0]
 800b6f4:	1d1a      	adds	r2, r3, #4
 800b6f6:	602a      	str	r2, [r5, #0]
 800b6f8:	681d      	ldr	r5, [r3, #0]
 800b6fa:	6862      	ldr	r2, [r4, #4]
 800b6fc:	2100      	movs	r1, #0
 800b6fe:	4628      	mov	r0, r5
 800b700:	f7f4 fd76 	bl	80001f0 <memchr>
 800b704:	b108      	cbz	r0, 800b70a <_printf_i+0x1ea>
 800b706:	1b40      	subs	r0, r0, r5
 800b708:	6060      	str	r0, [r4, #4]
 800b70a:	6863      	ldr	r3, [r4, #4]
 800b70c:	6123      	str	r3, [r4, #16]
 800b70e:	2300      	movs	r3, #0
 800b710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b714:	e7aa      	b.n	800b66c <_printf_i+0x14c>
 800b716:	6923      	ldr	r3, [r4, #16]
 800b718:	462a      	mov	r2, r5
 800b71a:	4649      	mov	r1, r9
 800b71c:	4640      	mov	r0, r8
 800b71e:	47d0      	blx	sl
 800b720:	3001      	adds	r0, #1
 800b722:	d0ad      	beq.n	800b680 <_printf_i+0x160>
 800b724:	6823      	ldr	r3, [r4, #0]
 800b726:	079b      	lsls	r3, r3, #30
 800b728:	d413      	bmi.n	800b752 <_printf_i+0x232>
 800b72a:	68e0      	ldr	r0, [r4, #12]
 800b72c:	9b03      	ldr	r3, [sp, #12]
 800b72e:	4298      	cmp	r0, r3
 800b730:	bfb8      	it	lt
 800b732:	4618      	movlt	r0, r3
 800b734:	e7a6      	b.n	800b684 <_printf_i+0x164>
 800b736:	2301      	movs	r3, #1
 800b738:	4632      	mov	r2, r6
 800b73a:	4649      	mov	r1, r9
 800b73c:	4640      	mov	r0, r8
 800b73e:	47d0      	blx	sl
 800b740:	3001      	adds	r0, #1
 800b742:	d09d      	beq.n	800b680 <_printf_i+0x160>
 800b744:	3501      	adds	r5, #1
 800b746:	68e3      	ldr	r3, [r4, #12]
 800b748:	9903      	ldr	r1, [sp, #12]
 800b74a:	1a5b      	subs	r3, r3, r1
 800b74c:	42ab      	cmp	r3, r5
 800b74e:	dcf2      	bgt.n	800b736 <_printf_i+0x216>
 800b750:	e7eb      	b.n	800b72a <_printf_i+0x20a>
 800b752:	2500      	movs	r5, #0
 800b754:	f104 0619 	add.w	r6, r4, #25
 800b758:	e7f5      	b.n	800b746 <_printf_i+0x226>
 800b75a:	bf00      	nop
 800b75c:	0801fd96 	.word	0x0801fd96
 800b760:	0801fda7 	.word	0x0801fda7

0800b764 <std>:
 800b764:	2300      	movs	r3, #0
 800b766:	b510      	push	{r4, lr}
 800b768:	4604      	mov	r4, r0
 800b76a:	e9c0 3300 	strd	r3, r3, [r0]
 800b76e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b772:	6083      	str	r3, [r0, #8]
 800b774:	8181      	strh	r1, [r0, #12]
 800b776:	6643      	str	r3, [r0, #100]	; 0x64
 800b778:	81c2      	strh	r2, [r0, #14]
 800b77a:	6183      	str	r3, [r0, #24]
 800b77c:	4619      	mov	r1, r3
 800b77e:	2208      	movs	r2, #8
 800b780:	305c      	adds	r0, #92	; 0x5c
 800b782:	f000 faa5 	bl	800bcd0 <memset>
 800b786:	4b0d      	ldr	r3, [pc, #52]	; (800b7bc <std+0x58>)
 800b788:	6263      	str	r3, [r4, #36]	; 0x24
 800b78a:	4b0d      	ldr	r3, [pc, #52]	; (800b7c0 <std+0x5c>)
 800b78c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b78e:	4b0d      	ldr	r3, [pc, #52]	; (800b7c4 <std+0x60>)
 800b790:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b792:	4b0d      	ldr	r3, [pc, #52]	; (800b7c8 <std+0x64>)
 800b794:	6323      	str	r3, [r4, #48]	; 0x30
 800b796:	4b0d      	ldr	r3, [pc, #52]	; (800b7cc <std+0x68>)
 800b798:	6224      	str	r4, [r4, #32]
 800b79a:	429c      	cmp	r4, r3
 800b79c:	d006      	beq.n	800b7ac <std+0x48>
 800b79e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b7a2:	4294      	cmp	r4, r2
 800b7a4:	d002      	beq.n	800b7ac <std+0x48>
 800b7a6:	33d0      	adds	r3, #208	; 0xd0
 800b7a8:	429c      	cmp	r4, r3
 800b7aa:	d105      	bne.n	800b7b8 <std+0x54>
 800b7ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b7b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7b4:	f000 bb08 	b.w	800bdc8 <__retarget_lock_init_recursive>
 800b7b8:	bd10      	pop	{r4, pc}
 800b7ba:	bf00      	nop
 800b7bc:	0800bb21 	.word	0x0800bb21
 800b7c0:	0800bb43 	.word	0x0800bb43
 800b7c4:	0800bb7b 	.word	0x0800bb7b
 800b7c8:	0800bb9f 	.word	0x0800bb9f
 800b7cc:	20004cb0 	.word	0x20004cb0

0800b7d0 <stdio_exit_handler>:
 800b7d0:	4a02      	ldr	r2, [pc, #8]	; (800b7dc <stdio_exit_handler+0xc>)
 800b7d2:	4903      	ldr	r1, [pc, #12]	; (800b7e0 <stdio_exit_handler+0x10>)
 800b7d4:	4803      	ldr	r0, [pc, #12]	; (800b7e4 <stdio_exit_handler+0x14>)
 800b7d6:	f000 b869 	b.w	800b8ac <_fwalk_sglue>
 800b7da:	bf00      	nop
 800b7dc:	20002fa0 	.word	0x20002fa0
 800b7e0:	0800d771 	.word	0x0800d771
 800b7e4:	20002fac 	.word	0x20002fac

0800b7e8 <cleanup_stdio>:
 800b7e8:	6841      	ldr	r1, [r0, #4]
 800b7ea:	4b0c      	ldr	r3, [pc, #48]	; (800b81c <cleanup_stdio+0x34>)
 800b7ec:	4299      	cmp	r1, r3
 800b7ee:	b510      	push	{r4, lr}
 800b7f0:	4604      	mov	r4, r0
 800b7f2:	d001      	beq.n	800b7f8 <cleanup_stdio+0x10>
 800b7f4:	f001 ffbc 	bl	800d770 <_fflush_r>
 800b7f8:	68a1      	ldr	r1, [r4, #8]
 800b7fa:	4b09      	ldr	r3, [pc, #36]	; (800b820 <cleanup_stdio+0x38>)
 800b7fc:	4299      	cmp	r1, r3
 800b7fe:	d002      	beq.n	800b806 <cleanup_stdio+0x1e>
 800b800:	4620      	mov	r0, r4
 800b802:	f001 ffb5 	bl	800d770 <_fflush_r>
 800b806:	68e1      	ldr	r1, [r4, #12]
 800b808:	4b06      	ldr	r3, [pc, #24]	; (800b824 <cleanup_stdio+0x3c>)
 800b80a:	4299      	cmp	r1, r3
 800b80c:	d004      	beq.n	800b818 <cleanup_stdio+0x30>
 800b80e:	4620      	mov	r0, r4
 800b810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b814:	f001 bfac 	b.w	800d770 <_fflush_r>
 800b818:	bd10      	pop	{r4, pc}
 800b81a:	bf00      	nop
 800b81c:	20004cb0 	.word	0x20004cb0
 800b820:	20004d18 	.word	0x20004d18
 800b824:	20004d80 	.word	0x20004d80

0800b828 <global_stdio_init.part.0>:
 800b828:	b510      	push	{r4, lr}
 800b82a:	4b0b      	ldr	r3, [pc, #44]	; (800b858 <global_stdio_init.part.0+0x30>)
 800b82c:	4c0b      	ldr	r4, [pc, #44]	; (800b85c <global_stdio_init.part.0+0x34>)
 800b82e:	4a0c      	ldr	r2, [pc, #48]	; (800b860 <global_stdio_init.part.0+0x38>)
 800b830:	601a      	str	r2, [r3, #0]
 800b832:	4620      	mov	r0, r4
 800b834:	2200      	movs	r2, #0
 800b836:	2104      	movs	r1, #4
 800b838:	f7ff ff94 	bl	800b764 <std>
 800b83c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b840:	2201      	movs	r2, #1
 800b842:	2109      	movs	r1, #9
 800b844:	f7ff ff8e 	bl	800b764 <std>
 800b848:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b84c:	2202      	movs	r2, #2
 800b84e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b852:	2112      	movs	r1, #18
 800b854:	f7ff bf86 	b.w	800b764 <std>
 800b858:	20004de8 	.word	0x20004de8
 800b85c:	20004cb0 	.word	0x20004cb0
 800b860:	0800b7d1 	.word	0x0800b7d1

0800b864 <__sfp_lock_acquire>:
 800b864:	4801      	ldr	r0, [pc, #4]	; (800b86c <__sfp_lock_acquire+0x8>)
 800b866:	f000 bab0 	b.w	800bdca <__retarget_lock_acquire_recursive>
 800b86a:	bf00      	nop
 800b86c:	20004df1 	.word	0x20004df1

0800b870 <__sfp_lock_release>:
 800b870:	4801      	ldr	r0, [pc, #4]	; (800b878 <__sfp_lock_release+0x8>)
 800b872:	f000 baab 	b.w	800bdcc <__retarget_lock_release_recursive>
 800b876:	bf00      	nop
 800b878:	20004df1 	.word	0x20004df1

0800b87c <__sinit>:
 800b87c:	b510      	push	{r4, lr}
 800b87e:	4604      	mov	r4, r0
 800b880:	f7ff fff0 	bl	800b864 <__sfp_lock_acquire>
 800b884:	6a23      	ldr	r3, [r4, #32]
 800b886:	b11b      	cbz	r3, 800b890 <__sinit+0x14>
 800b888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b88c:	f7ff bff0 	b.w	800b870 <__sfp_lock_release>
 800b890:	4b04      	ldr	r3, [pc, #16]	; (800b8a4 <__sinit+0x28>)
 800b892:	6223      	str	r3, [r4, #32]
 800b894:	4b04      	ldr	r3, [pc, #16]	; (800b8a8 <__sinit+0x2c>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1f5      	bne.n	800b888 <__sinit+0xc>
 800b89c:	f7ff ffc4 	bl	800b828 <global_stdio_init.part.0>
 800b8a0:	e7f2      	b.n	800b888 <__sinit+0xc>
 800b8a2:	bf00      	nop
 800b8a4:	0800b7e9 	.word	0x0800b7e9
 800b8a8:	20004de8 	.word	0x20004de8

0800b8ac <_fwalk_sglue>:
 800b8ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8b0:	4607      	mov	r7, r0
 800b8b2:	4688      	mov	r8, r1
 800b8b4:	4614      	mov	r4, r2
 800b8b6:	2600      	movs	r6, #0
 800b8b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b8bc:	f1b9 0901 	subs.w	r9, r9, #1
 800b8c0:	d505      	bpl.n	800b8ce <_fwalk_sglue+0x22>
 800b8c2:	6824      	ldr	r4, [r4, #0]
 800b8c4:	2c00      	cmp	r4, #0
 800b8c6:	d1f7      	bne.n	800b8b8 <_fwalk_sglue+0xc>
 800b8c8:	4630      	mov	r0, r6
 800b8ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8ce:	89ab      	ldrh	r3, [r5, #12]
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d907      	bls.n	800b8e4 <_fwalk_sglue+0x38>
 800b8d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b8d8:	3301      	adds	r3, #1
 800b8da:	d003      	beq.n	800b8e4 <_fwalk_sglue+0x38>
 800b8dc:	4629      	mov	r1, r5
 800b8de:	4638      	mov	r0, r7
 800b8e0:	47c0      	blx	r8
 800b8e2:	4306      	orrs	r6, r0
 800b8e4:	3568      	adds	r5, #104	; 0x68
 800b8e6:	e7e9      	b.n	800b8bc <_fwalk_sglue+0x10>

0800b8e8 <iprintf>:
 800b8e8:	b40f      	push	{r0, r1, r2, r3}
 800b8ea:	b507      	push	{r0, r1, r2, lr}
 800b8ec:	4906      	ldr	r1, [pc, #24]	; (800b908 <iprintf+0x20>)
 800b8ee:	ab04      	add	r3, sp, #16
 800b8f0:	6808      	ldr	r0, [r1, #0]
 800b8f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8f6:	6881      	ldr	r1, [r0, #8]
 800b8f8:	9301      	str	r3, [sp, #4]
 800b8fa:	f001 fd99 	bl	800d430 <_vfiprintf_r>
 800b8fe:	b003      	add	sp, #12
 800b900:	f85d eb04 	ldr.w	lr, [sp], #4
 800b904:	b004      	add	sp, #16
 800b906:	4770      	bx	lr
 800b908:	20002ff8 	.word	0x20002ff8

0800b90c <_puts_r>:
 800b90c:	6a03      	ldr	r3, [r0, #32]
 800b90e:	b570      	push	{r4, r5, r6, lr}
 800b910:	6884      	ldr	r4, [r0, #8]
 800b912:	4605      	mov	r5, r0
 800b914:	460e      	mov	r6, r1
 800b916:	b90b      	cbnz	r3, 800b91c <_puts_r+0x10>
 800b918:	f7ff ffb0 	bl	800b87c <__sinit>
 800b91c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b91e:	07db      	lsls	r3, r3, #31
 800b920:	d405      	bmi.n	800b92e <_puts_r+0x22>
 800b922:	89a3      	ldrh	r3, [r4, #12]
 800b924:	0598      	lsls	r0, r3, #22
 800b926:	d402      	bmi.n	800b92e <_puts_r+0x22>
 800b928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b92a:	f000 fa4e 	bl	800bdca <__retarget_lock_acquire_recursive>
 800b92e:	89a3      	ldrh	r3, [r4, #12]
 800b930:	0719      	lsls	r1, r3, #28
 800b932:	d513      	bpl.n	800b95c <_puts_r+0x50>
 800b934:	6923      	ldr	r3, [r4, #16]
 800b936:	b18b      	cbz	r3, 800b95c <_puts_r+0x50>
 800b938:	3e01      	subs	r6, #1
 800b93a:	68a3      	ldr	r3, [r4, #8]
 800b93c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b940:	3b01      	subs	r3, #1
 800b942:	60a3      	str	r3, [r4, #8]
 800b944:	b9e9      	cbnz	r1, 800b982 <_puts_r+0x76>
 800b946:	2b00      	cmp	r3, #0
 800b948:	da2e      	bge.n	800b9a8 <_puts_r+0x9c>
 800b94a:	4622      	mov	r2, r4
 800b94c:	210a      	movs	r1, #10
 800b94e:	4628      	mov	r0, r5
 800b950:	f000 f929 	bl	800bba6 <__swbuf_r>
 800b954:	3001      	adds	r0, #1
 800b956:	d007      	beq.n	800b968 <_puts_r+0x5c>
 800b958:	250a      	movs	r5, #10
 800b95a:	e007      	b.n	800b96c <_puts_r+0x60>
 800b95c:	4621      	mov	r1, r4
 800b95e:	4628      	mov	r0, r5
 800b960:	f000 f95e 	bl	800bc20 <__swsetup_r>
 800b964:	2800      	cmp	r0, #0
 800b966:	d0e7      	beq.n	800b938 <_puts_r+0x2c>
 800b968:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b96c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b96e:	07da      	lsls	r2, r3, #31
 800b970:	d405      	bmi.n	800b97e <_puts_r+0x72>
 800b972:	89a3      	ldrh	r3, [r4, #12]
 800b974:	059b      	lsls	r3, r3, #22
 800b976:	d402      	bmi.n	800b97e <_puts_r+0x72>
 800b978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b97a:	f000 fa27 	bl	800bdcc <__retarget_lock_release_recursive>
 800b97e:	4628      	mov	r0, r5
 800b980:	bd70      	pop	{r4, r5, r6, pc}
 800b982:	2b00      	cmp	r3, #0
 800b984:	da04      	bge.n	800b990 <_puts_r+0x84>
 800b986:	69a2      	ldr	r2, [r4, #24]
 800b988:	429a      	cmp	r2, r3
 800b98a:	dc06      	bgt.n	800b99a <_puts_r+0x8e>
 800b98c:	290a      	cmp	r1, #10
 800b98e:	d004      	beq.n	800b99a <_puts_r+0x8e>
 800b990:	6823      	ldr	r3, [r4, #0]
 800b992:	1c5a      	adds	r2, r3, #1
 800b994:	6022      	str	r2, [r4, #0]
 800b996:	7019      	strb	r1, [r3, #0]
 800b998:	e7cf      	b.n	800b93a <_puts_r+0x2e>
 800b99a:	4622      	mov	r2, r4
 800b99c:	4628      	mov	r0, r5
 800b99e:	f000 f902 	bl	800bba6 <__swbuf_r>
 800b9a2:	3001      	adds	r0, #1
 800b9a4:	d1c9      	bne.n	800b93a <_puts_r+0x2e>
 800b9a6:	e7df      	b.n	800b968 <_puts_r+0x5c>
 800b9a8:	6823      	ldr	r3, [r4, #0]
 800b9aa:	250a      	movs	r5, #10
 800b9ac:	1c5a      	adds	r2, r3, #1
 800b9ae:	6022      	str	r2, [r4, #0]
 800b9b0:	701d      	strb	r5, [r3, #0]
 800b9b2:	e7db      	b.n	800b96c <_puts_r+0x60>

0800b9b4 <puts>:
 800b9b4:	4b02      	ldr	r3, [pc, #8]	; (800b9c0 <puts+0xc>)
 800b9b6:	4601      	mov	r1, r0
 800b9b8:	6818      	ldr	r0, [r3, #0]
 800b9ba:	f7ff bfa7 	b.w	800b90c <_puts_r>
 800b9be:	bf00      	nop
 800b9c0:	20002ff8 	.word	0x20002ff8

0800b9c4 <setvbuf>:
 800b9c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b9c8:	461d      	mov	r5, r3
 800b9ca:	4b54      	ldr	r3, [pc, #336]	; (800bb1c <setvbuf+0x158>)
 800b9cc:	681f      	ldr	r7, [r3, #0]
 800b9ce:	4604      	mov	r4, r0
 800b9d0:	460e      	mov	r6, r1
 800b9d2:	4690      	mov	r8, r2
 800b9d4:	b127      	cbz	r7, 800b9e0 <setvbuf+0x1c>
 800b9d6:	6a3b      	ldr	r3, [r7, #32]
 800b9d8:	b913      	cbnz	r3, 800b9e0 <setvbuf+0x1c>
 800b9da:	4638      	mov	r0, r7
 800b9dc:	f7ff ff4e 	bl	800b87c <__sinit>
 800b9e0:	f1b8 0f02 	cmp.w	r8, #2
 800b9e4:	d006      	beq.n	800b9f4 <setvbuf+0x30>
 800b9e6:	f1b8 0f01 	cmp.w	r8, #1
 800b9ea:	f200 8094 	bhi.w	800bb16 <setvbuf+0x152>
 800b9ee:	2d00      	cmp	r5, #0
 800b9f0:	f2c0 8091 	blt.w	800bb16 <setvbuf+0x152>
 800b9f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9f6:	07da      	lsls	r2, r3, #31
 800b9f8:	d405      	bmi.n	800ba06 <setvbuf+0x42>
 800b9fa:	89a3      	ldrh	r3, [r4, #12]
 800b9fc:	059b      	lsls	r3, r3, #22
 800b9fe:	d402      	bmi.n	800ba06 <setvbuf+0x42>
 800ba00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba02:	f000 f9e2 	bl	800bdca <__retarget_lock_acquire_recursive>
 800ba06:	4621      	mov	r1, r4
 800ba08:	4638      	mov	r0, r7
 800ba0a:	f001 feb1 	bl	800d770 <_fflush_r>
 800ba0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba10:	b141      	cbz	r1, 800ba24 <setvbuf+0x60>
 800ba12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba16:	4299      	cmp	r1, r3
 800ba18:	d002      	beq.n	800ba20 <setvbuf+0x5c>
 800ba1a:	4638      	mov	r0, r7
 800ba1c:	f001 f862 	bl	800cae4 <_free_r>
 800ba20:	2300      	movs	r3, #0
 800ba22:	6363      	str	r3, [r4, #52]	; 0x34
 800ba24:	2300      	movs	r3, #0
 800ba26:	61a3      	str	r3, [r4, #24]
 800ba28:	6063      	str	r3, [r4, #4]
 800ba2a:	89a3      	ldrh	r3, [r4, #12]
 800ba2c:	0618      	lsls	r0, r3, #24
 800ba2e:	d503      	bpl.n	800ba38 <setvbuf+0x74>
 800ba30:	6921      	ldr	r1, [r4, #16]
 800ba32:	4638      	mov	r0, r7
 800ba34:	f001 f856 	bl	800cae4 <_free_r>
 800ba38:	89a3      	ldrh	r3, [r4, #12]
 800ba3a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800ba3e:	f023 0303 	bic.w	r3, r3, #3
 800ba42:	f1b8 0f02 	cmp.w	r8, #2
 800ba46:	81a3      	strh	r3, [r4, #12]
 800ba48:	d05f      	beq.n	800bb0a <setvbuf+0x146>
 800ba4a:	ab01      	add	r3, sp, #4
 800ba4c:	466a      	mov	r2, sp
 800ba4e:	4621      	mov	r1, r4
 800ba50:	4638      	mov	r0, r7
 800ba52:	f001 feb5 	bl	800d7c0 <__swhatbuf_r>
 800ba56:	89a3      	ldrh	r3, [r4, #12]
 800ba58:	4318      	orrs	r0, r3
 800ba5a:	81a0      	strh	r0, [r4, #12]
 800ba5c:	bb2d      	cbnz	r5, 800baaa <setvbuf+0xe6>
 800ba5e:	9d00      	ldr	r5, [sp, #0]
 800ba60:	4628      	mov	r0, r5
 800ba62:	f001 f88b 	bl	800cb7c <malloc>
 800ba66:	4606      	mov	r6, r0
 800ba68:	2800      	cmp	r0, #0
 800ba6a:	d150      	bne.n	800bb0e <setvbuf+0x14a>
 800ba6c:	f8dd 9000 	ldr.w	r9, [sp]
 800ba70:	45a9      	cmp	r9, r5
 800ba72:	d13e      	bne.n	800baf2 <setvbuf+0x12e>
 800ba74:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ba78:	2200      	movs	r2, #0
 800ba7a:	60a2      	str	r2, [r4, #8]
 800ba7c:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800ba80:	6022      	str	r2, [r4, #0]
 800ba82:	6122      	str	r2, [r4, #16]
 800ba84:	2201      	movs	r2, #1
 800ba86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba8a:	6162      	str	r2, [r4, #20]
 800ba8c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba8e:	f043 0302 	orr.w	r3, r3, #2
 800ba92:	07d1      	lsls	r1, r2, #31
 800ba94:	81a3      	strh	r3, [r4, #12]
 800ba96:	d404      	bmi.n	800baa2 <setvbuf+0xde>
 800ba98:	059b      	lsls	r3, r3, #22
 800ba9a:	d402      	bmi.n	800baa2 <setvbuf+0xde>
 800ba9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba9e:	f000 f995 	bl	800bdcc <__retarget_lock_release_recursive>
 800baa2:	4628      	mov	r0, r5
 800baa4:	b003      	add	sp, #12
 800baa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800baaa:	2e00      	cmp	r6, #0
 800baac:	d0d8      	beq.n	800ba60 <setvbuf+0x9c>
 800baae:	6a3b      	ldr	r3, [r7, #32]
 800bab0:	b913      	cbnz	r3, 800bab8 <setvbuf+0xf4>
 800bab2:	4638      	mov	r0, r7
 800bab4:	f7ff fee2 	bl	800b87c <__sinit>
 800bab8:	f1b8 0f01 	cmp.w	r8, #1
 800babc:	bf08      	it	eq
 800babe:	89a3      	ldrheq	r3, [r4, #12]
 800bac0:	6026      	str	r6, [r4, #0]
 800bac2:	bf04      	itt	eq
 800bac4:	f043 0301 	orreq.w	r3, r3, #1
 800bac8:	81a3      	strheq	r3, [r4, #12]
 800baca:	89a3      	ldrh	r3, [r4, #12]
 800bacc:	f013 0208 	ands.w	r2, r3, #8
 800bad0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800bad4:	d01d      	beq.n	800bb12 <setvbuf+0x14e>
 800bad6:	07da      	lsls	r2, r3, #31
 800bad8:	bf41      	itttt	mi
 800bada:	2200      	movmi	r2, #0
 800badc:	426d      	negmi	r5, r5
 800bade:	60a2      	strmi	r2, [r4, #8]
 800bae0:	61a5      	strmi	r5, [r4, #24]
 800bae2:	bf58      	it	pl
 800bae4:	60a5      	strpl	r5, [r4, #8]
 800bae6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800bae8:	f015 0501 	ands.w	r5, r5, #1
 800baec:	d0d4      	beq.n	800ba98 <setvbuf+0xd4>
 800baee:	2500      	movs	r5, #0
 800baf0:	e7d7      	b.n	800baa2 <setvbuf+0xde>
 800baf2:	4648      	mov	r0, r9
 800baf4:	f001 f842 	bl	800cb7c <malloc>
 800baf8:	4606      	mov	r6, r0
 800bafa:	2800      	cmp	r0, #0
 800bafc:	d0ba      	beq.n	800ba74 <setvbuf+0xb0>
 800bafe:	89a3      	ldrh	r3, [r4, #12]
 800bb00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb04:	81a3      	strh	r3, [r4, #12]
 800bb06:	464d      	mov	r5, r9
 800bb08:	e7d1      	b.n	800baae <setvbuf+0xea>
 800bb0a:	2500      	movs	r5, #0
 800bb0c:	e7b4      	b.n	800ba78 <setvbuf+0xb4>
 800bb0e:	46a9      	mov	r9, r5
 800bb10:	e7f5      	b.n	800bafe <setvbuf+0x13a>
 800bb12:	60a2      	str	r2, [r4, #8]
 800bb14:	e7e7      	b.n	800bae6 <setvbuf+0x122>
 800bb16:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800bb1a:	e7c2      	b.n	800baa2 <setvbuf+0xde>
 800bb1c:	20002ff8 	.word	0x20002ff8

0800bb20 <__sread>:
 800bb20:	b510      	push	{r4, lr}
 800bb22:	460c      	mov	r4, r1
 800bb24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb28:	f000 f900 	bl	800bd2c <_read_r>
 800bb2c:	2800      	cmp	r0, #0
 800bb2e:	bfab      	itete	ge
 800bb30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb32:	89a3      	ldrhlt	r3, [r4, #12]
 800bb34:	181b      	addge	r3, r3, r0
 800bb36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb3a:	bfac      	ite	ge
 800bb3c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb3e:	81a3      	strhlt	r3, [r4, #12]
 800bb40:	bd10      	pop	{r4, pc}

0800bb42 <__swrite>:
 800bb42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb46:	461f      	mov	r7, r3
 800bb48:	898b      	ldrh	r3, [r1, #12]
 800bb4a:	05db      	lsls	r3, r3, #23
 800bb4c:	4605      	mov	r5, r0
 800bb4e:	460c      	mov	r4, r1
 800bb50:	4616      	mov	r6, r2
 800bb52:	d505      	bpl.n	800bb60 <__swrite+0x1e>
 800bb54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb58:	2302      	movs	r3, #2
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	f000 f8d4 	bl	800bd08 <_lseek_r>
 800bb60:	89a3      	ldrh	r3, [r4, #12]
 800bb62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb6a:	81a3      	strh	r3, [r4, #12]
 800bb6c:	4632      	mov	r2, r6
 800bb6e:	463b      	mov	r3, r7
 800bb70:	4628      	mov	r0, r5
 800bb72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb76:	f000 b8eb 	b.w	800bd50 <_write_r>

0800bb7a <__sseek>:
 800bb7a:	b510      	push	{r4, lr}
 800bb7c:	460c      	mov	r4, r1
 800bb7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb82:	f000 f8c1 	bl	800bd08 <_lseek_r>
 800bb86:	1c43      	adds	r3, r0, #1
 800bb88:	89a3      	ldrh	r3, [r4, #12]
 800bb8a:	bf15      	itete	ne
 800bb8c:	6560      	strne	r0, [r4, #84]	; 0x54
 800bb8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bb92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bb96:	81a3      	strheq	r3, [r4, #12]
 800bb98:	bf18      	it	ne
 800bb9a:	81a3      	strhne	r3, [r4, #12]
 800bb9c:	bd10      	pop	{r4, pc}

0800bb9e <__sclose>:
 800bb9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bba2:	f000 b8a1 	b.w	800bce8 <_close_r>

0800bba6 <__swbuf_r>:
 800bba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bba8:	460e      	mov	r6, r1
 800bbaa:	4614      	mov	r4, r2
 800bbac:	4605      	mov	r5, r0
 800bbae:	b118      	cbz	r0, 800bbb8 <__swbuf_r+0x12>
 800bbb0:	6a03      	ldr	r3, [r0, #32]
 800bbb2:	b90b      	cbnz	r3, 800bbb8 <__swbuf_r+0x12>
 800bbb4:	f7ff fe62 	bl	800b87c <__sinit>
 800bbb8:	69a3      	ldr	r3, [r4, #24]
 800bbba:	60a3      	str	r3, [r4, #8]
 800bbbc:	89a3      	ldrh	r3, [r4, #12]
 800bbbe:	071a      	lsls	r2, r3, #28
 800bbc0:	d525      	bpl.n	800bc0e <__swbuf_r+0x68>
 800bbc2:	6923      	ldr	r3, [r4, #16]
 800bbc4:	b31b      	cbz	r3, 800bc0e <__swbuf_r+0x68>
 800bbc6:	6823      	ldr	r3, [r4, #0]
 800bbc8:	6922      	ldr	r2, [r4, #16]
 800bbca:	1a98      	subs	r0, r3, r2
 800bbcc:	6963      	ldr	r3, [r4, #20]
 800bbce:	b2f6      	uxtb	r6, r6
 800bbd0:	4283      	cmp	r3, r0
 800bbd2:	4637      	mov	r7, r6
 800bbd4:	dc04      	bgt.n	800bbe0 <__swbuf_r+0x3a>
 800bbd6:	4621      	mov	r1, r4
 800bbd8:	4628      	mov	r0, r5
 800bbda:	f001 fdc9 	bl	800d770 <_fflush_r>
 800bbde:	b9e0      	cbnz	r0, 800bc1a <__swbuf_r+0x74>
 800bbe0:	68a3      	ldr	r3, [r4, #8]
 800bbe2:	3b01      	subs	r3, #1
 800bbe4:	60a3      	str	r3, [r4, #8]
 800bbe6:	6823      	ldr	r3, [r4, #0]
 800bbe8:	1c5a      	adds	r2, r3, #1
 800bbea:	6022      	str	r2, [r4, #0]
 800bbec:	701e      	strb	r6, [r3, #0]
 800bbee:	6962      	ldr	r2, [r4, #20]
 800bbf0:	1c43      	adds	r3, r0, #1
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d004      	beq.n	800bc00 <__swbuf_r+0x5a>
 800bbf6:	89a3      	ldrh	r3, [r4, #12]
 800bbf8:	07db      	lsls	r3, r3, #31
 800bbfa:	d506      	bpl.n	800bc0a <__swbuf_r+0x64>
 800bbfc:	2e0a      	cmp	r6, #10
 800bbfe:	d104      	bne.n	800bc0a <__swbuf_r+0x64>
 800bc00:	4621      	mov	r1, r4
 800bc02:	4628      	mov	r0, r5
 800bc04:	f001 fdb4 	bl	800d770 <_fflush_r>
 800bc08:	b938      	cbnz	r0, 800bc1a <__swbuf_r+0x74>
 800bc0a:	4638      	mov	r0, r7
 800bc0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc0e:	4621      	mov	r1, r4
 800bc10:	4628      	mov	r0, r5
 800bc12:	f000 f805 	bl	800bc20 <__swsetup_r>
 800bc16:	2800      	cmp	r0, #0
 800bc18:	d0d5      	beq.n	800bbc6 <__swbuf_r+0x20>
 800bc1a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bc1e:	e7f4      	b.n	800bc0a <__swbuf_r+0x64>

0800bc20 <__swsetup_r>:
 800bc20:	b538      	push	{r3, r4, r5, lr}
 800bc22:	4b2a      	ldr	r3, [pc, #168]	; (800bccc <__swsetup_r+0xac>)
 800bc24:	4605      	mov	r5, r0
 800bc26:	6818      	ldr	r0, [r3, #0]
 800bc28:	460c      	mov	r4, r1
 800bc2a:	b118      	cbz	r0, 800bc34 <__swsetup_r+0x14>
 800bc2c:	6a03      	ldr	r3, [r0, #32]
 800bc2e:	b90b      	cbnz	r3, 800bc34 <__swsetup_r+0x14>
 800bc30:	f7ff fe24 	bl	800b87c <__sinit>
 800bc34:	89a3      	ldrh	r3, [r4, #12]
 800bc36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc3a:	0718      	lsls	r0, r3, #28
 800bc3c:	d422      	bmi.n	800bc84 <__swsetup_r+0x64>
 800bc3e:	06d9      	lsls	r1, r3, #27
 800bc40:	d407      	bmi.n	800bc52 <__swsetup_r+0x32>
 800bc42:	2309      	movs	r3, #9
 800bc44:	602b      	str	r3, [r5, #0]
 800bc46:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc4a:	81a3      	strh	r3, [r4, #12]
 800bc4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc50:	e034      	b.n	800bcbc <__swsetup_r+0x9c>
 800bc52:	0758      	lsls	r0, r3, #29
 800bc54:	d512      	bpl.n	800bc7c <__swsetup_r+0x5c>
 800bc56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc58:	b141      	cbz	r1, 800bc6c <__swsetup_r+0x4c>
 800bc5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc5e:	4299      	cmp	r1, r3
 800bc60:	d002      	beq.n	800bc68 <__swsetup_r+0x48>
 800bc62:	4628      	mov	r0, r5
 800bc64:	f000 ff3e 	bl	800cae4 <_free_r>
 800bc68:	2300      	movs	r3, #0
 800bc6a:	6363      	str	r3, [r4, #52]	; 0x34
 800bc6c:	89a3      	ldrh	r3, [r4, #12]
 800bc6e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc72:	81a3      	strh	r3, [r4, #12]
 800bc74:	2300      	movs	r3, #0
 800bc76:	6063      	str	r3, [r4, #4]
 800bc78:	6923      	ldr	r3, [r4, #16]
 800bc7a:	6023      	str	r3, [r4, #0]
 800bc7c:	89a3      	ldrh	r3, [r4, #12]
 800bc7e:	f043 0308 	orr.w	r3, r3, #8
 800bc82:	81a3      	strh	r3, [r4, #12]
 800bc84:	6923      	ldr	r3, [r4, #16]
 800bc86:	b94b      	cbnz	r3, 800bc9c <__swsetup_r+0x7c>
 800bc88:	89a3      	ldrh	r3, [r4, #12]
 800bc8a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc92:	d003      	beq.n	800bc9c <__swsetup_r+0x7c>
 800bc94:	4621      	mov	r1, r4
 800bc96:	4628      	mov	r0, r5
 800bc98:	f001 fdb8 	bl	800d80c <__smakebuf_r>
 800bc9c:	89a0      	ldrh	r0, [r4, #12]
 800bc9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bca2:	f010 0301 	ands.w	r3, r0, #1
 800bca6:	d00a      	beq.n	800bcbe <__swsetup_r+0x9e>
 800bca8:	2300      	movs	r3, #0
 800bcaa:	60a3      	str	r3, [r4, #8]
 800bcac:	6963      	ldr	r3, [r4, #20]
 800bcae:	425b      	negs	r3, r3
 800bcb0:	61a3      	str	r3, [r4, #24]
 800bcb2:	6923      	ldr	r3, [r4, #16]
 800bcb4:	b943      	cbnz	r3, 800bcc8 <__swsetup_r+0xa8>
 800bcb6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bcba:	d1c4      	bne.n	800bc46 <__swsetup_r+0x26>
 800bcbc:	bd38      	pop	{r3, r4, r5, pc}
 800bcbe:	0781      	lsls	r1, r0, #30
 800bcc0:	bf58      	it	pl
 800bcc2:	6963      	ldrpl	r3, [r4, #20]
 800bcc4:	60a3      	str	r3, [r4, #8]
 800bcc6:	e7f4      	b.n	800bcb2 <__swsetup_r+0x92>
 800bcc8:	2000      	movs	r0, #0
 800bcca:	e7f7      	b.n	800bcbc <__swsetup_r+0x9c>
 800bccc:	20002ff8 	.word	0x20002ff8

0800bcd0 <memset>:
 800bcd0:	4402      	add	r2, r0
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d100      	bne.n	800bcda <memset+0xa>
 800bcd8:	4770      	bx	lr
 800bcda:	f803 1b01 	strb.w	r1, [r3], #1
 800bcde:	e7f9      	b.n	800bcd4 <memset+0x4>

0800bce0 <_localeconv_r>:
 800bce0:	4800      	ldr	r0, [pc, #0]	; (800bce4 <_localeconv_r+0x4>)
 800bce2:	4770      	bx	lr
 800bce4:	200030ec 	.word	0x200030ec

0800bce8 <_close_r>:
 800bce8:	b538      	push	{r3, r4, r5, lr}
 800bcea:	4d06      	ldr	r5, [pc, #24]	; (800bd04 <_close_r+0x1c>)
 800bcec:	2300      	movs	r3, #0
 800bcee:	4604      	mov	r4, r0
 800bcf0:	4608      	mov	r0, r1
 800bcf2:	602b      	str	r3, [r5, #0]
 800bcf4:	f7f6 fd5a 	bl	80027ac <_close>
 800bcf8:	1c43      	adds	r3, r0, #1
 800bcfa:	d102      	bne.n	800bd02 <_close_r+0x1a>
 800bcfc:	682b      	ldr	r3, [r5, #0]
 800bcfe:	b103      	cbz	r3, 800bd02 <_close_r+0x1a>
 800bd00:	6023      	str	r3, [r4, #0]
 800bd02:	bd38      	pop	{r3, r4, r5, pc}
 800bd04:	20004dec 	.word	0x20004dec

0800bd08 <_lseek_r>:
 800bd08:	b538      	push	{r3, r4, r5, lr}
 800bd0a:	4d07      	ldr	r5, [pc, #28]	; (800bd28 <_lseek_r+0x20>)
 800bd0c:	4604      	mov	r4, r0
 800bd0e:	4608      	mov	r0, r1
 800bd10:	4611      	mov	r1, r2
 800bd12:	2200      	movs	r2, #0
 800bd14:	602a      	str	r2, [r5, #0]
 800bd16:	461a      	mov	r2, r3
 800bd18:	f7f6 fd5f 	bl	80027da <_lseek>
 800bd1c:	1c43      	adds	r3, r0, #1
 800bd1e:	d102      	bne.n	800bd26 <_lseek_r+0x1e>
 800bd20:	682b      	ldr	r3, [r5, #0]
 800bd22:	b103      	cbz	r3, 800bd26 <_lseek_r+0x1e>
 800bd24:	6023      	str	r3, [r4, #0]
 800bd26:	bd38      	pop	{r3, r4, r5, pc}
 800bd28:	20004dec 	.word	0x20004dec

0800bd2c <_read_r>:
 800bd2c:	b538      	push	{r3, r4, r5, lr}
 800bd2e:	4d07      	ldr	r5, [pc, #28]	; (800bd4c <_read_r+0x20>)
 800bd30:	4604      	mov	r4, r0
 800bd32:	4608      	mov	r0, r1
 800bd34:	4611      	mov	r1, r2
 800bd36:	2200      	movs	r2, #0
 800bd38:	602a      	str	r2, [r5, #0]
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	f7f6 fd5e 	bl	80027fc <_read>
 800bd40:	1c43      	adds	r3, r0, #1
 800bd42:	d102      	bne.n	800bd4a <_read_r+0x1e>
 800bd44:	682b      	ldr	r3, [r5, #0]
 800bd46:	b103      	cbz	r3, 800bd4a <_read_r+0x1e>
 800bd48:	6023      	str	r3, [r4, #0]
 800bd4a:	bd38      	pop	{r3, r4, r5, pc}
 800bd4c:	20004dec 	.word	0x20004dec

0800bd50 <_write_r>:
 800bd50:	b538      	push	{r3, r4, r5, lr}
 800bd52:	4d07      	ldr	r5, [pc, #28]	; (800bd70 <_write_r+0x20>)
 800bd54:	4604      	mov	r4, r0
 800bd56:	4608      	mov	r0, r1
 800bd58:	4611      	mov	r1, r2
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	602a      	str	r2, [r5, #0]
 800bd5e:	461a      	mov	r2, r3
 800bd60:	f7f6 fcf8 	bl	8002754 <_write>
 800bd64:	1c43      	adds	r3, r0, #1
 800bd66:	d102      	bne.n	800bd6e <_write_r+0x1e>
 800bd68:	682b      	ldr	r3, [r5, #0]
 800bd6a:	b103      	cbz	r3, 800bd6e <_write_r+0x1e>
 800bd6c:	6023      	str	r3, [r4, #0]
 800bd6e:	bd38      	pop	{r3, r4, r5, pc}
 800bd70:	20004dec 	.word	0x20004dec

0800bd74 <__errno>:
 800bd74:	4b01      	ldr	r3, [pc, #4]	; (800bd7c <__errno+0x8>)
 800bd76:	6818      	ldr	r0, [r3, #0]
 800bd78:	4770      	bx	lr
 800bd7a:	bf00      	nop
 800bd7c:	20002ff8 	.word	0x20002ff8

0800bd80 <__libc_init_array>:
 800bd80:	b570      	push	{r4, r5, r6, lr}
 800bd82:	4d0d      	ldr	r5, [pc, #52]	; (800bdb8 <__libc_init_array+0x38>)
 800bd84:	4c0d      	ldr	r4, [pc, #52]	; (800bdbc <__libc_init_array+0x3c>)
 800bd86:	1b64      	subs	r4, r4, r5
 800bd88:	10a4      	asrs	r4, r4, #2
 800bd8a:	2600      	movs	r6, #0
 800bd8c:	42a6      	cmp	r6, r4
 800bd8e:	d109      	bne.n	800bda4 <__libc_init_array+0x24>
 800bd90:	4d0b      	ldr	r5, [pc, #44]	; (800bdc0 <__libc_init_array+0x40>)
 800bd92:	4c0c      	ldr	r4, [pc, #48]	; (800bdc4 <__libc_init_array+0x44>)
 800bd94:	f001 fe6c 	bl	800da70 <_init>
 800bd98:	1b64      	subs	r4, r4, r5
 800bd9a:	10a4      	asrs	r4, r4, #2
 800bd9c:	2600      	movs	r6, #0
 800bd9e:	42a6      	cmp	r6, r4
 800bda0:	d105      	bne.n	800bdae <__libc_init_array+0x2e>
 800bda2:	bd70      	pop	{r4, r5, r6, pc}
 800bda4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bda8:	4798      	blx	r3
 800bdaa:	3601      	adds	r6, #1
 800bdac:	e7ee      	b.n	800bd8c <__libc_init_array+0xc>
 800bdae:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdb2:	4798      	blx	r3
 800bdb4:	3601      	adds	r6, #1
 800bdb6:	e7f2      	b.n	800bd9e <__libc_init_array+0x1e>
 800bdb8:	080200fc 	.word	0x080200fc
 800bdbc:	080200fc 	.word	0x080200fc
 800bdc0:	080200fc 	.word	0x080200fc
 800bdc4:	08020100 	.word	0x08020100

0800bdc8 <__retarget_lock_init_recursive>:
 800bdc8:	4770      	bx	lr

0800bdca <__retarget_lock_acquire_recursive>:
 800bdca:	4770      	bx	lr

0800bdcc <__retarget_lock_release_recursive>:
 800bdcc:	4770      	bx	lr

0800bdce <memcpy>:
 800bdce:	440a      	add	r2, r1
 800bdd0:	4291      	cmp	r1, r2
 800bdd2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bdd6:	d100      	bne.n	800bdda <memcpy+0xc>
 800bdd8:	4770      	bx	lr
 800bdda:	b510      	push	{r4, lr}
 800bddc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bde0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bde4:	4291      	cmp	r1, r2
 800bde6:	d1f9      	bne.n	800bddc <memcpy+0xe>
 800bde8:	bd10      	pop	{r4, pc}

0800bdea <quorem>:
 800bdea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdee:	6903      	ldr	r3, [r0, #16]
 800bdf0:	690c      	ldr	r4, [r1, #16]
 800bdf2:	42a3      	cmp	r3, r4
 800bdf4:	4607      	mov	r7, r0
 800bdf6:	db7e      	blt.n	800bef6 <quorem+0x10c>
 800bdf8:	3c01      	subs	r4, #1
 800bdfa:	f101 0814 	add.w	r8, r1, #20
 800bdfe:	f100 0514 	add.w	r5, r0, #20
 800be02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be06:	9301      	str	r3, [sp, #4]
 800be08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800be0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be10:	3301      	adds	r3, #1
 800be12:	429a      	cmp	r2, r3
 800be14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800be18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800be1c:	fbb2 f6f3 	udiv	r6, r2, r3
 800be20:	d331      	bcc.n	800be86 <quorem+0x9c>
 800be22:	f04f 0e00 	mov.w	lr, #0
 800be26:	4640      	mov	r0, r8
 800be28:	46ac      	mov	ip, r5
 800be2a:	46f2      	mov	sl, lr
 800be2c:	f850 2b04 	ldr.w	r2, [r0], #4
 800be30:	b293      	uxth	r3, r2
 800be32:	fb06 e303 	mla	r3, r6, r3, lr
 800be36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800be3a:	0c1a      	lsrs	r2, r3, #16
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	ebaa 0303 	sub.w	r3, sl, r3
 800be42:	f8dc a000 	ldr.w	sl, [ip]
 800be46:	fa13 f38a 	uxtah	r3, r3, sl
 800be4a:	fb06 220e 	mla	r2, r6, lr, r2
 800be4e:	9300      	str	r3, [sp, #0]
 800be50:	9b00      	ldr	r3, [sp, #0]
 800be52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800be56:	b292      	uxth	r2, r2
 800be58:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800be5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800be60:	f8bd 3000 	ldrh.w	r3, [sp]
 800be64:	4581      	cmp	r9, r0
 800be66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be6a:	f84c 3b04 	str.w	r3, [ip], #4
 800be6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800be72:	d2db      	bcs.n	800be2c <quorem+0x42>
 800be74:	f855 300b 	ldr.w	r3, [r5, fp]
 800be78:	b92b      	cbnz	r3, 800be86 <quorem+0x9c>
 800be7a:	9b01      	ldr	r3, [sp, #4]
 800be7c:	3b04      	subs	r3, #4
 800be7e:	429d      	cmp	r5, r3
 800be80:	461a      	mov	r2, r3
 800be82:	d32c      	bcc.n	800bede <quorem+0xf4>
 800be84:	613c      	str	r4, [r7, #16]
 800be86:	4638      	mov	r0, r7
 800be88:	f001 f9a8 	bl	800d1dc <__mcmp>
 800be8c:	2800      	cmp	r0, #0
 800be8e:	db22      	blt.n	800bed6 <quorem+0xec>
 800be90:	3601      	adds	r6, #1
 800be92:	4629      	mov	r1, r5
 800be94:	2000      	movs	r0, #0
 800be96:	f858 2b04 	ldr.w	r2, [r8], #4
 800be9a:	f8d1 c000 	ldr.w	ip, [r1]
 800be9e:	b293      	uxth	r3, r2
 800bea0:	1ac3      	subs	r3, r0, r3
 800bea2:	0c12      	lsrs	r2, r2, #16
 800bea4:	fa13 f38c 	uxtah	r3, r3, ip
 800bea8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800beac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800beb0:	b29b      	uxth	r3, r3
 800beb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800beb6:	45c1      	cmp	r9, r8
 800beb8:	f841 3b04 	str.w	r3, [r1], #4
 800bebc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bec0:	d2e9      	bcs.n	800be96 <quorem+0xac>
 800bec2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bec6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800beca:	b922      	cbnz	r2, 800bed6 <quorem+0xec>
 800becc:	3b04      	subs	r3, #4
 800bece:	429d      	cmp	r5, r3
 800bed0:	461a      	mov	r2, r3
 800bed2:	d30a      	bcc.n	800beea <quorem+0x100>
 800bed4:	613c      	str	r4, [r7, #16]
 800bed6:	4630      	mov	r0, r6
 800bed8:	b003      	add	sp, #12
 800beda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bede:	6812      	ldr	r2, [r2, #0]
 800bee0:	3b04      	subs	r3, #4
 800bee2:	2a00      	cmp	r2, #0
 800bee4:	d1ce      	bne.n	800be84 <quorem+0x9a>
 800bee6:	3c01      	subs	r4, #1
 800bee8:	e7c9      	b.n	800be7e <quorem+0x94>
 800beea:	6812      	ldr	r2, [r2, #0]
 800beec:	3b04      	subs	r3, #4
 800beee:	2a00      	cmp	r2, #0
 800bef0:	d1f0      	bne.n	800bed4 <quorem+0xea>
 800bef2:	3c01      	subs	r4, #1
 800bef4:	e7eb      	b.n	800bece <quorem+0xe4>
 800bef6:	2000      	movs	r0, #0
 800bef8:	e7ee      	b.n	800bed8 <quorem+0xee>
 800befa:	0000      	movs	r0, r0
 800befc:	0000      	movs	r0, r0
	...

0800bf00 <_dtoa_r>:
 800bf00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf04:	ed2d 8b04 	vpush	{d8-d9}
 800bf08:	69c5      	ldr	r5, [r0, #28]
 800bf0a:	b093      	sub	sp, #76	; 0x4c
 800bf0c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bf10:	ec57 6b10 	vmov	r6, r7, d0
 800bf14:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bf18:	9107      	str	r1, [sp, #28]
 800bf1a:	4604      	mov	r4, r0
 800bf1c:	920a      	str	r2, [sp, #40]	; 0x28
 800bf1e:	930d      	str	r3, [sp, #52]	; 0x34
 800bf20:	b975      	cbnz	r5, 800bf40 <_dtoa_r+0x40>
 800bf22:	2010      	movs	r0, #16
 800bf24:	f000 fe2a 	bl	800cb7c <malloc>
 800bf28:	4602      	mov	r2, r0
 800bf2a:	61e0      	str	r0, [r4, #28]
 800bf2c:	b920      	cbnz	r0, 800bf38 <_dtoa_r+0x38>
 800bf2e:	4bae      	ldr	r3, [pc, #696]	; (800c1e8 <_dtoa_r+0x2e8>)
 800bf30:	21ef      	movs	r1, #239	; 0xef
 800bf32:	48ae      	ldr	r0, [pc, #696]	; (800c1ec <_dtoa_r+0x2ec>)
 800bf34:	f001 fcd8 	bl	800d8e8 <__assert_func>
 800bf38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bf3c:	6005      	str	r5, [r0, #0]
 800bf3e:	60c5      	str	r5, [r0, #12]
 800bf40:	69e3      	ldr	r3, [r4, #28]
 800bf42:	6819      	ldr	r1, [r3, #0]
 800bf44:	b151      	cbz	r1, 800bf5c <_dtoa_r+0x5c>
 800bf46:	685a      	ldr	r2, [r3, #4]
 800bf48:	604a      	str	r2, [r1, #4]
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	4093      	lsls	r3, r2
 800bf4e:	608b      	str	r3, [r1, #8]
 800bf50:	4620      	mov	r0, r4
 800bf52:	f000 ff07 	bl	800cd64 <_Bfree>
 800bf56:	69e3      	ldr	r3, [r4, #28]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	601a      	str	r2, [r3, #0]
 800bf5c:	1e3b      	subs	r3, r7, #0
 800bf5e:	bfbb      	ittet	lt
 800bf60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bf64:	9303      	strlt	r3, [sp, #12]
 800bf66:	2300      	movge	r3, #0
 800bf68:	2201      	movlt	r2, #1
 800bf6a:	bfac      	ite	ge
 800bf6c:	f8c8 3000 	strge.w	r3, [r8]
 800bf70:	f8c8 2000 	strlt.w	r2, [r8]
 800bf74:	4b9e      	ldr	r3, [pc, #632]	; (800c1f0 <_dtoa_r+0x2f0>)
 800bf76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bf7a:	ea33 0308 	bics.w	r3, r3, r8
 800bf7e:	d11b      	bne.n	800bfb8 <_dtoa_r+0xb8>
 800bf80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf82:	f242 730f 	movw	r3, #9999	; 0x270f
 800bf86:	6013      	str	r3, [r2, #0]
 800bf88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bf8c:	4333      	orrs	r3, r6
 800bf8e:	f000 8593 	beq.w	800cab8 <_dtoa_r+0xbb8>
 800bf92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf94:	b963      	cbnz	r3, 800bfb0 <_dtoa_r+0xb0>
 800bf96:	4b97      	ldr	r3, [pc, #604]	; (800c1f4 <_dtoa_r+0x2f4>)
 800bf98:	e027      	b.n	800bfea <_dtoa_r+0xea>
 800bf9a:	4b97      	ldr	r3, [pc, #604]	; (800c1f8 <_dtoa_r+0x2f8>)
 800bf9c:	9300      	str	r3, [sp, #0]
 800bf9e:	3308      	adds	r3, #8
 800bfa0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bfa2:	6013      	str	r3, [r2, #0]
 800bfa4:	9800      	ldr	r0, [sp, #0]
 800bfa6:	b013      	add	sp, #76	; 0x4c
 800bfa8:	ecbd 8b04 	vpop	{d8-d9}
 800bfac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb0:	4b90      	ldr	r3, [pc, #576]	; (800c1f4 <_dtoa_r+0x2f4>)
 800bfb2:	9300      	str	r3, [sp, #0]
 800bfb4:	3303      	adds	r3, #3
 800bfb6:	e7f3      	b.n	800bfa0 <_dtoa_r+0xa0>
 800bfb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	ec51 0b17 	vmov	r0, r1, d7
 800bfc2:	eeb0 8a47 	vmov.f32	s16, s14
 800bfc6:	eef0 8a67 	vmov.f32	s17, s15
 800bfca:	2300      	movs	r3, #0
 800bfcc:	f7f4 fd8c 	bl	8000ae8 <__aeabi_dcmpeq>
 800bfd0:	4681      	mov	r9, r0
 800bfd2:	b160      	cbz	r0, 800bfee <_dtoa_r+0xee>
 800bfd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	6013      	str	r3, [r2, #0]
 800bfda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	f000 8568 	beq.w	800cab2 <_dtoa_r+0xbb2>
 800bfe2:	4b86      	ldr	r3, [pc, #536]	; (800c1fc <_dtoa_r+0x2fc>)
 800bfe4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bfe6:	6013      	str	r3, [r2, #0]
 800bfe8:	3b01      	subs	r3, #1
 800bfea:	9300      	str	r3, [sp, #0]
 800bfec:	e7da      	b.n	800bfa4 <_dtoa_r+0xa4>
 800bfee:	aa10      	add	r2, sp, #64	; 0x40
 800bff0:	a911      	add	r1, sp, #68	; 0x44
 800bff2:	4620      	mov	r0, r4
 800bff4:	eeb0 0a48 	vmov.f32	s0, s16
 800bff8:	eef0 0a68 	vmov.f32	s1, s17
 800bffc:	f001 f994 	bl	800d328 <__d2b>
 800c000:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c004:	4682      	mov	sl, r0
 800c006:	2d00      	cmp	r5, #0
 800c008:	d07f      	beq.n	800c10a <_dtoa_r+0x20a>
 800c00a:	ee18 3a90 	vmov	r3, s17
 800c00e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c012:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c016:	ec51 0b18 	vmov	r0, r1, d8
 800c01a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c01e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c022:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c026:	4619      	mov	r1, r3
 800c028:	2200      	movs	r2, #0
 800c02a:	4b75      	ldr	r3, [pc, #468]	; (800c200 <_dtoa_r+0x300>)
 800c02c:	f7f4 f93c 	bl	80002a8 <__aeabi_dsub>
 800c030:	a367      	add	r3, pc, #412	; (adr r3, 800c1d0 <_dtoa_r+0x2d0>)
 800c032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c036:	f7f4 faef 	bl	8000618 <__aeabi_dmul>
 800c03a:	a367      	add	r3, pc, #412	; (adr r3, 800c1d8 <_dtoa_r+0x2d8>)
 800c03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c040:	f7f4 f934 	bl	80002ac <__adddf3>
 800c044:	4606      	mov	r6, r0
 800c046:	4628      	mov	r0, r5
 800c048:	460f      	mov	r7, r1
 800c04a:	f7f4 fa7b 	bl	8000544 <__aeabi_i2d>
 800c04e:	a364      	add	r3, pc, #400	; (adr r3, 800c1e0 <_dtoa_r+0x2e0>)
 800c050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c054:	f7f4 fae0 	bl	8000618 <__aeabi_dmul>
 800c058:	4602      	mov	r2, r0
 800c05a:	460b      	mov	r3, r1
 800c05c:	4630      	mov	r0, r6
 800c05e:	4639      	mov	r1, r7
 800c060:	f7f4 f924 	bl	80002ac <__adddf3>
 800c064:	4606      	mov	r6, r0
 800c066:	460f      	mov	r7, r1
 800c068:	f7f4 fd86 	bl	8000b78 <__aeabi_d2iz>
 800c06c:	2200      	movs	r2, #0
 800c06e:	4683      	mov	fp, r0
 800c070:	2300      	movs	r3, #0
 800c072:	4630      	mov	r0, r6
 800c074:	4639      	mov	r1, r7
 800c076:	f7f4 fd41 	bl	8000afc <__aeabi_dcmplt>
 800c07a:	b148      	cbz	r0, 800c090 <_dtoa_r+0x190>
 800c07c:	4658      	mov	r0, fp
 800c07e:	f7f4 fa61 	bl	8000544 <__aeabi_i2d>
 800c082:	4632      	mov	r2, r6
 800c084:	463b      	mov	r3, r7
 800c086:	f7f4 fd2f 	bl	8000ae8 <__aeabi_dcmpeq>
 800c08a:	b908      	cbnz	r0, 800c090 <_dtoa_r+0x190>
 800c08c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c090:	f1bb 0f16 	cmp.w	fp, #22
 800c094:	d857      	bhi.n	800c146 <_dtoa_r+0x246>
 800c096:	4b5b      	ldr	r3, [pc, #364]	; (800c204 <_dtoa_r+0x304>)
 800c098:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a0:	ec51 0b18 	vmov	r0, r1, d8
 800c0a4:	f7f4 fd2a 	bl	8000afc <__aeabi_dcmplt>
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	d04e      	beq.n	800c14a <_dtoa_r+0x24a>
 800c0ac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	930c      	str	r3, [sp, #48]	; 0x30
 800c0b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c0b6:	1b5b      	subs	r3, r3, r5
 800c0b8:	1e5a      	subs	r2, r3, #1
 800c0ba:	bf45      	ittet	mi
 800c0bc:	f1c3 0301 	rsbmi	r3, r3, #1
 800c0c0:	9305      	strmi	r3, [sp, #20]
 800c0c2:	2300      	movpl	r3, #0
 800c0c4:	2300      	movmi	r3, #0
 800c0c6:	9206      	str	r2, [sp, #24]
 800c0c8:	bf54      	ite	pl
 800c0ca:	9305      	strpl	r3, [sp, #20]
 800c0cc:	9306      	strmi	r3, [sp, #24]
 800c0ce:	f1bb 0f00 	cmp.w	fp, #0
 800c0d2:	db3c      	blt.n	800c14e <_dtoa_r+0x24e>
 800c0d4:	9b06      	ldr	r3, [sp, #24]
 800c0d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c0da:	445b      	add	r3, fp
 800c0dc:	9306      	str	r3, [sp, #24]
 800c0de:	2300      	movs	r3, #0
 800c0e0:	9308      	str	r3, [sp, #32]
 800c0e2:	9b07      	ldr	r3, [sp, #28]
 800c0e4:	2b09      	cmp	r3, #9
 800c0e6:	d868      	bhi.n	800c1ba <_dtoa_r+0x2ba>
 800c0e8:	2b05      	cmp	r3, #5
 800c0ea:	bfc4      	itt	gt
 800c0ec:	3b04      	subgt	r3, #4
 800c0ee:	9307      	strgt	r3, [sp, #28]
 800c0f0:	9b07      	ldr	r3, [sp, #28]
 800c0f2:	f1a3 0302 	sub.w	r3, r3, #2
 800c0f6:	bfcc      	ite	gt
 800c0f8:	2500      	movgt	r5, #0
 800c0fa:	2501      	movle	r5, #1
 800c0fc:	2b03      	cmp	r3, #3
 800c0fe:	f200 8085 	bhi.w	800c20c <_dtoa_r+0x30c>
 800c102:	e8df f003 	tbb	[pc, r3]
 800c106:	3b2e      	.short	0x3b2e
 800c108:	5839      	.short	0x5839
 800c10a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c10e:	441d      	add	r5, r3
 800c110:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c114:	2b20      	cmp	r3, #32
 800c116:	bfc1      	itttt	gt
 800c118:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c11c:	fa08 f803 	lslgt.w	r8, r8, r3
 800c120:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c124:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c128:	bfd6      	itet	le
 800c12a:	f1c3 0320 	rsble	r3, r3, #32
 800c12e:	ea48 0003 	orrgt.w	r0, r8, r3
 800c132:	fa06 f003 	lslle.w	r0, r6, r3
 800c136:	f7f4 f9f5 	bl	8000524 <__aeabi_ui2d>
 800c13a:	2201      	movs	r2, #1
 800c13c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c140:	3d01      	subs	r5, #1
 800c142:	920e      	str	r2, [sp, #56]	; 0x38
 800c144:	e76f      	b.n	800c026 <_dtoa_r+0x126>
 800c146:	2301      	movs	r3, #1
 800c148:	e7b3      	b.n	800c0b2 <_dtoa_r+0x1b2>
 800c14a:	900c      	str	r0, [sp, #48]	; 0x30
 800c14c:	e7b2      	b.n	800c0b4 <_dtoa_r+0x1b4>
 800c14e:	9b05      	ldr	r3, [sp, #20]
 800c150:	eba3 030b 	sub.w	r3, r3, fp
 800c154:	9305      	str	r3, [sp, #20]
 800c156:	f1cb 0300 	rsb	r3, fp, #0
 800c15a:	9308      	str	r3, [sp, #32]
 800c15c:	2300      	movs	r3, #0
 800c15e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c160:	e7bf      	b.n	800c0e2 <_dtoa_r+0x1e2>
 800c162:	2300      	movs	r3, #0
 800c164:	9309      	str	r3, [sp, #36]	; 0x24
 800c166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c168:	2b00      	cmp	r3, #0
 800c16a:	dc52      	bgt.n	800c212 <_dtoa_r+0x312>
 800c16c:	2301      	movs	r3, #1
 800c16e:	9301      	str	r3, [sp, #4]
 800c170:	9304      	str	r3, [sp, #16]
 800c172:	461a      	mov	r2, r3
 800c174:	920a      	str	r2, [sp, #40]	; 0x28
 800c176:	e00b      	b.n	800c190 <_dtoa_r+0x290>
 800c178:	2301      	movs	r3, #1
 800c17a:	e7f3      	b.n	800c164 <_dtoa_r+0x264>
 800c17c:	2300      	movs	r3, #0
 800c17e:	9309      	str	r3, [sp, #36]	; 0x24
 800c180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c182:	445b      	add	r3, fp
 800c184:	9301      	str	r3, [sp, #4]
 800c186:	3301      	adds	r3, #1
 800c188:	2b01      	cmp	r3, #1
 800c18a:	9304      	str	r3, [sp, #16]
 800c18c:	bfb8      	it	lt
 800c18e:	2301      	movlt	r3, #1
 800c190:	69e0      	ldr	r0, [r4, #28]
 800c192:	2100      	movs	r1, #0
 800c194:	2204      	movs	r2, #4
 800c196:	f102 0614 	add.w	r6, r2, #20
 800c19a:	429e      	cmp	r6, r3
 800c19c:	d93d      	bls.n	800c21a <_dtoa_r+0x31a>
 800c19e:	6041      	str	r1, [r0, #4]
 800c1a0:	4620      	mov	r0, r4
 800c1a2:	f000 fd9f 	bl	800cce4 <_Balloc>
 800c1a6:	9000      	str	r0, [sp, #0]
 800c1a8:	2800      	cmp	r0, #0
 800c1aa:	d139      	bne.n	800c220 <_dtoa_r+0x320>
 800c1ac:	4b16      	ldr	r3, [pc, #88]	; (800c208 <_dtoa_r+0x308>)
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	f240 11af 	movw	r1, #431	; 0x1af
 800c1b4:	e6bd      	b.n	800bf32 <_dtoa_r+0x32>
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	e7e1      	b.n	800c17e <_dtoa_r+0x27e>
 800c1ba:	2501      	movs	r5, #1
 800c1bc:	2300      	movs	r3, #0
 800c1be:	9307      	str	r3, [sp, #28]
 800c1c0:	9509      	str	r5, [sp, #36]	; 0x24
 800c1c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c1c6:	9301      	str	r3, [sp, #4]
 800c1c8:	9304      	str	r3, [sp, #16]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	2312      	movs	r3, #18
 800c1ce:	e7d1      	b.n	800c174 <_dtoa_r+0x274>
 800c1d0:	636f4361 	.word	0x636f4361
 800c1d4:	3fd287a7 	.word	0x3fd287a7
 800c1d8:	8b60c8b3 	.word	0x8b60c8b3
 800c1dc:	3fc68a28 	.word	0x3fc68a28
 800c1e0:	509f79fb 	.word	0x509f79fb
 800c1e4:	3fd34413 	.word	0x3fd34413
 800c1e8:	0801fdc5 	.word	0x0801fdc5
 800c1ec:	0801fddc 	.word	0x0801fddc
 800c1f0:	7ff00000 	.word	0x7ff00000
 800c1f4:	0801fdc1 	.word	0x0801fdc1
 800c1f8:	0801fdb8 	.word	0x0801fdb8
 800c1fc:	0801fd95 	.word	0x0801fd95
 800c200:	3ff80000 	.word	0x3ff80000
 800c204:	0801fec8 	.word	0x0801fec8
 800c208:	0801fe34 	.word	0x0801fe34
 800c20c:	2301      	movs	r3, #1
 800c20e:	9309      	str	r3, [sp, #36]	; 0x24
 800c210:	e7d7      	b.n	800c1c2 <_dtoa_r+0x2c2>
 800c212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c214:	9301      	str	r3, [sp, #4]
 800c216:	9304      	str	r3, [sp, #16]
 800c218:	e7ba      	b.n	800c190 <_dtoa_r+0x290>
 800c21a:	3101      	adds	r1, #1
 800c21c:	0052      	lsls	r2, r2, #1
 800c21e:	e7ba      	b.n	800c196 <_dtoa_r+0x296>
 800c220:	69e3      	ldr	r3, [r4, #28]
 800c222:	9a00      	ldr	r2, [sp, #0]
 800c224:	601a      	str	r2, [r3, #0]
 800c226:	9b04      	ldr	r3, [sp, #16]
 800c228:	2b0e      	cmp	r3, #14
 800c22a:	f200 80a8 	bhi.w	800c37e <_dtoa_r+0x47e>
 800c22e:	2d00      	cmp	r5, #0
 800c230:	f000 80a5 	beq.w	800c37e <_dtoa_r+0x47e>
 800c234:	f1bb 0f00 	cmp.w	fp, #0
 800c238:	dd38      	ble.n	800c2ac <_dtoa_r+0x3ac>
 800c23a:	4bc0      	ldr	r3, [pc, #768]	; (800c53c <_dtoa_r+0x63c>)
 800c23c:	f00b 020f 	and.w	r2, fp, #15
 800c240:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c244:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c248:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c24c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c250:	d019      	beq.n	800c286 <_dtoa_r+0x386>
 800c252:	4bbb      	ldr	r3, [pc, #748]	; (800c540 <_dtoa_r+0x640>)
 800c254:	ec51 0b18 	vmov	r0, r1, d8
 800c258:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c25c:	f7f4 fb06 	bl	800086c <__aeabi_ddiv>
 800c260:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c264:	f008 080f 	and.w	r8, r8, #15
 800c268:	2503      	movs	r5, #3
 800c26a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c540 <_dtoa_r+0x640>
 800c26e:	f1b8 0f00 	cmp.w	r8, #0
 800c272:	d10a      	bne.n	800c28a <_dtoa_r+0x38a>
 800c274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c278:	4632      	mov	r2, r6
 800c27a:	463b      	mov	r3, r7
 800c27c:	f7f4 faf6 	bl	800086c <__aeabi_ddiv>
 800c280:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c284:	e02b      	b.n	800c2de <_dtoa_r+0x3de>
 800c286:	2502      	movs	r5, #2
 800c288:	e7ef      	b.n	800c26a <_dtoa_r+0x36a>
 800c28a:	f018 0f01 	tst.w	r8, #1
 800c28e:	d008      	beq.n	800c2a2 <_dtoa_r+0x3a2>
 800c290:	4630      	mov	r0, r6
 800c292:	4639      	mov	r1, r7
 800c294:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c298:	f7f4 f9be 	bl	8000618 <__aeabi_dmul>
 800c29c:	3501      	adds	r5, #1
 800c29e:	4606      	mov	r6, r0
 800c2a0:	460f      	mov	r7, r1
 800c2a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c2a6:	f109 0908 	add.w	r9, r9, #8
 800c2aa:	e7e0      	b.n	800c26e <_dtoa_r+0x36e>
 800c2ac:	f000 809f 	beq.w	800c3ee <_dtoa_r+0x4ee>
 800c2b0:	f1cb 0600 	rsb	r6, fp, #0
 800c2b4:	4ba1      	ldr	r3, [pc, #644]	; (800c53c <_dtoa_r+0x63c>)
 800c2b6:	4fa2      	ldr	r7, [pc, #648]	; (800c540 <_dtoa_r+0x640>)
 800c2b8:	f006 020f 	and.w	r2, r6, #15
 800c2bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c4:	ec51 0b18 	vmov	r0, r1, d8
 800c2c8:	f7f4 f9a6 	bl	8000618 <__aeabi_dmul>
 800c2cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2d0:	1136      	asrs	r6, r6, #4
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	2502      	movs	r5, #2
 800c2d6:	2e00      	cmp	r6, #0
 800c2d8:	d17e      	bne.n	800c3d8 <_dtoa_r+0x4d8>
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d1d0      	bne.n	800c280 <_dtoa_r+0x380>
 800c2de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	f000 8084 	beq.w	800c3f2 <_dtoa_r+0x4f2>
 800c2ea:	4b96      	ldr	r3, [pc, #600]	; (800c544 <_dtoa_r+0x644>)
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	4640      	mov	r0, r8
 800c2f0:	4649      	mov	r1, r9
 800c2f2:	f7f4 fc03 	bl	8000afc <__aeabi_dcmplt>
 800c2f6:	2800      	cmp	r0, #0
 800c2f8:	d07b      	beq.n	800c3f2 <_dtoa_r+0x4f2>
 800c2fa:	9b04      	ldr	r3, [sp, #16]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d078      	beq.n	800c3f2 <_dtoa_r+0x4f2>
 800c300:	9b01      	ldr	r3, [sp, #4]
 800c302:	2b00      	cmp	r3, #0
 800c304:	dd39      	ble.n	800c37a <_dtoa_r+0x47a>
 800c306:	4b90      	ldr	r3, [pc, #576]	; (800c548 <_dtoa_r+0x648>)
 800c308:	2200      	movs	r2, #0
 800c30a:	4640      	mov	r0, r8
 800c30c:	4649      	mov	r1, r9
 800c30e:	f7f4 f983 	bl	8000618 <__aeabi_dmul>
 800c312:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c316:	9e01      	ldr	r6, [sp, #4]
 800c318:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800c31c:	3501      	adds	r5, #1
 800c31e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c322:	4628      	mov	r0, r5
 800c324:	f7f4 f90e 	bl	8000544 <__aeabi_i2d>
 800c328:	4642      	mov	r2, r8
 800c32a:	464b      	mov	r3, r9
 800c32c:	f7f4 f974 	bl	8000618 <__aeabi_dmul>
 800c330:	4b86      	ldr	r3, [pc, #536]	; (800c54c <_dtoa_r+0x64c>)
 800c332:	2200      	movs	r2, #0
 800c334:	f7f3 ffba 	bl	80002ac <__adddf3>
 800c338:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c33c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c340:	9303      	str	r3, [sp, #12]
 800c342:	2e00      	cmp	r6, #0
 800c344:	d158      	bne.n	800c3f8 <_dtoa_r+0x4f8>
 800c346:	4b82      	ldr	r3, [pc, #520]	; (800c550 <_dtoa_r+0x650>)
 800c348:	2200      	movs	r2, #0
 800c34a:	4640      	mov	r0, r8
 800c34c:	4649      	mov	r1, r9
 800c34e:	f7f3 ffab 	bl	80002a8 <__aeabi_dsub>
 800c352:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c356:	4680      	mov	r8, r0
 800c358:	4689      	mov	r9, r1
 800c35a:	f7f4 fbed 	bl	8000b38 <__aeabi_dcmpgt>
 800c35e:	2800      	cmp	r0, #0
 800c360:	f040 8296 	bne.w	800c890 <_dtoa_r+0x990>
 800c364:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c368:	4640      	mov	r0, r8
 800c36a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c36e:	4649      	mov	r1, r9
 800c370:	f7f4 fbc4 	bl	8000afc <__aeabi_dcmplt>
 800c374:	2800      	cmp	r0, #0
 800c376:	f040 8289 	bne.w	800c88c <_dtoa_r+0x98c>
 800c37a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c37e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c380:	2b00      	cmp	r3, #0
 800c382:	f2c0 814e 	blt.w	800c622 <_dtoa_r+0x722>
 800c386:	f1bb 0f0e 	cmp.w	fp, #14
 800c38a:	f300 814a 	bgt.w	800c622 <_dtoa_r+0x722>
 800c38e:	4b6b      	ldr	r3, [pc, #428]	; (800c53c <_dtoa_r+0x63c>)
 800c390:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c394:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	f280 80dc 	bge.w	800c558 <_dtoa_r+0x658>
 800c3a0:	9b04      	ldr	r3, [sp, #16]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	f300 80d8 	bgt.w	800c558 <_dtoa_r+0x658>
 800c3a8:	f040 826f 	bne.w	800c88a <_dtoa_r+0x98a>
 800c3ac:	4b68      	ldr	r3, [pc, #416]	; (800c550 <_dtoa_r+0x650>)
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	4640      	mov	r0, r8
 800c3b2:	4649      	mov	r1, r9
 800c3b4:	f7f4 f930 	bl	8000618 <__aeabi_dmul>
 800c3b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3bc:	f7f4 fbb2 	bl	8000b24 <__aeabi_dcmpge>
 800c3c0:	9e04      	ldr	r6, [sp, #16]
 800c3c2:	4637      	mov	r7, r6
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	f040 8245 	bne.w	800c854 <_dtoa_r+0x954>
 800c3ca:	9d00      	ldr	r5, [sp, #0]
 800c3cc:	2331      	movs	r3, #49	; 0x31
 800c3ce:	f805 3b01 	strb.w	r3, [r5], #1
 800c3d2:	f10b 0b01 	add.w	fp, fp, #1
 800c3d6:	e241      	b.n	800c85c <_dtoa_r+0x95c>
 800c3d8:	07f2      	lsls	r2, r6, #31
 800c3da:	d505      	bpl.n	800c3e8 <_dtoa_r+0x4e8>
 800c3dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3e0:	f7f4 f91a 	bl	8000618 <__aeabi_dmul>
 800c3e4:	3501      	adds	r5, #1
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	1076      	asrs	r6, r6, #1
 800c3ea:	3708      	adds	r7, #8
 800c3ec:	e773      	b.n	800c2d6 <_dtoa_r+0x3d6>
 800c3ee:	2502      	movs	r5, #2
 800c3f0:	e775      	b.n	800c2de <_dtoa_r+0x3de>
 800c3f2:	9e04      	ldr	r6, [sp, #16]
 800c3f4:	465f      	mov	r7, fp
 800c3f6:	e792      	b.n	800c31e <_dtoa_r+0x41e>
 800c3f8:	9900      	ldr	r1, [sp, #0]
 800c3fa:	4b50      	ldr	r3, [pc, #320]	; (800c53c <_dtoa_r+0x63c>)
 800c3fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c400:	4431      	add	r1, r6
 800c402:	9102      	str	r1, [sp, #8]
 800c404:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c406:	eeb0 9a47 	vmov.f32	s18, s14
 800c40a:	eef0 9a67 	vmov.f32	s19, s15
 800c40e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c412:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c416:	2900      	cmp	r1, #0
 800c418:	d044      	beq.n	800c4a4 <_dtoa_r+0x5a4>
 800c41a:	494e      	ldr	r1, [pc, #312]	; (800c554 <_dtoa_r+0x654>)
 800c41c:	2000      	movs	r0, #0
 800c41e:	f7f4 fa25 	bl	800086c <__aeabi_ddiv>
 800c422:	ec53 2b19 	vmov	r2, r3, d9
 800c426:	f7f3 ff3f 	bl	80002a8 <__aeabi_dsub>
 800c42a:	9d00      	ldr	r5, [sp, #0]
 800c42c:	ec41 0b19 	vmov	d9, r0, r1
 800c430:	4649      	mov	r1, r9
 800c432:	4640      	mov	r0, r8
 800c434:	f7f4 fba0 	bl	8000b78 <__aeabi_d2iz>
 800c438:	4606      	mov	r6, r0
 800c43a:	f7f4 f883 	bl	8000544 <__aeabi_i2d>
 800c43e:	4602      	mov	r2, r0
 800c440:	460b      	mov	r3, r1
 800c442:	4640      	mov	r0, r8
 800c444:	4649      	mov	r1, r9
 800c446:	f7f3 ff2f 	bl	80002a8 <__aeabi_dsub>
 800c44a:	3630      	adds	r6, #48	; 0x30
 800c44c:	f805 6b01 	strb.w	r6, [r5], #1
 800c450:	ec53 2b19 	vmov	r2, r3, d9
 800c454:	4680      	mov	r8, r0
 800c456:	4689      	mov	r9, r1
 800c458:	f7f4 fb50 	bl	8000afc <__aeabi_dcmplt>
 800c45c:	2800      	cmp	r0, #0
 800c45e:	d164      	bne.n	800c52a <_dtoa_r+0x62a>
 800c460:	4642      	mov	r2, r8
 800c462:	464b      	mov	r3, r9
 800c464:	4937      	ldr	r1, [pc, #220]	; (800c544 <_dtoa_r+0x644>)
 800c466:	2000      	movs	r0, #0
 800c468:	f7f3 ff1e 	bl	80002a8 <__aeabi_dsub>
 800c46c:	ec53 2b19 	vmov	r2, r3, d9
 800c470:	f7f4 fb44 	bl	8000afc <__aeabi_dcmplt>
 800c474:	2800      	cmp	r0, #0
 800c476:	f040 80b6 	bne.w	800c5e6 <_dtoa_r+0x6e6>
 800c47a:	9b02      	ldr	r3, [sp, #8]
 800c47c:	429d      	cmp	r5, r3
 800c47e:	f43f af7c 	beq.w	800c37a <_dtoa_r+0x47a>
 800c482:	4b31      	ldr	r3, [pc, #196]	; (800c548 <_dtoa_r+0x648>)
 800c484:	ec51 0b19 	vmov	r0, r1, d9
 800c488:	2200      	movs	r2, #0
 800c48a:	f7f4 f8c5 	bl	8000618 <__aeabi_dmul>
 800c48e:	4b2e      	ldr	r3, [pc, #184]	; (800c548 <_dtoa_r+0x648>)
 800c490:	ec41 0b19 	vmov	d9, r0, r1
 800c494:	2200      	movs	r2, #0
 800c496:	4640      	mov	r0, r8
 800c498:	4649      	mov	r1, r9
 800c49a:	f7f4 f8bd 	bl	8000618 <__aeabi_dmul>
 800c49e:	4680      	mov	r8, r0
 800c4a0:	4689      	mov	r9, r1
 800c4a2:	e7c5      	b.n	800c430 <_dtoa_r+0x530>
 800c4a4:	ec51 0b17 	vmov	r0, r1, d7
 800c4a8:	f7f4 f8b6 	bl	8000618 <__aeabi_dmul>
 800c4ac:	9b02      	ldr	r3, [sp, #8]
 800c4ae:	9d00      	ldr	r5, [sp, #0]
 800c4b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c4b2:	ec41 0b19 	vmov	d9, r0, r1
 800c4b6:	4649      	mov	r1, r9
 800c4b8:	4640      	mov	r0, r8
 800c4ba:	f7f4 fb5d 	bl	8000b78 <__aeabi_d2iz>
 800c4be:	4606      	mov	r6, r0
 800c4c0:	f7f4 f840 	bl	8000544 <__aeabi_i2d>
 800c4c4:	3630      	adds	r6, #48	; 0x30
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	4640      	mov	r0, r8
 800c4cc:	4649      	mov	r1, r9
 800c4ce:	f7f3 feeb 	bl	80002a8 <__aeabi_dsub>
 800c4d2:	f805 6b01 	strb.w	r6, [r5], #1
 800c4d6:	9b02      	ldr	r3, [sp, #8]
 800c4d8:	429d      	cmp	r5, r3
 800c4da:	4680      	mov	r8, r0
 800c4dc:	4689      	mov	r9, r1
 800c4de:	f04f 0200 	mov.w	r2, #0
 800c4e2:	d124      	bne.n	800c52e <_dtoa_r+0x62e>
 800c4e4:	4b1b      	ldr	r3, [pc, #108]	; (800c554 <_dtoa_r+0x654>)
 800c4e6:	ec51 0b19 	vmov	r0, r1, d9
 800c4ea:	f7f3 fedf 	bl	80002ac <__adddf3>
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	460b      	mov	r3, r1
 800c4f2:	4640      	mov	r0, r8
 800c4f4:	4649      	mov	r1, r9
 800c4f6:	f7f4 fb1f 	bl	8000b38 <__aeabi_dcmpgt>
 800c4fa:	2800      	cmp	r0, #0
 800c4fc:	d173      	bne.n	800c5e6 <_dtoa_r+0x6e6>
 800c4fe:	ec53 2b19 	vmov	r2, r3, d9
 800c502:	4914      	ldr	r1, [pc, #80]	; (800c554 <_dtoa_r+0x654>)
 800c504:	2000      	movs	r0, #0
 800c506:	f7f3 fecf 	bl	80002a8 <__aeabi_dsub>
 800c50a:	4602      	mov	r2, r0
 800c50c:	460b      	mov	r3, r1
 800c50e:	4640      	mov	r0, r8
 800c510:	4649      	mov	r1, r9
 800c512:	f7f4 faf3 	bl	8000afc <__aeabi_dcmplt>
 800c516:	2800      	cmp	r0, #0
 800c518:	f43f af2f 	beq.w	800c37a <_dtoa_r+0x47a>
 800c51c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c51e:	1e6b      	subs	r3, r5, #1
 800c520:	930f      	str	r3, [sp, #60]	; 0x3c
 800c522:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c526:	2b30      	cmp	r3, #48	; 0x30
 800c528:	d0f8      	beq.n	800c51c <_dtoa_r+0x61c>
 800c52a:	46bb      	mov	fp, r7
 800c52c:	e04a      	b.n	800c5c4 <_dtoa_r+0x6c4>
 800c52e:	4b06      	ldr	r3, [pc, #24]	; (800c548 <_dtoa_r+0x648>)
 800c530:	f7f4 f872 	bl	8000618 <__aeabi_dmul>
 800c534:	4680      	mov	r8, r0
 800c536:	4689      	mov	r9, r1
 800c538:	e7bd      	b.n	800c4b6 <_dtoa_r+0x5b6>
 800c53a:	bf00      	nop
 800c53c:	0801fec8 	.word	0x0801fec8
 800c540:	0801fea0 	.word	0x0801fea0
 800c544:	3ff00000 	.word	0x3ff00000
 800c548:	40240000 	.word	0x40240000
 800c54c:	401c0000 	.word	0x401c0000
 800c550:	40140000 	.word	0x40140000
 800c554:	3fe00000 	.word	0x3fe00000
 800c558:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c55c:	9d00      	ldr	r5, [sp, #0]
 800c55e:	4642      	mov	r2, r8
 800c560:	464b      	mov	r3, r9
 800c562:	4630      	mov	r0, r6
 800c564:	4639      	mov	r1, r7
 800c566:	f7f4 f981 	bl	800086c <__aeabi_ddiv>
 800c56a:	f7f4 fb05 	bl	8000b78 <__aeabi_d2iz>
 800c56e:	9001      	str	r0, [sp, #4]
 800c570:	f7f3 ffe8 	bl	8000544 <__aeabi_i2d>
 800c574:	4642      	mov	r2, r8
 800c576:	464b      	mov	r3, r9
 800c578:	f7f4 f84e 	bl	8000618 <__aeabi_dmul>
 800c57c:	4602      	mov	r2, r0
 800c57e:	460b      	mov	r3, r1
 800c580:	4630      	mov	r0, r6
 800c582:	4639      	mov	r1, r7
 800c584:	f7f3 fe90 	bl	80002a8 <__aeabi_dsub>
 800c588:	9e01      	ldr	r6, [sp, #4]
 800c58a:	9f04      	ldr	r7, [sp, #16]
 800c58c:	3630      	adds	r6, #48	; 0x30
 800c58e:	f805 6b01 	strb.w	r6, [r5], #1
 800c592:	9e00      	ldr	r6, [sp, #0]
 800c594:	1bae      	subs	r6, r5, r6
 800c596:	42b7      	cmp	r7, r6
 800c598:	4602      	mov	r2, r0
 800c59a:	460b      	mov	r3, r1
 800c59c:	d134      	bne.n	800c608 <_dtoa_r+0x708>
 800c59e:	f7f3 fe85 	bl	80002ac <__adddf3>
 800c5a2:	4642      	mov	r2, r8
 800c5a4:	464b      	mov	r3, r9
 800c5a6:	4606      	mov	r6, r0
 800c5a8:	460f      	mov	r7, r1
 800c5aa:	f7f4 fac5 	bl	8000b38 <__aeabi_dcmpgt>
 800c5ae:	b9c8      	cbnz	r0, 800c5e4 <_dtoa_r+0x6e4>
 800c5b0:	4642      	mov	r2, r8
 800c5b2:	464b      	mov	r3, r9
 800c5b4:	4630      	mov	r0, r6
 800c5b6:	4639      	mov	r1, r7
 800c5b8:	f7f4 fa96 	bl	8000ae8 <__aeabi_dcmpeq>
 800c5bc:	b110      	cbz	r0, 800c5c4 <_dtoa_r+0x6c4>
 800c5be:	9b01      	ldr	r3, [sp, #4]
 800c5c0:	07db      	lsls	r3, r3, #31
 800c5c2:	d40f      	bmi.n	800c5e4 <_dtoa_r+0x6e4>
 800c5c4:	4651      	mov	r1, sl
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	f000 fbcc 	bl	800cd64 <_Bfree>
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c5d0:	702b      	strb	r3, [r5, #0]
 800c5d2:	f10b 0301 	add.w	r3, fp, #1
 800c5d6:	6013      	str	r3, [r2, #0]
 800c5d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	f43f ace2 	beq.w	800bfa4 <_dtoa_r+0xa4>
 800c5e0:	601d      	str	r5, [r3, #0]
 800c5e2:	e4df      	b.n	800bfa4 <_dtoa_r+0xa4>
 800c5e4:	465f      	mov	r7, fp
 800c5e6:	462b      	mov	r3, r5
 800c5e8:	461d      	mov	r5, r3
 800c5ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c5ee:	2a39      	cmp	r2, #57	; 0x39
 800c5f0:	d106      	bne.n	800c600 <_dtoa_r+0x700>
 800c5f2:	9a00      	ldr	r2, [sp, #0]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d1f7      	bne.n	800c5e8 <_dtoa_r+0x6e8>
 800c5f8:	9900      	ldr	r1, [sp, #0]
 800c5fa:	2230      	movs	r2, #48	; 0x30
 800c5fc:	3701      	adds	r7, #1
 800c5fe:	700a      	strb	r2, [r1, #0]
 800c600:	781a      	ldrb	r2, [r3, #0]
 800c602:	3201      	adds	r2, #1
 800c604:	701a      	strb	r2, [r3, #0]
 800c606:	e790      	b.n	800c52a <_dtoa_r+0x62a>
 800c608:	4ba3      	ldr	r3, [pc, #652]	; (800c898 <_dtoa_r+0x998>)
 800c60a:	2200      	movs	r2, #0
 800c60c:	f7f4 f804 	bl	8000618 <__aeabi_dmul>
 800c610:	2200      	movs	r2, #0
 800c612:	2300      	movs	r3, #0
 800c614:	4606      	mov	r6, r0
 800c616:	460f      	mov	r7, r1
 800c618:	f7f4 fa66 	bl	8000ae8 <__aeabi_dcmpeq>
 800c61c:	2800      	cmp	r0, #0
 800c61e:	d09e      	beq.n	800c55e <_dtoa_r+0x65e>
 800c620:	e7d0      	b.n	800c5c4 <_dtoa_r+0x6c4>
 800c622:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c624:	2a00      	cmp	r2, #0
 800c626:	f000 80ca 	beq.w	800c7be <_dtoa_r+0x8be>
 800c62a:	9a07      	ldr	r2, [sp, #28]
 800c62c:	2a01      	cmp	r2, #1
 800c62e:	f300 80ad 	bgt.w	800c78c <_dtoa_r+0x88c>
 800c632:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c634:	2a00      	cmp	r2, #0
 800c636:	f000 80a5 	beq.w	800c784 <_dtoa_r+0x884>
 800c63a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c63e:	9e08      	ldr	r6, [sp, #32]
 800c640:	9d05      	ldr	r5, [sp, #20]
 800c642:	9a05      	ldr	r2, [sp, #20]
 800c644:	441a      	add	r2, r3
 800c646:	9205      	str	r2, [sp, #20]
 800c648:	9a06      	ldr	r2, [sp, #24]
 800c64a:	2101      	movs	r1, #1
 800c64c:	441a      	add	r2, r3
 800c64e:	4620      	mov	r0, r4
 800c650:	9206      	str	r2, [sp, #24]
 800c652:	f000 fc3d 	bl	800ced0 <__i2b>
 800c656:	4607      	mov	r7, r0
 800c658:	b165      	cbz	r5, 800c674 <_dtoa_r+0x774>
 800c65a:	9b06      	ldr	r3, [sp, #24]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	dd09      	ble.n	800c674 <_dtoa_r+0x774>
 800c660:	42ab      	cmp	r3, r5
 800c662:	9a05      	ldr	r2, [sp, #20]
 800c664:	bfa8      	it	ge
 800c666:	462b      	movge	r3, r5
 800c668:	1ad2      	subs	r2, r2, r3
 800c66a:	9205      	str	r2, [sp, #20]
 800c66c:	9a06      	ldr	r2, [sp, #24]
 800c66e:	1aed      	subs	r5, r5, r3
 800c670:	1ad3      	subs	r3, r2, r3
 800c672:	9306      	str	r3, [sp, #24]
 800c674:	9b08      	ldr	r3, [sp, #32]
 800c676:	b1f3      	cbz	r3, 800c6b6 <_dtoa_r+0x7b6>
 800c678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	f000 80a3 	beq.w	800c7c6 <_dtoa_r+0x8c6>
 800c680:	2e00      	cmp	r6, #0
 800c682:	dd10      	ble.n	800c6a6 <_dtoa_r+0x7a6>
 800c684:	4639      	mov	r1, r7
 800c686:	4632      	mov	r2, r6
 800c688:	4620      	mov	r0, r4
 800c68a:	f000 fce1 	bl	800d050 <__pow5mult>
 800c68e:	4652      	mov	r2, sl
 800c690:	4601      	mov	r1, r0
 800c692:	4607      	mov	r7, r0
 800c694:	4620      	mov	r0, r4
 800c696:	f000 fc31 	bl	800cefc <__multiply>
 800c69a:	4651      	mov	r1, sl
 800c69c:	4680      	mov	r8, r0
 800c69e:	4620      	mov	r0, r4
 800c6a0:	f000 fb60 	bl	800cd64 <_Bfree>
 800c6a4:	46c2      	mov	sl, r8
 800c6a6:	9b08      	ldr	r3, [sp, #32]
 800c6a8:	1b9a      	subs	r2, r3, r6
 800c6aa:	d004      	beq.n	800c6b6 <_dtoa_r+0x7b6>
 800c6ac:	4651      	mov	r1, sl
 800c6ae:	4620      	mov	r0, r4
 800c6b0:	f000 fcce 	bl	800d050 <__pow5mult>
 800c6b4:	4682      	mov	sl, r0
 800c6b6:	2101      	movs	r1, #1
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	f000 fc09 	bl	800ced0 <__i2b>
 800c6be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	4606      	mov	r6, r0
 800c6c4:	f340 8081 	ble.w	800c7ca <_dtoa_r+0x8ca>
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	4601      	mov	r1, r0
 800c6cc:	4620      	mov	r0, r4
 800c6ce:	f000 fcbf 	bl	800d050 <__pow5mult>
 800c6d2:	9b07      	ldr	r3, [sp, #28]
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	4606      	mov	r6, r0
 800c6d8:	dd7a      	ble.n	800c7d0 <_dtoa_r+0x8d0>
 800c6da:	f04f 0800 	mov.w	r8, #0
 800c6de:	6933      	ldr	r3, [r6, #16]
 800c6e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c6e4:	6918      	ldr	r0, [r3, #16]
 800c6e6:	f000 fba5 	bl	800ce34 <__hi0bits>
 800c6ea:	f1c0 0020 	rsb	r0, r0, #32
 800c6ee:	9b06      	ldr	r3, [sp, #24]
 800c6f0:	4418      	add	r0, r3
 800c6f2:	f010 001f 	ands.w	r0, r0, #31
 800c6f6:	f000 8094 	beq.w	800c822 <_dtoa_r+0x922>
 800c6fa:	f1c0 0320 	rsb	r3, r0, #32
 800c6fe:	2b04      	cmp	r3, #4
 800c700:	f340 8085 	ble.w	800c80e <_dtoa_r+0x90e>
 800c704:	9b05      	ldr	r3, [sp, #20]
 800c706:	f1c0 001c 	rsb	r0, r0, #28
 800c70a:	4403      	add	r3, r0
 800c70c:	9305      	str	r3, [sp, #20]
 800c70e:	9b06      	ldr	r3, [sp, #24]
 800c710:	4403      	add	r3, r0
 800c712:	4405      	add	r5, r0
 800c714:	9306      	str	r3, [sp, #24]
 800c716:	9b05      	ldr	r3, [sp, #20]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	dd05      	ble.n	800c728 <_dtoa_r+0x828>
 800c71c:	4651      	mov	r1, sl
 800c71e:	461a      	mov	r2, r3
 800c720:	4620      	mov	r0, r4
 800c722:	f000 fcef 	bl	800d104 <__lshift>
 800c726:	4682      	mov	sl, r0
 800c728:	9b06      	ldr	r3, [sp, #24]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	dd05      	ble.n	800c73a <_dtoa_r+0x83a>
 800c72e:	4631      	mov	r1, r6
 800c730:	461a      	mov	r2, r3
 800c732:	4620      	mov	r0, r4
 800c734:	f000 fce6 	bl	800d104 <__lshift>
 800c738:	4606      	mov	r6, r0
 800c73a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d072      	beq.n	800c826 <_dtoa_r+0x926>
 800c740:	4631      	mov	r1, r6
 800c742:	4650      	mov	r0, sl
 800c744:	f000 fd4a 	bl	800d1dc <__mcmp>
 800c748:	2800      	cmp	r0, #0
 800c74a:	da6c      	bge.n	800c826 <_dtoa_r+0x926>
 800c74c:	2300      	movs	r3, #0
 800c74e:	4651      	mov	r1, sl
 800c750:	220a      	movs	r2, #10
 800c752:	4620      	mov	r0, r4
 800c754:	f000 fb28 	bl	800cda8 <__multadd>
 800c758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c75a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c75e:	4682      	mov	sl, r0
 800c760:	2b00      	cmp	r3, #0
 800c762:	f000 81b0 	beq.w	800cac6 <_dtoa_r+0xbc6>
 800c766:	2300      	movs	r3, #0
 800c768:	4639      	mov	r1, r7
 800c76a:	220a      	movs	r2, #10
 800c76c:	4620      	mov	r0, r4
 800c76e:	f000 fb1b 	bl	800cda8 <__multadd>
 800c772:	9b01      	ldr	r3, [sp, #4]
 800c774:	2b00      	cmp	r3, #0
 800c776:	4607      	mov	r7, r0
 800c778:	f300 8096 	bgt.w	800c8a8 <_dtoa_r+0x9a8>
 800c77c:	9b07      	ldr	r3, [sp, #28]
 800c77e:	2b02      	cmp	r3, #2
 800c780:	dc59      	bgt.n	800c836 <_dtoa_r+0x936>
 800c782:	e091      	b.n	800c8a8 <_dtoa_r+0x9a8>
 800c784:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c786:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c78a:	e758      	b.n	800c63e <_dtoa_r+0x73e>
 800c78c:	9b04      	ldr	r3, [sp, #16]
 800c78e:	1e5e      	subs	r6, r3, #1
 800c790:	9b08      	ldr	r3, [sp, #32]
 800c792:	42b3      	cmp	r3, r6
 800c794:	bfbf      	itttt	lt
 800c796:	9b08      	ldrlt	r3, [sp, #32]
 800c798:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c79a:	9608      	strlt	r6, [sp, #32]
 800c79c:	1af3      	sublt	r3, r6, r3
 800c79e:	bfb4      	ite	lt
 800c7a0:	18d2      	addlt	r2, r2, r3
 800c7a2:	1b9e      	subge	r6, r3, r6
 800c7a4:	9b04      	ldr	r3, [sp, #16]
 800c7a6:	bfbc      	itt	lt
 800c7a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c7aa:	2600      	movlt	r6, #0
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	bfb7      	itett	lt
 800c7b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c7b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c7b8:	1a9d      	sublt	r5, r3, r2
 800c7ba:	2300      	movlt	r3, #0
 800c7bc:	e741      	b.n	800c642 <_dtoa_r+0x742>
 800c7be:	9e08      	ldr	r6, [sp, #32]
 800c7c0:	9d05      	ldr	r5, [sp, #20]
 800c7c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c7c4:	e748      	b.n	800c658 <_dtoa_r+0x758>
 800c7c6:	9a08      	ldr	r2, [sp, #32]
 800c7c8:	e770      	b.n	800c6ac <_dtoa_r+0x7ac>
 800c7ca:	9b07      	ldr	r3, [sp, #28]
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	dc19      	bgt.n	800c804 <_dtoa_r+0x904>
 800c7d0:	9b02      	ldr	r3, [sp, #8]
 800c7d2:	b9bb      	cbnz	r3, 800c804 <_dtoa_r+0x904>
 800c7d4:	9b03      	ldr	r3, [sp, #12]
 800c7d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c7da:	b99b      	cbnz	r3, 800c804 <_dtoa_r+0x904>
 800c7dc:	9b03      	ldr	r3, [sp, #12]
 800c7de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c7e2:	0d1b      	lsrs	r3, r3, #20
 800c7e4:	051b      	lsls	r3, r3, #20
 800c7e6:	b183      	cbz	r3, 800c80a <_dtoa_r+0x90a>
 800c7e8:	9b05      	ldr	r3, [sp, #20]
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	9305      	str	r3, [sp, #20]
 800c7ee:	9b06      	ldr	r3, [sp, #24]
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	9306      	str	r3, [sp, #24]
 800c7f4:	f04f 0801 	mov.w	r8, #1
 800c7f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	f47f af6f 	bne.w	800c6de <_dtoa_r+0x7de>
 800c800:	2001      	movs	r0, #1
 800c802:	e774      	b.n	800c6ee <_dtoa_r+0x7ee>
 800c804:	f04f 0800 	mov.w	r8, #0
 800c808:	e7f6      	b.n	800c7f8 <_dtoa_r+0x8f8>
 800c80a:	4698      	mov	r8, r3
 800c80c:	e7f4      	b.n	800c7f8 <_dtoa_r+0x8f8>
 800c80e:	d082      	beq.n	800c716 <_dtoa_r+0x816>
 800c810:	9a05      	ldr	r2, [sp, #20]
 800c812:	331c      	adds	r3, #28
 800c814:	441a      	add	r2, r3
 800c816:	9205      	str	r2, [sp, #20]
 800c818:	9a06      	ldr	r2, [sp, #24]
 800c81a:	441a      	add	r2, r3
 800c81c:	441d      	add	r5, r3
 800c81e:	9206      	str	r2, [sp, #24]
 800c820:	e779      	b.n	800c716 <_dtoa_r+0x816>
 800c822:	4603      	mov	r3, r0
 800c824:	e7f4      	b.n	800c810 <_dtoa_r+0x910>
 800c826:	9b04      	ldr	r3, [sp, #16]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	dc37      	bgt.n	800c89c <_dtoa_r+0x99c>
 800c82c:	9b07      	ldr	r3, [sp, #28]
 800c82e:	2b02      	cmp	r3, #2
 800c830:	dd34      	ble.n	800c89c <_dtoa_r+0x99c>
 800c832:	9b04      	ldr	r3, [sp, #16]
 800c834:	9301      	str	r3, [sp, #4]
 800c836:	9b01      	ldr	r3, [sp, #4]
 800c838:	b963      	cbnz	r3, 800c854 <_dtoa_r+0x954>
 800c83a:	4631      	mov	r1, r6
 800c83c:	2205      	movs	r2, #5
 800c83e:	4620      	mov	r0, r4
 800c840:	f000 fab2 	bl	800cda8 <__multadd>
 800c844:	4601      	mov	r1, r0
 800c846:	4606      	mov	r6, r0
 800c848:	4650      	mov	r0, sl
 800c84a:	f000 fcc7 	bl	800d1dc <__mcmp>
 800c84e:	2800      	cmp	r0, #0
 800c850:	f73f adbb 	bgt.w	800c3ca <_dtoa_r+0x4ca>
 800c854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c856:	9d00      	ldr	r5, [sp, #0]
 800c858:	ea6f 0b03 	mvn.w	fp, r3
 800c85c:	f04f 0800 	mov.w	r8, #0
 800c860:	4631      	mov	r1, r6
 800c862:	4620      	mov	r0, r4
 800c864:	f000 fa7e 	bl	800cd64 <_Bfree>
 800c868:	2f00      	cmp	r7, #0
 800c86a:	f43f aeab 	beq.w	800c5c4 <_dtoa_r+0x6c4>
 800c86e:	f1b8 0f00 	cmp.w	r8, #0
 800c872:	d005      	beq.n	800c880 <_dtoa_r+0x980>
 800c874:	45b8      	cmp	r8, r7
 800c876:	d003      	beq.n	800c880 <_dtoa_r+0x980>
 800c878:	4641      	mov	r1, r8
 800c87a:	4620      	mov	r0, r4
 800c87c:	f000 fa72 	bl	800cd64 <_Bfree>
 800c880:	4639      	mov	r1, r7
 800c882:	4620      	mov	r0, r4
 800c884:	f000 fa6e 	bl	800cd64 <_Bfree>
 800c888:	e69c      	b.n	800c5c4 <_dtoa_r+0x6c4>
 800c88a:	2600      	movs	r6, #0
 800c88c:	4637      	mov	r7, r6
 800c88e:	e7e1      	b.n	800c854 <_dtoa_r+0x954>
 800c890:	46bb      	mov	fp, r7
 800c892:	4637      	mov	r7, r6
 800c894:	e599      	b.n	800c3ca <_dtoa_r+0x4ca>
 800c896:	bf00      	nop
 800c898:	40240000 	.word	0x40240000
 800c89c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	f000 80c8 	beq.w	800ca34 <_dtoa_r+0xb34>
 800c8a4:	9b04      	ldr	r3, [sp, #16]
 800c8a6:	9301      	str	r3, [sp, #4]
 800c8a8:	2d00      	cmp	r5, #0
 800c8aa:	dd05      	ble.n	800c8b8 <_dtoa_r+0x9b8>
 800c8ac:	4639      	mov	r1, r7
 800c8ae:	462a      	mov	r2, r5
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	f000 fc27 	bl	800d104 <__lshift>
 800c8b6:	4607      	mov	r7, r0
 800c8b8:	f1b8 0f00 	cmp.w	r8, #0
 800c8bc:	d05b      	beq.n	800c976 <_dtoa_r+0xa76>
 800c8be:	6879      	ldr	r1, [r7, #4]
 800c8c0:	4620      	mov	r0, r4
 800c8c2:	f000 fa0f 	bl	800cce4 <_Balloc>
 800c8c6:	4605      	mov	r5, r0
 800c8c8:	b928      	cbnz	r0, 800c8d6 <_dtoa_r+0x9d6>
 800c8ca:	4b83      	ldr	r3, [pc, #524]	; (800cad8 <_dtoa_r+0xbd8>)
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c8d2:	f7ff bb2e 	b.w	800bf32 <_dtoa_r+0x32>
 800c8d6:	693a      	ldr	r2, [r7, #16]
 800c8d8:	3202      	adds	r2, #2
 800c8da:	0092      	lsls	r2, r2, #2
 800c8dc:	f107 010c 	add.w	r1, r7, #12
 800c8e0:	300c      	adds	r0, #12
 800c8e2:	f7ff fa74 	bl	800bdce <memcpy>
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	4629      	mov	r1, r5
 800c8ea:	4620      	mov	r0, r4
 800c8ec:	f000 fc0a 	bl	800d104 <__lshift>
 800c8f0:	9b00      	ldr	r3, [sp, #0]
 800c8f2:	3301      	adds	r3, #1
 800c8f4:	9304      	str	r3, [sp, #16]
 800c8f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8fa:	4413      	add	r3, r2
 800c8fc:	9308      	str	r3, [sp, #32]
 800c8fe:	9b02      	ldr	r3, [sp, #8]
 800c900:	f003 0301 	and.w	r3, r3, #1
 800c904:	46b8      	mov	r8, r7
 800c906:	9306      	str	r3, [sp, #24]
 800c908:	4607      	mov	r7, r0
 800c90a:	9b04      	ldr	r3, [sp, #16]
 800c90c:	4631      	mov	r1, r6
 800c90e:	3b01      	subs	r3, #1
 800c910:	4650      	mov	r0, sl
 800c912:	9301      	str	r3, [sp, #4]
 800c914:	f7ff fa69 	bl	800bdea <quorem>
 800c918:	4641      	mov	r1, r8
 800c91a:	9002      	str	r0, [sp, #8]
 800c91c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c920:	4650      	mov	r0, sl
 800c922:	f000 fc5b 	bl	800d1dc <__mcmp>
 800c926:	463a      	mov	r2, r7
 800c928:	9005      	str	r0, [sp, #20]
 800c92a:	4631      	mov	r1, r6
 800c92c:	4620      	mov	r0, r4
 800c92e:	f000 fc71 	bl	800d214 <__mdiff>
 800c932:	68c2      	ldr	r2, [r0, #12]
 800c934:	4605      	mov	r5, r0
 800c936:	bb02      	cbnz	r2, 800c97a <_dtoa_r+0xa7a>
 800c938:	4601      	mov	r1, r0
 800c93a:	4650      	mov	r0, sl
 800c93c:	f000 fc4e 	bl	800d1dc <__mcmp>
 800c940:	4602      	mov	r2, r0
 800c942:	4629      	mov	r1, r5
 800c944:	4620      	mov	r0, r4
 800c946:	9209      	str	r2, [sp, #36]	; 0x24
 800c948:	f000 fa0c 	bl	800cd64 <_Bfree>
 800c94c:	9b07      	ldr	r3, [sp, #28]
 800c94e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c950:	9d04      	ldr	r5, [sp, #16]
 800c952:	ea43 0102 	orr.w	r1, r3, r2
 800c956:	9b06      	ldr	r3, [sp, #24]
 800c958:	4319      	orrs	r1, r3
 800c95a:	d110      	bne.n	800c97e <_dtoa_r+0xa7e>
 800c95c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c960:	d029      	beq.n	800c9b6 <_dtoa_r+0xab6>
 800c962:	9b05      	ldr	r3, [sp, #20]
 800c964:	2b00      	cmp	r3, #0
 800c966:	dd02      	ble.n	800c96e <_dtoa_r+0xa6e>
 800c968:	9b02      	ldr	r3, [sp, #8]
 800c96a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c96e:	9b01      	ldr	r3, [sp, #4]
 800c970:	f883 9000 	strb.w	r9, [r3]
 800c974:	e774      	b.n	800c860 <_dtoa_r+0x960>
 800c976:	4638      	mov	r0, r7
 800c978:	e7ba      	b.n	800c8f0 <_dtoa_r+0x9f0>
 800c97a:	2201      	movs	r2, #1
 800c97c:	e7e1      	b.n	800c942 <_dtoa_r+0xa42>
 800c97e:	9b05      	ldr	r3, [sp, #20]
 800c980:	2b00      	cmp	r3, #0
 800c982:	db04      	blt.n	800c98e <_dtoa_r+0xa8e>
 800c984:	9907      	ldr	r1, [sp, #28]
 800c986:	430b      	orrs	r3, r1
 800c988:	9906      	ldr	r1, [sp, #24]
 800c98a:	430b      	orrs	r3, r1
 800c98c:	d120      	bne.n	800c9d0 <_dtoa_r+0xad0>
 800c98e:	2a00      	cmp	r2, #0
 800c990:	dded      	ble.n	800c96e <_dtoa_r+0xa6e>
 800c992:	4651      	mov	r1, sl
 800c994:	2201      	movs	r2, #1
 800c996:	4620      	mov	r0, r4
 800c998:	f000 fbb4 	bl	800d104 <__lshift>
 800c99c:	4631      	mov	r1, r6
 800c99e:	4682      	mov	sl, r0
 800c9a0:	f000 fc1c 	bl	800d1dc <__mcmp>
 800c9a4:	2800      	cmp	r0, #0
 800c9a6:	dc03      	bgt.n	800c9b0 <_dtoa_r+0xab0>
 800c9a8:	d1e1      	bne.n	800c96e <_dtoa_r+0xa6e>
 800c9aa:	f019 0f01 	tst.w	r9, #1
 800c9ae:	d0de      	beq.n	800c96e <_dtoa_r+0xa6e>
 800c9b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c9b4:	d1d8      	bne.n	800c968 <_dtoa_r+0xa68>
 800c9b6:	9a01      	ldr	r2, [sp, #4]
 800c9b8:	2339      	movs	r3, #57	; 0x39
 800c9ba:	7013      	strb	r3, [r2, #0]
 800c9bc:	462b      	mov	r3, r5
 800c9be:	461d      	mov	r5, r3
 800c9c0:	3b01      	subs	r3, #1
 800c9c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c9c6:	2a39      	cmp	r2, #57	; 0x39
 800c9c8:	d06c      	beq.n	800caa4 <_dtoa_r+0xba4>
 800c9ca:	3201      	adds	r2, #1
 800c9cc:	701a      	strb	r2, [r3, #0]
 800c9ce:	e747      	b.n	800c860 <_dtoa_r+0x960>
 800c9d0:	2a00      	cmp	r2, #0
 800c9d2:	dd07      	ble.n	800c9e4 <_dtoa_r+0xae4>
 800c9d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c9d8:	d0ed      	beq.n	800c9b6 <_dtoa_r+0xab6>
 800c9da:	9a01      	ldr	r2, [sp, #4]
 800c9dc:	f109 0301 	add.w	r3, r9, #1
 800c9e0:	7013      	strb	r3, [r2, #0]
 800c9e2:	e73d      	b.n	800c860 <_dtoa_r+0x960>
 800c9e4:	9b04      	ldr	r3, [sp, #16]
 800c9e6:	9a08      	ldr	r2, [sp, #32]
 800c9e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d043      	beq.n	800ca78 <_dtoa_r+0xb78>
 800c9f0:	4651      	mov	r1, sl
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	220a      	movs	r2, #10
 800c9f6:	4620      	mov	r0, r4
 800c9f8:	f000 f9d6 	bl	800cda8 <__multadd>
 800c9fc:	45b8      	cmp	r8, r7
 800c9fe:	4682      	mov	sl, r0
 800ca00:	f04f 0300 	mov.w	r3, #0
 800ca04:	f04f 020a 	mov.w	r2, #10
 800ca08:	4641      	mov	r1, r8
 800ca0a:	4620      	mov	r0, r4
 800ca0c:	d107      	bne.n	800ca1e <_dtoa_r+0xb1e>
 800ca0e:	f000 f9cb 	bl	800cda8 <__multadd>
 800ca12:	4680      	mov	r8, r0
 800ca14:	4607      	mov	r7, r0
 800ca16:	9b04      	ldr	r3, [sp, #16]
 800ca18:	3301      	adds	r3, #1
 800ca1a:	9304      	str	r3, [sp, #16]
 800ca1c:	e775      	b.n	800c90a <_dtoa_r+0xa0a>
 800ca1e:	f000 f9c3 	bl	800cda8 <__multadd>
 800ca22:	4639      	mov	r1, r7
 800ca24:	4680      	mov	r8, r0
 800ca26:	2300      	movs	r3, #0
 800ca28:	220a      	movs	r2, #10
 800ca2a:	4620      	mov	r0, r4
 800ca2c:	f000 f9bc 	bl	800cda8 <__multadd>
 800ca30:	4607      	mov	r7, r0
 800ca32:	e7f0      	b.n	800ca16 <_dtoa_r+0xb16>
 800ca34:	9b04      	ldr	r3, [sp, #16]
 800ca36:	9301      	str	r3, [sp, #4]
 800ca38:	9d00      	ldr	r5, [sp, #0]
 800ca3a:	4631      	mov	r1, r6
 800ca3c:	4650      	mov	r0, sl
 800ca3e:	f7ff f9d4 	bl	800bdea <quorem>
 800ca42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ca46:	9b00      	ldr	r3, [sp, #0]
 800ca48:	f805 9b01 	strb.w	r9, [r5], #1
 800ca4c:	1aea      	subs	r2, r5, r3
 800ca4e:	9b01      	ldr	r3, [sp, #4]
 800ca50:	4293      	cmp	r3, r2
 800ca52:	dd07      	ble.n	800ca64 <_dtoa_r+0xb64>
 800ca54:	4651      	mov	r1, sl
 800ca56:	2300      	movs	r3, #0
 800ca58:	220a      	movs	r2, #10
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	f000 f9a4 	bl	800cda8 <__multadd>
 800ca60:	4682      	mov	sl, r0
 800ca62:	e7ea      	b.n	800ca3a <_dtoa_r+0xb3a>
 800ca64:	9b01      	ldr	r3, [sp, #4]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	bfc8      	it	gt
 800ca6a:	461d      	movgt	r5, r3
 800ca6c:	9b00      	ldr	r3, [sp, #0]
 800ca6e:	bfd8      	it	le
 800ca70:	2501      	movle	r5, #1
 800ca72:	441d      	add	r5, r3
 800ca74:	f04f 0800 	mov.w	r8, #0
 800ca78:	4651      	mov	r1, sl
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	f000 fb41 	bl	800d104 <__lshift>
 800ca82:	4631      	mov	r1, r6
 800ca84:	4682      	mov	sl, r0
 800ca86:	f000 fba9 	bl	800d1dc <__mcmp>
 800ca8a:	2800      	cmp	r0, #0
 800ca8c:	dc96      	bgt.n	800c9bc <_dtoa_r+0xabc>
 800ca8e:	d102      	bne.n	800ca96 <_dtoa_r+0xb96>
 800ca90:	f019 0f01 	tst.w	r9, #1
 800ca94:	d192      	bne.n	800c9bc <_dtoa_r+0xabc>
 800ca96:	462b      	mov	r3, r5
 800ca98:	461d      	mov	r5, r3
 800ca9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca9e:	2a30      	cmp	r2, #48	; 0x30
 800caa0:	d0fa      	beq.n	800ca98 <_dtoa_r+0xb98>
 800caa2:	e6dd      	b.n	800c860 <_dtoa_r+0x960>
 800caa4:	9a00      	ldr	r2, [sp, #0]
 800caa6:	429a      	cmp	r2, r3
 800caa8:	d189      	bne.n	800c9be <_dtoa_r+0xabe>
 800caaa:	f10b 0b01 	add.w	fp, fp, #1
 800caae:	2331      	movs	r3, #49	; 0x31
 800cab0:	e796      	b.n	800c9e0 <_dtoa_r+0xae0>
 800cab2:	4b0a      	ldr	r3, [pc, #40]	; (800cadc <_dtoa_r+0xbdc>)
 800cab4:	f7ff ba99 	b.w	800bfea <_dtoa_r+0xea>
 800cab8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800caba:	2b00      	cmp	r3, #0
 800cabc:	f47f aa6d 	bne.w	800bf9a <_dtoa_r+0x9a>
 800cac0:	4b07      	ldr	r3, [pc, #28]	; (800cae0 <_dtoa_r+0xbe0>)
 800cac2:	f7ff ba92 	b.w	800bfea <_dtoa_r+0xea>
 800cac6:	9b01      	ldr	r3, [sp, #4]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	dcb5      	bgt.n	800ca38 <_dtoa_r+0xb38>
 800cacc:	9b07      	ldr	r3, [sp, #28]
 800cace:	2b02      	cmp	r3, #2
 800cad0:	f73f aeb1 	bgt.w	800c836 <_dtoa_r+0x936>
 800cad4:	e7b0      	b.n	800ca38 <_dtoa_r+0xb38>
 800cad6:	bf00      	nop
 800cad8:	0801fe34 	.word	0x0801fe34
 800cadc:	0801fd94 	.word	0x0801fd94
 800cae0:	0801fdb8 	.word	0x0801fdb8

0800cae4 <_free_r>:
 800cae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cae6:	2900      	cmp	r1, #0
 800cae8:	d044      	beq.n	800cb74 <_free_r+0x90>
 800caea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800caee:	9001      	str	r0, [sp, #4]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	f1a1 0404 	sub.w	r4, r1, #4
 800caf6:	bfb8      	it	lt
 800caf8:	18e4      	addlt	r4, r4, r3
 800cafa:	f000 f8e7 	bl	800cccc <__malloc_lock>
 800cafe:	4a1e      	ldr	r2, [pc, #120]	; (800cb78 <_free_r+0x94>)
 800cb00:	9801      	ldr	r0, [sp, #4]
 800cb02:	6813      	ldr	r3, [r2, #0]
 800cb04:	b933      	cbnz	r3, 800cb14 <_free_r+0x30>
 800cb06:	6063      	str	r3, [r4, #4]
 800cb08:	6014      	str	r4, [r2, #0]
 800cb0a:	b003      	add	sp, #12
 800cb0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb10:	f000 b8e2 	b.w	800ccd8 <__malloc_unlock>
 800cb14:	42a3      	cmp	r3, r4
 800cb16:	d908      	bls.n	800cb2a <_free_r+0x46>
 800cb18:	6825      	ldr	r5, [r4, #0]
 800cb1a:	1961      	adds	r1, r4, r5
 800cb1c:	428b      	cmp	r3, r1
 800cb1e:	bf01      	itttt	eq
 800cb20:	6819      	ldreq	r1, [r3, #0]
 800cb22:	685b      	ldreq	r3, [r3, #4]
 800cb24:	1949      	addeq	r1, r1, r5
 800cb26:	6021      	streq	r1, [r4, #0]
 800cb28:	e7ed      	b.n	800cb06 <_free_r+0x22>
 800cb2a:	461a      	mov	r2, r3
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	b10b      	cbz	r3, 800cb34 <_free_r+0x50>
 800cb30:	42a3      	cmp	r3, r4
 800cb32:	d9fa      	bls.n	800cb2a <_free_r+0x46>
 800cb34:	6811      	ldr	r1, [r2, #0]
 800cb36:	1855      	adds	r5, r2, r1
 800cb38:	42a5      	cmp	r5, r4
 800cb3a:	d10b      	bne.n	800cb54 <_free_r+0x70>
 800cb3c:	6824      	ldr	r4, [r4, #0]
 800cb3e:	4421      	add	r1, r4
 800cb40:	1854      	adds	r4, r2, r1
 800cb42:	42a3      	cmp	r3, r4
 800cb44:	6011      	str	r1, [r2, #0]
 800cb46:	d1e0      	bne.n	800cb0a <_free_r+0x26>
 800cb48:	681c      	ldr	r4, [r3, #0]
 800cb4a:	685b      	ldr	r3, [r3, #4]
 800cb4c:	6053      	str	r3, [r2, #4]
 800cb4e:	440c      	add	r4, r1
 800cb50:	6014      	str	r4, [r2, #0]
 800cb52:	e7da      	b.n	800cb0a <_free_r+0x26>
 800cb54:	d902      	bls.n	800cb5c <_free_r+0x78>
 800cb56:	230c      	movs	r3, #12
 800cb58:	6003      	str	r3, [r0, #0]
 800cb5a:	e7d6      	b.n	800cb0a <_free_r+0x26>
 800cb5c:	6825      	ldr	r5, [r4, #0]
 800cb5e:	1961      	adds	r1, r4, r5
 800cb60:	428b      	cmp	r3, r1
 800cb62:	bf04      	itt	eq
 800cb64:	6819      	ldreq	r1, [r3, #0]
 800cb66:	685b      	ldreq	r3, [r3, #4]
 800cb68:	6063      	str	r3, [r4, #4]
 800cb6a:	bf04      	itt	eq
 800cb6c:	1949      	addeq	r1, r1, r5
 800cb6e:	6021      	streq	r1, [r4, #0]
 800cb70:	6054      	str	r4, [r2, #4]
 800cb72:	e7ca      	b.n	800cb0a <_free_r+0x26>
 800cb74:	b003      	add	sp, #12
 800cb76:	bd30      	pop	{r4, r5, pc}
 800cb78:	20004df4 	.word	0x20004df4

0800cb7c <malloc>:
 800cb7c:	4b02      	ldr	r3, [pc, #8]	; (800cb88 <malloc+0xc>)
 800cb7e:	4601      	mov	r1, r0
 800cb80:	6818      	ldr	r0, [r3, #0]
 800cb82:	f000 b823 	b.w	800cbcc <_malloc_r>
 800cb86:	bf00      	nop
 800cb88:	20002ff8 	.word	0x20002ff8

0800cb8c <sbrk_aligned>:
 800cb8c:	b570      	push	{r4, r5, r6, lr}
 800cb8e:	4e0e      	ldr	r6, [pc, #56]	; (800cbc8 <sbrk_aligned+0x3c>)
 800cb90:	460c      	mov	r4, r1
 800cb92:	6831      	ldr	r1, [r6, #0]
 800cb94:	4605      	mov	r5, r0
 800cb96:	b911      	cbnz	r1, 800cb9e <sbrk_aligned+0x12>
 800cb98:	f000 fe96 	bl	800d8c8 <_sbrk_r>
 800cb9c:	6030      	str	r0, [r6, #0]
 800cb9e:	4621      	mov	r1, r4
 800cba0:	4628      	mov	r0, r5
 800cba2:	f000 fe91 	bl	800d8c8 <_sbrk_r>
 800cba6:	1c43      	adds	r3, r0, #1
 800cba8:	d00a      	beq.n	800cbc0 <sbrk_aligned+0x34>
 800cbaa:	1cc4      	adds	r4, r0, #3
 800cbac:	f024 0403 	bic.w	r4, r4, #3
 800cbb0:	42a0      	cmp	r0, r4
 800cbb2:	d007      	beq.n	800cbc4 <sbrk_aligned+0x38>
 800cbb4:	1a21      	subs	r1, r4, r0
 800cbb6:	4628      	mov	r0, r5
 800cbb8:	f000 fe86 	bl	800d8c8 <_sbrk_r>
 800cbbc:	3001      	adds	r0, #1
 800cbbe:	d101      	bne.n	800cbc4 <sbrk_aligned+0x38>
 800cbc0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cbc4:	4620      	mov	r0, r4
 800cbc6:	bd70      	pop	{r4, r5, r6, pc}
 800cbc8:	20004df8 	.word	0x20004df8

0800cbcc <_malloc_r>:
 800cbcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbd0:	1ccd      	adds	r5, r1, #3
 800cbd2:	f025 0503 	bic.w	r5, r5, #3
 800cbd6:	3508      	adds	r5, #8
 800cbd8:	2d0c      	cmp	r5, #12
 800cbda:	bf38      	it	cc
 800cbdc:	250c      	movcc	r5, #12
 800cbde:	2d00      	cmp	r5, #0
 800cbe0:	4607      	mov	r7, r0
 800cbe2:	db01      	blt.n	800cbe8 <_malloc_r+0x1c>
 800cbe4:	42a9      	cmp	r1, r5
 800cbe6:	d905      	bls.n	800cbf4 <_malloc_r+0x28>
 800cbe8:	230c      	movs	r3, #12
 800cbea:	603b      	str	r3, [r7, #0]
 800cbec:	2600      	movs	r6, #0
 800cbee:	4630      	mov	r0, r6
 800cbf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbf4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ccc8 <_malloc_r+0xfc>
 800cbf8:	f000 f868 	bl	800cccc <__malloc_lock>
 800cbfc:	f8d8 3000 	ldr.w	r3, [r8]
 800cc00:	461c      	mov	r4, r3
 800cc02:	bb5c      	cbnz	r4, 800cc5c <_malloc_r+0x90>
 800cc04:	4629      	mov	r1, r5
 800cc06:	4638      	mov	r0, r7
 800cc08:	f7ff ffc0 	bl	800cb8c <sbrk_aligned>
 800cc0c:	1c43      	adds	r3, r0, #1
 800cc0e:	4604      	mov	r4, r0
 800cc10:	d155      	bne.n	800ccbe <_malloc_r+0xf2>
 800cc12:	f8d8 4000 	ldr.w	r4, [r8]
 800cc16:	4626      	mov	r6, r4
 800cc18:	2e00      	cmp	r6, #0
 800cc1a:	d145      	bne.n	800cca8 <_malloc_r+0xdc>
 800cc1c:	2c00      	cmp	r4, #0
 800cc1e:	d048      	beq.n	800ccb2 <_malloc_r+0xe6>
 800cc20:	6823      	ldr	r3, [r4, #0]
 800cc22:	4631      	mov	r1, r6
 800cc24:	4638      	mov	r0, r7
 800cc26:	eb04 0903 	add.w	r9, r4, r3
 800cc2a:	f000 fe4d 	bl	800d8c8 <_sbrk_r>
 800cc2e:	4581      	cmp	r9, r0
 800cc30:	d13f      	bne.n	800ccb2 <_malloc_r+0xe6>
 800cc32:	6821      	ldr	r1, [r4, #0]
 800cc34:	1a6d      	subs	r5, r5, r1
 800cc36:	4629      	mov	r1, r5
 800cc38:	4638      	mov	r0, r7
 800cc3a:	f7ff ffa7 	bl	800cb8c <sbrk_aligned>
 800cc3e:	3001      	adds	r0, #1
 800cc40:	d037      	beq.n	800ccb2 <_malloc_r+0xe6>
 800cc42:	6823      	ldr	r3, [r4, #0]
 800cc44:	442b      	add	r3, r5
 800cc46:	6023      	str	r3, [r4, #0]
 800cc48:	f8d8 3000 	ldr.w	r3, [r8]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d038      	beq.n	800ccc2 <_malloc_r+0xf6>
 800cc50:	685a      	ldr	r2, [r3, #4]
 800cc52:	42a2      	cmp	r2, r4
 800cc54:	d12b      	bne.n	800ccae <_malloc_r+0xe2>
 800cc56:	2200      	movs	r2, #0
 800cc58:	605a      	str	r2, [r3, #4]
 800cc5a:	e00f      	b.n	800cc7c <_malloc_r+0xb0>
 800cc5c:	6822      	ldr	r2, [r4, #0]
 800cc5e:	1b52      	subs	r2, r2, r5
 800cc60:	d41f      	bmi.n	800cca2 <_malloc_r+0xd6>
 800cc62:	2a0b      	cmp	r2, #11
 800cc64:	d917      	bls.n	800cc96 <_malloc_r+0xca>
 800cc66:	1961      	adds	r1, r4, r5
 800cc68:	42a3      	cmp	r3, r4
 800cc6a:	6025      	str	r5, [r4, #0]
 800cc6c:	bf18      	it	ne
 800cc6e:	6059      	strne	r1, [r3, #4]
 800cc70:	6863      	ldr	r3, [r4, #4]
 800cc72:	bf08      	it	eq
 800cc74:	f8c8 1000 	streq.w	r1, [r8]
 800cc78:	5162      	str	r2, [r4, r5]
 800cc7a:	604b      	str	r3, [r1, #4]
 800cc7c:	4638      	mov	r0, r7
 800cc7e:	f104 060b 	add.w	r6, r4, #11
 800cc82:	f000 f829 	bl	800ccd8 <__malloc_unlock>
 800cc86:	f026 0607 	bic.w	r6, r6, #7
 800cc8a:	1d23      	adds	r3, r4, #4
 800cc8c:	1af2      	subs	r2, r6, r3
 800cc8e:	d0ae      	beq.n	800cbee <_malloc_r+0x22>
 800cc90:	1b9b      	subs	r3, r3, r6
 800cc92:	50a3      	str	r3, [r4, r2]
 800cc94:	e7ab      	b.n	800cbee <_malloc_r+0x22>
 800cc96:	42a3      	cmp	r3, r4
 800cc98:	6862      	ldr	r2, [r4, #4]
 800cc9a:	d1dd      	bne.n	800cc58 <_malloc_r+0x8c>
 800cc9c:	f8c8 2000 	str.w	r2, [r8]
 800cca0:	e7ec      	b.n	800cc7c <_malloc_r+0xb0>
 800cca2:	4623      	mov	r3, r4
 800cca4:	6864      	ldr	r4, [r4, #4]
 800cca6:	e7ac      	b.n	800cc02 <_malloc_r+0x36>
 800cca8:	4634      	mov	r4, r6
 800ccaa:	6876      	ldr	r6, [r6, #4]
 800ccac:	e7b4      	b.n	800cc18 <_malloc_r+0x4c>
 800ccae:	4613      	mov	r3, r2
 800ccb0:	e7cc      	b.n	800cc4c <_malloc_r+0x80>
 800ccb2:	230c      	movs	r3, #12
 800ccb4:	603b      	str	r3, [r7, #0]
 800ccb6:	4638      	mov	r0, r7
 800ccb8:	f000 f80e 	bl	800ccd8 <__malloc_unlock>
 800ccbc:	e797      	b.n	800cbee <_malloc_r+0x22>
 800ccbe:	6025      	str	r5, [r4, #0]
 800ccc0:	e7dc      	b.n	800cc7c <_malloc_r+0xb0>
 800ccc2:	605b      	str	r3, [r3, #4]
 800ccc4:	deff      	udf	#255	; 0xff
 800ccc6:	bf00      	nop
 800ccc8:	20004df4 	.word	0x20004df4

0800cccc <__malloc_lock>:
 800cccc:	4801      	ldr	r0, [pc, #4]	; (800ccd4 <__malloc_lock+0x8>)
 800ccce:	f7ff b87c 	b.w	800bdca <__retarget_lock_acquire_recursive>
 800ccd2:	bf00      	nop
 800ccd4:	20004df0 	.word	0x20004df0

0800ccd8 <__malloc_unlock>:
 800ccd8:	4801      	ldr	r0, [pc, #4]	; (800cce0 <__malloc_unlock+0x8>)
 800ccda:	f7ff b877 	b.w	800bdcc <__retarget_lock_release_recursive>
 800ccde:	bf00      	nop
 800cce0:	20004df0 	.word	0x20004df0

0800cce4 <_Balloc>:
 800cce4:	b570      	push	{r4, r5, r6, lr}
 800cce6:	69c6      	ldr	r6, [r0, #28]
 800cce8:	4604      	mov	r4, r0
 800ccea:	460d      	mov	r5, r1
 800ccec:	b976      	cbnz	r6, 800cd0c <_Balloc+0x28>
 800ccee:	2010      	movs	r0, #16
 800ccf0:	f7ff ff44 	bl	800cb7c <malloc>
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	61e0      	str	r0, [r4, #28]
 800ccf8:	b920      	cbnz	r0, 800cd04 <_Balloc+0x20>
 800ccfa:	4b18      	ldr	r3, [pc, #96]	; (800cd5c <_Balloc+0x78>)
 800ccfc:	4818      	ldr	r0, [pc, #96]	; (800cd60 <_Balloc+0x7c>)
 800ccfe:	216b      	movs	r1, #107	; 0x6b
 800cd00:	f000 fdf2 	bl	800d8e8 <__assert_func>
 800cd04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd08:	6006      	str	r6, [r0, #0]
 800cd0a:	60c6      	str	r6, [r0, #12]
 800cd0c:	69e6      	ldr	r6, [r4, #28]
 800cd0e:	68f3      	ldr	r3, [r6, #12]
 800cd10:	b183      	cbz	r3, 800cd34 <_Balloc+0x50>
 800cd12:	69e3      	ldr	r3, [r4, #28]
 800cd14:	68db      	ldr	r3, [r3, #12]
 800cd16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cd1a:	b9b8      	cbnz	r0, 800cd4c <_Balloc+0x68>
 800cd1c:	2101      	movs	r1, #1
 800cd1e:	fa01 f605 	lsl.w	r6, r1, r5
 800cd22:	1d72      	adds	r2, r6, #5
 800cd24:	0092      	lsls	r2, r2, #2
 800cd26:	4620      	mov	r0, r4
 800cd28:	f000 fdfc 	bl	800d924 <_calloc_r>
 800cd2c:	b160      	cbz	r0, 800cd48 <_Balloc+0x64>
 800cd2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cd32:	e00e      	b.n	800cd52 <_Balloc+0x6e>
 800cd34:	2221      	movs	r2, #33	; 0x21
 800cd36:	2104      	movs	r1, #4
 800cd38:	4620      	mov	r0, r4
 800cd3a:	f000 fdf3 	bl	800d924 <_calloc_r>
 800cd3e:	69e3      	ldr	r3, [r4, #28]
 800cd40:	60f0      	str	r0, [r6, #12]
 800cd42:	68db      	ldr	r3, [r3, #12]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d1e4      	bne.n	800cd12 <_Balloc+0x2e>
 800cd48:	2000      	movs	r0, #0
 800cd4a:	bd70      	pop	{r4, r5, r6, pc}
 800cd4c:	6802      	ldr	r2, [r0, #0]
 800cd4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cd52:	2300      	movs	r3, #0
 800cd54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cd58:	e7f7      	b.n	800cd4a <_Balloc+0x66>
 800cd5a:	bf00      	nop
 800cd5c:	0801fdc5 	.word	0x0801fdc5
 800cd60:	0801fe45 	.word	0x0801fe45

0800cd64 <_Bfree>:
 800cd64:	b570      	push	{r4, r5, r6, lr}
 800cd66:	69c6      	ldr	r6, [r0, #28]
 800cd68:	4605      	mov	r5, r0
 800cd6a:	460c      	mov	r4, r1
 800cd6c:	b976      	cbnz	r6, 800cd8c <_Bfree+0x28>
 800cd6e:	2010      	movs	r0, #16
 800cd70:	f7ff ff04 	bl	800cb7c <malloc>
 800cd74:	4602      	mov	r2, r0
 800cd76:	61e8      	str	r0, [r5, #28]
 800cd78:	b920      	cbnz	r0, 800cd84 <_Bfree+0x20>
 800cd7a:	4b09      	ldr	r3, [pc, #36]	; (800cda0 <_Bfree+0x3c>)
 800cd7c:	4809      	ldr	r0, [pc, #36]	; (800cda4 <_Bfree+0x40>)
 800cd7e:	218f      	movs	r1, #143	; 0x8f
 800cd80:	f000 fdb2 	bl	800d8e8 <__assert_func>
 800cd84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd88:	6006      	str	r6, [r0, #0]
 800cd8a:	60c6      	str	r6, [r0, #12]
 800cd8c:	b13c      	cbz	r4, 800cd9e <_Bfree+0x3a>
 800cd8e:	69eb      	ldr	r3, [r5, #28]
 800cd90:	6862      	ldr	r2, [r4, #4]
 800cd92:	68db      	ldr	r3, [r3, #12]
 800cd94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd98:	6021      	str	r1, [r4, #0]
 800cd9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cd9e:	bd70      	pop	{r4, r5, r6, pc}
 800cda0:	0801fdc5 	.word	0x0801fdc5
 800cda4:	0801fe45 	.word	0x0801fe45

0800cda8 <__multadd>:
 800cda8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdac:	690d      	ldr	r5, [r1, #16]
 800cdae:	4607      	mov	r7, r0
 800cdb0:	460c      	mov	r4, r1
 800cdb2:	461e      	mov	r6, r3
 800cdb4:	f101 0c14 	add.w	ip, r1, #20
 800cdb8:	2000      	movs	r0, #0
 800cdba:	f8dc 3000 	ldr.w	r3, [ip]
 800cdbe:	b299      	uxth	r1, r3
 800cdc0:	fb02 6101 	mla	r1, r2, r1, r6
 800cdc4:	0c1e      	lsrs	r6, r3, #16
 800cdc6:	0c0b      	lsrs	r3, r1, #16
 800cdc8:	fb02 3306 	mla	r3, r2, r6, r3
 800cdcc:	b289      	uxth	r1, r1
 800cdce:	3001      	adds	r0, #1
 800cdd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cdd4:	4285      	cmp	r5, r0
 800cdd6:	f84c 1b04 	str.w	r1, [ip], #4
 800cdda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cdde:	dcec      	bgt.n	800cdba <__multadd+0x12>
 800cde0:	b30e      	cbz	r6, 800ce26 <__multadd+0x7e>
 800cde2:	68a3      	ldr	r3, [r4, #8]
 800cde4:	42ab      	cmp	r3, r5
 800cde6:	dc19      	bgt.n	800ce1c <__multadd+0x74>
 800cde8:	6861      	ldr	r1, [r4, #4]
 800cdea:	4638      	mov	r0, r7
 800cdec:	3101      	adds	r1, #1
 800cdee:	f7ff ff79 	bl	800cce4 <_Balloc>
 800cdf2:	4680      	mov	r8, r0
 800cdf4:	b928      	cbnz	r0, 800ce02 <__multadd+0x5a>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	4b0c      	ldr	r3, [pc, #48]	; (800ce2c <__multadd+0x84>)
 800cdfa:	480d      	ldr	r0, [pc, #52]	; (800ce30 <__multadd+0x88>)
 800cdfc:	21ba      	movs	r1, #186	; 0xba
 800cdfe:	f000 fd73 	bl	800d8e8 <__assert_func>
 800ce02:	6922      	ldr	r2, [r4, #16]
 800ce04:	3202      	adds	r2, #2
 800ce06:	f104 010c 	add.w	r1, r4, #12
 800ce0a:	0092      	lsls	r2, r2, #2
 800ce0c:	300c      	adds	r0, #12
 800ce0e:	f7fe ffde 	bl	800bdce <memcpy>
 800ce12:	4621      	mov	r1, r4
 800ce14:	4638      	mov	r0, r7
 800ce16:	f7ff ffa5 	bl	800cd64 <_Bfree>
 800ce1a:	4644      	mov	r4, r8
 800ce1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ce20:	3501      	adds	r5, #1
 800ce22:	615e      	str	r6, [r3, #20]
 800ce24:	6125      	str	r5, [r4, #16]
 800ce26:	4620      	mov	r0, r4
 800ce28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce2c:	0801fe34 	.word	0x0801fe34
 800ce30:	0801fe45 	.word	0x0801fe45

0800ce34 <__hi0bits>:
 800ce34:	0c03      	lsrs	r3, r0, #16
 800ce36:	041b      	lsls	r3, r3, #16
 800ce38:	b9d3      	cbnz	r3, 800ce70 <__hi0bits+0x3c>
 800ce3a:	0400      	lsls	r0, r0, #16
 800ce3c:	2310      	movs	r3, #16
 800ce3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ce42:	bf04      	itt	eq
 800ce44:	0200      	lsleq	r0, r0, #8
 800ce46:	3308      	addeq	r3, #8
 800ce48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ce4c:	bf04      	itt	eq
 800ce4e:	0100      	lsleq	r0, r0, #4
 800ce50:	3304      	addeq	r3, #4
 800ce52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ce56:	bf04      	itt	eq
 800ce58:	0080      	lsleq	r0, r0, #2
 800ce5a:	3302      	addeq	r3, #2
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	db05      	blt.n	800ce6c <__hi0bits+0x38>
 800ce60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ce64:	f103 0301 	add.w	r3, r3, #1
 800ce68:	bf08      	it	eq
 800ce6a:	2320      	moveq	r3, #32
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	4770      	bx	lr
 800ce70:	2300      	movs	r3, #0
 800ce72:	e7e4      	b.n	800ce3e <__hi0bits+0xa>

0800ce74 <__lo0bits>:
 800ce74:	6803      	ldr	r3, [r0, #0]
 800ce76:	f013 0207 	ands.w	r2, r3, #7
 800ce7a:	d00c      	beq.n	800ce96 <__lo0bits+0x22>
 800ce7c:	07d9      	lsls	r1, r3, #31
 800ce7e:	d422      	bmi.n	800cec6 <__lo0bits+0x52>
 800ce80:	079a      	lsls	r2, r3, #30
 800ce82:	bf49      	itett	mi
 800ce84:	085b      	lsrmi	r3, r3, #1
 800ce86:	089b      	lsrpl	r3, r3, #2
 800ce88:	6003      	strmi	r3, [r0, #0]
 800ce8a:	2201      	movmi	r2, #1
 800ce8c:	bf5c      	itt	pl
 800ce8e:	6003      	strpl	r3, [r0, #0]
 800ce90:	2202      	movpl	r2, #2
 800ce92:	4610      	mov	r0, r2
 800ce94:	4770      	bx	lr
 800ce96:	b299      	uxth	r1, r3
 800ce98:	b909      	cbnz	r1, 800ce9e <__lo0bits+0x2a>
 800ce9a:	0c1b      	lsrs	r3, r3, #16
 800ce9c:	2210      	movs	r2, #16
 800ce9e:	b2d9      	uxtb	r1, r3
 800cea0:	b909      	cbnz	r1, 800cea6 <__lo0bits+0x32>
 800cea2:	3208      	adds	r2, #8
 800cea4:	0a1b      	lsrs	r3, r3, #8
 800cea6:	0719      	lsls	r1, r3, #28
 800cea8:	bf04      	itt	eq
 800ceaa:	091b      	lsreq	r3, r3, #4
 800ceac:	3204      	addeq	r2, #4
 800ceae:	0799      	lsls	r1, r3, #30
 800ceb0:	bf04      	itt	eq
 800ceb2:	089b      	lsreq	r3, r3, #2
 800ceb4:	3202      	addeq	r2, #2
 800ceb6:	07d9      	lsls	r1, r3, #31
 800ceb8:	d403      	bmi.n	800cec2 <__lo0bits+0x4e>
 800ceba:	085b      	lsrs	r3, r3, #1
 800cebc:	f102 0201 	add.w	r2, r2, #1
 800cec0:	d003      	beq.n	800ceca <__lo0bits+0x56>
 800cec2:	6003      	str	r3, [r0, #0]
 800cec4:	e7e5      	b.n	800ce92 <__lo0bits+0x1e>
 800cec6:	2200      	movs	r2, #0
 800cec8:	e7e3      	b.n	800ce92 <__lo0bits+0x1e>
 800ceca:	2220      	movs	r2, #32
 800cecc:	e7e1      	b.n	800ce92 <__lo0bits+0x1e>
	...

0800ced0 <__i2b>:
 800ced0:	b510      	push	{r4, lr}
 800ced2:	460c      	mov	r4, r1
 800ced4:	2101      	movs	r1, #1
 800ced6:	f7ff ff05 	bl	800cce4 <_Balloc>
 800ceda:	4602      	mov	r2, r0
 800cedc:	b928      	cbnz	r0, 800ceea <__i2b+0x1a>
 800cede:	4b05      	ldr	r3, [pc, #20]	; (800cef4 <__i2b+0x24>)
 800cee0:	4805      	ldr	r0, [pc, #20]	; (800cef8 <__i2b+0x28>)
 800cee2:	f240 1145 	movw	r1, #325	; 0x145
 800cee6:	f000 fcff 	bl	800d8e8 <__assert_func>
 800ceea:	2301      	movs	r3, #1
 800ceec:	6144      	str	r4, [r0, #20]
 800ceee:	6103      	str	r3, [r0, #16]
 800cef0:	bd10      	pop	{r4, pc}
 800cef2:	bf00      	nop
 800cef4:	0801fe34 	.word	0x0801fe34
 800cef8:	0801fe45 	.word	0x0801fe45

0800cefc <__multiply>:
 800cefc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf00:	4691      	mov	r9, r2
 800cf02:	690a      	ldr	r2, [r1, #16]
 800cf04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	bfb8      	it	lt
 800cf0c:	460b      	movlt	r3, r1
 800cf0e:	460c      	mov	r4, r1
 800cf10:	bfbc      	itt	lt
 800cf12:	464c      	movlt	r4, r9
 800cf14:	4699      	movlt	r9, r3
 800cf16:	6927      	ldr	r7, [r4, #16]
 800cf18:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cf1c:	68a3      	ldr	r3, [r4, #8]
 800cf1e:	6861      	ldr	r1, [r4, #4]
 800cf20:	eb07 060a 	add.w	r6, r7, sl
 800cf24:	42b3      	cmp	r3, r6
 800cf26:	b085      	sub	sp, #20
 800cf28:	bfb8      	it	lt
 800cf2a:	3101      	addlt	r1, #1
 800cf2c:	f7ff feda 	bl	800cce4 <_Balloc>
 800cf30:	b930      	cbnz	r0, 800cf40 <__multiply+0x44>
 800cf32:	4602      	mov	r2, r0
 800cf34:	4b44      	ldr	r3, [pc, #272]	; (800d048 <__multiply+0x14c>)
 800cf36:	4845      	ldr	r0, [pc, #276]	; (800d04c <__multiply+0x150>)
 800cf38:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800cf3c:	f000 fcd4 	bl	800d8e8 <__assert_func>
 800cf40:	f100 0514 	add.w	r5, r0, #20
 800cf44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cf48:	462b      	mov	r3, r5
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	4543      	cmp	r3, r8
 800cf4e:	d321      	bcc.n	800cf94 <__multiply+0x98>
 800cf50:	f104 0314 	add.w	r3, r4, #20
 800cf54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cf58:	f109 0314 	add.w	r3, r9, #20
 800cf5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cf60:	9202      	str	r2, [sp, #8]
 800cf62:	1b3a      	subs	r2, r7, r4
 800cf64:	3a15      	subs	r2, #21
 800cf66:	f022 0203 	bic.w	r2, r2, #3
 800cf6a:	3204      	adds	r2, #4
 800cf6c:	f104 0115 	add.w	r1, r4, #21
 800cf70:	428f      	cmp	r7, r1
 800cf72:	bf38      	it	cc
 800cf74:	2204      	movcc	r2, #4
 800cf76:	9201      	str	r2, [sp, #4]
 800cf78:	9a02      	ldr	r2, [sp, #8]
 800cf7a:	9303      	str	r3, [sp, #12]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d80c      	bhi.n	800cf9a <__multiply+0x9e>
 800cf80:	2e00      	cmp	r6, #0
 800cf82:	dd03      	ble.n	800cf8c <__multiply+0x90>
 800cf84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d05b      	beq.n	800d044 <__multiply+0x148>
 800cf8c:	6106      	str	r6, [r0, #16]
 800cf8e:	b005      	add	sp, #20
 800cf90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf94:	f843 2b04 	str.w	r2, [r3], #4
 800cf98:	e7d8      	b.n	800cf4c <__multiply+0x50>
 800cf9a:	f8b3 a000 	ldrh.w	sl, [r3]
 800cf9e:	f1ba 0f00 	cmp.w	sl, #0
 800cfa2:	d024      	beq.n	800cfee <__multiply+0xf2>
 800cfa4:	f104 0e14 	add.w	lr, r4, #20
 800cfa8:	46a9      	mov	r9, r5
 800cfaa:	f04f 0c00 	mov.w	ip, #0
 800cfae:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cfb2:	f8d9 1000 	ldr.w	r1, [r9]
 800cfb6:	fa1f fb82 	uxth.w	fp, r2
 800cfba:	b289      	uxth	r1, r1
 800cfbc:	fb0a 110b 	mla	r1, sl, fp, r1
 800cfc0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cfc4:	f8d9 2000 	ldr.w	r2, [r9]
 800cfc8:	4461      	add	r1, ip
 800cfca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cfce:	fb0a c20b 	mla	r2, sl, fp, ip
 800cfd2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cfd6:	b289      	uxth	r1, r1
 800cfd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cfdc:	4577      	cmp	r7, lr
 800cfde:	f849 1b04 	str.w	r1, [r9], #4
 800cfe2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cfe6:	d8e2      	bhi.n	800cfae <__multiply+0xb2>
 800cfe8:	9a01      	ldr	r2, [sp, #4]
 800cfea:	f845 c002 	str.w	ip, [r5, r2]
 800cfee:	9a03      	ldr	r2, [sp, #12]
 800cff0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cff4:	3304      	adds	r3, #4
 800cff6:	f1b9 0f00 	cmp.w	r9, #0
 800cffa:	d021      	beq.n	800d040 <__multiply+0x144>
 800cffc:	6829      	ldr	r1, [r5, #0]
 800cffe:	f104 0c14 	add.w	ip, r4, #20
 800d002:	46ae      	mov	lr, r5
 800d004:	f04f 0a00 	mov.w	sl, #0
 800d008:	f8bc b000 	ldrh.w	fp, [ip]
 800d00c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d010:	fb09 220b 	mla	r2, r9, fp, r2
 800d014:	4452      	add	r2, sl
 800d016:	b289      	uxth	r1, r1
 800d018:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d01c:	f84e 1b04 	str.w	r1, [lr], #4
 800d020:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d024:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d028:	f8be 1000 	ldrh.w	r1, [lr]
 800d02c:	fb09 110a 	mla	r1, r9, sl, r1
 800d030:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d034:	4567      	cmp	r7, ip
 800d036:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d03a:	d8e5      	bhi.n	800d008 <__multiply+0x10c>
 800d03c:	9a01      	ldr	r2, [sp, #4]
 800d03e:	50a9      	str	r1, [r5, r2]
 800d040:	3504      	adds	r5, #4
 800d042:	e799      	b.n	800cf78 <__multiply+0x7c>
 800d044:	3e01      	subs	r6, #1
 800d046:	e79b      	b.n	800cf80 <__multiply+0x84>
 800d048:	0801fe34 	.word	0x0801fe34
 800d04c:	0801fe45 	.word	0x0801fe45

0800d050 <__pow5mult>:
 800d050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d054:	4615      	mov	r5, r2
 800d056:	f012 0203 	ands.w	r2, r2, #3
 800d05a:	4606      	mov	r6, r0
 800d05c:	460f      	mov	r7, r1
 800d05e:	d007      	beq.n	800d070 <__pow5mult+0x20>
 800d060:	4c25      	ldr	r4, [pc, #148]	; (800d0f8 <__pow5mult+0xa8>)
 800d062:	3a01      	subs	r2, #1
 800d064:	2300      	movs	r3, #0
 800d066:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d06a:	f7ff fe9d 	bl	800cda8 <__multadd>
 800d06e:	4607      	mov	r7, r0
 800d070:	10ad      	asrs	r5, r5, #2
 800d072:	d03d      	beq.n	800d0f0 <__pow5mult+0xa0>
 800d074:	69f4      	ldr	r4, [r6, #28]
 800d076:	b97c      	cbnz	r4, 800d098 <__pow5mult+0x48>
 800d078:	2010      	movs	r0, #16
 800d07a:	f7ff fd7f 	bl	800cb7c <malloc>
 800d07e:	4602      	mov	r2, r0
 800d080:	61f0      	str	r0, [r6, #28]
 800d082:	b928      	cbnz	r0, 800d090 <__pow5mult+0x40>
 800d084:	4b1d      	ldr	r3, [pc, #116]	; (800d0fc <__pow5mult+0xac>)
 800d086:	481e      	ldr	r0, [pc, #120]	; (800d100 <__pow5mult+0xb0>)
 800d088:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d08c:	f000 fc2c 	bl	800d8e8 <__assert_func>
 800d090:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d094:	6004      	str	r4, [r0, #0]
 800d096:	60c4      	str	r4, [r0, #12]
 800d098:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d09c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d0a0:	b94c      	cbnz	r4, 800d0b6 <__pow5mult+0x66>
 800d0a2:	f240 2171 	movw	r1, #625	; 0x271
 800d0a6:	4630      	mov	r0, r6
 800d0a8:	f7ff ff12 	bl	800ced0 <__i2b>
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800d0b2:	4604      	mov	r4, r0
 800d0b4:	6003      	str	r3, [r0, #0]
 800d0b6:	f04f 0900 	mov.w	r9, #0
 800d0ba:	07eb      	lsls	r3, r5, #31
 800d0bc:	d50a      	bpl.n	800d0d4 <__pow5mult+0x84>
 800d0be:	4639      	mov	r1, r7
 800d0c0:	4622      	mov	r2, r4
 800d0c2:	4630      	mov	r0, r6
 800d0c4:	f7ff ff1a 	bl	800cefc <__multiply>
 800d0c8:	4639      	mov	r1, r7
 800d0ca:	4680      	mov	r8, r0
 800d0cc:	4630      	mov	r0, r6
 800d0ce:	f7ff fe49 	bl	800cd64 <_Bfree>
 800d0d2:	4647      	mov	r7, r8
 800d0d4:	106d      	asrs	r5, r5, #1
 800d0d6:	d00b      	beq.n	800d0f0 <__pow5mult+0xa0>
 800d0d8:	6820      	ldr	r0, [r4, #0]
 800d0da:	b938      	cbnz	r0, 800d0ec <__pow5mult+0x9c>
 800d0dc:	4622      	mov	r2, r4
 800d0de:	4621      	mov	r1, r4
 800d0e0:	4630      	mov	r0, r6
 800d0e2:	f7ff ff0b 	bl	800cefc <__multiply>
 800d0e6:	6020      	str	r0, [r4, #0]
 800d0e8:	f8c0 9000 	str.w	r9, [r0]
 800d0ec:	4604      	mov	r4, r0
 800d0ee:	e7e4      	b.n	800d0ba <__pow5mult+0x6a>
 800d0f0:	4638      	mov	r0, r7
 800d0f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0f6:	bf00      	nop
 800d0f8:	0801ff90 	.word	0x0801ff90
 800d0fc:	0801fdc5 	.word	0x0801fdc5
 800d100:	0801fe45 	.word	0x0801fe45

0800d104 <__lshift>:
 800d104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d108:	460c      	mov	r4, r1
 800d10a:	6849      	ldr	r1, [r1, #4]
 800d10c:	6923      	ldr	r3, [r4, #16]
 800d10e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d112:	68a3      	ldr	r3, [r4, #8]
 800d114:	4607      	mov	r7, r0
 800d116:	4691      	mov	r9, r2
 800d118:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d11c:	f108 0601 	add.w	r6, r8, #1
 800d120:	42b3      	cmp	r3, r6
 800d122:	db0b      	blt.n	800d13c <__lshift+0x38>
 800d124:	4638      	mov	r0, r7
 800d126:	f7ff fddd 	bl	800cce4 <_Balloc>
 800d12a:	4605      	mov	r5, r0
 800d12c:	b948      	cbnz	r0, 800d142 <__lshift+0x3e>
 800d12e:	4602      	mov	r2, r0
 800d130:	4b28      	ldr	r3, [pc, #160]	; (800d1d4 <__lshift+0xd0>)
 800d132:	4829      	ldr	r0, [pc, #164]	; (800d1d8 <__lshift+0xd4>)
 800d134:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d138:	f000 fbd6 	bl	800d8e8 <__assert_func>
 800d13c:	3101      	adds	r1, #1
 800d13e:	005b      	lsls	r3, r3, #1
 800d140:	e7ee      	b.n	800d120 <__lshift+0x1c>
 800d142:	2300      	movs	r3, #0
 800d144:	f100 0114 	add.w	r1, r0, #20
 800d148:	f100 0210 	add.w	r2, r0, #16
 800d14c:	4618      	mov	r0, r3
 800d14e:	4553      	cmp	r3, sl
 800d150:	db33      	blt.n	800d1ba <__lshift+0xb6>
 800d152:	6920      	ldr	r0, [r4, #16]
 800d154:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d158:	f104 0314 	add.w	r3, r4, #20
 800d15c:	f019 091f 	ands.w	r9, r9, #31
 800d160:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d164:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d168:	d02b      	beq.n	800d1c2 <__lshift+0xbe>
 800d16a:	f1c9 0e20 	rsb	lr, r9, #32
 800d16e:	468a      	mov	sl, r1
 800d170:	2200      	movs	r2, #0
 800d172:	6818      	ldr	r0, [r3, #0]
 800d174:	fa00 f009 	lsl.w	r0, r0, r9
 800d178:	4310      	orrs	r0, r2
 800d17a:	f84a 0b04 	str.w	r0, [sl], #4
 800d17e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d182:	459c      	cmp	ip, r3
 800d184:	fa22 f20e 	lsr.w	r2, r2, lr
 800d188:	d8f3      	bhi.n	800d172 <__lshift+0x6e>
 800d18a:	ebac 0304 	sub.w	r3, ip, r4
 800d18e:	3b15      	subs	r3, #21
 800d190:	f023 0303 	bic.w	r3, r3, #3
 800d194:	3304      	adds	r3, #4
 800d196:	f104 0015 	add.w	r0, r4, #21
 800d19a:	4584      	cmp	ip, r0
 800d19c:	bf38      	it	cc
 800d19e:	2304      	movcc	r3, #4
 800d1a0:	50ca      	str	r2, [r1, r3]
 800d1a2:	b10a      	cbz	r2, 800d1a8 <__lshift+0xa4>
 800d1a4:	f108 0602 	add.w	r6, r8, #2
 800d1a8:	3e01      	subs	r6, #1
 800d1aa:	4638      	mov	r0, r7
 800d1ac:	612e      	str	r6, [r5, #16]
 800d1ae:	4621      	mov	r1, r4
 800d1b0:	f7ff fdd8 	bl	800cd64 <_Bfree>
 800d1b4:	4628      	mov	r0, r5
 800d1b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800d1be:	3301      	adds	r3, #1
 800d1c0:	e7c5      	b.n	800d14e <__lshift+0x4a>
 800d1c2:	3904      	subs	r1, #4
 800d1c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d1cc:	459c      	cmp	ip, r3
 800d1ce:	d8f9      	bhi.n	800d1c4 <__lshift+0xc0>
 800d1d0:	e7ea      	b.n	800d1a8 <__lshift+0xa4>
 800d1d2:	bf00      	nop
 800d1d4:	0801fe34 	.word	0x0801fe34
 800d1d8:	0801fe45 	.word	0x0801fe45

0800d1dc <__mcmp>:
 800d1dc:	b530      	push	{r4, r5, lr}
 800d1de:	6902      	ldr	r2, [r0, #16]
 800d1e0:	690c      	ldr	r4, [r1, #16]
 800d1e2:	1b12      	subs	r2, r2, r4
 800d1e4:	d10e      	bne.n	800d204 <__mcmp+0x28>
 800d1e6:	f100 0314 	add.w	r3, r0, #20
 800d1ea:	3114      	adds	r1, #20
 800d1ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d1f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d1f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d1f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d1fc:	42a5      	cmp	r5, r4
 800d1fe:	d003      	beq.n	800d208 <__mcmp+0x2c>
 800d200:	d305      	bcc.n	800d20e <__mcmp+0x32>
 800d202:	2201      	movs	r2, #1
 800d204:	4610      	mov	r0, r2
 800d206:	bd30      	pop	{r4, r5, pc}
 800d208:	4283      	cmp	r3, r0
 800d20a:	d3f3      	bcc.n	800d1f4 <__mcmp+0x18>
 800d20c:	e7fa      	b.n	800d204 <__mcmp+0x28>
 800d20e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d212:	e7f7      	b.n	800d204 <__mcmp+0x28>

0800d214 <__mdiff>:
 800d214:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d218:	460c      	mov	r4, r1
 800d21a:	4606      	mov	r6, r0
 800d21c:	4611      	mov	r1, r2
 800d21e:	4620      	mov	r0, r4
 800d220:	4690      	mov	r8, r2
 800d222:	f7ff ffdb 	bl	800d1dc <__mcmp>
 800d226:	1e05      	subs	r5, r0, #0
 800d228:	d110      	bne.n	800d24c <__mdiff+0x38>
 800d22a:	4629      	mov	r1, r5
 800d22c:	4630      	mov	r0, r6
 800d22e:	f7ff fd59 	bl	800cce4 <_Balloc>
 800d232:	b930      	cbnz	r0, 800d242 <__mdiff+0x2e>
 800d234:	4b3a      	ldr	r3, [pc, #232]	; (800d320 <__mdiff+0x10c>)
 800d236:	4602      	mov	r2, r0
 800d238:	f240 2137 	movw	r1, #567	; 0x237
 800d23c:	4839      	ldr	r0, [pc, #228]	; (800d324 <__mdiff+0x110>)
 800d23e:	f000 fb53 	bl	800d8e8 <__assert_func>
 800d242:	2301      	movs	r3, #1
 800d244:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d248:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d24c:	bfa4      	itt	ge
 800d24e:	4643      	movge	r3, r8
 800d250:	46a0      	movge	r8, r4
 800d252:	4630      	mov	r0, r6
 800d254:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d258:	bfa6      	itte	ge
 800d25a:	461c      	movge	r4, r3
 800d25c:	2500      	movge	r5, #0
 800d25e:	2501      	movlt	r5, #1
 800d260:	f7ff fd40 	bl	800cce4 <_Balloc>
 800d264:	b920      	cbnz	r0, 800d270 <__mdiff+0x5c>
 800d266:	4b2e      	ldr	r3, [pc, #184]	; (800d320 <__mdiff+0x10c>)
 800d268:	4602      	mov	r2, r0
 800d26a:	f240 2145 	movw	r1, #581	; 0x245
 800d26e:	e7e5      	b.n	800d23c <__mdiff+0x28>
 800d270:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d274:	6926      	ldr	r6, [r4, #16]
 800d276:	60c5      	str	r5, [r0, #12]
 800d278:	f104 0914 	add.w	r9, r4, #20
 800d27c:	f108 0514 	add.w	r5, r8, #20
 800d280:	f100 0e14 	add.w	lr, r0, #20
 800d284:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d288:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d28c:	f108 0210 	add.w	r2, r8, #16
 800d290:	46f2      	mov	sl, lr
 800d292:	2100      	movs	r1, #0
 800d294:	f859 3b04 	ldr.w	r3, [r9], #4
 800d298:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d29c:	fa11 f88b 	uxtah	r8, r1, fp
 800d2a0:	b299      	uxth	r1, r3
 800d2a2:	0c1b      	lsrs	r3, r3, #16
 800d2a4:	eba8 0801 	sub.w	r8, r8, r1
 800d2a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d2ac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d2b0:	fa1f f888 	uxth.w	r8, r8
 800d2b4:	1419      	asrs	r1, r3, #16
 800d2b6:	454e      	cmp	r6, r9
 800d2b8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d2bc:	f84a 3b04 	str.w	r3, [sl], #4
 800d2c0:	d8e8      	bhi.n	800d294 <__mdiff+0x80>
 800d2c2:	1b33      	subs	r3, r6, r4
 800d2c4:	3b15      	subs	r3, #21
 800d2c6:	f023 0303 	bic.w	r3, r3, #3
 800d2ca:	3304      	adds	r3, #4
 800d2cc:	3415      	adds	r4, #21
 800d2ce:	42a6      	cmp	r6, r4
 800d2d0:	bf38      	it	cc
 800d2d2:	2304      	movcc	r3, #4
 800d2d4:	441d      	add	r5, r3
 800d2d6:	4473      	add	r3, lr
 800d2d8:	469e      	mov	lr, r3
 800d2da:	462e      	mov	r6, r5
 800d2dc:	4566      	cmp	r6, ip
 800d2de:	d30e      	bcc.n	800d2fe <__mdiff+0xea>
 800d2e0:	f10c 0203 	add.w	r2, ip, #3
 800d2e4:	1b52      	subs	r2, r2, r5
 800d2e6:	f022 0203 	bic.w	r2, r2, #3
 800d2ea:	3d03      	subs	r5, #3
 800d2ec:	45ac      	cmp	ip, r5
 800d2ee:	bf38      	it	cc
 800d2f0:	2200      	movcc	r2, #0
 800d2f2:	4413      	add	r3, r2
 800d2f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d2f8:	b17a      	cbz	r2, 800d31a <__mdiff+0x106>
 800d2fa:	6107      	str	r7, [r0, #16]
 800d2fc:	e7a4      	b.n	800d248 <__mdiff+0x34>
 800d2fe:	f856 8b04 	ldr.w	r8, [r6], #4
 800d302:	fa11 f288 	uxtah	r2, r1, r8
 800d306:	1414      	asrs	r4, r2, #16
 800d308:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d30c:	b292      	uxth	r2, r2
 800d30e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d312:	f84e 2b04 	str.w	r2, [lr], #4
 800d316:	1421      	asrs	r1, r4, #16
 800d318:	e7e0      	b.n	800d2dc <__mdiff+0xc8>
 800d31a:	3f01      	subs	r7, #1
 800d31c:	e7ea      	b.n	800d2f4 <__mdiff+0xe0>
 800d31e:	bf00      	nop
 800d320:	0801fe34 	.word	0x0801fe34
 800d324:	0801fe45 	.word	0x0801fe45

0800d328 <__d2b>:
 800d328:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d32c:	460f      	mov	r7, r1
 800d32e:	2101      	movs	r1, #1
 800d330:	ec59 8b10 	vmov	r8, r9, d0
 800d334:	4616      	mov	r6, r2
 800d336:	f7ff fcd5 	bl	800cce4 <_Balloc>
 800d33a:	4604      	mov	r4, r0
 800d33c:	b930      	cbnz	r0, 800d34c <__d2b+0x24>
 800d33e:	4602      	mov	r2, r0
 800d340:	4b24      	ldr	r3, [pc, #144]	; (800d3d4 <__d2b+0xac>)
 800d342:	4825      	ldr	r0, [pc, #148]	; (800d3d8 <__d2b+0xb0>)
 800d344:	f240 310f 	movw	r1, #783	; 0x30f
 800d348:	f000 face 	bl	800d8e8 <__assert_func>
 800d34c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d350:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d354:	bb2d      	cbnz	r5, 800d3a2 <__d2b+0x7a>
 800d356:	9301      	str	r3, [sp, #4]
 800d358:	f1b8 0300 	subs.w	r3, r8, #0
 800d35c:	d026      	beq.n	800d3ac <__d2b+0x84>
 800d35e:	4668      	mov	r0, sp
 800d360:	9300      	str	r3, [sp, #0]
 800d362:	f7ff fd87 	bl	800ce74 <__lo0bits>
 800d366:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d36a:	b1e8      	cbz	r0, 800d3a8 <__d2b+0x80>
 800d36c:	f1c0 0320 	rsb	r3, r0, #32
 800d370:	fa02 f303 	lsl.w	r3, r2, r3
 800d374:	430b      	orrs	r3, r1
 800d376:	40c2      	lsrs	r2, r0
 800d378:	6163      	str	r3, [r4, #20]
 800d37a:	9201      	str	r2, [sp, #4]
 800d37c:	9b01      	ldr	r3, [sp, #4]
 800d37e:	61a3      	str	r3, [r4, #24]
 800d380:	2b00      	cmp	r3, #0
 800d382:	bf14      	ite	ne
 800d384:	2202      	movne	r2, #2
 800d386:	2201      	moveq	r2, #1
 800d388:	6122      	str	r2, [r4, #16]
 800d38a:	b1bd      	cbz	r5, 800d3bc <__d2b+0x94>
 800d38c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d390:	4405      	add	r5, r0
 800d392:	603d      	str	r5, [r7, #0]
 800d394:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d398:	6030      	str	r0, [r6, #0]
 800d39a:	4620      	mov	r0, r4
 800d39c:	b003      	add	sp, #12
 800d39e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d3a6:	e7d6      	b.n	800d356 <__d2b+0x2e>
 800d3a8:	6161      	str	r1, [r4, #20]
 800d3aa:	e7e7      	b.n	800d37c <__d2b+0x54>
 800d3ac:	a801      	add	r0, sp, #4
 800d3ae:	f7ff fd61 	bl	800ce74 <__lo0bits>
 800d3b2:	9b01      	ldr	r3, [sp, #4]
 800d3b4:	6163      	str	r3, [r4, #20]
 800d3b6:	3020      	adds	r0, #32
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	e7e5      	b.n	800d388 <__d2b+0x60>
 800d3bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d3c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d3c4:	6038      	str	r0, [r7, #0]
 800d3c6:	6918      	ldr	r0, [r3, #16]
 800d3c8:	f7ff fd34 	bl	800ce34 <__hi0bits>
 800d3cc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d3d0:	e7e2      	b.n	800d398 <__d2b+0x70>
 800d3d2:	bf00      	nop
 800d3d4:	0801fe34 	.word	0x0801fe34
 800d3d8:	0801fe45 	.word	0x0801fe45

0800d3dc <__sfputc_r>:
 800d3dc:	6893      	ldr	r3, [r2, #8]
 800d3de:	3b01      	subs	r3, #1
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	b410      	push	{r4}
 800d3e4:	6093      	str	r3, [r2, #8]
 800d3e6:	da08      	bge.n	800d3fa <__sfputc_r+0x1e>
 800d3e8:	6994      	ldr	r4, [r2, #24]
 800d3ea:	42a3      	cmp	r3, r4
 800d3ec:	db01      	blt.n	800d3f2 <__sfputc_r+0x16>
 800d3ee:	290a      	cmp	r1, #10
 800d3f0:	d103      	bne.n	800d3fa <__sfputc_r+0x1e>
 800d3f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3f6:	f7fe bbd6 	b.w	800bba6 <__swbuf_r>
 800d3fa:	6813      	ldr	r3, [r2, #0]
 800d3fc:	1c58      	adds	r0, r3, #1
 800d3fe:	6010      	str	r0, [r2, #0]
 800d400:	7019      	strb	r1, [r3, #0]
 800d402:	4608      	mov	r0, r1
 800d404:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d408:	4770      	bx	lr

0800d40a <__sfputs_r>:
 800d40a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d40c:	4606      	mov	r6, r0
 800d40e:	460f      	mov	r7, r1
 800d410:	4614      	mov	r4, r2
 800d412:	18d5      	adds	r5, r2, r3
 800d414:	42ac      	cmp	r4, r5
 800d416:	d101      	bne.n	800d41c <__sfputs_r+0x12>
 800d418:	2000      	movs	r0, #0
 800d41a:	e007      	b.n	800d42c <__sfputs_r+0x22>
 800d41c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d420:	463a      	mov	r2, r7
 800d422:	4630      	mov	r0, r6
 800d424:	f7ff ffda 	bl	800d3dc <__sfputc_r>
 800d428:	1c43      	adds	r3, r0, #1
 800d42a:	d1f3      	bne.n	800d414 <__sfputs_r+0xa>
 800d42c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d430 <_vfiprintf_r>:
 800d430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d434:	460d      	mov	r5, r1
 800d436:	b09d      	sub	sp, #116	; 0x74
 800d438:	4614      	mov	r4, r2
 800d43a:	4698      	mov	r8, r3
 800d43c:	4606      	mov	r6, r0
 800d43e:	b118      	cbz	r0, 800d448 <_vfiprintf_r+0x18>
 800d440:	6a03      	ldr	r3, [r0, #32]
 800d442:	b90b      	cbnz	r3, 800d448 <_vfiprintf_r+0x18>
 800d444:	f7fe fa1a 	bl	800b87c <__sinit>
 800d448:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d44a:	07d9      	lsls	r1, r3, #31
 800d44c:	d405      	bmi.n	800d45a <_vfiprintf_r+0x2a>
 800d44e:	89ab      	ldrh	r3, [r5, #12]
 800d450:	059a      	lsls	r2, r3, #22
 800d452:	d402      	bmi.n	800d45a <_vfiprintf_r+0x2a>
 800d454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d456:	f7fe fcb8 	bl	800bdca <__retarget_lock_acquire_recursive>
 800d45a:	89ab      	ldrh	r3, [r5, #12]
 800d45c:	071b      	lsls	r3, r3, #28
 800d45e:	d501      	bpl.n	800d464 <_vfiprintf_r+0x34>
 800d460:	692b      	ldr	r3, [r5, #16]
 800d462:	b99b      	cbnz	r3, 800d48c <_vfiprintf_r+0x5c>
 800d464:	4629      	mov	r1, r5
 800d466:	4630      	mov	r0, r6
 800d468:	f7fe fbda 	bl	800bc20 <__swsetup_r>
 800d46c:	b170      	cbz	r0, 800d48c <_vfiprintf_r+0x5c>
 800d46e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d470:	07dc      	lsls	r4, r3, #31
 800d472:	d504      	bpl.n	800d47e <_vfiprintf_r+0x4e>
 800d474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d478:	b01d      	add	sp, #116	; 0x74
 800d47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d47e:	89ab      	ldrh	r3, [r5, #12]
 800d480:	0598      	lsls	r0, r3, #22
 800d482:	d4f7      	bmi.n	800d474 <_vfiprintf_r+0x44>
 800d484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d486:	f7fe fca1 	bl	800bdcc <__retarget_lock_release_recursive>
 800d48a:	e7f3      	b.n	800d474 <_vfiprintf_r+0x44>
 800d48c:	2300      	movs	r3, #0
 800d48e:	9309      	str	r3, [sp, #36]	; 0x24
 800d490:	2320      	movs	r3, #32
 800d492:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d496:	f8cd 800c 	str.w	r8, [sp, #12]
 800d49a:	2330      	movs	r3, #48	; 0x30
 800d49c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d650 <_vfiprintf_r+0x220>
 800d4a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4a4:	f04f 0901 	mov.w	r9, #1
 800d4a8:	4623      	mov	r3, r4
 800d4aa:	469a      	mov	sl, r3
 800d4ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4b0:	b10a      	cbz	r2, 800d4b6 <_vfiprintf_r+0x86>
 800d4b2:	2a25      	cmp	r2, #37	; 0x25
 800d4b4:	d1f9      	bne.n	800d4aa <_vfiprintf_r+0x7a>
 800d4b6:	ebba 0b04 	subs.w	fp, sl, r4
 800d4ba:	d00b      	beq.n	800d4d4 <_vfiprintf_r+0xa4>
 800d4bc:	465b      	mov	r3, fp
 800d4be:	4622      	mov	r2, r4
 800d4c0:	4629      	mov	r1, r5
 800d4c2:	4630      	mov	r0, r6
 800d4c4:	f7ff ffa1 	bl	800d40a <__sfputs_r>
 800d4c8:	3001      	adds	r0, #1
 800d4ca:	f000 80a9 	beq.w	800d620 <_vfiprintf_r+0x1f0>
 800d4ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4d0:	445a      	add	r2, fp
 800d4d2:	9209      	str	r2, [sp, #36]	; 0x24
 800d4d4:	f89a 3000 	ldrb.w	r3, [sl]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	f000 80a1 	beq.w	800d620 <_vfiprintf_r+0x1f0>
 800d4de:	2300      	movs	r3, #0
 800d4e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d4e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4e8:	f10a 0a01 	add.w	sl, sl, #1
 800d4ec:	9304      	str	r3, [sp, #16]
 800d4ee:	9307      	str	r3, [sp, #28]
 800d4f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4f4:	931a      	str	r3, [sp, #104]	; 0x68
 800d4f6:	4654      	mov	r4, sl
 800d4f8:	2205      	movs	r2, #5
 800d4fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4fe:	4854      	ldr	r0, [pc, #336]	; (800d650 <_vfiprintf_r+0x220>)
 800d500:	f7f2 fe76 	bl	80001f0 <memchr>
 800d504:	9a04      	ldr	r2, [sp, #16]
 800d506:	b9d8      	cbnz	r0, 800d540 <_vfiprintf_r+0x110>
 800d508:	06d1      	lsls	r1, r2, #27
 800d50a:	bf44      	itt	mi
 800d50c:	2320      	movmi	r3, #32
 800d50e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d512:	0713      	lsls	r3, r2, #28
 800d514:	bf44      	itt	mi
 800d516:	232b      	movmi	r3, #43	; 0x2b
 800d518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d51c:	f89a 3000 	ldrb.w	r3, [sl]
 800d520:	2b2a      	cmp	r3, #42	; 0x2a
 800d522:	d015      	beq.n	800d550 <_vfiprintf_r+0x120>
 800d524:	9a07      	ldr	r2, [sp, #28]
 800d526:	4654      	mov	r4, sl
 800d528:	2000      	movs	r0, #0
 800d52a:	f04f 0c0a 	mov.w	ip, #10
 800d52e:	4621      	mov	r1, r4
 800d530:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d534:	3b30      	subs	r3, #48	; 0x30
 800d536:	2b09      	cmp	r3, #9
 800d538:	d94d      	bls.n	800d5d6 <_vfiprintf_r+0x1a6>
 800d53a:	b1b0      	cbz	r0, 800d56a <_vfiprintf_r+0x13a>
 800d53c:	9207      	str	r2, [sp, #28]
 800d53e:	e014      	b.n	800d56a <_vfiprintf_r+0x13a>
 800d540:	eba0 0308 	sub.w	r3, r0, r8
 800d544:	fa09 f303 	lsl.w	r3, r9, r3
 800d548:	4313      	orrs	r3, r2
 800d54a:	9304      	str	r3, [sp, #16]
 800d54c:	46a2      	mov	sl, r4
 800d54e:	e7d2      	b.n	800d4f6 <_vfiprintf_r+0xc6>
 800d550:	9b03      	ldr	r3, [sp, #12]
 800d552:	1d19      	adds	r1, r3, #4
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	9103      	str	r1, [sp, #12]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	bfbb      	ittet	lt
 800d55c:	425b      	neglt	r3, r3
 800d55e:	f042 0202 	orrlt.w	r2, r2, #2
 800d562:	9307      	strge	r3, [sp, #28]
 800d564:	9307      	strlt	r3, [sp, #28]
 800d566:	bfb8      	it	lt
 800d568:	9204      	strlt	r2, [sp, #16]
 800d56a:	7823      	ldrb	r3, [r4, #0]
 800d56c:	2b2e      	cmp	r3, #46	; 0x2e
 800d56e:	d10c      	bne.n	800d58a <_vfiprintf_r+0x15a>
 800d570:	7863      	ldrb	r3, [r4, #1]
 800d572:	2b2a      	cmp	r3, #42	; 0x2a
 800d574:	d134      	bne.n	800d5e0 <_vfiprintf_r+0x1b0>
 800d576:	9b03      	ldr	r3, [sp, #12]
 800d578:	1d1a      	adds	r2, r3, #4
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	9203      	str	r2, [sp, #12]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	bfb8      	it	lt
 800d582:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d586:	3402      	adds	r4, #2
 800d588:	9305      	str	r3, [sp, #20]
 800d58a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d660 <_vfiprintf_r+0x230>
 800d58e:	7821      	ldrb	r1, [r4, #0]
 800d590:	2203      	movs	r2, #3
 800d592:	4650      	mov	r0, sl
 800d594:	f7f2 fe2c 	bl	80001f0 <memchr>
 800d598:	b138      	cbz	r0, 800d5aa <_vfiprintf_r+0x17a>
 800d59a:	9b04      	ldr	r3, [sp, #16]
 800d59c:	eba0 000a 	sub.w	r0, r0, sl
 800d5a0:	2240      	movs	r2, #64	; 0x40
 800d5a2:	4082      	lsls	r2, r0
 800d5a4:	4313      	orrs	r3, r2
 800d5a6:	3401      	adds	r4, #1
 800d5a8:	9304      	str	r3, [sp, #16]
 800d5aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5ae:	4829      	ldr	r0, [pc, #164]	; (800d654 <_vfiprintf_r+0x224>)
 800d5b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5b4:	2206      	movs	r2, #6
 800d5b6:	f7f2 fe1b 	bl	80001f0 <memchr>
 800d5ba:	2800      	cmp	r0, #0
 800d5bc:	d03f      	beq.n	800d63e <_vfiprintf_r+0x20e>
 800d5be:	4b26      	ldr	r3, [pc, #152]	; (800d658 <_vfiprintf_r+0x228>)
 800d5c0:	bb1b      	cbnz	r3, 800d60a <_vfiprintf_r+0x1da>
 800d5c2:	9b03      	ldr	r3, [sp, #12]
 800d5c4:	3307      	adds	r3, #7
 800d5c6:	f023 0307 	bic.w	r3, r3, #7
 800d5ca:	3308      	adds	r3, #8
 800d5cc:	9303      	str	r3, [sp, #12]
 800d5ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5d0:	443b      	add	r3, r7
 800d5d2:	9309      	str	r3, [sp, #36]	; 0x24
 800d5d4:	e768      	b.n	800d4a8 <_vfiprintf_r+0x78>
 800d5d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5da:	460c      	mov	r4, r1
 800d5dc:	2001      	movs	r0, #1
 800d5de:	e7a6      	b.n	800d52e <_vfiprintf_r+0xfe>
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	3401      	adds	r4, #1
 800d5e4:	9305      	str	r3, [sp, #20]
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	f04f 0c0a 	mov.w	ip, #10
 800d5ec:	4620      	mov	r0, r4
 800d5ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5f2:	3a30      	subs	r2, #48	; 0x30
 800d5f4:	2a09      	cmp	r2, #9
 800d5f6:	d903      	bls.n	800d600 <_vfiprintf_r+0x1d0>
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d0c6      	beq.n	800d58a <_vfiprintf_r+0x15a>
 800d5fc:	9105      	str	r1, [sp, #20]
 800d5fe:	e7c4      	b.n	800d58a <_vfiprintf_r+0x15a>
 800d600:	fb0c 2101 	mla	r1, ip, r1, r2
 800d604:	4604      	mov	r4, r0
 800d606:	2301      	movs	r3, #1
 800d608:	e7f0      	b.n	800d5ec <_vfiprintf_r+0x1bc>
 800d60a:	ab03      	add	r3, sp, #12
 800d60c:	9300      	str	r3, [sp, #0]
 800d60e:	462a      	mov	r2, r5
 800d610:	4b12      	ldr	r3, [pc, #72]	; (800d65c <_vfiprintf_r+0x22c>)
 800d612:	a904      	add	r1, sp, #16
 800d614:	4630      	mov	r0, r6
 800d616:	f7fd fcdf 	bl	800afd8 <_printf_float>
 800d61a:	4607      	mov	r7, r0
 800d61c:	1c78      	adds	r0, r7, #1
 800d61e:	d1d6      	bne.n	800d5ce <_vfiprintf_r+0x19e>
 800d620:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d622:	07d9      	lsls	r1, r3, #31
 800d624:	d405      	bmi.n	800d632 <_vfiprintf_r+0x202>
 800d626:	89ab      	ldrh	r3, [r5, #12]
 800d628:	059a      	lsls	r2, r3, #22
 800d62a:	d402      	bmi.n	800d632 <_vfiprintf_r+0x202>
 800d62c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d62e:	f7fe fbcd 	bl	800bdcc <__retarget_lock_release_recursive>
 800d632:	89ab      	ldrh	r3, [r5, #12]
 800d634:	065b      	lsls	r3, r3, #25
 800d636:	f53f af1d 	bmi.w	800d474 <_vfiprintf_r+0x44>
 800d63a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d63c:	e71c      	b.n	800d478 <_vfiprintf_r+0x48>
 800d63e:	ab03      	add	r3, sp, #12
 800d640:	9300      	str	r3, [sp, #0]
 800d642:	462a      	mov	r2, r5
 800d644:	4b05      	ldr	r3, [pc, #20]	; (800d65c <_vfiprintf_r+0x22c>)
 800d646:	a904      	add	r1, sp, #16
 800d648:	4630      	mov	r0, r6
 800d64a:	f7fd ff69 	bl	800b520 <_printf_i>
 800d64e:	e7e4      	b.n	800d61a <_vfiprintf_r+0x1ea>
 800d650:	0801ff9c 	.word	0x0801ff9c
 800d654:	0801ffa6 	.word	0x0801ffa6
 800d658:	0800afd9 	.word	0x0800afd9
 800d65c:	0800d40b 	.word	0x0800d40b
 800d660:	0801ffa2 	.word	0x0801ffa2

0800d664 <__sflush_r>:
 800d664:	898a      	ldrh	r2, [r1, #12]
 800d666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d66a:	4605      	mov	r5, r0
 800d66c:	0710      	lsls	r0, r2, #28
 800d66e:	460c      	mov	r4, r1
 800d670:	d458      	bmi.n	800d724 <__sflush_r+0xc0>
 800d672:	684b      	ldr	r3, [r1, #4]
 800d674:	2b00      	cmp	r3, #0
 800d676:	dc05      	bgt.n	800d684 <__sflush_r+0x20>
 800d678:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	dc02      	bgt.n	800d684 <__sflush_r+0x20>
 800d67e:	2000      	movs	r0, #0
 800d680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d684:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d686:	2e00      	cmp	r6, #0
 800d688:	d0f9      	beq.n	800d67e <__sflush_r+0x1a>
 800d68a:	2300      	movs	r3, #0
 800d68c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d690:	682f      	ldr	r7, [r5, #0]
 800d692:	6a21      	ldr	r1, [r4, #32]
 800d694:	602b      	str	r3, [r5, #0]
 800d696:	d032      	beq.n	800d6fe <__sflush_r+0x9a>
 800d698:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d69a:	89a3      	ldrh	r3, [r4, #12]
 800d69c:	075a      	lsls	r2, r3, #29
 800d69e:	d505      	bpl.n	800d6ac <__sflush_r+0x48>
 800d6a0:	6863      	ldr	r3, [r4, #4]
 800d6a2:	1ac0      	subs	r0, r0, r3
 800d6a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d6a6:	b10b      	cbz	r3, 800d6ac <__sflush_r+0x48>
 800d6a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d6aa:	1ac0      	subs	r0, r0, r3
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6b2:	6a21      	ldr	r1, [r4, #32]
 800d6b4:	4628      	mov	r0, r5
 800d6b6:	47b0      	blx	r6
 800d6b8:	1c43      	adds	r3, r0, #1
 800d6ba:	89a3      	ldrh	r3, [r4, #12]
 800d6bc:	d106      	bne.n	800d6cc <__sflush_r+0x68>
 800d6be:	6829      	ldr	r1, [r5, #0]
 800d6c0:	291d      	cmp	r1, #29
 800d6c2:	d82b      	bhi.n	800d71c <__sflush_r+0xb8>
 800d6c4:	4a29      	ldr	r2, [pc, #164]	; (800d76c <__sflush_r+0x108>)
 800d6c6:	410a      	asrs	r2, r1
 800d6c8:	07d6      	lsls	r6, r2, #31
 800d6ca:	d427      	bmi.n	800d71c <__sflush_r+0xb8>
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	6062      	str	r2, [r4, #4]
 800d6d0:	04d9      	lsls	r1, r3, #19
 800d6d2:	6922      	ldr	r2, [r4, #16]
 800d6d4:	6022      	str	r2, [r4, #0]
 800d6d6:	d504      	bpl.n	800d6e2 <__sflush_r+0x7e>
 800d6d8:	1c42      	adds	r2, r0, #1
 800d6da:	d101      	bne.n	800d6e0 <__sflush_r+0x7c>
 800d6dc:	682b      	ldr	r3, [r5, #0]
 800d6de:	b903      	cbnz	r3, 800d6e2 <__sflush_r+0x7e>
 800d6e0:	6560      	str	r0, [r4, #84]	; 0x54
 800d6e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6e4:	602f      	str	r7, [r5, #0]
 800d6e6:	2900      	cmp	r1, #0
 800d6e8:	d0c9      	beq.n	800d67e <__sflush_r+0x1a>
 800d6ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6ee:	4299      	cmp	r1, r3
 800d6f0:	d002      	beq.n	800d6f8 <__sflush_r+0x94>
 800d6f2:	4628      	mov	r0, r5
 800d6f4:	f7ff f9f6 	bl	800cae4 <_free_r>
 800d6f8:	2000      	movs	r0, #0
 800d6fa:	6360      	str	r0, [r4, #52]	; 0x34
 800d6fc:	e7c0      	b.n	800d680 <__sflush_r+0x1c>
 800d6fe:	2301      	movs	r3, #1
 800d700:	4628      	mov	r0, r5
 800d702:	47b0      	blx	r6
 800d704:	1c41      	adds	r1, r0, #1
 800d706:	d1c8      	bne.n	800d69a <__sflush_r+0x36>
 800d708:	682b      	ldr	r3, [r5, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d0c5      	beq.n	800d69a <__sflush_r+0x36>
 800d70e:	2b1d      	cmp	r3, #29
 800d710:	d001      	beq.n	800d716 <__sflush_r+0xb2>
 800d712:	2b16      	cmp	r3, #22
 800d714:	d101      	bne.n	800d71a <__sflush_r+0xb6>
 800d716:	602f      	str	r7, [r5, #0]
 800d718:	e7b1      	b.n	800d67e <__sflush_r+0x1a>
 800d71a:	89a3      	ldrh	r3, [r4, #12]
 800d71c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d720:	81a3      	strh	r3, [r4, #12]
 800d722:	e7ad      	b.n	800d680 <__sflush_r+0x1c>
 800d724:	690f      	ldr	r7, [r1, #16]
 800d726:	2f00      	cmp	r7, #0
 800d728:	d0a9      	beq.n	800d67e <__sflush_r+0x1a>
 800d72a:	0793      	lsls	r3, r2, #30
 800d72c:	680e      	ldr	r6, [r1, #0]
 800d72e:	bf08      	it	eq
 800d730:	694b      	ldreq	r3, [r1, #20]
 800d732:	600f      	str	r7, [r1, #0]
 800d734:	bf18      	it	ne
 800d736:	2300      	movne	r3, #0
 800d738:	eba6 0807 	sub.w	r8, r6, r7
 800d73c:	608b      	str	r3, [r1, #8]
 800d73e:	f1b8 0f00 	cmp.w	r8, #0
 800d742:	dd9c      	ble.n	800d67e <__sflush_r+0x1a>
 800d744:	6a21      	ldr	r1, [r4, #32]
 800d746:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d748:	4643      	mov	r3, r8
 800d74a:	463a      	mov	r2, r7
 800d74c:	4628      	mov	r0, r5
 800d74e:	47b0      	blx	r6
 800d750:	2800      	cmp	r0, #0
 800d752:	dc06      	bgt.n	800d762 <__sflush_r+0xfe>
 800d754:	89a3      	ldrh	r3, [r4, #12]
 800d756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d75a:	81a3      	strh	r3, [r4, #12]
 800d75c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d760:	e78e      	b.n	800d680 <__sflush_r+0x1c>
 800d762:	4407      	add	r7, r0
 800d764:	eba8 0800 	sub.w	r8, r8, r0
 800d768:	e7e9      	b.n	800d73e <__sflush_r+0xda>
 800d76a:	bf00      	nop
 800d76c:	dfbffffe 	.word	0xdfbffffe

0800d770 <_fflush_r>:
 800d770:	b538      	push	{r3, r4, r5, lr}
 800d772:	690b      	ldr	r3, [r1, #16]
 800d774:	4605      	mov	r5, r0
 800d776:	460c      	mov	r4, r1
 800d778:	b913      	cbnz	r3, 800d780 <_fflush_r+0x10>
 800d77a:	2500      	movs	r5, #0
 800d77c:	4628      	mov	r0, r5
 800d77e:	bd38      	pop	{r3, r4, r5, pc}
 800d780:	b118      	cbz	r0, 800d78a <_fflush_r+0x1a>
 800d782:	6a03      	ldr	r3, [r0, #32]
 800d784:	b90b      	cbnz	r3, 800d78a <_fflush_r+0x1a>
 800d786:	f7fe f879 	bl	800b87c <__sinit>
 800d78a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d0f3      	beq.n	800d77a <_fflush_r+0xa>
 800d792:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d794:	07d0      	lsls	r0, r2, #31
 800d796:	d404      	bmi.n	800d7a2 <_fflush_r+0x32>
 800d798:	0599      	lsls	r1, r3, #22
 800d79a:	d402      	bmi.n	800d7a2 <_fflush_r+0x32>
 800d79c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d79e:	f7fe fb14 	bl	800bdca <__retarget_lock_acquire_recursive>
 800d7a2:	4628      	mov	r0, r5
 800d7a4:	4621      	mov	r1, r4
 800d7a6:	f7ff ff5d 	bl	800d664 <__sflush_r>
 800d7aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d7ac:	07da      	lsls	r2, r3, #31
 800d7ae:	4605      	mov	r5, r0
 800d7b0:	d4e4      	bmi.n	800d77c <_fflush_r+0xc>
 800d7b2:	89a3      	ldrh	r3, [r4, #12]
 800d7b4:	059b      	lsls	r3, r3, #22
 800d7b6:	d4e1      	bmi.n	800d77c <_fflush_r+0xc>
 800d7b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7ba:	f7fe fb07 	bl	800bdcc <__retarget_lock_release_recursive>
 800d7be:	e7dd      	b.n	800d77c <_fflush_r+0xc>

0800d7c0 <__swhatbuf_r>:
 800d7c0:	b570      	push	{r4, r5, r6, lr}
 800d7c2:	460c      	mov	r4, r1
 800d7c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7c8:	2900      	cmp	r1, #0
 800d7ca:	b096      	sub	sp, #88	; 0x58
 800d7cc:	4615      	mov	r5, r2
 800d7ce:	461e      	mov	r6, r3
 800d7d0:	da0d      	bge.n	800d7ee <__swhatbuf_r+0x2e>
 800d7d2:	89a3      	ldrh	r3, [r4, #12]
 800d7d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d7d8:	f04f 0100 	mov.w	r1, #0
 800d7dc:	bf0c      	ite	eq
 800d7de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d7e2:	2340      	movne	r3, #64	; 0x40
 800d7e4:	2000      	movs	r0, #0
 800d7e6:	6031      	str	r1, [r6, #0]
 800d7e8:	602b      	str	r3, [r5, #0]
 800d7ea:	b016      	add	sp, #88	; 0x58
 800d7ec:	bd70      	pop	{r4, r5, r6, pc}
 800d7ee:	466a      	mov	r2, sp
 800d7f0:	f000 f848 	bl	800d884 <_fstat_r>
 800d7f4:	2800      	cmp	r0, #0
 800d7f6:	dbec      	blt.n	800d7d2 <__swhatbuf_r+0x12>
 800d7f8:	9901      	ldr	r1, [sp, #4]
 800d7fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d7fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d802:	4259      	negs	r1, r3
 800d804:	4159      	adcs	r1, r3
 800d806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d80a:	e7eb      	b.n	800d7e4 <__swhatbuf_r+0x24>

0800d80c <__smakebuf_r>:
 800d80c:	898b      	ldrh	r3, [r1, #12]
 800d80e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d810:	079d      	lsls	r5, r3, #30
 800d812:	4606      	mov	r6, r0
 800d814:	460c      	mov	r4, r1
 800d816:	d507      	bpl.n	800d828 <__smakebuf_r+0x1c>
 800d818:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d81c:	6023      	str	r3, [r4, #0]
 800d81e:	6123      	str	r3, [r4, #16]
 800d820:	2301      	movs	r3, #1
 800d822:	6163      	str	r3, [r4, #20]
 800d824:	b002      	add	sp, #8
 800d826:	bd70      	pop	{r4, r5, r6, pc}
 800d828:	ab01      	add	r3, sp, #4
 800d82a:	466a      	mov	r2, sp
 800d82c:	f7ff ffc8 	bl	800d7c0 <__swhatbuf_r>
 800d830:	9900      	ldr	r1, [sp, #0]
 800d832:	4605      	mov	r5, r0
 800d834:	4630      	mov	r0, r6
 800d836:	f7ff f9c9 	bl	800cbcc <_malloc_r>
 800d83a:	b948      	cbnz	r0, 800d850 <__smakebuf_r+0x44>
 800d83c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d840:	059a      	lsls	r2, r3, #22
 800d842:	d4ef      	bmi.n	800d824 <__smakebuf_r+0x18>
 800d844:	f023 0303 	bic.w	r3, r3, #3
 800d848:	f043 0302 	orr.w	r3, r3, #2
 800d84c:	81a3      	strh	r3, [r4, #12]
 800d84e:	e7e3      	b.n	800d818 <__smakebuf_r+0xc>
 800d850:	89a3      	ldrh	r3, [r4, #12]
 800d852:	6020      	str	r0, [r4, #0]
 800d854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d858:	81a3      	strh	r3, [r4, #12]
 800d85a:	9b00      	ldr	r3, [sp, #0]
 800d85c:	6163      	str	r3, [r4, #20]
 800d85e:	9b01      	ldr	r3, [sp, #4]
 800d860:	6120      	str	r0, [r4, #16]
 800d862:	b15b      	cbz	r3, 800d87c <__smakebuf_r+0x70>
 800d864:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d868:	4630      	mov	r0, r6
 800d86a:	f000 f81d 	bl	800d8a8 <_isatty_r>
 800d86e:	b128      	cbz	r0, 800d87c <__smakebuf_r+0x70>
 800d870:	89a3      	ldrh	r3, [r4, #12]
 800d872:	f023 0303 	bic.w	r3, r3, #3
 800d876:	f043 0301 	orr.w	r3, r3, #1
 800d87a:	81a3      	strh	r3, [r4, #12]
 800d87c:	89a3      	ldrh	r3, [r4, #12]
 800d87e:	431d      	orrs	r5, r3
 800d880:	81a5      	strh	r5, [r4, #12]
 800d882:	e7cf      	b.n	800d824 <__smakebuf_r+0x18>

0800d884 <_fstat_r>:
 800d884:	b538      	push	{r3, r4, r5, lr}
 800d886:	4d07      	ldr	r5, [pc, #28]	; (800d8a4 <_fstat_r+0x20>)
 800d888:	2300      	movs	r3, #0
 800d88a:	4604      	mov	r4, r0
 800d88c:	4608      	mov	r0, r1
 800d88e:	4611      	mov	r1, r2
 800d890:	602b      	str	r3, [r5, #0]
 800d892:	f7f4 ffdb 	bl	800284c <_fstat>
 800d896:	1c43      	adds	r3, r0, #1
 800d898:	d102      	bne.n	800d8a0 <_fstat_r+0x1c>
 800d89a:	682b      	ldr	r3, [r5, #0]
 800d89c:	b103      	cbz	r3, 800d8a0 <_fstat_r+0x1c>
 800d89e:	6023      	str	r3, [r4, #0]
 800d8a0:	bd38      	pop	{r3, r4, r5, pc}
 800d8a2:	bf00      	nop
 800d8a4:	20004dec 	.word	0x20004dec

0800d8a8 <_isatty_r>:
 800d8a8:	b538      	push	{r3, r4, r5, lr}
 800d8aa:	4d06      	ldr	r5, [pc, #24]	; (800d8c4 <_isatty_r+0x1c>)
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	4604      	mov	r4, r0
 800d8b0:	4608      	mov	r0, r1
 800d8b2:	602b      	str	r3, [r5, #0]
 800d8b4:	f7f4 ff38 	bl	8002728 <_isatty>
 800d8b8:	1c43      	adds	r3, r0, #1
 800d8ba:	d102      	bne.n	800d8c2 <_isatty_r+0x1a>
 800d8bc:	682b      	ldr	r3, [r5, #0]
 800d8be:	b103      	cbz	r3, 800d8c2 <_isatty_r+0x1a>
 800d8c0:	6023      	str	r3, [r4, #0]
 800d8c2:	bd38      	pop	{r3, r4, r5, pc}
 800d8c4:	20004dec 	.word	0x20004dec

0800d8c8 <_sbrk_r>:
 800d8c8:	b538      	push	{r3, r4, r5, lr}
 800d8ca:	4d06      	ldr	r5, [pc, #24]	; (800d8e4 <_sbrk_r+0x1c>)
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	4604      	mov	r4, r0
 800d8d0:	4608      	mov	r0, r1
 800d8d2:	602b      	str	r3, [r5, #0]
 800d8d4:	f7f6 fa66 	bl	8003da4 <_sbrk>
 800d8d8:	1c43      	adds	r3, r0, #1
 800d8da:	d102      	bne.n	800d8e2 <_sbrk_r+0x1a>
 800d8dc:	682b      	ldr	r3, [r5, #0]
 800d8de:	b103      	cbz	r3, 800d8e2 <_sbrk_r+0x1a>
 800d8e0:	6023      	str	r3, [r4, #0]
 800d8e2:	bd38      	pop	{r3, r4, r5, pc}
 800d8e4:	20004dec 	.word	0x20004dec

0800d8e8 <__assert_func>:
 800d8e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d8ea:	4614      	mov	r4, r2
 800d8ec:	461a      	mov	r2, r3
 800d8ee:	4b09      	ldr	r3, [pc, #36]	; (800d914 <__assert_func+0x2c>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	4605      	mov	r5, r0
 800d8f4:	68d8      	ldr	r0, [r3, #12]
 800d8f6:	b14c      	cbz	r4, 800d90c <__assert_func+0x24>
 800d8f8:	4b07      	ldr	r3, [pc, #28]	; (800d918 <__assert_func+0x30>)
 800d8fa:	9100      	str	r1, [sp, #0]
 800d8fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d900:	4906      	ldr	r1, [pc, #24]	; (800d91c <__assert_func+0x34>)
 800d902:	462b      	mov	r3, r5
 800d904:	f000 f844 	bl	800d990 <fiprintf>
 800d908:	f000 f854 	bl	800d9b4 <abort>
 800d90c:	4b04      	ldr	r3, [pc, #16]	; (800d920 <__assert_func+0x38>)
 800d90e:	461c      	mov	r4, r3
 800d910:	e7f3      	b.n	800d8fa <__assert_func+0x12>
 800d912:	bf00      	nop
 800d914:	20002ff8 	.word	0x20002ff8
 800d918:	0801ffb7 	.word	0x0801ffb7
 800d91c:	0801ffc4 	.word	0x0801ffc4
 800d920:	0801fff2 	.word	0x0801fff2

0800d924 <_calloc_r>:
 800d924:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d926:	fba1 2402 	umull	r2, r4, r1, r2
 800d92a:	b94c      	cbnz	r4, 800d940 <_calloc_r+0x1c>
 800d92c:	4611      	mov	r1, r2
 800d92e:	9201      	str	r2, [sp, #4]
 800d930:	f7ff f94c 	bl	800cbcc <_malloc_r>
 800d934:	9a01      	ldr	r2, [sp, #4]
 800d936:	4605      	mov	r5, r0
 800d938:	b930      	cbnz	r0, 800d948 <_calloc_r+0x24>
 800d93a:	4628      	mov	r0, r5
 800d93c:	b003      	add	sp, #12
 800d93e:	bd30      	pop	{r4, r5, pc}
 800d940:	220c      	movs	r2, #12
 800d942:	6002      	str	r2, [r0, #0]
 800d944:	2500      	movs	r5, #0
 800d946:	e7f8      	b.n	800d93a <_calloc_r+0x16>
 800d948:	4621      	mov	r1, r4
 800d94a:	f7fe f9c1 	bl	800bcd0 <memset>
 800d94e:	e7f4      	b.n	800d93a <_calloc_r+0x16>

0800d950 <__ascii_mbtowc>:
 800d950:	b082      	sub	sp, #8
 800d952:	b901      	cbnz	r1, 800d956 <__ascii_mbtowc+0x6>
 800d954:	a901      	add	r1, sp, #4
 800d956:	b142      	cbz	r2, 800d96a <__ascii_mbtowc+0x1a>
 800d958:	b14b      	cbz	r3, 800d96e <__ascii_mbtowc+0x1e>
 800d95a:	7813      	ldrb	r3, [r2, #0]
 800d95c:	600b      	str	r3, [r1, #0]
 800d95e:	7812      	ldrb	r2, [r2, #0]
 800d960:	1e10      	subs	r0, r2, #0
 800d962:	bf18      	it	ne
 800d964:	2001      	movne	r0, #1
 800d966:	b002      	add	sp, #8
 800d968:	4770      	bx	lr
 800d96a:	4610      	mov	r0, r2
 800d96c:	e7fb      	b.n	800d966 <__ascii_mbtowc+0x16>
 800d96e:	f06f 0001 	mvn.w	r0, #1
 800d972:	e7f8      	b.n	800d966 <__ascii_mbtowc+0x16>

0800d974 <__ascii_wctomb>:
 800d974:	b149      	cbz	r1, 800d98a <__ascii_wctomb+0x16>
 800d976:	2aff      	cmp	r2, #255	; 0xff
 800d978:	bf85      	ittet	hi
 800d97a:	238a      	movhi	r3, #138	; 0x8a
 800d97c:	6003      	strhi	r3, [r0, #0]
 800d97e:	700a      	strbls	r2, [r1, #0]
 800d980:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d984:	bf98      	it	ls
 800d986:	2001      	movls	r0, #1
 800d988:	4770      	bx	lr
 800d98a:	4608      	mov	r0, r1
 800d98c:	4770      	bx	lr
	...

0800d990 <fiprintf>:
 800d990:	b40e      	push	{r1, r2, r3}
 800d992:	b503      	push	{r0, r1, lr}
 800d994:	4601      	mov	r1, r0
 800d996:	ab03      	add	r3, sp, #12
 800d998:	4805      	ldr	r0, [pc, #20]	; (800d9b0 <fiprintf+0x20>)
 800d99a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d99e:	6800      	ldr	r0, [r0, #0]
 800d9a0:	9301      	str	r3, [sp, #4]
 800d9a2:	f7ff fd45 	bl	800d430 <_vfiprintf_r>
 800d9a6:	b002      	add	sp, #8
 800d9a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9ac:	b003      	add	sp, #12
 800d9ae:	4770      	bx	lr
 800d9b0:	20002ff8 	.word	0x20002ff8

0800d9b4 <abort>:
 800d9b4:	b508      	push	{r3, lr}
 800d9b6:	2006      	movs	r0, #6
 800d9b8:	f000 f82c 	bl	800da14 <raise>
 800d9bc:	2001      	movs	r0, #1
 800d9be:	f000 f855 	bl	800da6c <_exit>

0800d9c2 <_raise_r>:
 800d9c2:	291f      	cmp	r1, #31
 800d9c4:	b538      	push	{r3, r4, r5, lr}
 800d9c6:	4604      	mov	r4, r0
 800d9c8:	460d      	mov	r5, r1
 800d9ca:	d904      	bls.n	800d9d6 <_raise_r+0x14>
 800d9cc:	2316      	movs	r3, #22
 800d9ce:	6003      	str	r3, [r0, #0]
 800d9d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d9d4:	bd38      	pop	{r3, r4, r5, pc}
 800d9d6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d9d8:	b112      	cbz	r2, 800d9e0 <_raise_r+0x1e>
 800d9da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d9de:	b94b      	cbnz	r3, 800d9f4 <_raise_r+0x32>
 800d9e0:	4620      	mov	r0, r4
 800d9e2:	f000 f831 	bl	800da48 <_getpid_r>
 800d9e6:	462a      	mov	r2, r5
 800d9e8:	4601      	mov	r1, r0
 800d9ea:	4620      	mov	r0, r4
 800d9ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9f0:	f000 b818 	b.w	800da24 <_kill_r>
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	d00a      	beq.n	800da0e <_raise_r+0x4c>
 800d9f8:	1c59      	adds	r1, r3, #1
 800d9fa:	d103      	bne.n	800da04 <_raise_r+0x42>
 800d9fc:	2316      	movs	r3, #22
 800d9fe:	6003      	str	r3, [r0, #0]
 800da00:	2001      	movs	r0, #1
 800da02:	e7e7      	b.n	800d9d4 <_raise_r+0x12>
 800da04:	2400      	movs	r4, #0
 800da06:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da0a:	4628      	mov	r0, r5
 800da0c:	4798      	blx	r3
 800da0e:	2000      	movs	r0, #0
 800da10:	e7e0      	b.n	800d9d4 <_raise_r+0x12>
	...

0800da14 <raise>:
 800da14:	4b02      	ldr	r3, [pc, #8]	; (800da20 <raise+0xc>)
 800da16:	4601      	mov	r1, r0
 800da18:	6818      	ldr	r0, [r3, #0]
 800da1a:	f7ff bfd2 	b.w	800d9c2 <_raise_r>
 800da1e:	bf00      	nop
 800da20:	20002ff8 	.word	0x20002ff8

0800da24 <_kill_r>:
 800da24:	b538      	push	{r3, r4, r5, lr}
 800da26:	4d07      	ldr	r5, [pc, #28]	; (800da44 <_kill_r+0x20>)
 800da28:	2300      	movs	r3, #0
 800da2a:	4604      	mov	r4, r0
 800da2c:	4608      	mov	r0, r1
 800da2e:	4611      	mov	r1, r2
 800da30:	602b      	str	r3, [r5, #0]
 800da32:	f000 f813 	bl	800da5c <_kill>
 800da36:	1c43      	adds	r3, r0, #1
 800da38:	d102      	bne.n	800da40 <_kill_r+0x1c>
 800da3a:	682b      	ldr	r3, [r5, #0]
 800da3c:	b103      	cbz	r3, 800da40 <_kill_r+0x1c>
 800da3e:	6023      	str	r3, [r4, #0]
 800da40:	bd38      	pop	{r3, r4, r5, pc}
 800da42:	bf00      	nop
 800da44:	20004dec 	.word	0x20004dec

0800da48 <_getpid_r>:
 800da48:	f000 b800 	b.w	800da4c <_getpid>

0800da4c <_getpid>:
 800da4c:	4b02      	ldr	r3, [pc, #8]	; (800da58 <_getpid+0xc>)
 800da4e:	2258      	movs	r2, #88	; 0x58
 800da50:	601a      	str	r2, [r3, #0]
 800da52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da56:	4770      	bx	lr
 800da58:	20004dec 	.word	0x20004dec

0800da5c <_kill>:
 800da5c:	4b02      	ldr	r3, [pc, #8]	; (800da68 <_kill+0xc>)
 800da5e:	2258      	movs	r2, #88	; 0x58
 800da60:	601a      	str	r2, [r3, #0]
 800da62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da66:	4770      	bx	lr
 800da68:	20004dec 	.word	0x20004dec

0800da6c <_exit>:
 800da6c:	e7fe      	b.n	800da6c <_exit>
	...

0800da70 <_init>:
 800da70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da72:	bf00      	nop
 800da74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da76:	bc08      	pop	{r3}
 800da78:	469e      	mov	lr, r3
 800da7a:	4770      	bx	lr

0800da7c <_fini>:
 800da7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da7e:	bf00      	nop
 800da80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da82:	bc08      	pop	{r3}
 800da84:	469e      	mov	lr, r3
 800da86:	4770      	bx	lr
